import"./index-b0900d92.chunk.js";import{P as e,w as t,a3 as s,a4 as a,a5 as n,a6 as r,a7 as i,a8 as o,a9 as l,aa as c,ab as d,S as m,ac as h,ad as p,ae as u,af as g,ag as f,ah as y}from"./individual_sim_ui-35391952.chunk.js";import{I as E,T as P,al as b,a7 as k,S as w,az as S,bo as T,d3 as I,x as v,b1 as C,d4 as D,aJ as A,ak as R,ae as B,z as U,V as x,d5 as O,C as F,d6 as H,d7 as L,b5 as M,d8 as N,A as W,d9 as z,aY as V,aa as G,ad as j,av as _,da as J,K,Z as q,a8 as Y,db as Z,E as Q,am as X,ah as ee,y as te,a9 as se,bm as ae,bp as ne,bq as re,bM as ie,dc as oe,bI as le}from"./raid_sim_action-2e58abdd.chunk.js";import{D as ce,a as de,F as me,b as he,c as pe,P as ue,O as ge,d as fe,U as ye,e as Ee,f as Pe}from"./sim-72ba00d9.chunk.js";import{B as be,D as ke,S as we,a as Se,b as Te,P as Ie}from"./sim-b57f3cdd.chunk.js";import{F as ve,D as Ce,S as De,a as Ae,b as Re,P as Be}from"./sim-3aad1c56.chunk.js";import{F as Ue,D as xe,S as Oe,a as Fe,b as He,P as Le}from"./sim-ef1d30b5.chunk.js";import{E as Me,D as Ne,S as We,a as ze,b as Ve,P as Ge}from"./sim-92fc4138.chunk.js";import{E as je,D as _e,S as Je,a as $e,b as Ke,P as qe}from"./sim-6fc55927.chunk.js";import{H as Ye,D as Ze,B as Qe,a as Xe,b as et,M as tt,c as st,d as at,S as nt,e as rt}from"./sim-0e632e96.chunk.js";import{M as it,D as ot,A as lt,a as ct,b as dt,P as mt,c as ht,F as pt,d as ut,e as gt,f as ft,g as yt,h as Et,i as Pt,j as bt,k as kt}from"./sim-da66e817.chunk.js";import{R as wt,D as St,C as Tt,a as It,b as vt,P as Ct}from"./sim-82c3fe2e.chunk.js";import{R as Dt,D as At,A as Rt,a as Bt,b as Ut,P as xt,c as Ot,d as Ft,e as Ht,f as Lt}from"./sim-2f3458bb.chunk.js";import{P as Mt,D as Nt,G as Wt,a as zt,b as Vt,c as Gt}from"./sim-09b59b34.chunk.js";import{S as jt,D as _t,a as Jt,b as $t,c as Kt,P as qt}from"./sim-ca817ae4.chunk.js";import{S as Yt,D as Zt,a as Qt,b as Xt,c as es,P as ts}from"./sim-a33ec221.chunk.js";import{W as ss,A as as,a as ns,D as rs,b as is,P as os,c as ls,F as cs,d as ds}from"./sim-b8078f4b.chunk.js";import{P as ms,D as hs,S as ps,a as us,b as gs,c as fs}from"./sim-07293507.chunk.js";import{W as ys,D as Es,a as Ps,b as bs,c as ks,P as ws,d as Ss,O as Ts,A as Is,e as vs,f as Cs,g as Ds,h as As,i as Rs,j as Bs,k as Us}from"./sim-4e27e85b.chunk.js";import"./totem_inputs-020da923.chunk.js";class xs extends E{constructor(e,t,s,a){super(e,"raid-target-picker-root",s,a),this.rootElem.classList.add("dropdown-root"),this.config=a,this.raid=t,this.curPlayer=this.raid.getPlayerFromRaidTarget(a.getValue(s)),this.curRaidTarget=this.getInputValue(),this.noTargetOption={iconUrl:"",text:a.noTargetLabel,color:"black",value:null,isDropdown:!0},this.rootElem.innerHTML='\n\t\t\t<div class="dropdown-button raid-target-picker-button"></div>\n\t\t\t<div class="dropdown-panel raid-target-picker-dropdown"></div>\n    ',this.buttonElem=this.rootElem.getElementsByClassName("raid-target-picker-button")[0],this.dropdownElem=this.rootElem.getElementsByClassName("raid-target-picker-dropdown")[0],this.buttonElem.addEventListener("click",(e=>{e.preventDefault()})),this.currentOptions=[],this.updateOptions(P.nextEventID()),a.compChangeEmitter.on((e=>{this.updateOptions(e)})),this.init()}makeTargetOptions(){const e=this.raid.getPlayers().filter((e=>null!=e)).map((e=>({iconUrl:e.getTalentTreeIcon(),text:e.getLabel(),color:e.getClassColor(),isDropdown:!0,value:e})));return[this.noTargetOption].concat(e)}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curRaidTarget;this.curRaidTarget=this.getInputValue(),b.equals(t,this.curRaidTarget)?this.setInputValue(this.curRaidTarget):this.inputChanged(e)}makeOption(e){const t=xs.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.value,this.curRaidTarget=this.getInputValue(),this.inputChanged(P.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeRaidTarget():k()}setInputValue(e){this.curRaidTarget=b.clone(e),this.curPlayer=this.raid.getPlayerFromRaidTarget(this.curRaidTarget);const t=this.currentOptions.find((e=>e.value==this.curPlayer));t&&(this.buttonElem.innerHTML="",this.buttonElem.appendChild(xs.makeOptionElem(t)))}static makeOptionElem(e){const t=document.createElement("div");t.classList.add("dropdown-option-container");const s=document.createElement("div");if(s.classList.add("raid-target-picker-option"),t.appendChild(s),e.isDropdown&&s.classList.add("dropdown-option"),e.color&&(s.style.backgroundColor=e.color),e.iconUrl){const t=document.createElement("img");t.src=e.iconUrl,t.classList.add("raid-target-picker-icon"),s.appendChild(t)}if(e.text){const t=document.createElement("span");t.textContent=e.text,t.classList.add("raid-target-picker-label"),s.appendChild(t)}return t}}const Os={[w.SpecDeathknight]:(e,t)=>new ce(e,t),[w.SpecBalanceDruid]:(e,t)=>new be(e,t),[w.SpecFeralDruid]:(e,t)=>new ve(e,t),[w.SpecFeralTankDruid]:(e,t)=>new Ue(e,t),[w.SpecElementalShaman]:(e,t)=>new Me(e,t),[w.SpecEnhancementShaman]:(e,t)=>new je(e,t),[w.SpecHunter]:(e,t)=>new Ye(e,t),[w.SpecMage]:(e,t)=>new it(e,t),[w.SpecRogue]:(e,t)=>new wt(e,t),[w.SpecRetributionPaladin]:(e,t)=>new Dt(e,t),[w.SpecProtectionPaladin]:(e,t)=>new Mt(e,t),[w.SpecShadowPriest]:(e,t)=>new jt(e,t),[w.SpecSmitePriest]:(e,t)=>new Yt(e,t),[w.SpecWarrior]:(e,t)=>new ss(e,t),[w.SpecProtectionWarrior]:(e,t)=>new ms(e,t),[w.SpecWarlock]:(e,t)=>new ys(e,t)},Fs=[{spec:w.SpecDeathknight,rotation:de,talents:me.data,specOptions:he,consumes:pe,defaultName:"Frost DK",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ue.gear},[S.Horde]:{1:ue.gear}},otherDefaults:ge,tooltip:"Frost Death Knight",iconUrl:I[v.ClassDeathknight][1]},{spec:w.SpecDeathknight,rotation:fe,talents:ye.data,specOptions:Ee,consumes:pe,defaultName:"DW Unholy DK",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Pe.gear},[S.Horde]:{1:Pe.gear}},otherDefaults:ge,tooltip:"Dual Wield Unholy DK",iconUrl:I[v.ClassDeathknight][2]},{spec:w.SpecBalanceDruid,rotation:ke,talents:we.data,specOptions:Se,consumes:Te,defaultName:"Balance Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ie.gear},[S.Horde]:{1:Ie.gear}},tooltip:C[w.SpecBalanceDruid],iconUrl:D[w.SpecBalanceDruid]},{spec:w.SpecFeralDruid,rotation:Ce,talents:De.data,specOptions:Ae,consumes:Re,defaultName:"Cat Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Be.gear},[S.Horde]:{1:Be.gear}},tooltip:C[w.SpecFeralDruid],iconUrl:D[w.SpecFeralDruid]},{spec:w.SpecFeralTankDruid,rotation:xe,talents:Oe.data,specOptions:Fe,consumes:He,defaultName:"Bear Druid",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceTauren},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Le.gear},[S.Horde]:{1:Le.gear}},tooltip:C[w.SpecFeralTankDruid],iconUrl:D[w.SpecFeralTankDruid]},{spec:w.SpecHunter,rotation:Ze,talents:Qe.data,specOptions:Xe,consumes:et,defaultName:"BM Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:tt.gear},[S.Horde]:{1:tt.gear}},tooltip:"BM Hunter",iconUrl:I[v.ClassHunter][0]},{spec:w.SpecHunter,rotation:Ze,talents:st.data,specOptions:at,consumes:et,defaultName:"MM Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:tt.gear},[S.Horde]:{1:tt.gear}},tooltip:"MM Hunter",iconUrl:I[v.ClassHunter][1]},{spec:w.SpecHunter,rotation:Ze,talents:nt.data,specOptions:at,consumes:et,defaultName:"SV Hunter",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceNightElf,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:rt.gear},[S.Horde]:{1:rt.gear}},tooltip:"SV Hunter",iconUrl:I[v.ClassHunter][2]},{spec:w.SpecMage,rotation:ot,talents:lt.data,specOptions:ct,consumes:dt,defaultName:"Arcane Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:mt.gear},[S.Horde]:{1:mt.gear}},tooltip:"Arcane Mage",iconUrl:I[v.ClassMage][0]},{spec:w.SpecMage,rotation:ht,talents:pt.data,specOptions:ut,consumes:gt,defaultName:"Fire Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ft.gear},[S.Horde]:{1:ft.gear}},tooltip:"Fire Mage",iconUrl:I[v.ClassMage][1]},{spec:w.SpecMage,rotation:yt,talents:Et.data,specOptions:Pt,consumes:bt,defaultName:"Frost Mage",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceGnome,[S.Horde]:T.RaceTroll},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:kt.gear},[S.Horde]:{1:kt.gear}},tooltip:"Frost Mage",iconUrl:I[v.ClassMage][2]},{spec:w.SpecRogue,rotation:St,talents:Tt.data,specOptions:It,consumes:vt,defaultName:"Combat Rogue",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ct.gear},[S.Horde]:{1:Ct.gear}},tooltip:"Combat Rogue",iconUrl:D[w.SpecRogue]},{spec:w.SpecElementalShaman,rotation:Ne,talents:We.data,specOptions:ze,consumes:Ve,defaultName:"Ele Shaman",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDraenei,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Ge.gear},[S.Horde]:{1:Ge.gear}},tooltip:C[w.SpecElementalShaman],iconUrl:D[w.SpecElementalShaman]},{spec:w.SpecEnhancementShaman,rotation:_e,talents:Je.data,specOptions:$e,consumes:Ke,defaultName:"Enh Shaman",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDraenei,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:qe.gear},[S.Horde]:{1:qe.gear}},tooltip:C[w.SpecEnhancementShaman],iconUrl:D[w.SpecEnhancementShaman]},{spec:w.SpecShadowPriest,rotation:_t,talents:Jt.data,specOptions:$t,consumes:Kt,defaultName:"Shadow Priest",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDwarf,[S.Horde]:T.RaceUndead},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:qt.gear},[S.Horde]:{1:qt.gear}},tooltip:C[w.SpecShadowPriest],iconUrl:D[w.SpecShadowPriest]},{spec:w.SpecSmitePriest,rotation:Zt,talents:Qt.data,specOptions:Xt,consumes:es,defaultName:"Smite Priest",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceDwarf,[S.Horde]:T.RaceUndead},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ts.gear},[S.Horde]:{1:ts.gear}},tooltip:C[w.SpecSmitePriest],iconUrl:D[w.SpecSmitePriest]},{spec:w.SpecWarrior,rotation:as,talents:ns.data,specOptions:rs,consumes:is,defaultName:"Arms Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:os.gear},[S.Horde]:{1:os.gear}},tooltip:"Arms Warrior",iconUrl:I[v.ClassWarrior][0]},{spec:w.SpecWarrior,rotation:ls,talents:cs.data,specOptions:rs,consumes:is,defaultName:"Fury Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:ds.gear},[S.Horde]:{1:ds.gear}},tooltip:"Fury Warrior",iconUrl:I[v.ClassWarrior][1]},{spec:w.SpecProtectionWarrior,rotation:hs,talents:ps.data,specOptions:us,consumes:gs,defaultName:"Prot Warrior",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:fs.gear},[S.Horde]:{1:fs.gear}},tooltip:"Protection Warrior",iconUrl:I[v.ClassWarrior][2]},{spec:w.SpecRetributionPaladin,rotation:At,talents:Rt.data,specOptions:Bt,consumes:Ut,defaultName:"Ret Paladin",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceBloodElf},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:xt.gear,2:Ot.gear,3:Ft.gear,4:Ht.gear,5:Lt.gear},[S.Horde]:{1:xt.gear,2:Ot.gear,3:Ft.gear,4:Ht.gear,5:Lt.gear}},tooltip:"Ret Paladin",iconUrl:I[v.ClassPaladin][2]},{spec:w.SpecProtectionPaladin,rotation:Nt,talents:Wt.data,specOptions:zt,consumes:Vt,defaultName:"Prot Paladin",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceBloodElf},defaultGear:{[S.Unknown]:{},[S.Alliance]:{1:Gt.gear},[S.Horde]:{1:Gt.gear}},tooltip:"Protection Paladin",iconUrl:I[v.ClassPaladin][1]},{spec:w.SpecWarlock,rotation:Es,talents:Ps.data,specOptions:bs,consumes:ks,defaultName:"Destro Warlock",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{1:ws.gear,2:Ss.gear},[S.Alliance]:{1:ws.gear,2:Ss.gear},[S.Horde]:{1:ws.gear,2:Ss.gear}},otherDefaults:Ts,tooltip:"Destruction Warlock: Adds Improved Soul Leech and Blood Pact",iconUrl:I[v.ClassWarlock][2]},{spec:w.SpecWarlock,rotation:Is,talents:vs.data,specOptions:Cs,consumes:ks,defaultName:"Affli Warlock",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{1:Ds.gear,2:As.gear},[S.Alliance]:{1:Ds.gear,2:As.gear},[S.Horde]:{1:Ds.gear,2:As.gear}},otherDefaults:Ts,tooltip:"Affliction Warlock: Adds Improved Fel Intelligence",iconUrl:I[v.ClassWarlock][0]},{spec:w.SpecWarlock,rotation:Rs,talents:Bs.data,specOptions:Us,consumes:ks,defaultName:"Demo Warlock",defaultFactionRaces:{[S.Unknown]:T.RaceUnknown,[S.Alliance]:T.RaceHuman,[S.Horde]:T.RaceOrc},defaultGear:{[S.Unknown]:{1:ws.gear,2:Ss.gear},[S.Alliance]:{1:ws.gear,2:Ss.gear},[S.Horde]:{1:ws.gear,2:Ss.gear}},otherDefaults:Ts,tooltip:"Demonology Warlock: Adds Demonic Pact",iconUrl:I[v.ClassWarlock][1]}],Hs=[...new Set(Fs.map((e=>e.spec)))],Ls=[{buffBotId:"Bear",deprecated:!0,spec:w.SpecBalanceDruid,name:"Bear",tooltip:"Bear: Adds Gift of the Wild, an Innervate, Faerie Fire, and Leader of the Pack.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=Math.max(t.buffs.giftOfTheWild,A.TristateEffectRegular),t.buffs.thorns=Math.max(t.buffs.thorns,A.TristateEffectRegular),t.debuffs.faerieFire=Math.max(t.debuffs.faerieFire,A.TristateEffectRegular),t.buffs.leaderOfThePack=Math.max(t.buffs.leaderOfThePack,A.TristateEffectRegular);const a=e.getInnervateAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Resto Druid",spec:w.SpecBalanceDruid,name:"Resto Druid",tooltip:"Resto Druid: Adds Improved Gift of the Wild, and an Innervate.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_healingtouch.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=A.TristateEffectImproved,t.buffs.thorns=Math.max(t.buffs.thorns,A.TristateEffectRegular);const a=e.getInnervateAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Dreamstate",spec:w.SpecBalanceDruid,name:"Dreamstate",tooltip:"Dreamstate: Adds Improved Gift of the Wild, an Innervate, and Improved Faerie Fire.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_nature_faeriefire.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.giftOfTheWild=A.TristateEffectImproved,t.buffs.thorns=A.TristateEffectImproved,t.debuffs.faerieFire=A.TristateEffectImproved;const a=e.getInnervateAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.innervates++}}},{buffBotId:"Mage",deprecated:!0,spec:w.SpecMage,name:"Mage",tooltip:"Mage: Adds Arcane Brilliance.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_arcaneintellect.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.arcaneBrilliance=!0}},{buffBotId:"Paladin",spec:w.SpecRetributionPaladin,name:"Holy Paladin",tooltip:"Holy Paladin: Adds a set of blessings.",iconUrl:I[v.ClassPaladin][0],modifyRaidProto:(e,t,s)=>{}},{buffBotId:"JoW Paladin",spec:w.SpecRetributionPaladin,name:"JoW Paladin",tooltip:"JoW Paladin: Adds a set of blessings and Judgement of Wisdom.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_holy_righteousnessaura.jpg",modifyRaidProto:(e,t,s)=>{t.debuffs.judgementOfWisdom=!0}},{buffBotId:"Holy Priest",spec:w.SpecShadowPriest,name:"Holy Priest",tooltip:"Holy Priest: Adds Improved PW Fortitude and Shadow Protection.",iconUrl:I[v.ClassPriest][1],modifyRaidProto:(e,t,s)=>{t.buffs.shadowProtection=!0,t.buffs.powerWordFortitude=A.TristateEffectImproved}},{buffBotId:"Divine Spirit Priest",spec:w.SpecShadowPriest,name:"Disc Priest",tooltip:"Disc Priest: Adds Improved PW Fort, Shadow Protection, Improved Divine Spirit and a Power Infusion.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.shadowProtection=!0,t.buffs.powerWordFortitude=A.TristateEffectImproved,t.buffs.divineSpirit=!0;const a=e.getPowerInfusionAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.powerInfusions++}}},{buffBotId:"Rogue",spec:w.SpecShadowPriest,name:"Rogue",tooltip:"Rogue: Adds TotT.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/ability_rogue_tricksofthetrade.jpg",modifyRaidProto:(e,t,s)=>{const a=e.getTricksOfTheTradeAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.tricksOfTheTrades++}}},{buffBotId:"Resto Shaman",spec:w.SpecElementalShaman,name:"Resto Shaman",tooltip:"Resto Shaman: Adds Bloodlust, Mana Spring Totem, Mana Tide Totem, Strength of Earth Totem. Chooses air totem based on party composition.",iconUrl:I[v.ClassShaman][2],modifyRaidProto:(e,t,s)=>{t.buffs.bloodlust=!0,t.buffs.manaSpringTotem=A.TristateEffectImproved,s.buffs.manaTideTotems++;const a=[w.SpecBalanceDruid,w.SpecMage,w.SpecShadowPriest,w.SpecSmitePriest,w.SpecEnhancementShaman,w.SpecElementalShaman,w.SpecWarlock],n=[w.SpecRetributionPaladin,w.SpecRogue,w.SpecWarrior,w.SpecProtectionWarrior,w.SpecFeralDruid,w.SpecFeralTankDruid],[r,i]=[a,n].map((e=>s.players.filter((e=>e.class!=v.ClassUnknown)).map((e=>B(e))).filter((t=>e.includes(t))).length));r>=i?t.buffs.wrathOfAirTotem=!0:t.buffs.windfuryTotem=A.TristateEffectRegular}},{buffBotId:"Arms Warrior",deprecated:!0,spec:w.SpecWarrior,name:"Arms Warrior",tooltip:"Arms Warrior: Adds Sunder Armor, Blood Frenzy, and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.battleShout=A.TristateEffectImproved;const a=t.debuffs;a.sunderArmor=!0,a.bloodFrenzy=!0}},{buffBotId:"Fury Warrior",deprecated:!0,spec:w.SpecWarrior,name:"Fury Warrior",tooltip:"Fury Warrior: Adds Sunder Armor and Improved Battle Shout.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg",modifyRaidProto:(e,t,s)=>{t.buffs.battleShout=A.TristateEffectImproved;t.debuffs.sunderArmor=!0}},{buffBotId:"Prot Warrior",deprecated:!0,spec:w.SpecWarrior,name:"Prot Warrior",tooltip:"Prot Warrior: Adds Sunder Armor.",iconUrl:"https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg",modifyRaidProto:(e,t,s)=>{t.debuffs.sunderArmor=!0}},{buffBotId:"Unholy Frenzy Dk",spec:w.SpecDeathknight,name:"Blood DK",tooltip:"Deathknight: Adds Unholy Frenzy.",iconUrl:"https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_bladedarmor.jpg",modifyRaidProto:(e,t,s)=>{const a=e.getUnholyFrenzyAssignment().targetIndex;if(a!=R){const e=Math.floor(a/5),s=a%5,n=t.parties[e].players[s];n.buffs&&n.buffs.unholyFrenzy++}}}];class Ms{constructor(e,t){this.spec=0,this.name="",this.raidIndex=-1,this.innervateAssignment=k(),this.powerInfusionAssignment=k(),this.tricksOfTheTradeAssignment=k(),this.unholyFrenzyAssignment=k(),this.raidIndexChangeEmitter=new P,this.innervateAssignmentChangeEmitter=new P,this.powerInfusionAssignmentChangeEmitter=new P,this.tricksOfTheTradeAssignmentChangeEmitter=new P,this.unholyFrenzyAssignmentChangeEmitter=new P,this.changeEmitter=new P;const s=Ls.find((t=>t.buffBotId==e));if(!s)throw new Error("No buff bot config with id '"+e+"'!");this.sim=t,this.settings=s,this.updateSettings(),[this.raidIndexChangeEmitter,this.innervateAssignmentChangeEmitter,this.powerInfusionAssignmentChangeEmitter,this.tricksOfTheTradeAssignmentChangeEmitter,this.unholyFrenzyAssignmentChangeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((e=>t.raid.getParty(this.getPartyIndex()).changeEmitter.emit(e)))}updateSettings(){this.spec=this.settings.spec,this.name=this.settings.name}getLabel(){return`${this.name} (#${this.getRaidIndex()+1})`}getClass(){return U[this.settings.spec]}getClassColor(){return x[this.getClass()]}getRaidIndex(){return this.raidIndex}setRaidIndex(e,t){t!=this.raidIndex&&(this.raidIndex=t,P.freezeAllAndDo((()=>{this.raidIndexChangeEmitter.emit(e),this.sim.raid.compChangeEmitter.emit(e)})))}getPartyIndex(){return Math.floor(this.getRaidIndex()/5)}getInnervateAssignment(){return b.clone(this.innervateAssignment)}setInnervateAssignment(e,t){b.equals(t,this.innervateAssignment)||(this.innervateAssignment=b.clone(t),this.innervateAssignmentChangeEmitter.emit(e))}getPowerInfusionAssignment(){return b.clone(this.powerInfusionAssignment)}setPowerInfusionAssignment(e,t){b.equals(t,this.powerInfusionAssignment)||(this.powerInfusionAssignment=b.clone(t),this.powerInfusionAssignmentChangeEmitter.emit(e))}getTricksOfTheTradeAssignment(){return b.clone(this.tricksOfTheTradeAssignment)}setTricksOfTheTradeAssignment(e,t){b.equals(t,this.tricksOfTheTradeAssignment)||(this.tricksOfTheTradeAssignment=b.clone(t),this.tricksOfTheTradeAssignmentChangeEmitter.emit(e))}getUnholyFrenzyAssignment(){return b.clone(this.unholyFrenzyAssignment)}setUnholyFrenzyAssignment(e,t){b.equals(t,this.unholyFrenzyAssignment)||(this.unholyFrenzyAssignment=b.clone(t),this.unholyFrenzyAssignmentChangeEmitter.emit(e))}toProto(){return O.create({id:this.settings.buffBotId,raidIndex:this.getRaidIndex(),innervateAssignment:this.getInnervateAssignment(),powerInfusionAssignment:this.getPowerInfusionAssignment(),tricksOfTheTradeAssignment:this.getTricksOfTheTradeAssignment(),unholyFrenzyAssignment:this.getUnholyFrenzyAssignment()})}fromProto(e,t){const s=Ls.find((e=>e.buffBotId==t.id));if(!s)throw new Error("No buff bot config with id '"+t.id+"'!");this.settings=s,this.updateSettings(),P.freezeAllAndDo((()=>{this.setRaidIndex(e,t.raidIndex),this.setInnervateAssignment(e,t.innervateAssignment||k()),this.setPowerInfusionAssignment(e,t.powerInfusionAssignment||k()),this.setTricksOfTheTradeAssignment(e,t.tricksOfTheTradeAssignment||k()),this.setUnholyFrenzyAssignment(e,t.unholyFrenzyAssignment||k())}))}clone(e){const t=new Ms(this.settings.buffBotId,this.sim);return t.fromProto(e,this.toProto()),t}}class Ns extends F{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new P,this.raidSimUI=t,this.innervatesPicker=new zs(this.rootElem,t),this.powerInfusionsPicker=new Vs(this.rootElem,t),this.tricksOfTheTradesPicker=new Gs(this.rootElem,t),this.unholyFrenzyPicker=new js(this.rootElem,t)}}class Ws extends F{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new P,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("fieldset"),this.playersContainer.classList.add("assigned-buff-players-container","settings-section"),this.rootElem.appendChild(this.playersContainer),this.update(),this.raidSimUI.changeEmitter.on((e=>{this.update()}))}update(){this.playersContainer.innerHTML=`\n\t\t\t<legend>${this.getTitle().toUpperCase()}</legend>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.style.display="none":this.rootElem.style.display="initial",this.targetPickers=t.map(((t,s)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player"),this.playersContainer.appendChild(a);const n=xs.makeOptionElem({iconUrl:t instanceof e?t.getTalentTreeIcon():t.settings.iconUrl,text:t.getLabel(),color:t.getClassColor(),isDropdown:!1});n.classList.add("raid-target-picker-root"),a.appendChild(n);const r=document.createElement("span");r.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(r);let i=null;i=new xs(a,this.raidSimUI.sim.raid,t,t instanceof e?{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,s)=>this.setPlayerValue(e,t,s)}:{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.changeEmitter,getValue:e=>this.getBuffBotValue(e),setValue:(e,t,s)=>this.setBuffBotValue(e,t,s)});const o={playerOrBot:t,targetPicker:i,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromRaidTarget(i.getInputValue())};return i.changeEmitter.on((e=>{o.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromRaidTarget(i.getInputValue())})),o}))}}class zs extends Ws{getTitle(){return"Innervates"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==v.ClassDruid))}getPlayerValue(e){return e.getSpecOptions().innervateTarget||k()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.innervateTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getInnervateAssignment()}setBuffBotValue(e,t,s){t.setInnervateAssignment(e,s)}}class Vs extends Ws{getTitle(){return"Power Infusions"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==v.ClassPriest)).filter((e=>{if(e instanceof Ms)return"Divine Spirit Priest"==e.settings.buffBotId;{const t=e;return!!t.getTalents().powerInfusion&&t.spec==w.SpecSmitePriest}}))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||k()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.powerInfusionTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getPowerInfusionAssignment()}setBuffBotValue(e,t,s){t.setPowerInfusionAssignment(e,s)}}class Gs extends Ws{getTitle(){return"Tricks of the Trades"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==v.ClassRogue))}getPlayerValue(e){return e.getSpecOptions().tricksOfTheTradeTarget||k()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.tricksOfTheTradeTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getTricksOfTheTradeAssignment()}setBuffBotValue(e,t,s){t.setTricksOfTheTradeAssignment(e,s)}}class js extends Ws{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getPlayersAndBuffBots().filter((e=>e?.getClass()==v.ClassDeathknight)).filter((e=>{if(e instanceof Ms)return"Unholy Frenzy Dk"==e.settings.buffBotId;return e.getTalents().hysteria}))}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||k()}setPlayerValue(e,t,s){const a=t.getSpecOptions();a.unholyFrenzyTarget=s,t.setSpecOptions(e,a)}getBuffBotValue(e){return e.getUnholyFrenzyAssignment()}setBuffBotValue(e,t,s){t.setUnholyFrenzyAssignment(e,s)}}class _s extends F{constructor(e,a){super(e,"blessings-picker-root"),this.changeEmitter=new P,this.raidSimUI=a,this.assignments=H.clone(L(4)),this.rootElem.innerHTML='\n\t\t<table class="blessings-table">\n\t\t\t<tbody class="blessings-table-body">\n\t\t\t</tbody>\n\t\t</table>\n\t\t',this.rootElem.getElementsByClassName("blessings-table-header-row")[0];const n=this.rootElem.getElementsByClassName("blessings-table-body")[0],r=z.filter((e=>Hs.includes(e))).filter((e=>!s.includes(e))),i=[...Array(4).keys()];this.cols=[],this.rows=r.map((e=>{const s=document.createElement("tr");s.classList.add("blessings-table-row"),n.appendChild(s);const a=document.createElement("th");a.classList.add("blessings-table-header-cell"),s.appendChild(a);const r=document.createElement("img");return r.src=M[e],a.appendChild(r),tippy(r,{content:C[e],allowHTML:!0}),i.forEach((a=>{const n=document.createElement("td");n.classList.add("blessings-table-cell"),s.appendChild(n),this.cols[a]||this.cols.push([]),this.cols[a].push(n),new t(n,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:x[v.ClassPaladin],value:N.BlessingUnknown},{actionId:W.fromSpellId(25898),value:N.BlessingOfKings},{actionId:W.fromSpellId(48934),value:N.BlessingOfMight},{actionId:W.fromSpellId(48938),value:N.BlessingOfWisdom},{actionId:W.fromSpellId(25899),value:N.BlessingOfSanctuary}],equals:(e,t)=>e==t,zeroValue:N.BlessingUnknown,changedEvent:e=>e.changeEmitter,getValue:t=>t.assignments.paladins[a]?.blessings[e]||N.BlessingUnknown,setValue:(t,s,n)=>{s.assignments.paladins[a].blessings[e]!=n&&(s.assignments.paladins[a].blessings[e]=n,this.changeEmitter.emit(t))}})})),s})),this.setNumPaladins(a.getClassCount(v.ClassPaladin)),a.compChangeEmitter.on((e=>{this.setNumPaladins(a.getClassCount(v.ClassPaladin))}))}setNumPaladins(e){e=Math.min(e,4);for(let t=0;t<e;t++)this.cols[t].forEach((e=>e.classList.add("paladin-active")));for(let t=e;t<4;t++)this.cols[t].forEach((e=>e.classList.remove("paladin-active")))}getAssignments(){return H.clone(this.assignments)}setAssignments(e,t){this.assignments=H.clone(t),this.changeEmitter.emit(e)}}class Js extends F{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1,this.raidSimUI=t,this.raid=t.sim.raid;const s=document.createElement("div");s.classList.add("current-raid-viewer"),this.rootElem.appendChild(s),s.innerHTML='\n\t\t\t<div class="parties-container">\n\t\t\t</div>\n\t\t';const a=this.rootElem.getElementsByClassName("parties-container")[0];this.partyPickers=this.raid.getParties().map(((e,t)=>new $s(a,e,t,this)));const n=document.createElement("div");n.classList.add("new-player-picker"),this.rootElem.appendChild(n),this.newPlayerPicker=new Ys(n,this),this.rootElem.ondragend=e=>{this.clearDragPlayer()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/a)].playerPickers[e%a]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}getBuffBots(){return this.getPlayerPickers().filter((e=>e.player instanceof Ms)).map((e=>e.player))}setBuffBots(e,t){P.freezeAllAndDo((()=>{this.getBuffBots().forEach((t=>this.getPlayerPicker(t.getRaidIndex()).setPlayer(e,null,0))),t.forEach((t=>{if(!Ls.find((e=>e.buffBotId==t.id)))return void console.warn("Invalid buff bot ID: "+t.id);const s=new Ms(t.id,this.raid.sim);s.fromProto(e,t),this.getPlayerPicker(t.raidIndex).setPlayer(e,s,0)}))}))}setDragPlayer(e,t,s){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=s,-1!=t){this.getPlayerPicker(t).rootElem.classList.add("dragFrom")}}clearDragPlayer(){if(-1!=this.currentDragPlayerFromIndex){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragFrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=-1,this.currentDragType=1}}class $s extends F{constructor(e,t,s,n){super(e,"party-picker-root"),this.party=t,this.index=s,this.raidPicker=n,this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<span>Group ${s+1}</span>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const r=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(a).keys()].map((e=>new Ks(r,this,e)));const i=this.rootElem.getElementsByClassName("party-results-dps")[0],o=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),s=e?.simResult.raidMetrics.parties[this.index].dps.avg||0,a=t?.simResult.raidMetrics.parties[this.index].dps.avg||0;if(0==s&&0==a)return i.textContent="",void(o.textContent="");i.textContent=s.toFixed(1),t?V(o,a,s,1):o.textContent=""}))}}class Ks extends F{constructor(t,s,n){super(t,"player-picker-root"),this.index=n,this.raidIndex=s.index*a+n,this.player=null,this.partyPicker=s,this.raidPicker=s.raidPicker,this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t==this.player||null==t&&this.player instanceof Ms||this.setPlayer(e,t,0)})),this.rootElem.innerHTML='\n\t\t\t<div class="player-label">\n\t\t\t\t<img class="player-icon"></img>\n\t\t\t\t<span class="player-name" contenteditable></span>\n\t\t\t</div>\n\t\t\t<div class="player-spacer">\n\t\t\t</div>\n\t\t\t<div class="player-options">\n\t\t\t\t<span class="player-edit fa fa-edit"></span>\n\t\t\t\t<span class="player-copy fa fa-copy" draggable="true"></span>\n\t\t\t\t<span class="player-delete fa fa-times"></span>\n\t\t\t</div>\n\t\t\t<div class="player-results">\n\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t</div>\n\t\t',this.labelElem=this.rootElem.getElementsByClassName("player-label")[0],this.iconElem=this.rootElem.getElementsByClassName("player-icon")[0],this.nameElem=this.rootElem.getElementsByClassName("player-name")[0],this.resultsElem=this.rootElem.getElementsByClassName("player-results")[0],this.dpsResultElem=this.rootElem.getElementsByClassName("player-results-dps")[0],this.referenceDeltaElem=this.rootElem.getElementsByClassName("player-results-reference-delta")[0],this.nameElem.addEventListener("input",(t=>{this.player instanceof e&&this.player.setName(P.nextEventID(),this.nameElem.textContent||"")}));this.nameElem.addEventListener("keydown",(t=>{if(9==t.keyCode||13==t.keyCode){t.preventDefault();const s=this.raidPicker.getPlayerPickers().filter((t=>t.player instanceof e)),a=s.indexOf(this);-1!=a&&s.length>a+1?s[a+1].nameElem.focus():this.nameElem.blur()}27==t.keyCode&&this.nameElem.blur(),8!=t.keyCode&&46!=t.keyCode&&(this.nameElem.textContent?.length||0)>=15&&t.preventDefault()}));const r="Unnamed";this.nameElem.addEventListener("focusin",(e=>{const t=window.getSelection();if(t){const e=document.createRange();e.selectNodeContents(this.nameElem),t.removeAllRanges(),t.addRange(e)}})),this.nameElem.addEventListener("focusout",(t=>{this.nameElem.textContent||(this.nameElem.textContent=r,this.player instanceof e&&this.player.setName(P.nextEventID(),r))}));const i=(t,s)=>{if(null==this.player)return void t.preventDefault();t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all";const a=this.iconElem.src,n=new Image;if(n.src=a,t.dataTransfer.setDragImage(n,30,30),this.player instanceof e){var r=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...G.toBinary(r))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,s)};this.labelElem.ondragstart=e=>{i(e,3)},this.resultsElem.ondragstart=e=>{i(e,3)};const o=this.rootElem.getElementsByClassName("player-copy")[0];tippy(o,{content:"Drag to Copy",allowHTML:!0}),o.ondragstart=e=>{i(e,4)};const l=this.rootElem.getElementsByClassName("player-delete")[0];tippy(l,{content:"Click to Delete",allowHTML:!0}),l.addEventListener("click",(e=>{this.setPlayer(P.nextEventID(),null,0)}));let c=0;this.rootElem.ondragenter=e=>{e.preventDefault(),c++,this.rootElem.classList.add("dragto")},this.rootElem.ondragleave=e=>{e.preventDefault(),c--,c<=0&&this.rootElem.classList.remove("dragto")},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=t=>{var s=t.dataTransfer.getData("text/plain");t.preventDefault(),c=0,this.rootElem.classList.remove("dragto");const a=P.nextEventID();P.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==s.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(-1!=this.raidPicker.currentDragPlayerFromIndex){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);if(3==t){e.setPlayer(a,this.player,t);var n=this.iconElem.src;this.iconElem.src=e.iconElem.src,e.iconElem.src=n}else 2==t&&(this.iconElem.src=e.iconElem.src,e.setPlayer(a,null,t))}else if(null==this.raidPicker.currentDragPlayer){const t=atob(s),n=new Uint8Array(t.length);for(let e=0;e<n.length;e++)n[e]=t.charCodeAt(e);const i=G.fromBinary(n);var r=new e(B(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==t?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),t):this.setPlayer(a,this.raidPicker.currentDragPlayer,t),""==this.iconElem.src&&(this.iconElem.src=Fs.filter((e=>e.spec==r.spec))[0].iconUrl),this.raidPicker.clearDragPlayer()}))};const d=this.rootElem.getElementsByClassName("player-edit")[0];tippy(d,{content:"Edit",allowHTML:!0}),d.addEventListener("click",(t=>{this.player instanceof e&&new qs(this.player)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),s=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,a=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;if(0==s&&0==a)return this.dpsResultElem.textContent="",void(this.referenceDeltaElem.textContent="");this.dpsResultElem.textContent=s.toFixed(1),t?V(this.referenceDeltaElem,a,s,1):this.referenceDeltaElem.textContent=""})),this.update()}setPlayer(t,s,a){s!=this.player&&(this.dpsResultElem.textContent="",this.referenceDeltaElem.textContent="",P.freezeAllAndDo((()=>{if(this.player=s,s instanceof Ms)this.partyPicker.party.setPlayer(t,this.index,null),s.setRaidIndex(t,this.raidIndex);else if(s instanceof e){if(this.partyPicker.party.setPlayer(t,this.index,s),1==a){if(j(s.spec)){const e=this.raidPicker.raid.getTanks(),a=e.findIndex((e=>null==this.raidPicker.raid.getPlayerFromRaidTarget(e)));-1==a?e.length<3&&this.raidPicker.raid.setTanks(t,e.concat([s.makeRaidTarget()])):(e[a]=s.makeRaidTarget(),this.raidPicker.raid.setTanks(t,e))}s.spec==w.SpecBalanceDruid?function(e,t){const s=t.getSpecOptions();s.innervateTarget=Y(t.getRaidIndex()),t.setSpecOptions(e,s)}(t,s):s.spec==w.SpecSmitePriest&&function(e,t){const s=t.getSpecOptions();s.powerInfusionTarget=Y(t.getRaidIndex()),t.setSpecOptions(e,s)}(t,s)}}else this.partyPicker.party.setPlayer(t,this.index,s),this.partyPicker.party.compChangeEmitter.emit(t)})),this.update())}update(){null==this.player?(this.rootElem.classList.add("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor="black",this.labelElem.setAttribute("draggable","false"),this.resultsElem.setAttribute("draggable","false"),this.nameElem.textContent="",this.nameElem.removeAttribute("contenteditable")):this.player instanceof Ms?(this.rootElem.classList.remove("empty"),this.rootElem.classList.add("buff-bot"),this.rootElem.style.backgroundColor=x[U[this.player.spec]],this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.name,this.nameElem.removeAttribute("contenteditable"),this.iconElem.src=this.player.settings.iconUrl):(this.rootElem.classList.remove("empty"),this.rootElem.classList.remove("buff-bot"),this.rootElem.style.backgroundColor=this.player.getClassColor(),this.labelElem.setAttribute("draggable","true"),this.resultsElem.setAttribute("draggable","true"),this.nameElem.textContent=this.player.getName(),this.nameElem.setAttribute("contenteditable",""),this.iconElem.src=this.player.getTalentTreeIcon())}}class qs extends F{constructor(e){super(document.body,"player-editor-modal"),this.rootElem.id="playerEditorModal",this.rootElem.innerHTML='\n\t\t\t<div class="player-editor within-raid-sim">\n\t\t\t</div>\n\t\t',new n(this.rootElem,(()=>{$("#playerEditorModal").bPopup().close(),this.rootElem.remove()}));const t=this.rootElem.getElementsByClassName("player-editor")[0];Os[e.spec](t,e),$("#playerEditorModal").bPopup({closeClass:"player-editor-close",onClose:()=>{this.rootElem.remove()}})}}class Ys extends F{constructor(t,s){super(t,"new-player-picker-root"),this.raidPicker=s,this.rootElem.innerHTML='\n\t\t\t<div class="new-player-picker-controls">\n\t\t\t\t<div class="faction-selector"></div>\n\t\t\t\t<div class="phase-selector"></div>\n\t\t\t</div>\n\t\t\t<div class="presets-container"></div>\n\t\t\t<div class="buff-bots-container">\n\t\t\t\t<div class="buff-bots-title">\n\t\t\t\t\t<span class="buff-bots-title-text">Buff Bots</span>\n\t\t\t\t\t<span class="buff-bots-tooltip fa fa-info-circle"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t',new r(this.rootElem.getElementsByClassName("faction-selector")[0],this,{label:"Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:S.Alliance},{name:"Horde",value:S.Horde}],changedEvent:e=>this.raidPicker.raid.sim.factionChangeEmitter,getValue:e=>this.raidPicker.raid.sim.getFaction(),setValue:(e,t,s)=>{this.raidPicker.raid.sim.setFaction(e,s)}}),new r(this.rootElem.getElementsByClassName("phase-selector")[0],this,{label:"Phase",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[{name:"1",value:1}],changedEvent:e=>this.raidPicker.raid.sim.phaseChangeEmitter,getValue:e=>this.raidPicker.raid.sim.getPhase(),setValue:(e,t,s)=>{this.raidPicker.raid.sim.setPhase(e,s)}});const a=this.rootElem.getElementsByClassName("presets-container")[0];_(v).forEach((t=>{if(t==v.ClassUnknown)return;const s=Fs.filter((e=>U[e.spec]==t));if(0==s.length)return;const n=document.createElement("div");n.classList.add("class-presets-container"),a.appendChild(n),n.style.backgroundColor=J(x[t],.5),s.forEach((t=>{const s=document.createElement("div");s.classList.add("preset-picker"),n.appendChild(s);const a=document.createElement("img");a.classList.add("preset-picker-icon"),s.appendChild(a),a.src=t.iconUrl,tippy(a,{content:t.tooltip,allowHTML:!0}),s.setAttribute("draggable","true"),s.ondragstart=s=>{const a=P.nextEventID();P.freezeAllAndDo((()=>{const n=new Image;n.src=t.iconUrl,s.dataTransfer.setDragImage(n,30,30),s.dataTransfer.setData("text/plain",""),s.dataTransfer.dropEffect="copy";const r=new e(t.spec,this.raidPicker.raid.sim);r.applySharedDefaults(a),r.setRace(a,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setRotation(a,t.rotation),r.setTalentsString(a,t.talents.talentsString),r.setGlyphs(a,t.talents.glyphs||K.create()),r.setSpecOptions(a,t.specOptions),r.setConsumes(a,t.consumes),r.setName(a,t.defaultName),r.setProfession1(a,t.otherDefaults?.profession1||q.Engineering),r.setProfession2(a,t.otherDefaults?.profession2||q.Jewelcrafting),r.setDistanceFromTarget(a,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{r.setGear(a,this.raidPicker.raid.sim.db.lookupEquipmentSpec(t.defaultGear[this.raidPicker.getCurrentFaction()][this.raidPicker.getCurrentPhase()]))})),this.raidPicker.setDragPlayer(r,-1,1)}))}}))}));const n=this.rootElem.getElementsByClassName("buff-bots-tooltip")[0];tippy(n,{content:"Buff bots do not do DPS or any actions at all, except to buff their raid/party members. They are used as placeholders for classes we haven't implemented yet, or never will (e.g. healers) so that a proper raid environment can still be simulated.",allowHTML:!0});const i=this.rootElem.getElementsByClassName("buff-bots-container")[0];_(v).forEach((e=>{if(e==v.ClassUnknown)return;const t=Ls.filter((t=>U[t.spec]==e)).filter((e=>!e.deprecated));if(0==t.length)return;const s=document.createElement("div");s.classList.add("class-presets-container"),i.appendChild(s),s.style.backgroundColor=J(x[e],.5),t.forEach((e=>{const t=document.createElement("div");t.classList.add("preset-picker"),t.classList.add("preset-picker-buff-bot"),s.appendChild(t);const a=document.createElement("img");a.classList.add("preset-picker-icon"),t.appendChild(a),a.src=e.iconUrl,tippy(a,{content:e.tooltip,allowHTML:!0}),t.setAttribute("draggable","true"),t.ondragstart=t=>{const s=new Image;s.src=e.iconUrl,t.dataTransfer.setDragImage(s,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy",this.raidPicker.setDragPlayer(new Ms(e.buffBotId,this.raidPicker.raidSimUI.sim),-1,1)}}))}))}}class Zs extends F{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t,this.rootElem.innerHTML='\n\t\t\t<fieldset class="tanks-picker-container settings-section">\n\t\t\t\t<legend>TANKS</legend>\n\t\t\t</fieldset>\n\t\t';const s=this.rootElem.getElementsByClassName("tanks-picker-container")[0],a=this.raidSimUI.sim.raid;for(let n=0;n<4;n++){const e=document.createElement("div");e.classList.add("tank-picker-row"),s.appendChild(e);const t=document.createElement("span");t.textContent=0==n?"MAIN TANK":`TANK ${n+1}`,t.classList.add("tank-picker-label"),e.appendChild(t);const r=document.createElement("span");r.classList.add("fa","fa-arrow-right"),e.appendChild(r);const i=n;new xs(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[i]||k(),setValue:(e,t,s)=>{const a=t.getTanks();for(let n=0;n<i;n++)a[n]||a.push(k());a[i]=s,t.setTanks(e,a)}})}}}class Qs extends i{constructor(e,t){super(e,"JSON Import",!0),this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}onImport(e){const t=Z.fromJsonString(e);this.simUI.fromProto(P.nextEventID(),t),this.close()}}class Xs extends o{constructor(e,t){super(e,"JSON Export",!0),this.simUI=t,this.init()}getData(){return JSON.stringify(Z.toJson(this.simUI.toProto()),null,2)}}class ea extends i{constructor(e,t){super(e,"WCL Import",!1),this.queryCounter=0,this.simUI=t,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport entire raid from a WCL report.<br>\n\t\t\t\tParties are a best guess based on buffs.<br>\n\t\t\t\tDouble check innervate/PI and paladin buffs in the settings after import.<br>\n\t\t\t\tDoes not support fight=last currently (will default any non-numeric fight ID to be 0)<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else first found fight will be used.<br>\n\t\t\t</p>\n\t\t"}getWCLBearerToken(){return fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}).then((e=>e.json())).then((e=>e.access_token)).catch((e=>{console.error(e)}))}queryWCL(e,t){const s={"Content-Type":"application/json",Authorization:`Bearer ${t}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;return this.queryCounter++,fetch(encodeURI(a),{method:"GET",headers:s}).then((e=>e.json()))}getURLInfo(e){let t={reportID:"",fightID:"0"};if(!e.includes("warcraftlogs.com"))return console.error("Invalid WCL URL",e,"must be from warcraftlogs.com"),t;let s=e.indexOf("fight="),a=e.indexOf("/reports/");if(-1===a)return console.error("Could not find report ID in URL",e),t;a+=9;if(-1!==s){s+=6;let a=parseInt(e.substring(s),10);isNaN(a)&&(a=0),t.fightID=a.toString()}else console.warn("Could not find fight ID in URL",e,"defaulting to fight 0");return t.reportID=e.substring(a,a+16)??"",t}getRateLimit(e){return this.queryWCL("\n\t  {\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }",e).then((e=>e.data.rateLimitData))}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait",this.doImport(e).then((()=>{this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}))}async doImport(e){if(!e.length)return void console.error("No import link provided!");let t=this.getURLInfo(e);const s=t.reportID,n=t.fightID;if(!s.length)return void console.error("Could not find report ID in URL",e);this.simUI.clearRaid(P.nextEventID());const r=await this.getWCLBearerToken(),i=await this.getRateLimit(r);let o=i.pointsSpentThisHour+30<i.limitPerHour;console.info("Importing WCL report",s,"fight",n,"Generate Parties:",o);const d=`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\t\t\tguild {\n\t\t\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tplayerDetails: table(fightIDs: [${n}], endTime: 99999999, dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\t\t\tfights(fightIDs: [${n}]) {\n\t\t\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tinnervates: table(fightIDs: [${n}], dataType:Casts, endTime: 99999999, sourceClass: "Druid", abilityID: 29166),\n\t\t\t\t\t\t\tpowerInfusion: table(fightIDs: [${n}], dataType:Casts, endTime: 99999999, sourceClass: "Priest", abilityID: 10060)\n\t\t\t\t\t\t\ttricksOfTheTrade: table(fightIDs: [${n}], dataType:Casts, endTime: 99999999, sourceClass: "Rogue", abilityID: 57933)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t`,m=await this.queryWCL(d,r);if(null!=m.errors&&null!=m.errors&&m.errors.length){const e=m.errors.reduce(((e,t)=>e+t.message),"");return void alert("Failed to import: "+e)}const h=m.data.reportData.report,p=h.guild,u=h.playerDetails.data.entries,g=h.innervates.data.entries,f=h.powerInfusion.data.entries,y=h.tricksOfTheTrade.data.entries,E=h.fights[0],k=E.startTime,w=E.endTime;let T=this.simUI.raidPicker?.getCurrentFaction();null!=p&&(T=p.faction.id),null==T&&(T=S.Horde);const I=Q.create();I.duration=(w-k)/1e3,I.targets=new Array;let v=this.simUI.sim.db.getAllPresetEncounters().find((e=>e.path.includes(E.name)));v&&v.targets.length&&v.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>I.targets.push(e))),0===I.targets.length&&I.targets.push(l.defaultProto());const C=Z.create();C.encounter=I;const D=X.create();D.parties=new Array,C.raid=D;const A=new Array,R=new Map,U=u.filter((e=>"Paladin"===e.type)).length;let x=Array.from({length:c}).map((()=>[]));x.forEach((()=>D.parties.push(ee.create())));const O=(e,t)=>{if(!Array.isArray(e))throw new Error("FIRST ARGUMENT NOT AN ARRAY");const s=e.slice(0),a=arguments.length>2?arguments[2]:1,n=t.constructor===Array?t:t.split(".");return s.sort((function(e,t){for(let s in n)e[n[s]]&&t[n[s]]&&(e=e[n[s]],t=t[n[s]]);return(e=e.toString().match(/^\d+$/)?+e:e)<(t=t.toString().match(/^\d+$/)?+t:t)?-1*a:e>t?1*a:0})),s},F=u.map((e=>new ta(e,this.simUI,T))),H=e=>{const t=[];return e.length&&e.forEach((e=>{const s=F.find((t=>t.name===e.name)),a=F.find((t=>t.name===e.targets[0].name));s&&a&&!a.isBuffBot&&t.push({player:s,target:a.name})})),t};H(g).forEach((e=>e.player.innervateTarget=e.target)),H(f).forEach((e=>e.player.powerInfusionTarget=e.target)),H(y).forEach((e=>e.player.tricksOfTheTradeTarget=e.target));const M=O(O(F,"type"),"sortPriority");let N=0;const W=(e,t)=>e.isBuffBot||t.isBuffBot?1:0,z=(e,t,s=!1)=>{if(!e)return void console.error("Cannot assign player to party because player is undefined!");if(!t)return void console.error("Cannot assign player to party because party is undefined!");if(t.players.length===a)return void console.error("Cannot assign player to party because party is full!",e,t.players);s&&console.warn(`Could not locate a group for ${e.name}, assigning them to an open group.`);let n=e.getBuffBot(),r=e.getPlayer();if(n||r){if(R.set(e.id,N),n)n.raidIndex=N,A.push(n),t.players.push(G.create());else if(r&&(t.players.push(r),j(B(r)))){let t=b.create();t.targetIndex=R.get(e.id),C.raid.tanks.push(t)}e.partyAssigned=!0,N++}else console.error("Cannot assign player to party because player data is undefined!",e)};if(o){const e=M.filter((e=>e.isPartyBuffer));for(const t of e){const e=t.partyMembers.length>=a;if(e)continue;const i=t.getPartyAuraIds();if(!i.length){console.warn("No party aura ids found for partyBuff player "+t.name);continue}let o=i.map((e=>`\n\t\t\t\t{\n\t\t\t\t\treportData {\n\t\t\t\t\t\treport(code: "${s}") {\n\t\t\t\t\ttable(startTime: ${k}, endTime: ${w}, sourceID: ${t.id}, abilityID: ${e}, fightIDs: [${n}],dataType:Buffs,viewBy:Target,hostilityType:Friendlies)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}`)),l=[];for(let t=0;t<o.length&&!(l.length>=a||e);t++){let e=await this.queryWCL(o[t],r);if(e){let t=e.data?.reportData?.report?.table?.data?.auras??[];if(t.length){t=t.filter((e=>"Pet"!==e.type)).sort(((e,t)=>e.bands[0].startTime-t.bands[0].startTime)).filter(((e,t)=>t<5));const e=t.filter((e=>!l.some((t=>t.name===e.name))));l.push(...e)}}}if(0===l.length)continue;t.partyFound=!0,t.partyMembers=l.map((e=>e.name));let c=M.filter((e=>t.partyMembers.includes(e.name))).filter((e=>!e.partyAssigned));const d=c.length;let m=x.findIndex((e=>e.length<a&&e.length<d));-1===m&&(console.warn("No empty temp party found for player "+t.name),m=x.filter((e=>e.length<a)).findIndex((e=>e.some((e=>t.partyMembers.includes(e.name))))),console.info("Found party with members in it: "+m));let h=x[m];c.forEach((e=>{const s=void 0===h,n=h.length===a;s||n||(e.partyAssigned=!0,e.partyMembers=t.partyMembers,h.push(e))}))}x.forEach(((e,t)=>{let s=D.parties[t];e.sort(W).forEach((e=>z(e,s)))}))}if(M.filter((e=>!e.partyAssigned)).sort(W).map((e=>{let t=D.parties.filter((e=>e.players.length<a))[0];z(e,t,!0)})),M.filter((e=>e.innervateTarget||e.powerInfusionTarget||e.tricksOfTheTradeTarget)).forEach((e=>{const t=M.find((t=>t.name===e.innervateTarget||e.name===e.powerInfusionTarget||e.name===e.tricksOfTheTradeTarget));if(!t)return void console.warn("Could not find target assignment player");const s=t.id,a=R.get(s);if(!a)return void console.warn(`Could not find ${t.name} raid index!`);if(e.isBuffBot){const t=e.id,s=R.get(t),n=A.find((e=>e.raidIndex===s));return void(n&&(e.innervateTarget?(n.innervateAssignment=b.create(),n.innervateAssignment.targetIndex=a):e.powerInfusionTarget?(n.powerInfusionAssignment=b.create(),n.powerInfusionAssignment.targetIndex=a):e.tricksOfTheTradeTarget&&(n.tricksOfTheTradeAssignment=b.create(),n.tricksOfTheTradeAssignment.targetIndex=a)))}const n=D.parties.filter((t=>t.players.some((t=>t.name===e.name))))[0];if(!n)return void console.warn("Could not find raiding party for player "+e.name);const r=n.players.find((t=>t.name===e.name));r?e.innervateTarget?"balanceDruid"==r.spec.oneofKind?(r.spec.balanceDruid.options.innervateTarget=b.create(),r.spec.balanceDruid.options.innervateTarget.targetIndex=a):"feralDruid"==r.spec.oneofKind?(r.spec.feralDruid.options.innervateTarget=b.create(),r.spec.feralDruid.options.innervateTarget.targetIndex=a):"feralTankDruid"==r.spec.oneofKind&&(r.spec.feralTankDruid.options.innervateTarget=b.create(),r.spec.feralTankDruid.options.innervateTarget.targetIndex=a):e.powerInfusionTarget||e.tricksOfTheTradeTarget:console.warn("Could not find raid player "+e.name+" in raid party "+n)})),M.filter((e=>!e.partyAssigned)).forEach((e=>{console.error(`${e.name} is not in a party!`,e)})),C.blessings=L(U),this.simUI.fromProto(P.nextEventID(),C),this.simUI.setBuffBots(P.nextEventID(),A),!o){const e=await this.getRateLimit(r);console.debug(`Rate Limit resets in ${e.pointsResetIn} seconds.`)}this.close()}}class ta{constructor(e,t,s=S.Unknown){this.partyAssigned=!1,this.partyFound=!1,this.partyMembers=[],this.isPartyBuffer=!1,this.isBuffBot=!1,this.sortPriority=99,this.simUI=t,this.name=e.name,this.gear=e.gear,this.icon=e.icon,this.id=e.id,this.type=e.type,this.talents=e.talents,this.wclSpec=e.icon.split("-")[1],this.faction=s,"Paladin"===this.type&&"Protection"===this.wclSpec&&(this.wclSpec="Justicar"),this.spec=aa[this.wclSpec],this.specType=this.wclSpec+this.type,this.isBuffBot=void 0===this.spec,this.isPartyBuffer=this.getPartyAuraIds().length>1,this.sortPriority=sa[this.wclSpec]??99}getPlayer(){if(this.isBuffBot)return;let t=G.create();const s=te[this.spec],a=this.getMatchingPreset();if(void 0!==a)return t=se(this.spec,t,a.rotation,s.talentsCreate(),a.specOptions),t.talentsString=a.talents.talentsString,t.glyphs=a.talents.glyphs,t.consumes=a.consumes,t.name=this.name,t.class=ae(this.type),t.equipment=this.getEquipment(),t.race=a.defaultFactionRaces[this.faction],e.applySharedDefaultsToProto(t),t;console.error("Could not find matching preset for non buff bot",{name:this.name,spec:this.spec,type:this.type,talents:this.talents})}getBuffBot(){if(!this.isBuffBot)return;const e=na[this.specType];if(null==e)return void console.error("Buff Bot Spec not implemented: ",this.specType);const t=O.create();return t.id=e,t.raidIndex=-1,t}getPartyAuraIds(){const e=[24932],t={RetributionPaladin:[20092,20218,31870],GuardianDruid:[...e],WardenDruid:[...e],FeralDruid:[...e],BalanceDruid:[24907],RestorationDruid:[34123],MarksmanHunter:[27066],EnhancementShaman:[30811]},s={Paladin:[19746,27149,27150],Warrior:[2048,469],Warlock:[27268,18696]}[this.type]??[],a=[...t[this.specType]??[],...s,351355];return"Shaman"===this.type?[...a,32182]:a}getMatchingPreset(){const e=Fs.filter((e=>e.spec===this.spec));let t=0;if(e&&e.length>1){let s=100;e.forEach(((e,a)=>{let n=[0,0,0],r=0;Array.from(e.talents.talentsString).forEach((e=>{"-"!=e?n[r]+=parseInt(e):r++}));const i=n.reduce(((e,t,s)=>e+Math.abs(this.talents[s]?.guid-n[s])),0);i<s&&(t=a,s=i)}))}return e[t]}getEquipment(){let e=ne.create();return e.items=new Array,this.gear.forEach((t=>{const s=re.create();s.id=t.id,s.enchant=t.permanentEnchant,t.gems&&(s.gems=new Array,t.gems.forEach((e=>s.gems.push(e.id)))),e.items.push(s)})),e}}const sa={Warden:0,Guardian:1,Feral:2,Balance:3,Justicar:4,Retribution:5,Fury:6,Arms:7,Protection:8,Enhancement:9,Destruction:10,Affliction:11,Demonology:12,Marksman:13},aa={Balance:w.SpecBalanceDruid,Elemental:w.SpecElementalShaman,Enhancement:w.SpecEnhancementShaman,Feral:w.SpecFeralDruid,Warden:w.SpecFeralTankDruid,Guardian:w.SpecFeralTankDruid,Survival:w.SpecHunter,BeastMastery:w.SpecHunter,Arcane:w.SpecMage,Fire:w.SpecMage,Frost:w.SpecMage,Assassination:w.SpecRogue,Combat:w.SpecRogue,Retribution:w.SpecRetributionPaladin,Justicar:w.SpecProtectionPaladin,Shadow:w.SpecShadowPriest,Smite:w.SpecSmitePriest,Destruction:w.SpecWarlock,Affliction:w.SpecWarlock,Demonology:w.SpecWarlock,Arms:w.SpecWarrior,Fury:w.SpecWarrior,Champion:w.SpecWarrior,Warrior:w.SpecWarrior,Gladiator:w.SpecWarrior,Protection:w.SpecProtectionWarrior},na={HolyPaladin:"Paladin",HolyPriest:"Holy Priest",DisciplinePriest:"Divine Spirit Priest",RestorationDruid:"Resto Druid",DreamstateDruid:"Resto Druid",RestorationShaman:"Resto Shaman"},ra=[];new class extends d{constructor(e,t){super(e,new m,{spec:null,launchStatus:h.Unlaunched,knownIssues:(t.knownIssues||[]).concat(ra)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new P,this.changeEmitter=new P,this.referenceChangeEmitter=new P,this.rootElem.classList.add("raid-sim-ui"),this.config=t,this.settingsMuuri=null,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab(),this.addLogTab(),this.changeEmitter.on((()=>this.recomputeSettingsLayout()))}loadSettings(){const e=P.nextEventID();P.freezeAllAndDo((()=>{let t=!1;const s=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=s)try{const a=Z.fromJsonString(s);this.fromProto(e,a),t=!0}catch(a){console.warn("Failed to parse saved settings: "+a)}t||this.applyDefaults(e),this.changeEmitter.on((e=>{const t=Z.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),t)}))}))}addSidebarComponents(){this.raidSimResultsManager=ie(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",(e=>new Qs(e,this))),this.simHeader.addImportLink("WCL",(e=>new ea(e,this))),this.simHeader.addExportLink("JSON",(e=>new Xs(e,this)))}addRaidTab(){this.addTab("RAID","raid-tab",'\n\t\t\t<div class="raid-picker">\n\t\t\t</div>\n\t\t\t<div class="saved-raids-div">\n\t\t\t\t<div class="saved-raids-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t'),this.raidPicker=new Js(this.rootElem.getElementsByClassName("raid-picker")[0],this);const e=new p(this.rootElem.getElementsByClassName("saved-raids-manager")[0],this,{label:"Raid",storageKey:this.getSavedRaidStorageKey(),getData:e=>oe.create({raid:this.sim.raid.toProto(),buffBots:this.getBuffBots().map((e=>e.toProto())),blessings:this.blessingsPicker.getAssignments(),faction:this.sim.getFaction(),phase:this.sim.getPhase()}),setData:(e,t,s)=>{P.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,s.raid||X.create()),this.raidPicker.setBuffBots(e,s.buffBots),this.blessingsPicker.setAssignments(e,s.blessings||H.create()),s.faction&&this.sim.setFaction(e,s.faction),s.phase&&this.sim.setPhase(e,s.phase)}))},changeEmitters:[this.changeEmitter,this.sim.changeEmitter],equals:(e,t)=>oe.equals(e,t),toJson:e=>oe.toJson(e),fromJson:e=>oe.fromJson(e)});this.sim.waitForInit().then((()=>{e.loadUserData()}))}addSettingsTab(){this.addTab("SETTINGS","raid-settings-tab",'\n\t\t\t<div class="raid-settings-sections">\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section raid-encounter-section">\n\t\t\t\t\t\t<legend>Encounter</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container blessings-section-container">\n\t\t\t\t\t<fieldset class="settings-section blessings-section">\n\t\t\t\t\t\t<legend>Blessings</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container assignments-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container tanks-section-container">\n\t\t\t\t</div>\n\t\t\t\t<div class="settings-section-container raid-settings-section-container">\n\t\t\t\t\t<fieldset class="settings-section other-options-section">\n\t\t\t\t\t\t<legend>Other Options</legend>\n\t\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="settings-bottom-bar">\n\t\t\t\t<div class="saved-encounter-manager">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t');const e=this.rootElem.getElementsByClassName("raid-encounter-section")[0];new u(e,this.sim.encounter,{showExecuteProportion:!0},this);const t=new p(this.rootElem.getElementsByClassName("saved-encounter-manager")[0],this.sim.encounter,{label:"Encounter",storageKey:this.getSavedEncounterStorageKey(),getData:e=>le.create({encounter:e.toProto()}),setData:(e,t,s)=>t.fromProto(e,s.encounter),changeEmitters:[this.sim.encounter.changeEmitter],equals:(e,t)=>le.equals(e,t),toJson:e=>le.toJson(e),fromJson:e=>le.fromJson(e)});this.sim.waitForInit().then((()=>{t.loadUserData()}));const s=this.rootElem.getElementsByClassName("blessings-section")[0];this.blessingsPicker=new _s(s,this),this.blessingsPicker.changeEmitter.on((e=>this.changeEmitter.emit(e))),tippy(s,{content:g,allowHTML:!0,placement:"left"}),new Ns(this.rootElem.getElementsByClassName("assignments-section-container")[0],this),new Zs(this.rootElem.getElementsByClassName("tanks-section-container")[0],this);this.rootElem.getElementsByClassName("other-options-section")[0].classList.add("hide"),this.rootElem.getElementsByClassName("raid-settings-tab-tab")[0].addEventListener("click",(e=>{null==this.settingsMuuri&&setTimeout((()=>{this.settingsMuuri=new Muuri(".raid-settings-sections")}),200),setTimeout((()=>{this.recomputeSettingsLayout()}),200)}))}addDetailedResultsTab(){this.addTab("DETAILED RESULTS","detailed-results-tab",'\n\t\t\t<div class="detailed-results">\n\t\t\t</div>\n\t\t'),new f(this.rootElem.getElementsByClassName("detailed-results")[0],this,this.raidSimResultsManager)}addLogTab(){this.addTab("LOG","log-tab",'\n\t\t\t<div class="log-runner">\n\t\t\t</div>\n\t\t'),new y(this.rootElem.getElementsByClassName("log-runner")[0],this)}recomputeSettingsLayout(){this.settingsMuuri,window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){this.getBuffBots().forEach((t=>{const s=e.parties[t.getPartyIndex()];if(!s)throw new Error("No party proto for party index: "+t.getPartyIndex());t.settings.modifyRaidProto(t,e,s)}));const t=this.getClassCount(v.ClassPaladin),s=this.blessingsPicker.getAssignments();Hs.forEach((a=>{const n=e.parties.map((e=>e.players.filter((e=>e.class!=v.ClassUnknown&&B(e)==a)))).flat();s.paladins.forEach(((e,s)=>{s>=t||(e.blessings[a]==N.BlessingOfKings?n.forEach((e=>e.buffs.blessingOfKings=!0)):e.blessings[a]==N.BlessingOfMight?n.forEach((e=>e.buffs.blessingOfMight=A.TristateEffectImproved)):e.blessings[a]==N.BlessingOfWisdom?n.forEach((e=>e.buffs.blessingOfWisdom=A.TristateEffectImproved)):e.blessings[a]==N.BlessingOfSanctuary&&n.forEach((e=>e.buffs.blessingOfSanctuary=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getClassCount(e){return this.sim.raid.getClassCount(e)+this.getBuffBots().filter((t=>t.getClass()==e)).length}getBuffBots(){return this.raidPicker.getBuffBots()}setBuffBots(e,t){this.raidPicker.setBuffBots(e,t)}clearBuffBots(e){this.raidPicker.setBuffBots(e,[])}getPlayersAndBuffBots(){const e=this.sim.raid.getPlayers(),t=this.getBuffBots(),s=e.slice();return t.forEach((e=>{s[e.getRaidIndex()]=e})),s}applyDefaults(e){P.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,X.create()),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){return Z.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),buffBots:this.getBuffBots().map((e=>e.toProto())),blessings:this.blessingsPicker.getAssignments(),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const t=Z.toBinary(e),s=pako.deflate(t,{to:"string"}),a=btoa(String.fromCharCode(...s)),n=new URL(window.location.href);return n.hash=a,n.toString()}fromProto(e,t){P.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||X.create()),this.sim.encounter.fromProto(e,t.encounter||Q.create()),this.raidPicker.setBuffBots(e,t.buffBots),this.blessingsPicker.setAssignments(e,t.blessings||H.create())}))}clearRaid(e){this.sim.raid.clear(e),this.clearBuffBots(e)}getStorageKey(e){return"__wotlk_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index-17c2bdff.entry.js.map
