{"version":3,"file":"raid_sim_action-2e58abdd.chunk.js","sources":["../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/protobufjs-utf8.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/proto/deathknight.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/api.ts","../../../ui/core/proto/ui.ts","../../../ui/core/constants/other.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/constants/lang.ts","../../../ui/core/proto_utils/action_id.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/gear.ts","../../../ui/core/proto_utils/database.ts","../../../ui/core/proto_utils/logs_parser.ts","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/typed_event.ts","../../../ui/core/components/component.ts","../../../ui/core/components/input.ts","../../../ui/core/components/raid_sim_action.ts"],"sourcesContent":["/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","// Copyright (c) 2016, Daniel Wirtz  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n//   notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the\n//   documentation and/or other materials provided with the distribution.\n// * Neither the name of its author, nor the names of its contributors\n//   may be used to endorse or promote products derived from this software\n//   without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\nconst fromCharCodes = (chunk) => String.fromCharCode.apply(String, chunk);\n/**\n * Reads UTF8 bytes as a string.\n *\n * See [protobufjs / utf8](https://github.com/protobufjs/protobuf.js/blob/9893e35b854621cce64af4bf6be2cff4fb892796/lib/utf8/index.js#L40)\n *\n * Copyright (c) 2016, Daniel Wirtz\n */\nexport function utf8read(bytes) {\n    if (bytes.length < 1)\n        return \"\";\n    let pos = 0, // position in bytes\n    parts = [], chunk = [], i = 0, // char offset\n    t; // temporary\n    let len = bytes.length;\n    while (pos < len) {\n        t = bytes[pos++];\n        if (t < 128)\n            chunk[i++] = t;\n        else if (t > 191 && t < 224)\n            chunk[i++] = (t & 31) << 6 | bytes[pos++] & 63;\n        else if (t > 239 && t < 365) {\n            t = ((t & 7) << 18 | (bytes[pos++] & 63) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63) - 0x10000;\n            chunk[i++] = 0xD800 + (t >> 10);\n            chunk[i++] = 0xDC00 + (t & 1023);\n        }\n        else\n            chunk[i++] = (t & 15) << 12 | (bytes[pos++] & 63) << 6 | bytes[pos++] & 63;\n        if (i > 8191) {\n            parts.push(fromCharCodes(chunk));\n            i = 0;\n        }\n    }\n    if (parts.length) {\n        if (i)\n            parts.push(fromCharCodes(chunk.slice(0, i)));\n        return parts.join(\"\");\n    }\n    return fromCharCodes(chunk.slice(0, i));\n}\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if (bitsHigh <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + bitsLow);\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nfunction detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    return ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\nconst BI = detectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('ulong too small');\n                    if (value > BI.MAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & 0x80000000) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { utf8read } from \"./protobufjs-utf8\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nexport class BinaryReader {\n    constructor(buf) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return utf8read(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","import { BinaryReader } from \"./binary-reader\";\nimport { BinaryWriter } from \"./binary-writer\";\n/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n}, defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name);\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        target[localName] = this.enum(field.T(), jsonValue, field.name);\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * google.protobuf.NullValue accepts only JSON `null`.\n     */\n    enum(type, json, fieldName) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null, `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields.filter(f => !f.oneof)) {\n            let jsonValue = this.field(field, source[field.localName], options);\n            if (jsonValue !== undefined)\n                json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        // flatten all oneof`s\n        for (const field of this.fields) {\n            if (!field.oneof)\n                continue;\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                // if field is not selected, skip\n                continue;\n            let jsonValue = undefined;\n            if (field.kind == 'scalar' || field.kind == 'enum')\n                // for a selected oneof member, we must emit the default value\n                jsonValue = this.field(field, group[field.localName], {\n                    enumAsInteger: options.enumAsInteger,\n                    useProtoFieldName: options.useProtoFieldName,\n                    emitDefaultValues: true\n                });\n            else\n                jsonValue = this.field(field, group[field.localName], options);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * Replaces fields in the target with the fields from the\n * (partial) source.\n *\n * Omitted fields are not replaced.\n * Copies all values.\n * A default value in the source will replace a value in the target.\n *\n * Message fields are recursively merged (by calling `mergePartial()`\n * of the responsible message handler). Map and repeated fields\n * are simply overwritten, not appended or merged.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if (group === undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue === undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue === undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    output[name] = fieldValue.concat(); // elements are not reference types\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { binaryReadOptions, binaryWriteOptions } from \"./binary-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     *\n     * See MessageCreator.merge() for details.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.UnitStats\n */\nexport interface UnitStats {\n    /**\n     * @generated from protobuf field: repeated double stats = 1;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated double pseudo_stats = 2;\n     */\n    pseudoStats: number[];\n}\n/**\n * Buffs that affect the entire raid.\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +Stats\n     *\n     * @generated from protobuf field: proto.TristateEffect gift_of_the_wild = 1;\n     */\n    giftOfTheWild: TristateEffect;\n    /**\n     * +Stam\n     *\n     * @generated from protobuf field: proto.TristateEffect power_word_fortitude = 2;\n     */\n    powerWordFortitude: TristateEffect;\n    /**\n     * +Health\n     *\n     * @generated from protobuf field: proto.TristateEffect commanding_shout = 3;\n     */\n    commandingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blood_pact = 4;\n     */\n    bloodPact: TristateEffect;\n    /**\n     * + Agi and Str\n     *\n     * @generated from protobuf field: bool horn_of_winter = 5;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect strength_of_earth_totem = 6;\n     */\n    strengthOfEarthTotem: TristateEffect; // none, normal, 15% improved\n    /**\n     * +Intell and/or Spi\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 7;\n     */\n    arcaneBrilliance: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect fel_intelligence = 8;\n     */\n    felIntelligence: TristateEffect;\n    /**\n     * @generated from protobuf field: bool divine_spirit = 9;\n     */\n    divineSpirit: boolean;\n    /**\n     * +AP\n     *\n     * @generated from protobuf field: proto.TristateEffect battle_shout = 10;\n     */\n    battleShout: TristateEffect;\n    /**\n     * 10% AP\n     *\n     * @generated from protobuf field: bool trueshot_aura = 11;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 12;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 13;\n     */\n    abominationsMight: boolean;\n    /**\n     * 5% phy crit\n     *\n     * @generated from protobuf field: proto.TristateEffect leader_of_the_pack = 14;\n     */\n    leaderOfThePack: TristateEffect;\n    /**\n     * @generated from protobuf field: bool rampage = 15;\n     */\n    rampage: boolean;\n    /**\n     * 20% Melee Haste\n     *\n     * @generated from protobuf field: bool icy_talons = 16;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect windfury_totem = 17;\n     */\n    windfuryTotem: TristateEffect; // none, 16%, 20%\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool totem_of_wrath = 18;\n     */\n    totemOfWrath: boolean; // shouldn't stack with demonic pact (does in beta right now)\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 19;\n     */\n    flametongueTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 20;\n     */\n    demonicPact: number; // SP buff, variable : 10% of demonology warlock's own SP\n    /**\n     * +5% Spell Crit and/or +3% Haste\n     *\n     * @generated from protobuf field: bool swift_retribution = 21;\n     */\n    swiftRetribution: boolean; // haste only\n    /**\n     * @generated from protobuf field: proto.TristateEffect moonkin_aura = 22;\n     */\n    moonkinAura: TristateEffect; // both crit and haste\n    /**\n     * @generated from protobuf field: bool elemental_oath = 23;\n     */\n    elementalOath: boolean; // crit only\n    /**\n     * 5% spell haste\n     *\n     * @generated from protobuf field: bool wrath_of_air_totem = 24;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * 3% dmg\n     *\n     * @generated from protobuf field: bool ferocious_inspiration = 25;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 26;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: bool arcane_empowerment = 27;\n     */\n    arcaneEmpowerment: boolean;\n    /**\n     * mp5\n     *\n     * @generated from protobuf field: proto.TristateEffect mana_spring_totem = 28;\n     */\n    manaSpringTotem: TristateEffect;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool bloodlust = 29;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thorns = 30;\n     */\n    thorns: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect devotion_aura = 31;\n     */\n    devotionAura: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect stoneskin_totem = 42;\n     */\n    stoneskinTotem: TristateEffect;\n    /**\n     * @generated from protobuf field: bool retribution_aura = 32;\n     */\n    retributionAura: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_protection = 33;\n     */\n    shadowProtection: boolean;\n    /**\n     * Drums\n     *\n     * @generated from protobuf field: bool drums_of_forgotten_kings = 34;\n     */\n    drumsOfForgottenKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_wild = 35;\n     */\n    drumsOfTheWild: boolean;\n    /**\n     * Scroll\n     *\n     * @generated from protobuf field: bool scroll_of_protection = 36;\n     */\n    scrollOfProtection: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_stamina = 37;\n     */\n    scrollOfStamina: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_strength = 38;\n     */\n    scrollOfStrength: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_agility = 39;\n     */\n    scrollOfAgility: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_intellect = 40;\n     */\n    scrollOfIntellect: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_spirit = 41;\n     */\n    scrollOfSpirit: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n    /**\n     * Item Buffs\n     *\n     * @generated from protobuf field: int32 atiesh_mage = 1;\n     */\n    atieshMage: number;\n    /**\n     * @generated from protobuf field: int32 atiesh_warlock = 2;\n     */\n    atieshWarlock: number;\n    /**\n     * @generated from protobuf field: bool braided_eternium_chain = 3;\n     */\n    braidedEterniumChain: boolean;\n    /**\n     * @generated from protobuf field: bool eye_of_the_night = 4;\n     */\n    eyeOfTheNight: boolean;\n    /**\n     * @generated from protobuf field: bool chain_of_the_twilight_owl = 5;\n     */\n    chainOfTheTwilightOwl: boolean;\n    /**\n     * Group buffs\n     *\n     * @generated from protobuf field: int32 mana_tide_totems = 6;\n     */\n    manaTideTotems: number;\n    /**\n     * @generated from protobuf field: bool heroic_presence = 7;\n     */\n    heroicPresence: boolean;\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * 10% Stats\n     *\n     * @generated from protobuf field: bool blessing_of_kings = 1;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_wisdom = 2;\n     */\n    blessingOfWisdom: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_might = 3;\n     */\n    blessingOfMight: TristateEffect;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 4;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: bool vigilance = 5;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: bool renewed_hope = 6;\n     */\n    renewedHope: boolean; // Only used in individual sims \n    //   as the class that provides these would cast them in raid sim\n    /**\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 hymn_of_hope = 7;\n     */\n    hymnOfHope: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_salvation = 8;\n     */\n    handOfSalvation: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 9;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 innervates = 10;\n     */\n    innervates: number;\n    /**\n     * @generated from protobuf field: int32 power_infusions = 11;\n     */\n    powerInfusions: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy = 12;\n     */\n    unholyFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_rejuvination = 13;\n     */\n    revitalizeRejuvination: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_wild_growth = 21;\n     */\n    revitalizeWildGrowth: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trades = 19;\n     */\n    tricksOfTheTrades: number;\n    /**\n     * Technically a debuff, but only used by individual sims.\n     *\n     * @generated from protobuf field: int32 shattering_throws = 20;\n     */\n    shatteringThrows: number;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 15;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_wise = 16;\n     */\n    judgementsOfTheWise: boolean;\n    /**\n     * @generated from protobuf field: bool improved_soul_leech = 17;\n     */\n    improvedSoulLeech: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n    /**\n     * @generated from protobuf field: bool focus_magic = 22;\n     */\n    focusMagic: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: proto.PetFood pet_food = 7;\n     */\n    petFood: PetFood;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: proto.Conjured starting_conjured = 13;\n     */\n    startingConjured: Conjured;\n    /**\n     * @generated from protobuf field: int32 num_starting_conjured = 14;\n     */\n    numStartingConjured: number;\n    /**\n     * @generated from protobuf field: bool thermal_sapper = 15;\n     */\n    thermalSapper: boolean;\n    /**\n     * @generated from protobuf field: bool explosive_decoy = 16;\n     */\n    explosiveDecoy: boolean;\n    /**\n     * @generated from protobuf field: proto.Explosive filler_explosive = 17;\n     */\n    fillerExplosive: Explosive;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * @generated from protobuf field: bool judgement_of_wisdom = 1;\n     */\n    judgementOfWisdom: boolean;\n    /**\n     * @generated from protobuf field: bool judgement_of_light = 2;\n     */\n    judgementOfLight: boolean;\n    /**\n     * @generated from protobuf field: bool misery = 3;\n     */\n    misery: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect faerie_fire = 4;\n     */\n    faerieFire: TristateEffect;\n    /**\n     * 13% bonus spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 5;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 6;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 7;\n     */\n    earthAndMoon: boolean;\n    /**\n     * +3% to crit against target\n     *\n     * @generated from protobuf field: bool heart_of_the_crusader = 8;\n     */\n    heartOfTheCrusader: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 9;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 10;\n     */\n    totemOfWrath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool shadow_mastery = 11;\n     */\n    shadowMastery: boolean;\n    /**\n     * @generated from protobuf field: bool improved_scorch = 12;\n     */\n    improvedScorch: boolean;\n    /**\n     * @generated from protobuf field: bool winters_chill = 13;\n     */\n    wintersChill: boolean;\n    /**\n     * @generated from protobuf field: bool blood_frenzy = 14;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool savage_combat = 15;\n     */\n    savageCombat: boolean;\n    /**\n     * TODO: validate these\n     *\n     * @generated from protobuf field: bool gift_of_arthas = 16;\n     */\n    giftOfArthas: boolean;\n    /**\n     * Bleed %\n     *\n     * @generated from protobuf field: bool mangle = 17;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool trauma = 18;\n     */\n    trauma: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 19;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 20;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 21;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 22;\n     */\n    acidSpit: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect curse_of_weakness = 23;\n     */\n    curseOfWeakness: TristateEffect;\n    /**\n     * @generated from protobuf field: bool sting = 24;\n     */\n    sting: boolean;\n    /**\n     * @generated from protobuf field: bool spore_cloud = 37;\n     */\n    sporeCloud: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_roar = 25;\n     */\n    demoralizingRoar: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_shout = 26;\n     */\n    demoralizingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: bool vindication = 36;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_screech = 34;\n     */\n    demoralizingScreech: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thunder_clap = 27;\n     */\n    thunderClap: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect frost_fever = 28;\n     */\n    frostFever: TristateEffect;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 29;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 30;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 31;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: bool scorpid_sting = 32;\n     */\n    scorpidSting: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_embrace = 33;\n     */\n    shadowEmbrace: boolean;\n    /**\n     * 1 = normal, 2 = talented, 3 = talented+glyphed\n     *\n     * @generated from protobuf field: int32 hunters_mark = 35;\n     */\n    huntersMark: number;\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool tight_enemy_damage = 17;\n     */\n    tightEnemyDamage: boolean; // Patchwerk special\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.SimDatabase\n */\nexport interface SimDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.SimItem items = 1;\n     */\n    items: SimItem[];\n    /**\n     * @generated from protobuf field: repeated proto.SimEnchant enchants = 2;\n     */\n    enchants: SimEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.SimGem gems = 3;\n     */\n    gems: SimGem[];\n}\n/**\n * Contains only the Item info needed by the sim.\n *\n * @generated from protobuf message proto.SimItem\n */\nexport interface SimItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: double weapon_damage_min = 11;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 12;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 13;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: string set_name = 14;\n     */\n    setName: string;\n}\n/**\n * Contains only the Enchant info needed by the sim.\n *\n * @generated from protobuf message proto.SimEnchant\n */\nexport interface SimEnchant {\n    /**\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number;\n    /**\n     * @generated from protobuf field: repeated double stats = 2;\n     */\n    stats: number[];\n}\n/**\n * Contains only the Gem info needed by the sim.\n *\n * @generated from protobuf message proto.SimGem\n */\nexport interface SimGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 3;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 4;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.RaidTarget\n */\nexport interface RaidTarget {\n    /**\n     * Raid index of the player to target. A value of -1 indicates no target.\n     *\n     * @generated from protobuf field: int32 target_index = 1;\n     */\n    targetIndex: number;\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 major1 = 1;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 2;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 3;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 4;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 5;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 6;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n    /**\n     * @generated from protobuf field: double inspiration_uptime = 3;\n     */\n    inspirationUptime: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n    /**\n     * Desired cast rate for this spell. Not used by most custom rotations, this is\n     * primarily for healers.\n     *\n     * @generated from protobuf field: double casts_per_minute = 2;\n     */\n    castsPerMinute: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 0;\n     */\n    SpecBalanceDruid = 0,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 1;\n     */\n    SpecElementalShaman = 1,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 9;\n     */\n    SpecEnhancementShaman = 9,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 12;\n     */\n    SpecFeralDruid = 12,\n    /**\n     * @generated from protobuf enum value: SpecFeralTankDruid = 14;\n     */\n    SpecFeralTankDruid = 14,\n    /**\n     * @generated from protobuf enum value: SpecHunter = 8;\n     */\n    SpecHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecMage = 2;\n     */\n    SpecMage = 2,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 13;\n     */\n    SpecProtectionPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 3;\n     */\n    SpecRetributionPaladin = 3,\n    /**\n     * @generated from protobuf enum value: SpecRogue = 7;\n     */\n    SpecRogue = 7,\n    /**\n     * @generated from protobuf enum value: SpecHealingPriest = 17;\n     */\n    SpecHealingPriest = 17,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 4;\n     */\n    SpecShadowPriest = 4,\n    /**\n     * @generated from protobuf enum value: SpecSmitePriest = 10;\n     */\n    SpecSmitePriest = 10,\n    /**\n     * @generated from protobuf enum value: SpecWarlock = 5;\n     */\n    SpecWarlock = 5,\n    /**\n     * @generated from protobuf enum value: SpecWarrior = 6;\n     */\n    SpecWarrior = 6,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 11;\n     */\n    SpecProtectionWarrior = 11,\n    /**\n     * @generated from protobuf enum value: SpecDeathknight = 15;\n     */\n    SpecDeathknight = 15,\n    /**\n     * @generated from protobuf enum value: SpecTankDeathknight = 16;\n     */\n    SpecTankDeathknight = 16\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathknight = 10;\n     */\n    ClassDeathknight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11\n}\n/**\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 6;\n     */\n    StatMP5 = 6,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 7;\n     */\n    StatSpellHit = 7,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 8;\n     */\n    StatSpellCrit = 8,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 9;\n     */\n    StatSpellHaste = 9,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 10;\n     */\n    StatSpellPenetration = 10,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 11;\n     */\n    StatAttackPower = 11,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 12;\n     */\n    StatMeleeHit = 12,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 13;\n     */\n    StatMeleeCrit = 13,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 14;\n     */\n    StatMeleeHaste = 14,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 15;\n     */\n    StatArmorPenetration = 15,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 16;\n     */\n    StatExpertise = 16,\n    /**\n     * @generated from protobuf enum value: StatMana = 17;\n     */\n    StatMana = 17,\n    /**\n     * @generated from protobuf enum value: StatEnergy = 18;\n     */\n    StatEnergy = 18,\n    /**\n     * @generated from protobuf enum value: StatRage = 19;\n     */\n    StatRage = 19,\n    /**\n     * @generated from protobuf enum value: StatArmor = 20;\n     */\n    StatArmor = 20,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 21;\n     */\n    StatRangedAttackPower = 21,\n    /**\n     * @generated from protobuf enum value: StatDefense = 22;\n     */\n    StatDefense = 22,\n    /**\n     * @generated from protobuf enum value: StatBlock = 23;\n     */\n    StatBlock = 23,\n    /**\n     * @generated from protobuf enum value: StatBlockValue = 24;\n     */\n    StatBlockValue = 24,\n    /**\n     * @generated from protobuf enum value: StatDodge = 25;\n     */\n    StatDodge = 25,\n    /**\n     * @generated from protobuf enum value: StatParry = 26;\n     */\n    StatParry = 26,\n    /**\n     * @generated from protobuf enum value: StatResilience = 27;\n     */\n    StatResilience = 27,\n    /**\n     * @generated from protobuf enum value: StatHealth = 28;\n     */\n    StatHealth = 28,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 29;\n     */\n    StatArcaneResistance = 29,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 30;\n     */\n    StatFireResistance = 30,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 31;\n     */\n    StatFrostResistance = 31,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 32;\n     */\n    StatNatureResistance = 32,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 33;\n     */\n    StatShadowResistance = 33,\n    /**\n     * DO NOT add new stats here without discussing it first; new stats come with\n     * a performance penalty.\n     *\n     * @generated from protobuf enum value: StatBonusArmor = 34;\n     */\n    StatBonusArmor = 34\n}\n/**\n * Not all pseudostats are included here; just the ones we want to pass\n * between the UI and backend.\n *\n * It's also OK to include things here which aren't in the PseudoStats struct.\n *\n * @generated from protobuf enum proto.PseudoStat\n */\nexport enum PseudoStat {\n    /**\n     * @generated from protobuf enum value: PseudoStatMainHandDps = 0;\n     */\n    PseudoStatMainHandDps = 0,\n    /**\n     * @generated from protobuf enum value: PseudoStatOffHandDps = 1;\n     */\n    PseudoStatOffHandDps = 1,\n    /**\n     * @generated from protobuf enum value: PseudoStatRangedDps = 2;\n     */\n    PseudoStatRangedDps = 2,\n    /**\n     * @generated from protobuf enum value: PseudoStatBlockValueMultiplier = 3;\n     */\n    PseudoStatBlockValueMultiplier = 3\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeIdol = 4;\n     */\n    RangedWeaponTypeIdol = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeLibram = 5;\n     */\n    RangedWeaponTypeLibram = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 6;\n     */\n    RangedWeaponTypeThrown = 6,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeTotem = 7;\n     */\n    RangedWeaponTypeTotem = 7,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 8;\n     */\n    RangedWeaponTypeWand = 8,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeSigil = 9;\n     */\n    RangedWeaponTypeSigil = 9\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * @generated from protobuf enum value: RunicHealingPotion = 1;\n     */\n    RunicHealingPotion = 1,\n    /**\n     * @generated from protobuf enum value: RunicManaPotion = 2;\n     */\n    RunicManaPotion = 2,\n    /**\n     * @generated from protobuf enum value: IndestructiblePotion = 3;\n     */\n    IndestructiblePotion = 3,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 4;\n     */\n    PotionOfSpeed = 4,\n    /**\n     * @generated from protobuf enum value: PotionOfWildMagic = 5;\n     */\n    PotionOfWildMagic = 5,\n    /**\n     * @generated from protobuf enum value: DestructionPotion = 6;\n     */\n    DestructionPotion = 6,\n    /**\n     * @generated from protobuf enum value: SuperManaPotion = 7;\n     */\n    SuperManaPotion = 7,\n    /**\n     * @generated from protobuf enum value: HastePotion = 8;\n     */\n    HastePotion = 8,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 9;\n     */\n    MightyRagePotion = 9,\n    /**\n     * @generated from protobuf enum value: FelManaPotion = 10;\n     */\n    FelManaPotion = 10,\n    /**\n     * @generated from protobuf enum value: InsaneStrengthPotion = 11;\n     */\n    InsaneStrengthPotion = 11,\n    /**\n     * @generated from protobuf enum value: IronshieldPotion = 12;\n     */\n    IronshieldPotion = 12,\n    /**\n     * @generated from protobuf enum value: HeroicPotion = 13;\n     */\n    HeroicPotion = 13,\n    /**\n     * @generated from protobuf enum value: RunicManaInjector = 14;\n     */\n    RunicManaInjector = 14,\n    /**\n     * @generated from protobuf enum value: RunicHealingInjector = 15;\n     */\n    RunicHealingInjector = 15\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredFlameCap = 2;\n     */\n    ConjuredFlameCap = 2,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 1;\n     */\n    FlaskOfTheFrostWyrm = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 2;\n     */\n    FlaskOfEndlessRage = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 3;\n     */\n    FlaskOfPureMojo = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 4;\n     */\n    FlaskOfStoneblood = 4,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 5;\n     */\n    LesserFlaskOfToughness = 5,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 6;\n     */\n    LesserFlaskOfResistance = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: FlaskOfBlindingLight = 7;\n     */\n    FlaskOfBlindingLight = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfMightyRestoration = 8;\n     */\n    FlaskOfMightyRestoration = 8,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureDeath = 9;\n     */\n    FlaskOfPureDeath = 9,\n    /**\n     * @generated from protobuf enum value: FlaskOfRelentlessAssault = 10;\n     */\n    FlaskOfRelentlessAssault = 10,\n    /**\n     * @generated from protobuf enum value: FlaskOfSupremePower = 11;\n     */\n    FlaskOfSupremePower = 11,\n    /**\n     * @generated from protobuf enum value: FlaskOfFortification = 12;\n     */\n    FlaskOfFortification = 12,\n    /**\n     * @generated from protobuf enum value: FlaskOfChromaticWonder = 13;\n     */\n    FlaskOfChromaticWonder = 13\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfAccuracy = 1;\n     */\n    ElixirOfAccuracy = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 2;\n     */\n    ElixirOfArmorPiercing = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 3;\n     */\n    ElixirOfDeadlyStrikes = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 4;\n     */\n    ElixirOfExpertise = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 5;\n     */\n    ElixirOfLightningSpeed = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 6;\n     */\n    ElixirOfMightyAgility = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 7;\n     */\n    ElixirOfMightyStrength = 7,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 8;\n     */\n    GurusElixir = 8,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 9;\n     */\n    SpellpowerElixir = 9,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 10;\n     */\n    WrathElixir = 10,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: AdeptsElixir = 11;\n     */\n    AdeptsElixir = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 12;\n     */\n    ElixirOfDemonslaying = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorAgility = 13;\n     */\n    ElixirOfMajorAgility = 13,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFirePower = 14;\n     */\n    ElixirOfMajorFirePower = 14,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFrostPower = 15;\n     */\n    ElixirOfMajorFrostPower = 15,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorShadowPower = 16;\n     */\n    ElixirOfMajorShadowPower = 16,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorStrength = 17;\n     */\n    ElixirOfMajorStrength = 17,\n    /**\n     * @generated from protobuf enum value: ElixirOfMastery = 18;\n     */\n    ElixirOfMastery = 18,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMongoose = 19;\n     */\n    ElixirOfTheMongoose = 19,\n    /**\n     * @generated from protobuf enum value: FelStrengthElixir = 20;\n     */\n    FelStrengthElixir = 20,\n    /**\n     * @generated from protobuf enum value: GreaterArcaneElixir = 21;\n     */\n    GreaterArcaneElixir = 21\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 1;\n     */\n    ElixirOfMightyDefense = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 2;\n     */\n    ElixirOfMightyFortitude = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 3;\n     */\n    ElixirOfMightyMageblood = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 4;\n     */\n    ElixirOfMightyThoughts = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 5;\n     */\n    ElixirOfProtection = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 6;\n     */\n    ElixirOfSpirit = 6,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: GiftOfArthas = 7;\n     */\n    GiftOfArthas = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfDraenicWisdom = 8;\n     */\n    ElixirOfDraenicWisdom = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfIronskin = 9;\n     */\n    ElixirOfIronskin = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorDefense = 10;\n     */\n    ElixirOfMajorDefense = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorFortitude = 11;\n     */\n    ElixirOfMajorFortitude = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMajorMageblood = 12;\n     */\n    ElixirOfMajorMageblood = 12\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20\n}\n/**\n * @generated from protobuf enum proto.PetFood\n */\nexport enum PetFood {\n    /**\n     * @generated from protobuf enum value: PetFoodUnknown = 0;\n     */\n    PetFoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: PetFoodSpicedMammothTreats = 1;\n     */\n    PetFoodSpicedMammothTreats = 1,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: PetFoodKiblersBits = 2;\n     */\n    PetFoodKiblersBits = 2\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3,\n    /**\n     * @generated from protobuf enum value: EnchantTypeStaff = 4;\n     */\n    EnchantTypeStaff = 4\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitStats$Type extends MessageType<UnitStats> {\n    constructor() {\n        super(\"proto.UnitStats\", [\n            { no: 1, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pseudo_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnitStats>): UnitStats {\n        const message = { stats: [], pseudoStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitStats): UnitStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated double pseudo_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStats.push(reader.double());\n                    else\n                        message.pseudoStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double stats = 1; */\n        if (message.stats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated double pseudo_stats = 2; */\n        if (message.pseudoStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStats.length; i++)\n                writer.double(message.pseudoStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitStats\n */\nexport const UnitStats = new UnitStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"gift_of_the_wild\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 2, name: \"power_word_fortitude\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"commanding_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blood_pact\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"strength_of_earth_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 7, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"fel_intelligence\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 9, name: \"divine_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"battle_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 11, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"leader_of_the_pack\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 15, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"windfury_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 18, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"swift_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"moonkin_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 23, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"arcane_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"mana_spring_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"thorns\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 31, name: \"devotion_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 42, name: \"stoneskin_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 32, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"drums_of_forgotten_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"drums_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"scroll_of_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"scroll_of_stamina\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"scroll_of_strength\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"scroll_of_agility\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"scroll_of_intellect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"scroll_of_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { giftOfTheWild: 0, powerWordFortitude: 0, commandingShout: 0, bloodPact: 0, hornOfWinter: false, strengthOfEarthTotem: 0, arcaneBrilliance: false, felIntelligence: 0, divineSpirit: false, battleShout: 0, trueshotAura: false, unleashedRage: false, abominationsMight: false, leaderOfThePack: 0, rampage: false, icyTalons: false, windfuryTotem: 0, totemOfWrath: false, flametongueTotem: false, demonicPact: 0, swiftRetribution: false, moonkinAura: 0, elementalOath: false, wrathOfAirTotem: false, ferociousInspiration: false, sanctifiedRetribution: false, arcaneEmpowerment: false, manaSpringTotem: 0, bloodlust: false, thorns: 0, devotionAura: 0, stoneskinTotem: 0, retributionAura: false, shadowProtection: false, drumsOfForgottenKings: false, drumsOfTheWild: false, scrollOfProtection: false, scrollOfStamina: false, scrollOfStrength: false, scrollOfAgility: false, scrollOfIntellect: false, scrollOfSpirit: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TristateEffect gift_of_the_wild */ 1:\n                    message.giftOfTheWild = reader.int32();\n                    break;\n                case /* proto.TristateEffect power_word_fortitude */ 2:\n                    message.powerWordFortitude = reader.int32();\n                    break;\n                case /* proto.TristateEffect commanding_shout */ 3:\n                    message.commandingShout = reader.int32();\n                    break;\n                case /* proto.TristateEffect blood_pact */ 4:\n                    message.bloodPact = reader.int32();\n                    break;\n                case /* bool horn_of_winter */ 5:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* proto.TristateEffect strength_of_earth_totem */ 6:\n                    message.strengthOfEarthTotem = reader.int32();\n                    break;\n                case /* bool arcane_brilliance */ 7:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* proto.TristateEffect fel_intelligence */ 8:\n                    message.felIntelligence = reader.int32();\n                    break;\n                case /* bool divine_spirit */ 9:\n                    message.divineSpirit = reader.bool();\n                    break;\n                case /* proto.TristateEffect battle_shout */ 10:\n                    message.battleShout = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 11:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 12:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 13:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* proto.TristateEffect leader_of_the_pack */ 14:\n                    message.leaderOfThePack = reader.int32();\n                    break;\n                case /* bool rampage */ 15:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool icy_talons */ 16:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* proto.TristateEffect windfury_totem */ 17:\n                    message.windfuryTotem = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 18:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 19:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* int32 demonic_pact */ 20:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool swift_retribution */ 21:\n                    message.swiftRetribution = reader.bool();\n                    break;\n                case /* proto.TristateEffect moonkin_aura */ 22:\n                    message.moonkinAura = reader.int32();\n                    break;\n                case /* bool elemental_oath */ 23:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 24:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 25:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool sanctified_retribution */ 26:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* bool arcane_empowerment */ 27:\n                    message.arcaneEmpowerment = reader.bool();\n                    break;\n                case /* proto.TristateEffect mana_spring_totem */ 28:\n                    message.manaSpringTotem = reader.int32();\n                    break;\n                case /* bool bloodlust */ 29:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.TristateEffect thorns */ 30:\n                    message.thorns = reader.int32();\n                    break;\n                case /* proto.TristateEffect devotion_aura */ 31:\n                    message.devotionAura = reader.int32();\n                    break;\n                case /* proto.TristateEffect stoneskin_totem */ 42:\n                    message.stoneskinTotem = reader.int32();\n                    break;\n                case /* bool retribution_aura */ 32:\n                    message.retributionAura = reader.bool();\n                    break;\n                case /* bool shadow_protection */ 33:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool drums_of_forgotten_kings */ 34:\n                    message.drumsOfForgottenKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_wild */ 35:\n                    message.drumsOfTheWild = reader.bool();\n                    break;\n                case /* bool scroll_of_protection */ 36:\n                    message.scrollOfProtection = reader.bool();\n                    break;\n                case /* bool scroll_of_stamina */ 37:\n                    message.scrollOfStamina = reader.bool();\n                    break;\n                case /* bool scroll_of_strength */ 38:\n                    message.scrollOfStrength = reader.bool();\n                    break;\n                case /* bool scroll_of_agility */ 39:\n                    message.scrollOfAgility = reader.bool();\n                    break;\n                case /* bool scroll_of_intellect */ 40:\n                    message.scrollOfIntellect = reader.bool();\n                    break;\n                case /* bool scroll_of_spirit */ 41:\n                    message.scrollOfSpirit = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TristateEffect gift_of_the_wild = 1; */\n        if (message.giftOfTheWild !== 0)\n            writer.tag(1, WireType.Varint).int32(message.giftOfTheWild);\n        /* proto.TristateEffect power_word_fortitude = 2; */\n        if (message.powerWordFortitude !== 0)\n            writer.tag(2, WireType.Varint).int32(message.powerWordFortitude);\n        /* proto.TristateEffect commanding_shout = 3; */\n        if (message.commandingShout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.commandingShout);\n        /* proto.TristateEffect blood_pact = 4; */\n        if (message.bloodPact !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bloodPact);\n        /* bool horn_of_winter = 5; */\n        if (message.hornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.hornOfWinter);\n        /* proto.TristateEffect strength_of_earth_totem = 6; */\n        if (message.strengthOfEarthTotem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.strengthOfEarthTotem);\n        /* bool arcane_brilliance = 7; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(7, WireType.Varint).bool(message.arcaneBrilliance);\n        /* proto.TristateEffect fel_intelligence = 8; */\n        if (message.felIntelligence !== 0)\n            writer.tag(8, WireType.Varint).int32(message.felIntelligence);\n        /* bool divine_spirit = 9; */\n        if (message.divineSpirit !== false)\n            writer.tag(9, WireType.Varint).bool(message.divineSpirit);\n        /* proto.TristateEffect battle_shout = 10; */\n        if (message.battleShout !== 0)\n            writer.tag(10, WireType.Varint).int32(message.battleShout);\n        /* bool trueshot_aura = 11; */\n        if (message.trueshotAura !== false)\n            writer.tag(11, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 12; */\n        if (message.unleashedRage !== false)\n            writer.tag(12, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 13; */\n        if (message.abominationsMight !== false)\n            writer.tag(13, WireType.Varint).bool(message.abominationsMight);\n        /* proto.TristateEffect leader_of_the_pack = 14; */\n        if (message.leaderOfThePack !== 0)\n            writer.tag(14, WireType.Varint).int32(message.leaderOfThePack);\n        /* bool rampage = 15; */\n        if (message.rampage !== false)\n            writer.tag(15, WireType.Varint).bool(message.rampage);\n        /* bool icy_talons = 16; */\n        if (message.icyTalons !== false)\n            writer.tag(16, WireType.Varint).bool(message.icyTalons);\n        /* proto.TristateEffect windfury_totem = 17; */\n        if (message.windfuryTotem !== 0)\n            writer.tag(17, WireType.Varint).int32(message.windfuryTotem);\n        /* bool totem_of_wrath = 18; */\n        if (message.totemOfWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.totemOfWrath);\n        /* bool flametongue_totem = 19; */\n        if (message.flametongueTotem !== false)\n            writer.tag(19, WireType.Varint).bool(message.flametongueTotem);\n        /* int32 demonic_pact = 20; */\n        if (message.demonicPact !== 0)\n            writer.tag(20, WireType.Varint).int32(message.demonicPact);\n        /* bool swift_retribution = 21; */\n        if (message.swiftRetribution !== false)\n            writer.tag(21, WireType.Varint).bool(message.swiftRetribution);\n        /* proto.TristateEffect moonkin_aura = 22; */\n        if (message.moonkinAura !== 0)\n            writer.tag(22, WireType.Varint).int32(message.moonkinAura);\n        /* bool elemental_oath = 23; */\n        if (message.elementalOath !== false)\n            writer.tag(23, WireType.Varint).bool(message.elementalOath);\n        /* bool wrath_of_air_totem = 24; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(24, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool ferocious_inspiration = 25; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(25, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool sanctified_retribution = 26; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(26, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* bool arcane_empowerment = 27; */\n        if (message.arcaneEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.arcaneEmpowerment);\n        /* proto.TristateEffect mana_spring_totem = 28; */\n        if (message.manaSpringTotem !== 0)\n            writer.tag(28, WireType.Varint).int32(message.manaSpringTotem);\n        /* bool bloodlust = 29; */\n        if (message.bloodlust !== false)\n            writer.tag(29, WireType.Varint).bool(message.bloodlust);\n        /* proto.TristateEffect thorns = 30; */\n        if (message.thorns !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thorns);\n        /* proto.TristateEffect devotion_aura = 31; */\n        if (message.devotionAura !== 0)\n            writer.tag(31, WireType.Varint).int32(message.devotionAura);\n        /* proto.TristateEffect stoneskin_totem = 42; */\n        if (message.stoneskinTotem !== 0)\n            writer.tag(42, WireType.Varint).int32(message.stoneskinTotem);\n        /* bool retribution_aura = 32; */\n        if (message.retributionAura !== false)\n            writer.tag(32, WireType.Varint).bool(message.retributionAura);\n        /* bool shadow_protection = 33; */\n        if (message.shadowProtection !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowProtection);\n        /* bool drums_of_forgotten_kings = 34; */\n        if (message.drumsOfForgottenKings !== false)\n            writer.tag(34, WireType.Varint).bool(message.drumsOfForgottenKings);\n        /* bool drums_of_the_wild = 35; */\n        if (message.drumsOfTheWild !== false)\n            writer.tag(35, WireType.Varint).bool(message.drumsOfTheWild);\n        /* bool scroll_of_protection = 36; */\n        if (message.scrollOfProtection !== false)\n            writer.tag(36, WireType.Varint).bool(message.scrollOfProtection);\n        /* bool scroll_of_stamina = 37; */\n        if (message.scrollOfStamina !== false)\n            writer.tag(37, WireType.Varint).bool(message.scrollOfStamina);\n        /* bool scroll_of_strength = 38; */\n        if (message.scrollOfStrength !== false)\n            writer.tag(38, WireType.Varint).bool(message.scrollOfStrength);\n        /* bool scroll_of_agility = 39; */\n        if (message.scrollOfAgility !== false)\n            writer.tag(39, WireType.Varint).bool(message.scrollOfAgility);\n        /* bool scroll_of_intellect = 40; */\n        if (message.scrollOfIntellect !== false)\n            writer.tag(40, WireType.Varint).bool(message.scrollOfIntellect);\n        /* bool scroll_of_spirit = 41; */\n        if (message.scrollOfSpirit !== false)\n            writer.tag(41, WireType.Varint).bool(message.scrollOfSpirit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", [\n            { no: 1, name: \"atiesh_mage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"atiesh_warlock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"braided_eternium_chain\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"eye_of_the_night\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"chain_of_the_twilight_owl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mana_tide_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"heroic_presence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = { atieshMage: 0, atieshWarlock: 0, braidedEterniumChain: false, eyeOfTheNight: false, chainOfTheTwilightOwl: false, manaTideTotems: 0, heroicPresence: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 atiesh_mage */ 1:\n                    message.atieshMage = reader.int32();\n                    break;\n                case /* int32 atiesh_warlock */ 2:\n                    message.atieshWarlock = reader.int32();\n                    break;\n                case /* bool braided_eternium_chain */ 3:\n                    message.braidedEterniumChain = reader.bool();\n                    break;\n                case /* bool eye_of_the_night */ 4:\n                    message.eyeOfTheNight = reader.bool();\n                    break;\n                case /* bool chain_of_the_twilight_owl */ 5:\n                    message.chainOfTheTwilightOwl = reader.bool();\n                    break;\n                case /* int32 mana_tide_totems */ 6:\n                    message.manaTideTotems = reader.int32();\n                    break;\n                case /* bool heroic_presence */ 7:\n                    message.heroicPresence = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 atiesh_mage = 1; */\n        if (message.atieshMage !== 0)\n            writer.tag(1, WireType.Varint).int32(message.atieshMage);\n        /* int32 atiesh_warlock = 2; */\n        if (message.atieshWarlock !== 0)\n            writer.tag(2, WireType.Varint).int32(message.atieshWarlock);\n        /* bool braided_eternium_chain = 3; */\n        if (message.braidedEterniumChain !== false)\n            writer.tag(3, WireType.Varint).bool(message.braidedEterniumChain);\n        /* bool eye_of_the_night = 4; */\n        if (message.eyeOfTheNight !== false)\n            writer.tag(4, WireType.Varint).bool(message.eyeOfTheNight);\n        /* bool chain_of_the_twilight_owl = 5; */\n        if (message.chainOfTheTwilightOwl !== false)\n            writer.tag(5, WireType.Varint).bool(message.chainOfTheTwilightOwl);\n        /* int32 mana_tide_totems = 6; */\n        if (message.manaTideTotems !== 0)\n            writer.tag(6, WireType.Varint).int32(message.manaTideTotems);\n        /* bool heroic_presence = 7; */\n        if (message.heroicPresence !== false)\n            writer.tag(7, WireType.Varint).bool(message.heroicPresence);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 1, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_wisdom\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"blessing_of_might\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"renewed_hope\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"hymn_of_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"hand_of_salvation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"innervates\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"power_infusions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"revitalize_rejuvination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"revitalize_wild_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"shattering_throws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_soul_leech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { blessingOfKings: false, blessingOfWisdom: 0, blessingOfMight: 0, blessingOfSanctuary: false, vigilance: false, renewedHope: false, hymnOfHope: 0, handOfSalvation: 0, rapture: 0, innervates: 0, powerInfusions: 0, unholyFrenzy: 0, revitalizeRejuvination: 0, revitalizeWildGrowth: 0, tricksOfTheTrades: 0, shatteringThrows: 0, vampiricTouch: false, huntingParty: false, judgementsOfTheWise: false, improvedSoulLeech: false, enduringWinter: false, focusMagic: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool blessing_of_kings */ 1:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* proto.TristateEffect blessing_of_wisdom */ 2:\n                    message.blessingOfWisdom = reader.int32();\n                    break;\n                case /* proto.TristateEffect blessing_of_might */ 3:\n                    message.blessingOfMight = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 4:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* bool vigilance */ 5:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* bool renewed_hope */ 6:\n                    message.renewedHope = reader.bool();\n                    break;\n                case /* int32 hymn_of_hope */ 7:\n                    message.hymnOfHope = reader.int32();\n                    break;\n                case /* int32 hand_of_salvation */ 8:\n                    message.handOfSalvation = reader.int32();\n                    break;\n                case /* int32 rapture */ 9:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 innervates */ 10:\n                    message.innervates = reader.int32();\n                    break;\n                case /* int32 power_infusions */ 11:\n                    message.powerInfusions = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy */ 12:\n                    message.unholyFrenzy = reader.int32();\n                    break;\n                case /* int32 revitalize_rejuvination */ 13:\n                    message.revitalizeRejuvination = reader.int32();\n                    break;\n                case /* int32 revitalize_wild_growth */ 21:\n                    message.revitalizeWildGrowth = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trades */ 19:\n                    message.tricksOfTheTrades = reader.int32();\n                    break;\n                case /* int32 shattering_throws */ 20:\n                    message.shatteringThrows = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool hunting_party */ 15:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool judgements_of_the_wise */ 16:\n                    message.judgementsOfTheWise = reader.bool();\n                    break;\n                case /* bool improved_soul_leech */ 17:\n                    message.improvedSoulLeech = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                case /* bool focus_magic */ 22:\n                    message.focusMagic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool blessing_of_kings = 1; */\n        if (message.blessingOfKings !== false)\n            writer.tag(1, WireType.Varint).bool(message.blessingOfKings);\n        /* proto.TristateEffect blessing_of_wisdom = 2; */\n        if (message.blessingOfWisdom !== 0)\n            writer.tag(2, WireType.Varint).int32(message.blessingOfWisdom);\n        /* proto.TristateEffect blessing_of_might = 3; */\n        if (message.blessingOfMight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blessingOfMight);\n        /* bool blessing_of_sanctuary = 4; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(4, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* bool vigilance = 5; */\n        if (message.vigilance !== false)\n            writer.tag(5, WireType.Varint).bool(message.vigilance);\n        /* bool renewed_hope = 6; */\n        if (message.renewedHope !== false)\n            writer.tag(6, WireType.Varint).bool(message.renewedHope);\n        /* int32 hymn_of_hope = 7; */\n        if (message.hymnOfHope !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHope);\n        /* int32 hand_of_salvation = 8; */\n        if (message.handOfSalvation !== 0)\n            writer.tag(8, WireType.Varint).int32(message.handOfSalvation);\n        /* int32 rapture = 9; */\n        if (message.rapture !== 0)\n            writer.tag(9, WireType.Varint).int32(message.rapture);\n        /* int32 innervates = 10; */\n        if (message.innervates !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervates);\n        /* int32 power_infusions = 11; */\n        if (message.powerInfusions !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusions);\n        /* int32 unholy_frenzy = 12; */\n        if (message.unholyFrenzy !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzy);\n        /* int32 revitalize_rejuvination = 13; */\n        if (message.revitalizeRejuvination !== 0)\n            writer.tag(13, WireType.Varint).int32(message.revitalizeRejuvination);\n        /* int32 revitalize_wild_growth = 21; */\n        if (message.revitalizeWildGrowth !== 0)\n            writer.tag(21, WireType.Varint).int32(message.revitalizeWildGrowth);\n        /* int32 tricks_of_the_trades = 19; */\n        if (message.tricksOfTheTrades !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTrades);\n        /* int32 shattering_throws = 20; */\n        if (message.shatteringThrows !== 0)\n            writer.tag(20, WireType.Varint).int32(message.shatteringThrows);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool hunting_party = 15; */\n        if (message.huntingParty !== false)\n            writer.tag(15, WireType.Varint).bool(message.huntingParty);\n        /* bool judgements_of_the_wise = 16; */\n        if (message.judgementsOfTheWise !== false)\n            writer.tag(16, WireType.Varint).bool(message.judgementsOfTheWise);\n        /* bool improved_soul_leech = 17; */\n        if (message.improvedSoulLeech !== false)\n            writer.tag(17, WireType.Varint).bool(message.improvedSoulLeech);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        /* bool focus_magic = 22; */\n        if (message.focusMagic !== false)\n            writer.tag(22, WireType.Varint).bool(message.focusMagic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 7, name: \"pet_food\", kind: \"enum\", T: () => [\"proto.PetFood\", PetFood] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 13, name: \"starting_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 14, name: \"num_starting_conjured\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"thermal_sapper\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"explosive_decoy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"filler_explosive\", kind: \"enum\", T: () => [\"proto.Explosive\", Explosive] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petFood: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, startingConjured: 0, numStartingConjured: 0, thermalSapper: false, explosiveDecoy: false, fillerExplosive: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* proto.PetFood pet_food */ 7:\n                    message.petFood = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* proto.Conjured starting_conjured */ 13:\n                    message.startingConjured = reader.int32();\n                    break;\n                case /* int32 num_starting_conjured */ 14:\n                    message.numStartingConjured = reader.int32();\n                    break;\n                case /* bool thermal_sapper */ 15:\n                    message.thermalSapper = reader.bool();\n                    break;\n                case /* bool explosive_decoy */ 16:\n                    message.explosiveDecoy = reader.bool();\n                    break;\n                case /* proto.Explosive filler_explosive */ 17:\n                    message.fillerExplosive = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* proto.PetFood pet_food = 7; */\n        if (message.petFood !== 0)\n            writer.tag(7, WireType.Varint).int32(message.petFood);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* proto.Conjured starting_conjured = 13; */\n        if (message.startingConjured !== 0)\n            writer.tag(13, WireType.Varint).int32(message.startingConjured);\n        /* int32 num_starting_conjured = 14; */\n        if (message.numStartingConjured !== 0)\n            writer.tag(14, WireType.Varint).int32(message.numStartingConjured);\n        /* bool thermal_sapper = 15; */\n        if (message.thermalSapper !== false)\n            writer.tag(15, WireType.Varint).bool(message.thermalSapper);\n        /* bool explosive_decoy = 16; */\n        if (message.explosiveDecoy !== false)\n            writer.tag(16, WireType.Varint).bool(message.explosiveDecoy);\n        /* proto.Explosive filler_explosive = 17; */\n        if (message.fillerExplosive !== 0)\n            writer.tag(17, WireType.Varint).int32(message.fillerExplosive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"judgement_of_wisdom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"judgement_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"misery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"faerie_fire\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"shadow_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"winters_chill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"gift_of_arthas\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"trauma\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"curse_of_weakness\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 24, name: \"sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"spore_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_roar\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 26, name: \"demoralizing_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 36, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"demoralizing_screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 28, name: \"frost_fever\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"scorpid_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { judgementOfWisdom: false, judgementOfLight: false, misery: false, faerieFire: 0, curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, heartOfTheCrusader: false, masterPoisoner: false, totemOfWrath: false, shadowMastery: false, improvedScorch: false, wintersChill: false, bloodFrenzy: false, savageCombat: false, giftOfArthas: false, mangle: false, trauma: false, stampede: false, exposeArmor: false, sunderArmor: false, acidSpit: false, curseOfWeakness: 0, sting: false, sporeCloud: false, demoralizingRoar: 0, demoralizingShout: 0, vindication: false, demoralizingScreech: false, thunderClap: 0, frostFever: 0, infectedWounds: false, judgementsOfTheJust: false, insectSwarm: false, scorpidSting: false, shadowEmbrace: false, huntersMark: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool judgement_of_wisdom */ 1:\n                    message.judgementOfWisdom = reader.bool();\n                    break;\n                case /* bool judgement_of_light */ 2:\n                    message.judgementOfLight = reader.bool();\n                    break;\n                case /* bool misery */ 3:\n                    message.misery = reader.bool();\n                    break;\n                case /* proto.TristateEffect faerie_fire */ 4:\n                    message.faerieFire = reader.int32();\n                    break;\n                case /* bool curse_of_elements */ 5:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 6:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 7:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool heart_of_the_crusader */ 8:\n                    message.heartOfTheCrusader = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 9:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool totem_of_wrath */ 10:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool shadow_mastery */ 11:\n                    message.shadowMastery = reader.bool();\n                    break;\n                case /* bool improved_scorch */ 12:\n                    message.improvedScorch = reader.bool();\n                    break;\n                case /* bool winters_chill */ 13:\n                    message.wintersChill = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool savage_combat */ 15:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool gift_of_arthas */ 16:\n                    message.giftOfArthas = reader.bool();\n                    break;\n                case /* bool mangle */ 17:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool trauma */ 18:\n                    message.trauma = reader.bool();\n                    break;\n                case /* bool stampede */ 19:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 20:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 21:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool acid_spit */ 22:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* proto.TristateEffect curse_of_weakness */ 23:\n                    message.curseOfWeakness = reader.int32();\n                    break;\n                case /* bool sting */ 24:\n                    message.sting = reader.bool();\n                    break;\n                case /* bool spore_cloud */ 37:\n                    message.sporeCloud = reader.bool();\n                    break;\n                case /* proto.TristateEffect demoralizing_roar */ 25:\n                    message.demoralizingRoar = reader.int32();\n                    break;\n                case /* proto.TristateEffect demoralizing_shout */ 26:\n                    message.demoralizingShout = reader.int32();\n                    break;\n                case /* bool vindication */ 36:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool demoralizing_screech */ 34:\n                    message.demoralizingScreech = reader.bool();\n                    break;\n                case /* proto.TristateEffect thunder_clap */ 27:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* proto.TristateEffect frost_fever */ 28:\n                    message.frostFever = reader.int32();\n                    break;\n                case /* bool infected_wounds */ 29:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 30:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool insect_swarm */ 31:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* bool scorpid_sting */ 32:\n                    message.scorpidSting = reader.bool();\n                    break;\n                case /* bool shadow_embrace */ 33:\n                    message.shadowEmbrace = reader.bool();\n                    break;\n                case /* int32 hunters_mark */ 35:\n                    message.huntersMark = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool judgement_of_wisdom = 1; */\n        if (message.judgementOfWisdom !== false)\n            writer.tag(1, WireType.Varint).bool(message.judgementOfWisdom);\n        /* bool judgement_of_light = 2; */\n        if (message.judgementOfLight !== false)\n            writer.tag(2, WireType.Varint).bool(message.judgementOfLight);\n        /* bool misery = 3; */\n        if (message.misery !== false)\n            writer.tag(3, WireType.Varint).bool(message.misery);\n        /* proto.TristateEffect faerie_fire = 4; */\n        if (message.faerieFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faerieFire);\n        /* bool curse_of_elements = 5; */\n        if (message.curseOfElements !== false)\n            writer.tag(5, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 6; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(6, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 7; */\n        if (message.earthAndMoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.earthAndMoon);\n        /* bool heart_of_the_crusader = 8; */\n        if (message.heartOfTheCrusader !== false)\n            writer.tag(8, WireType.Varint).bool(message.heartOfTheCrusader);\n        /* bool master_poisoner = 9; */\n        if (message.masterPoisoner !== false)\n            writer.tag(9, WireType.Varint).bool(message.masterPoisoner);\n        /* bool totem_of_wrath = 10; */\n        if (message.totemOfWrath !== false)\n            writer.tag(10, WireType.Varint).bool(message.totemOfWrath);\n        /* bool shadow_mastery = 11; */\n        if (message.shadowMastery !== false)\n            writer.tag(11, WireType.Varint).bool(message.shadowMastery);\n        /* bool improved_scorch = 12; */\n        if (message.improvedScorch !== false)\n            writer.tag(12, WireType.Varint).bool(message.improvedScorch);\n        /* bool winters_chill = 13; */\n        if (message.wintersChill !== false)\n            writer.tag(13, WireType.Varint).bool(message.wintersChill);\n        /* bool blood_frenzy = 14; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(14, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool savage_combat = 15; */\n        if (message.savageCombat !== false)\n            writer.tag(15, WireType.Varint).bool(message.savageCombat);\n        /* bool gift_of_arthas = 16; */\n        if (message.giftOfArthas !== false)\n            writer.tag(16, WireType.Varint).bool(message.giftOfArthas);\n        /* bool mangle = 17; */\n        if (message.mangle !== false)\n            writer.tag(17, WireType.Varint).bool(message.mangle);\n        /* bool trauma = 18; */\n        if (message.trauma !== false)\n            writer.tag(18, WireType.Varint).bool(message.trauma);\n        /* bool stampede = 19; */\n        if (message.stampede !== false)\n            writer.tag(19, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 20; */\n        if (message.exposeArmor !== false)\n            writer.tag(20, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 21; */\n        if (message.sunderArmor !== false)\n            writer.tag(21, WireType.Varint).bool(message.sunderArmor);\n        /* bool acid_spit = 22; */\n        if (message.acidSpit !== false)\n            writer.tag(22, WireType.Varint).bool(message.acidSpit);\n        /* proto.TristateEffect curse_of_weakness = 23; */\n        if (message.curseOfWeakness !== 0)\n            writer.tag(23, WireType.Varint).int32(message.curseOfWeakness);\n        /* bool sting = 24; */\n        if (message.sting !== false)\n            writer.tag(24, WireType.Varint).bool(message.sting);\n        /* bool spore_cloud = 37; */\n        if (message.sporeCloud !== false)\n            writer.tag(37, WireType.Varint).bool(message.sporeCloud);\n        /* proto.TristateEffect demoralizing_roar = 25; */\n        if (message.demoralizingRoar !== 0)\n            writer.tag(25, WireType.Varint).int32(message.demoralizingRoar);\n        /* proto.TristateEffect demoralizing_shout = 26; */\n        if (message.demoralizingShout !== 0)\n            writer.tag(26, WireType.Varint).int32(message.demoralizingShout);\n        /* bool vindication = 36; */\n        if (message.vindication !== false)\n            writer.tag(36, WireType.Varint).bool(message.vindication);\n        /* bool demoralizing_screech = 34; */\n        if (message.demoralizingScreech !== false)\n            writer.tag(34, WireType.Varint).bool(message.demoralizingScreech);\n        /* proto.TristateEffect thunder_clap = 27; */\n        if (message.thunderClap !== 0)\n            writer.tag(27, WireType.Varint).int32(message.thunderClap);\n        /* proto.TristateEffect frost_fever = 28; */\n        if (message.frostFever !== 0)\n            writer.tag(28, WireType.Varint).int32(message.frostFever);\n        /* bool infected_wounds = 29; */\n        if (message.infectedWounds !== false)\n            writer.tag(29, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 30; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(30, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool insect_swarm = 31; */\n        if (message.insectSwarm !== false)\n            writer.tag(31, WireType.Varint).bool(message.insectSwarm);\n        /* bool scorpid_sting = 32; */\n        if (message.scorpidSting !== false)\n            writer.tag(32, WireType.Varint).bool(message.scorpidSting);\n        /* bool shadow_embrace = 33; */\n        if (message.shadowEmbrace !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowEmbrace);\n        /* int32 hunters_mark = 35; */\n        if (message.huntersMark !== 0)\n            writer.tag(35, WireType.Varint).int32(message.huntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"tight_enemy_damage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, tightEnemyDamage: false, suppressDodge: false, spellSchool: 0, tankIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool tight_enemy_damage */ 17:\n                    message.tightEnemyDamage = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool tight_enemy_damage = 17; */\n        if (message.tightEnemyDamage !== false)\n            writer.tag(17, WireType.Varint).bool(message.tightEnemyDamage);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, useHealth: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, enchant: 0, gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimDatabase$Type extends MessageType<SimDatabase> {\n    constructor() {\n        super(\"proto.SimDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimItem },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimGem }\n        ]);\n    }\n    create(value?: PartialMessage<SimDatabase>): SimDatabase {\n        const message = { items: [], enchants: [], gems: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimDatabase): SimDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.SimItem items */ 1:\n                    message.items.push(SimItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimEnchant enchants */ 2:\n                    message.enchants.push(SimEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimGem gems */ 3:\n                    message.gems.push(SimGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.SimItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            SimItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            SimEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            SimGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimDatabase\n */\nexport const SimDatabase = new SimDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimItem$Type extends MessageType<SimItem> {\n    constructor() {\n        super(\"proto.SimItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimItem>): SimItem {\n        const message = { id: 0, name: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, setName: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimItem): SimItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 11:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 12:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 13:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* string set_name */ 14:\n                    message.setName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 11; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(11, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 12; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 13; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponSpeed);\n        /* string set_name = 14; */\n        if (message.setName !== \"\")\n            writer.tag(14, WireType.LengthDelimited).string(message.setName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimItem\n */\nexport const SimItem = new SimItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimEnchant$Type extends MessageType<SimEnchant> {\n    constructor() {\n        super(\"proto.SimEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimEnchant>): SimEnchant {\n        const message = { effectId: 0, stats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimEnchant): SimEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* repeated double stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* repeated double stats = 2; */\n        if (message.stats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimEnchant\n */\nexport const SimEnchant = new SimEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimGem$Type extends MessageType<SimGem> {\n    constructor() {\n        super(\"proto.SimGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 4, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimGem>): SimGem {\n        const message = { id: 0, name: \"\", color: 0, stats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimGem): SimGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.GemColor color */ 3:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.GemColor color = 3; */\n        if (message.color !== 0)\n            writer.tag(3, WireType.Varint).int32(message.color);\n        /* repeated double stats = 4; */\n        if (message.stats.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimGem\n */\nexport const SimGem = new SimGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidTarget$Type extends MessageType<RaidTarget> {\n    constructor() {\n        super(\"proto.RaidTarget\", [\n            { no: 1, name: \"target_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidTarget>): RaidTarget {\n        const message = { targetIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidTarget): RaidTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 target_index */ 1:\n                    message.targetIndex = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 target_index = 1; */\n        if (message.targetIndex !== 0)\n            writer.tag(1, WireType.Varint).int32(message.targetIndex);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidTarget\n */\nexport const RaidTarget = new RaidTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 major1 */ 1:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 2:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 3:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 4:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 5:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 6:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 major1 = 1; */\n        if (message.major1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 2; */\n        if (message.major2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 3; */\n        if (message.major3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 4; */\n        if (message.minor1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 5; */\n        if (message.minor2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 6; */\n        if (message.minor3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"inspiration_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0, inspirationUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                case /* double inspiration_uptime */ 3:\n                    message.inspirationUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        /* double inspiration_uptime = 3; */\n        if (message.inspirationUptime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.inspirationUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"casts_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0, castsPerMinute: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                case /* double casts_per_minute */ 2:\n                    message.castsPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        /* double casts_per_minute = 2; */\n        if (message.castsPerMinute !== 0)\n            writer.tag(2, WireType.Bit64).double(message.castsPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"deathknight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.DeathknightTalents\n */\nexport interface DeathknightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 subversion = 2;\n     */\n    subversion: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 3;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 4;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 6;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 7;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: int32 dark_conviction = 8;\n     */\n    darkConviction: number;\n    /**\n     * @generated from protobuf field: int32 death_rune_mastery = 9;\n     */\n    deathRuneMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_rune_tap = 10;\n     */\n    improvedRuneTap: number;\n    /**\n     * @generated from protobuf field: int32 spell_deflection = 11;\n     */\n    spellDeflection: number;\n    /**\n     * @generated from protobuf field: int32 vendetta = 12;\n     */\n    vendetta: number;\n    /**\n     * @generated from protobuf field: int32 bloody_strikes = 13;\n     */\n    bloodyStrikes: number;\n    /**\n     * @generated from protobuf field: int32 veteran_of_the_third_war = 14;\n     */\n    veteranOfTheThirdWar: number;\n    /**\n     * @generated from protobuf field: bool mark_of_blood = 15;\n     */\n    markOfBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 bloody_vengeance = 16;\n     */\n    bloodyVengeance: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 17;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 bloodworms = 18;\n     */\n    bloodworms: number;\n    /**\n     * @generated from protobuf field: bool hysteria = 19;\n     */\n    hysteria: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 20;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 21;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 22;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 23;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 24;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool heart_strike = 25;\n     */\n    heartStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 might_of_mograine = 26;\n     */\n    mightOfMograine: number;\n    /**\n     * @generated from protobuf field: int32 blood_gorged = 27;\n     */\n    bloodGorged: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 28;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 improved_icy_touch = 29;\n     */\n    improvedIcyTouch: number;\n    /**\n     * @generated from protobuf field: int32 runic_power_mastery = 30;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 31;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 32;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 black_ice = 33;\n     */\n    blackIce: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 34;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 icy_talons = 35;\n     */\n    icyTalons: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 36;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 annihilation = 37;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 38;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 39;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 40;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 frigid_dreadplate = 41;\n     */\n    frigidDreadplate: number;\n    /**\n     * @generated from protobuf field: int32 glacier_rot = 42;\n     */\n    glacierRot: number;\n    /**\n     * @generated from protobuf field: bool deathchill = 43;\n     */\n    deathchill: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 44;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 45;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 rime = 46;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 47;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 48;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 49;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 50;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_north = 51;\n     */\n    bloodOfTheNorth: number;\n    /**\n     * @generated from protobuf field: bool unbreakable_armor = 52;\n     */\n    unbreakableArmor: boolean;\n    /**\n     * @generated from protobuf field: int32 acclimation = 53;\n     */\n    acclimation: number;\n    /**\n     * @generated from protobuf field: bool frost_strike = 54;\n     */\n    frostStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 guile_of_gorefiend = 55;\n     */\n    guileOfGorefiend: number;\n    /**\n     * @generated from protobuf field: int32 tundra_stalker = 56;\n     */\n    tundraStalker: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 57;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 vicious_strikes = 58;\n     */\n    viciousStrikes: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 59;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 60;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 61;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 62;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 unholy_command = 63;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 ravenous_dead = 64;\n     */\n    ravenousDead: number;\n    /**\n     * @generated from protobuf field: int32 outbreak = 65;\n     */\n    outbreak: number;\n    /**\n     * @generated from protobuf field: int32 necrosis = 66;\n     */\n    necrosis: number;\n    /**\n     * @generated from protobuf field: bool corpse_explosion = 67;\n     */\n    corpseExplosion: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 68;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 69;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: int32 night_of_the_dead = 70;\n     */\n    nightOfTheDead: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 71;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: int32 impurity = 72;\n     */\n    impurity: number;\n    /**\n     * @generated from protobuf field: int32 dirge = 73;\n     */\n    dirge: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 74;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 75;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 reaping = 76;\n     */\n    reaping: number;\n    /**\n     * @generated from protobuf field: bool master_of_ghouls = 77;\n     */\n    masterOfGhouls: boolean;\n    /**\n     * @generated from protobuf field: int32 desolation = 78;\n     */\n    desolation: number;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 79;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 80;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool ghoul_frenzy = 81;\n     */\n    ghoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 crypt_fever = 82;\n     */\n    cryptFever: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 83;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 wandering_plague = 84;\n     */\n    wanderingPlague: number;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 85;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: bool scourge_strike = 86;\n     */\n    scourgeStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 87;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 88;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.Deathknight\n */\nexport interface Deathknight {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation rotation = 1;\n     */\n    rotation?: Deathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Options options = 3;\n     */\n    options?: Deathknight_Options;\n}\n/**\n * @generated from protobuf message proto.Deathknight.Rotation\n */\nexport interface Deathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19;\n     */\n    frostRotationType: Deathknight_Rotation_FrostRotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation frost_custom_rotation = 20;\n     */\n    frostCustomRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1;\n     */\n    armyOfTheDead: Deathknight_Rotation_ArmyOfTheDead;\n    /**\n     * @generated from protobuf field: bool use_death_and_decay = 2;\n     */\n    useDeathAndDecay: boolean;\n    /**\n     * @generated from protobuf field: bool bt_ghoul_frenzy = 3;\n     */\n    btGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: double disease_refresh_duration = 4;\n     */\n    diseaseRefreshDuration: number;\n    /**\n     * @generated from protobuf field: bool refresh_horn_of_winter = 5;\n     */\n    refreshHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.FirstDisease first_disease = 6;\n     */\n    firstDisease: Deathknight_Rotation_FirstDisease;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7;\n     */\n    deathAndDecayPrio: Deathknight_Rotation_DeathAndDecayPrio;\n    /**\n     * @generated from protobuf field: bool use_empower_rune_weapon = 8;\n     */\n    useEmpowerRuneWeapon: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9;\n     */\n    bloodRuneFiller: Deathknight_Rotation_BloodRuneFiller;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence starting_presence = 10;\n     */\n    startingPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.BloodTap blood_tap = 11;\n     */\n    bloodTap: Deathknight_Rotation_BloodTap;\n    /**\n     * @generated from protobuf field: double oblit_delay_duration = 12;\n     */\n    oblitDelayDuration: number;\n    /**\n     * @generated from protobuf field: bool use_ams = 13;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 14;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 15;\n     */\n    avgAmsHit: number;\n    /**\n     * @generated from protobuf field: bool auto_rotation = 16;\n     */\n    autoRotation: boolean;\n    /**\n     * @generated from protobuf field: bool desync_rotation = 17;\n     */\n    desyncRotation: boolean;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence bl_presence = 18;\n     */\n    blPresence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.Deathknight.Rotation.Presence presence = 21;\n     */\n    presence: Deathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: bool hold_erw_army = 22;\n     */\n    holdErwArmy: boolean;\n    /**\n     * @generated from protobuf field: bool use_gargoyle = 23;\n     */\n    useGargoyle: boolean;\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.ArmyOfTheDead\n */\nexport enum Deathknight_Rotation_ArmyOfTheDead {\n    /**\n     * @generated from protobuf enum value: DoNotUse = 0;\n     */\n    DoNotUse = 0,\n    /**\n     * @generated from protobuf enum value: PreCast = 1;\n     */\n    PreCast = 1,\n    /**\n     * @generated from protobuf enum value: AsMajorCd = 2;\n     */\n    AsMajorCd = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodTap\n */\nexport enum Deathknight_Rotation_BloodTap {\n    /**\n     * @generated from protobuf enum value: GhoulFrenzy = 0;\n     */\n    GhoulFrenzy = 0,\n    /**\n     * @generated from protobuf enum value: IcyTouch = 1;\n     */\n    IcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: BloodStrikeBT = 2;\n     */\n    BloodStrikeBT = 2,\n    /**\n     * @generated from protobuf enum value: BloodBoilBT = 3;\n     */\n    BloodBoilBT = 3\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.DeathAndDecayPrio\n */\nexport enum Deathknight_Rotation_DeathAndDecayPrio {\n    /**\n     * @generated from protobuf enum value: MaxRuneDowntime = 0;\n     */\n    MaxRuneDowntime = 0,\n    /**\n     * @generated from protobuf enum value: MaxDndUptime = 1;\n     */\n    MaxDndUptime = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FirstDisease\n */\nexport enum Deathknight_Rotation_FirstDisease {\n    /**\n     * @generated from protobuf enum value: FrostFever = 0;\n     */\n    FrostFever = 0,\n    /**\n     * @generated from protobuf enum value: BloodPlague = 1;\n     */\n    BloodPlague = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.BloodRuneFiller\n */\nexport enum Deathknight_Rotation_BloodRuneFiller {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.Presence\n */\nexport enum Deathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Unholy = 1;\n     */\n    Unholy = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.FrostRotationType\n */\nexport enum Deathknight_Rotation_FrostRotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Deathknight.Rotation.CustomSpellOption\n */\nexport enum Deathknight_Rotation_CustomSpellOption {\n    /**\n     * @generated from protobuf enum value: CustomNoSpell = 0;\n     */\n    CustomNoSpell = 0,\n    /**\n     * @generated from protobuf enum value: CustomIcyTouch = 1;\n     */\n    CustomIcyTouch = 1,\n    /**\n     * @generated from protobuf enum value: CustomPlagueStrike = 2;\n     */\n    CustomPlagueStrike = 2,\n    /**\n     * @generated from protobuf enum value: CustomPestilence = 3;\n     */\n    CustomPestilence = 3,\n    /**\n     * @generated from protobuf enum value: CustomObliterate = 4;\n     */\n    CustomObliterate = 4,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlast = 5;\n     */\n    CustomHowlingBlast = 5,\n    /**\n     * @generated from protobuf enum value: CustomHowlingBlastRime = 6;\n     */\n    CustomHowlingBlastRime = 6,\n    /**\n     * @generated from protobuf enum value: CustomBloodBoil = 7;\n     */\n    CustomBloodBoil = 7,\n    /**\n     * @generated from protobuf enum value: CustomBloodStrike = 8;\n     */\n    CustomBloodStrike = 8,\n    /**\n     * @generated from protobuf enum value: CustomDeathAndDecay = 9;\n     */\n    CustomDeathAndDecay = 9,\n    /**\n     * @generated from protobuf enum value: CustomHornOfWinter = 10;\n     */\n    CustomHornOfWinter = 10,\n    /**\n     * @generated from protobuf enum value: CustomUnbreakableArmor = 11;\n     */\n    CustomUnbreakableArmor = 11,\n    /**\n     * @generated from protobuf enum value: CustomBloodTap = 12;\n     */\n    CustomBloodTap = 12,\n    /**\n     * @generated from protobuf enum value: CustomEmpoweredRuneWeapon = 13;\n     */\n    CustomEmpoweredRuneWeapon = 13,\n    /**\n     * @generated from protobuf enum value: CustomFrostStrike = 14;\n     */\n    CustomFrostStrike = 14\n}\n/**\n * @generated from protobuf message proto.Deathknight.Options\n */\nexport interface Deathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: bool precast_ghoul_frenzy = 3;\n     */\n    precastGhoulFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool precast_horn_of_winter = 4;\n     */\n    precastHornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 5;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight\n */\nexport interface TankDeathknight {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation rotation = 1;\n     */\n    rotation?: TankDeathknight_Rotation;\n    /**\n     * @generated from protobuf field: proto.DeathknightTalents talents = 2;\n     */\n    talents?: DeathknightTalents;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Options options = 3;\n     */\n    options?: TankDeathknight_Options;\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Rotation\n */\nexport interface TankDeathknight_Rotation {\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Presence presence = 4;\n     */\n    presence: TankDeathknight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.Opener opener = 1;\n     */\n    opener: TankDeathknight_Rotation_Opener;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2;\n     */\n    optimizationSetting: TankDeathknight_Rotation_OptimizationSetting;\n    /**\n     * @generated from protobuf field: proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3;\n     */\n    bloodSpell: TankDeathknight_Rotation_BloodSpell;\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Opener\n */\nexport enum TankDeathknight_Rotation_Opener {\n    /**\n     * @generated from protobuf enum value: Regular = 0;\n     */\n    Regular = 0,\n    /**\n     * @generated from protobuf enum value: Threat = 1;\n     */\n    Threat = 1\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.OptimizationSetting\n */\nexport enum TankDeathknight_Rotation_OptimizationSetting {\n    /**\n     * @generated from protobuf enum value: Hps = 0;\n     */\n    Hps = 0,\n    /**\n     * @generated from protobuf enum value: Tps = 1;\n     */\n    Tps = 1,\n    /**\n     * @generated from protobuf enum value: Dps = 2;\n     */\n    Dps = 2\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.BloodSpell\n */\nexport enum TankDeathknight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1,\n    /**\n     * @generated from protobuf enum value: HeartStrike = 2;\n     */\n    HeartStrike = 2\n}\n/**\n * @generated from protobuf enum proto.TankDeathknight.Rotation.Presence\n */\nexport enum TankDeathknight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Frost = 1;\n     */\n    Frost = 1,\n    /**\n     * @generated from protobuf enum value: Unholy = 2;\n     */\n    Unholy = 2\n}\n/**\n * @generated from protobuf message proto.TankDeathknight.Options\n */\nexport interface TankDeathknight_Options {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_target = 2;\n     */\n    unholyFrenzyTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf enum proto.DeathknightMajorGlyph\n */\nexport enum DeathknightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMajorGlyphNone = 0;\n     */\n    DeathknightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodStrike = 43826;\n     */\n    GlyphOfBloodStrike = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkCommand = 43538;\n     */\n    GlyphOfDarkCommand = 43538,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkDeath = 45804;\n     */\n    GlyphOfDarkDeath = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisease = 45805;\n     */\n    GlyphOfDisease = 45805,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceboundFortitude = 43545;\n     */\n    GlyphOfIceboundFortitude = 43545,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfPlagueStrike = 43548;\n     */\n    GlyphOfPlagueStrike = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheGhoul = 43549;\n     */\n    GlyphOfTheGhoul = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnbreakableArmor = 43553;\n     */\n    GlyphOfUnbreakableArmor = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnholyBlight = 45803;\n     */\n    GlyphOfUnholyBlight = 45803,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathknightMinorGlyph\n */\nexport enum DeathknightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathknightMinorGlyphNone = 0;\n     */\n    DeathknightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorpseExplosion = 43671;\n     */\n    GlyphOfCorpseExplosion = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43672;\n     */\n    GlyphOfPestilence = 43672,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43673;\n     */\n    GlyphOfRaiseDead = 43673\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathknightTalents$Type extends MessageType<DeathknightTalents> {\n    constructor() {\n        super(\"proto.DeathknightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"subversion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"dark_conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"death_rune_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_rune_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"spell_deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"vendetta\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"bloody_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"veteran_of_the_third_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"mark_of_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"bloody_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bloodworms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"hysteria\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"heart_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"might_of_mograine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"blood_gorged\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_icy_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"black_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"icy_talons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"frigid_dreadplate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"glacier_rot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"deathchill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"blood_of_the_north\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"unbreakable_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"acclimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"frost_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"guile_of_gorefiend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"tundra_stalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"vicious_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"ravenous_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"outbreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"necrosis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"corpse_explosion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"night_of_the_dead\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"impurity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"dirge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"reaping\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"master_of_ghouls\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"desolation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"crypt_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"wandering_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"scourge_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 87, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 88, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathknightTalents>): DeathknightTalents {\n        const message = { butchery: 0, subversion: 0, bladeBarrier: 0, bladedArmor: 0, scentOfBlood: 0, twoHandedWeaponSpecialization: 0, runeTap: false, darkConviction: 0, deathRuneMastery: 0, improvedRuneTap: 0, spellDeflection: 0, vendetta: 0, bloodyStrikes: 0, veteranOfTheThirdWar: 0, markOfBlood: false, bloodyVengeance: 0, abominationsMight: 0, bloodworms: 0, hysteria: false, improvedBloodPresence: 0, improvedDeathStrike: 0, suddenDoom: 0, vampiricBlood: false, willOfTheNecropolis: 0, heartStrike: false, mightOfMograine: 0, bloodGorged: 0, dancingRuneWeapon: false, improvedIcyTouch: 0, runicPowerMastery: 0, toughness: 0, icyReach: 0, blackIce: 0, nervesOfColdSteel: 0, icyTalons: 0, lichborne: false, annihilation: 0, killingMachine: 0, chillOfTheGrave: 0, endlessWinter: 0, frigidDreadplate: 0, glacierRot: 0, deathchill: false, improvedIcyTalons: false, mercilessCombat: 0, rime: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, bloodOfTheNorth: 0, unbreakableArmor: false, acclimation: 0, frostStrike: false, guileOfGorefiend: 0, tundraStalker: 0, howlingBlast: false, viciousStrikes: 0, virulence: 0, anticipation: 0, epidemic: 0, morbidity: 0, unholyCommand: 0, ravenousDead: 0, outbreak: 0, necrosis: 0, corpseExplosion: false, onAPaleHorse: 0, bloodCakedBlade: 0, nightOfTheDead: 0, unholyBlight: false, impurity: 0, dirge: 0, desecration: 0, magicSuppression: 0, reaping: 0, masterOfGhouls: false, desolation: 0, antiMagicZone: false, improvedUnholyPresence: 0, ghoulFrenzy: false, cryptFever: 0, boneShield: false, wanderingPlague: 0, ebonPlaguebringer: 0, scourgeStrike: false, rageOfRivendare: 0, summonGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathknightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathknightTalents): DeathknightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 subversion */ 2:\n                    message.subversion = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 3:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 4:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 6:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool rune_tap */ 7:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* int32 dark_conviction */ 8:\n                    message.darkConviction = reader.int32();\n                    break;\n                case /* int32 death_rune_mastery */ 9:\n                    message.deathRuneMastery = reader.int32();\n                    break;\n                case /* int32 improved_rune_tap */ 10:\n                    message.improvedRuneTap = reader.int32();\n                    break;\n                case /* int32 spell_deflection */ 11:\n                    message.spellDeflection = reader.int32();\n                    break;\n                case /* int32 vendetta */ 12:\n                    message.vendetta = reader.int32();\n                    break;\n                case /* int32 bloody_strikes */ 13:\n                    message.bloodyStrikes = reader.int32();\n                    break;\n                case /* int32 veteran_of_the_third_war */ 14:\n                    message.veteranOfTheThirdWar = reader.int32();\n                    break;\n                case /* bool mark_of_blood */ 15:\n                    message.markOfBlood = reader.bool();\n                    break;\n                case /* int32 bloody_vengeance */ 16:\n                    message.bloodyVengeance = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 17:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 bloodworms */ 18:\n                    message.bloodworms = reader.int32();\n                    break;\n                case /* bool hysteria */ 19:\n                    message.hysteria = reader.bool();\n                    break;\n                case /* int32 improved_blood_presence */ 20:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 improved_death_strike */ 21:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 22:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool vampiric_blood */ 23:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 will_of_the_necropolis */ 24:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool heart_strike */ 25:\n                    message.heartStrike = reader.bool();\n                    break;\n                case /* int32 might_of_mograine */ 26:\n                    message.mightOfMograine = reader.int32();\n                    break;\n                case /* int32 blood_gorged */ 27:\n                    message.bloodGorged = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 28:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 improved_icy_touch */ 29:\n                    message.improvedIcyTouch = reader.int32();\n                    break;\n                case /* int32 runic_power_mastery */ 30:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 31:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 32:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 black_ice */ 33:\n                    message.blackIce = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 34:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 icy_talons */ 35:\n                    message.icyTalons = reader.int32();\n                    break;\n                case /* bool lichborne */ 36:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 annihilation */ 37:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 38:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 39:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 40:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 frigid_dreadplate */ 41:\n                    message.frigidDreadplate = reader.int32();\n                    break;\n                case /* int32 glacier_rot */ 42:\n                    message.glacierRot = reader.int32();\n                    break;\n                case /* bool deathchill */ 43:\n                    message.deathchill = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 44:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 merciless_combat */ 45:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 rime */ 46:\n                    message.rime = reader.int32();\n                    break;\n                case /* int32 chilblains */ 47:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 48:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 49:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 50:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 blood_of_the_north */ 51:\n                    message.bloodOfTheNorth = reader.int32();\n                    break;\n                case /* bool unbreakable_armor */ 52:\n                    message.unbreakableArmor = reader.bool();\n                    break;\n                case /* int32 acclimation */ 53:\n                    message.acclimation = reader.int32();\n                    break;\n                case /* bool frost_strike */ 54:\n                    message.frostStrike = reader.bool();\n                    break;\n                case /* int32 guile_of_gorefiend */ 55:\n                    message.guileOfGorefiend = reader.int32();\n                    break;\n                case /* int32 tundra_stalker */ 56:\n                    message.tundraStalker = reader.int32();\n                    break;\n                case /* bool howling_blast */ 57:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 vicious_strikes */ 58:\n                    message.viciousStrikes = reader.int32();\n                    break;\n                case /* int32 virulence */ 59:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 anticipation */ 60:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 epidemic */ 61:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 morbidity */ 62:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 unholy_command */ 63:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 ravenous_dead */ 64:\n                    message.ravenousDead = reader.int32();\n                    break;\n                case /* int32 outbreak */ 65:\n                    message.outbreak = reader.int32();\n                    break;\n                case /* int32 necrosis */ 66:\n                    message.necrosis = reader.int32();\n                    break;\n                case /* bool corpse_explosion */ 67:\n                    message.corpseExplosion = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 68:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 69:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* int32 night_of_the_dead */ 70:\n                    message.nightOfTheDead = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 71:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* int32 impurity */ 72:\n                    message.impurity = reader.int32();\n                    break;\n                case /* int32 dirge */ 73:\n                    message.dirge = reader.int32();\n                    break;\n                case /* int32 desecration */ 74:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 75:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 reaping */ 76:\n                    message.reaping = reader.int32();\n                    break;\n                case /* bool master_of_ghouls */ 77:\n                    message.masterOfGhouls = reader.bool();\n                    break;\n                case /* int32 desolation */ 78:\n                    message.desolation = reader.int32();\n                    break;\n                case /* bool anti_magic_zone */ 79:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 80:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool ghoul_frenzy */ 81:\n                    message.ghoulFrenzy = reader.bool();\n                    break;\n                case /* int32 crypt_fever */ 82:\n                    message.cryptFever = reader.int32();\n                    break;\n                case /* bool bone_shield */ 83:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 wandering_plague */ 84:\n                    message.wanderingPlague = reader.int32();\n                    break;\n                case /* int32 ebon_plaguebringer */ 85:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* bool scourge_strike */ 86:\n                    message.scourgeStrike = reader.bool();\n                    break;\n                case /* int32 rage_of_rivendare */ 87:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 88:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathknightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 subversion = 2; */\n        if (message.subversion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.subversion);\n        /* int32 blade_barrier = 3; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 4; */\n        if (message.bladedArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bladedArmor);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 two_handed_weapon_specialization = 6; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(6, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool rune_tap = 7; */\n        if (message.runeTap !== false)\n            writer.tag(7, WireType.Varint).bool(message.runeTap);\n        /* int32 dark_conviction = 8; */\n        if (message.darkConviction !== 0)\n            writer.tag(8, WireType.Varint).int32(message.darkConviction);\n        /* int32 death_rune_mastery = 9; */\n        if (message.deathRuneMastery !== 0)\n            writer.tag(9, WireType.Varint).int32(message.deathRuneMastery);\n        /* int32 improved_rune_tap = 10; */\n        if (message.improvedRuneTap !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedRuneTap);\n        /* int32 spell_deflection = 11; */\n        if (message.spellDeflection !== 0)\n            writer.tag(11, WireType.Varint).int32(message.spellDeflection);\n        /* int32 vendetta = 12; */\n        if (message.vendetta !== 0)\n            writer.tag(12, WireType.Varint).int32(message.vendetta);\n        /* int32 bloody_strikes = 13; */\n        if (message.bloodyStrikes !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodyStrikes);\n        /* int32 veteran_of_the_third_war = 14; */\n        if (message.veteranOfTheThirdWar !== 0)\n            writer.tag(14, WireType.Varint).int32(message.veteranOfTheThirdWar);\n        /* bool mark_of_blood = 15; */\n        if (message.markOfBlood !== false)\n            writer.tag(15, WireType.Varint).bool(message.markOfBlood);\n        /* int32 bloody_vengeance = 16; */\n        if (message.bloodyVengeance !== 0)\n            writer.tag(16, WireType.Varint).int32(message.bloodyVengeance);\n        /* int32 abominations_might = 17; */\n        if (message.abominationsMight !== 0)\n            writer.tag(17, WireType.Varint).int32(message.abominationsMight);\n        /* int32 bloodworms = 18; */\n        if (message.bloodworms !== 0)\n            writer.tag(18, WireType.Varint).int32(message.bloodworms);\n        /* bool hysteria = 19; */\n        if (message.hysteria !== false)\n            writer.tag(19, WireType.Varint).bool(message.hysteria);\n        /* int32 improved_blood_presence = 20; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 improved_death_strike = 21; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 sudden_doom = 22; */\n        if (message.suddenDoom !== 0)\n            writer.tag(22, WireType.Varint).int32(message.suddenDoom);\n        /* bool vampiric_blood = 23; */\n        if (message.vampiricBlood !== false)\n            writer.tag(23, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 will_of_the_necropolis = 24; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool heart_strike = 25; */\n        if (message.heartStrike !== false)\n            writer.tag(25, WireType.Varint).bool(message.heartStrike);\n        /* int32 might_of_mograine = 26; */\n        if (message.mightOfMograine !== 0)\n            writer.tag(26, WireType.Varint).int32(message.mightOfMograine);\n        /* int32 blood_gorged = 27; */\n        if (message.bloodGorged !== 0)\n            writer.tag(27, WireType.Varint).int32(message.bloodGorged);\n        /* bool dancing_rune_weapon = 28; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(28, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 improved_icy_touch = 29; */\n        if (message.improvedIcyTouch !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedIcyTouch);\n        /* int32 runic_power_mastery = 30; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(30, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 toughness = 31; */\n        if (message.toughness !== 0)\n            writer.tag(31, WireType.Varint).int32(message.toughness);\n        /* int32 icy_reach = 32; */\n        if (message.icyReach !== 0)\n            writer.tag(32, WireType.Varint).int32(message.icyReach);\n        /* int32 black_ice = 33; */\n        if (message.blackIce !== 0)\n            writer.tag(33, WireType.Varint).int32(message.blackIce);\n        /* int32 nerves_of_cold_steel = 34; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 icy_talons = 35; */\n        if (message.icyTalons !== 0)\n            writer.tag(35, WireType.Varint).int32(message.icyTalons);\n        /* bool lichborne = 36; */\n        if (message.lichborne !== false)\n            writer.tag(36, WireType.Varint).bool(message.lichborne);\n        /* int32 annihilation = 37; */\n        if (message.annihilation !== 0)\n            writer.tag(37, WireType.Varint).int32(message.annihilation);\n        /* int32 killing_machine = 38; */\n        if (message.killingMachine !== 0)\n            writer.tag(38, WireType.Varint).int32(message.killingMachine);\n        /* int32 chill_of_the_grave = 39; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(39, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 endless_winter = 40; */\n        if (message.endlessWinter !== 0)\n            writer.tag(40, WireType.Varint).int32(message.endlessWinter);\n        /* int32 frigid_dreadplate = 41; */\n        if (message.frigidDreadplate !== 0)\n            writer.tag(41, WireType.Varint).int32(message.frigidDreadplate);\n        /* int32 glacier_rot = 42; */\n        if (message.glacierRot !== 0)\n            writer.tag(42, WireType.Varint).int32(message.glacierRot);\n        /* bool deathchill = 43; */\n        if (message.deathchill !== false)\n            writer.tag(43, WireType.Varint).bool(message.deathchill);\n        /* bool improved_icy_talons = 44; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(44, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 merciless_combat = 45; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(45, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 rime = 46; */\n        if (message.rime !== 0)\n            writer.tag(46, WireType.Varint).int32(message.rime);\n        /* int32 chilblains = 47; */\n        if (message.chilblains !== 0)\n            writer.tag(47, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 48; */\n        if (message.hungeringCold !== false)\n            writer.tag(48, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 49; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 50; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(50, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 blood_of_the_north = 51; */\n        if (message.bloodOfTheNorth !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bloodOfTheNorth);\n        /* bool unbreakable_armor = 52; */\n        if (message.unbreakableArmor !== false)\n            writer.tag(52, WireType.Varint).bool(message.unbreakableArmor);\n        /* int32 acclimation = 53; */\n        if (message.acclimation !== 0)\n            writer.tag(53, WireType.Varint).int32(message.acclimation);\n        /* bool frost_strike = 54; */\n        if (message.frostStrike !== false)\n            writer.tag(54, WireType.Varint).bool(message.frostStrike);\n        /* int32 guile_of_gorefiend = 55; */\n        if (message.guileOfGorefiend !== 0)\n            writer.tag(55, WireType.Varint).int32(message.guileOfGorefiend);\n        /* int32 tundra_stalker = 56; */\n        if (message.tundraStalker !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tundraStalker);\n        /* bool howling_blast = 57; */\n        if (message.howlingBlast !== false)\n            writer.tag(57, WireType.Varint).bool(message.howlingBlast);\n        /* int32 vicious_strikes = 58; */\n        if (message.viciousStrikes !== 0)\n            writer.tag(58, WireType.Varint).int32(message.viciousStrikes);\n        /* int32 virulence = 59; */\n        if (message.virulence !== 0)\n            writer.tag(59, WireType.Varint).int32(message.virulence);\n        /* int32 anticipation = 60; */\n        if (message.anticipation !== 0)\n            writer.tag(60, WireType.Varint).int32(message.anticipation);\n        /* int32 epidemic = 61; */\n        if (message.epidemic !== 0)\n            writer.tag(61, WireType.Varint).int32(message.epidemic);\n        /* int32 morbidity = 62; */\n        if (message.morbidity !== 0)\n            writer.tag(62, WireType.Varint).int32(message.morbidity);\n        /* int32 unholy_command = 63; */\n        if (message.unholyCommand !== 0)\n            writer.tag(63, WireType.Varint).int32(message.unholyCommand);\n        /* int32 ravenous_dead = 64; */\n        if (message.ravenousDead !== 0)\n            writer.tag(64, WireType.Varint).int32(message.ravenousDead);\n        /* int32 outbreak = 65; */\n        if (message.outbreak !== 0)\n            writer.tag(65, WireType.Varint).int32(message.outbreak);\n        /* int32 necrosis = 66; */\n        if (message.necrosis !== 0)\n            writer.tag(66, WireType.Varint).int32(message.necrosis);\n        /* bool corpse_explosion = 67; */\n        if (message.corpseExplosion !== false)\n            writer.tag(67, WireType.Varint).bool(message.corpseExplosion);\n        /* int32 on_a_pale_horse = 68; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(68, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 blood_caked_blade = 69; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(69, WireType.Varint).int32(message.bloodCakedBlade);\n        /* int32 night_of_the_dead = 70; */\n        if (message.nightOfTheDead !== 0)\n            writer.tag(70, WireType.Varint).int32(message.nightOfTheDead);\n        /* bool unholy_blight = 71; */\n        if (message.unholyBlight !== false)\n            writer.tag(71, WireType.Varint).bool(message.unholyBlight);\n        /* int32 impurity = 72; */\n        if (message.impurity !== 0)\n            writer.tag(72, WireType.Varint).int32(message.impurity);\n        /* int32 dirge = 73; */\n        if (message.dirge !== 0)\n            writer.tag(73, WireType.Varint).int32(message.dirge);\n        /* int32 desecration = 74; */\n        if (message.desecration !== 0)\n            writer.tag(74, WireType.Varint).int32(message.desecration);\n        /* int32 magic_suppression = 75; */\n        if (message.magicSuppression !== 0)\n            writer.tag(75, WireType.Varint).int32(message.magicSuppression);\n        /* int32 reaping = 76; */\n        if (message.reaping !== 0)\n            writer.tag(76, WireType.Varint).int32(message.reaping);\n        /* bool master_of_ghouls = 77; */\n        if (message.masterOfGhouls !== false)\n            writer.tag(77, WireType.Varint).bool(message.masterOfGhouls);\n        /* int32 desolation = 78; */\n        if (message.desolation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.desolation);\n        /* bool anti_magic_zone = 79; */\n        if (message.antiMagicZone !== false)\n            writer.tag(79, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 80; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(80, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool ghoul_frenzy = 81; */\n        if (message.ghoulFrenzy !== false)\n            writer.tag(81, WireType.Varint).bool(message.ghoulFrenzy);\n        /* int32 crypt_fever = 82; */\n        if (message.cryptFever !== 0)\n            writer.tag(82, WireType.Varint).int32(message.cryptFever);\n        /* bool bone_shield = 83; */\n        if (message.boneShield !== false)\n            writer.tag(83, WireType.Varint).bool(message.boneShield);\n        /* int32 wandering_plague = 84; */\n        if (message.wanderingPlague !== 0)\n            writer.tag(84, WireType.Varint).int32(message.wanderingPlague);\n        /* int32 ebon_plaguebringer = 85; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(85, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* bool scourge_strike = 86; */\n        if (message.scourgeStrike !== false)\n            writer.tag(86, WireType.Varint).bool(message.scourgeStrike);\n        /* int32 rage_of_rivendare = 87; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(87, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool summon_gargoyle = 88; */\n        if (message.summonGargoyle !== false)\n            writer.tag(88, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathknightTalents\n */\nexport const DeathknightTalents = new DeathknightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight$Type extends MessageType<Deathknight> {\n    constructor() {\n        super(\"proto.Deathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Deathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Deathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight>): Deathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight): Deathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation rotation */ 1:\n                    message.rotation = Deathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Deathknight.Options options */ 3:\n                    message.options = Deathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            Deathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Options options = 3; */\n        if (message.options)\n            Deathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight\n */\nexport const Deathknight = new Deathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Rotation$Type extends MessageType<Deathknight_Rotation> {\n    constructor() {\n        super(\"proto.Deathknight.Rotation\", [\n            { no: 19, name: \"frost_rotation_type\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FrostRotationType\", Deathknight_Rotation_FrostRotationType] },\n            { no: 20, name: \"frost_custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 1, name: \"army_of_the_dead\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.ArmyOfTheDead\", Deathknight_Rotation_ArmyOfTheDead] },\n            { no: 2, name: \"use_death_and_decay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"bt_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disease_refresh_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"refresh_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"first_disease\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.FirstDisease\", Deathknight_Rotation_FirstDisease] },\n            { no: 7, name: \"death_and_decay_prio\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.DeathAndDecayPrio\", Deathknight_Rotation_DeathAndDecayPrio] },\n            { no: 8, name: \"use_empower_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"blood_rune_filler\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodRuneFiller\", Deathknight_Rotation_BloodRuneFiller] },\n            { no: 10, name: \"starting_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 11, name: \"blood_tap\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.BloodTap\", Deathknight_Rotation_BloodTap] },\n            { no: 12, name: \"oblit_delay_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 16, name: \"auto_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"desync_rotation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"bl_presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 21, name: \"presence\", kind: \"enum\", T: () => [\"proto.Deathknight.Rotation.Presence\", Deathknight_Rotation_Presence] },\n            { no: 22, name: \"hold_erw_army\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"use_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Rotation>): Deathknight_Rotation {\n        const message = { frostRotationType: 0, armyOfTheDead: 0, useDeathAndDecay: false, btGhoulFrenzy: false, diseaseRefreshDuration: 0, refreshHornOfWinter: false, firstDisease: 0, deathAndDecayPrio: 0, useEmpowerRuneWeapon: false, bloodRuneFiller: 0, startingPresence: 0, bloodTap: 0, oblitDelayDuration: 0, useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0, autoRotation: false, desyncRotation: false, blPresence: 0, presence: 0, holdErwArmy: false, useGargoyle: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Rotation): Deathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type */ 19:\n                    message.frostRotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation frost_custom_rotation */ 20:\n                    message.frostCustomRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.frostCustomRotation);\n                    break;\n                case /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead */ 1:\n                    message.armyOfTheDead = reader.int32();\n                    break;\n                case /* bool use_death_and_decay */ 2:\n                    message.useDeathAndDecay = reader.bool();\n                    break;\n                case /* bool bt_ghoul_frenzy */ 3:\n                    message.btGhoulFrenzy = reader.bool();\n                    break;\n                case /* double disease_refresh_duration */ 4:\n                    message.diseaseRefreshDuration = reader.double();\n                    break;\n                case /* bool refresh_horn_of_winter */ 5:\n                    message.refreshHornOfWinter = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.FirstDisease first_disease */ 6:\n                    message.firstDisease = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio */ 7:\n                    message.deathAndDecayPrio = reader.int32();\n                    break;\n                case /* bool use_empower_rune_weapon */ 8:\n                    message.useEmpowerRuneWeapon = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler */ 9:\n                    message.bloodRuneFiller = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence starting_presence */ 10:\n                    message.startingPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.BloodTap blood_tap */ 11:\n                    message.bloodTap = reader.int32();\n                    break;\n                case /* double oblit_delay_duration */ 12:\n                    message.oblitDelayDuration = reader.double();\n                    break;\n                case /* bool use_ams */ 13:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 14:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 15:\n                    message.avgAmsHit = reader.double();\n                    break;\n                case /* bool auto_rotation */ 16:\n                    message.autoRotation = reader.bool();\n                    break;\n                case /* bool desync_rotation */ 17:\n                    message.desyncRotation = reader.bool();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence bl_presence */ 18:\n                    message.blPresence = reader.int32();\n                    break;\n                case /* proto.Deathknight.Rotation.Presence presence */ 21:\n                    message.presence = reader.int32();\n                    break;\n                case /* bool hold_erw_army */ 22:\n                    message.holdErwArmy = reader.bool();\n                    break;\n                case /* bool use_gargoyle */ 23:\n                    message.useGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Deathknight.Rotation.FrostRotationType frost_rotation_type = 19; */\n        if (message.frostRotationType !== 0)\n            writer.tag(19, WireType.Varint).int32(message.frostRotationType);\n        /* proto.CustomRotation frost_custom_rotation = 20; */\n        if (message.frostCustomRotation)\n            CustomRotation.internalBinaryWrite(message.frostCustomRotation, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight.Rotation.ArmyOfTheDead army_of_the_dead = 1; */\n        if (message.armyOfTheDead !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armyOfTheDead);\n        /* bool use_death_and_decay = 2; */\n        if (message.useDeathAndDecay !== false)\n            writer.tag(2, WireType.Varint).bool(message.useDeathAndDecay);\n        /* bool bt_ghoul_frenzy = 3; */\n        if (message.btGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.btGhoulFrenzy);\n        /* double disease_refresh_duration = 4; */\n        if (message.diseaseRefreshDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.diseaseRefreshDuration);\n        /* bool refresh_horn_of_winter = 5; */\n        if (message.refreshHornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.refreshHornOfWinter);\n        /* proto.Deathknight.Rotation.FirstDisease first_disease = 6; */\n        if (message.firstDisease !== 0)\n            writer.tag(6, WireType.Varint).int32(message.firstDisease);\n        /* proto.Deathknight.Rotation.DeathAndDecayPrio death_and_decay_prio = 7; */\n        if (message.deathAndDecayPrio !== 0)\n            writer.tag(7, WireType.Varint).int32(message.deathAndDecayPrio);\n        /* bool use_empower_rune_weapon = 8; */\n        if (message.useEmpowerRuneWeapon !== false)\n            writer.tag(8, WireType.Varint).bool(message.useEmpowerRuneWeapon);\n        /* proto.Deathknight.Rotation.BloodRuneFiller blood_rune_filler = 9; */\n        if (message.bloodRuneFiller !== 0)\n            writer.tag(9, WireType.Varint).int32(message.bloodRuneFiller);\n        /* proto.Deathknight.Rotation.Presence starting_presence = 10; */\n        if (message.startingPresence !== 0)\n            writer.tag(10, WireType.Varint).int32(message.startingPresence);\n        /* proto.Deathknight.Rotation.BloodTap blood_tap = 11; */\n        if (message.bloodTap !== 0)\n            writer.tag(11, WireType.Varint).int32(message.bloodTap);\n        /* double oblit_delay_duration = 12; */\n        if (message.oblitDelayDuration !== 0)\n            writer.tag(12, WireType.Bit64).double(message.oblitDelayDuration);\n        /* bool use_ams = 13; */\n        if (message.useAms !== false)\n            writer.tag(13, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 14; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(14, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 15; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(15, WireType.Bit64).double(message.avgAmsHit);\n        /* bool auto_rotation = 16; */\n        if (message.autoRotation !== false)\n            writer.tag(16, WireType.Varint).bool(message.autoRotation);\n        /* bool desync_rotation = 17; */\n        if (message.desyncRotation !== false)\n            writer.tag(17, WireType.Varint).bool(message.desyncRotation);\n        /* proto.Deathknight.Rotation.Presence bl_presence = 18; */\n        if (message.blPresence !== 0)\n            writer.tag(18, WireType.Varint).int32(message.blPresence);\n        /* proto.Deathknight.Rotation.Presence presence = 21; */\n        if (message.presence !== 0)\n            writer.tag(21, WireType.Varint).int32(message.presence);\n        /* bool hold_erw_army = 22; */\n        if (message.holdErwArmy !== false)\n            writer.tag(22, WireType.Varint).bool(message.holdErwArmy);\n        /* bool use_gargoyle = 23; */\n        if (message.useGargoyle !== false)\n            writer.tag(23, WireType.Varint).bool(message.useGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Rotation\n */\nexport const Deathknight_Rotation = new Deathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Deathknight_Options$Type extends MessageType<Deathknight_Options> {\n    constructor() {\n        super(\"proto.Deathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"precast_ghoul_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"precast_horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<Deathknight_Options>): Deathknight_Options {\n        const message = { startingRunicPower: 0, petUptime: 0, precastGhoulFrenzy: false, precastHornOfWinter: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Deathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Deathknight_Options): Deathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                case /* bool precast_ghoul_frenzy */ 3:\n                    message.precastGhoulFrenzy = reader.bool();\n                    break;\n                case /* bool precast_horn_of_winter */ 4:\n                    message.precastHornOfWinter = reader.bool();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 5:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Deathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        /* bool precast_ghoul_frenzy = 3; */\n        if (message.precastGhoulFrenzy !== false)\n            writer.tag(3, WireType.Varint).bool(message.precastGhoulFrenzy);\n        /* bool precast_horn_of_winter = 4; */\n        if (message.precastHornOfWinter !== false)\n            writer.tag(4, WireType.Varint).bool(message.precastHornOfWinter);\n        /* proto.RaidTarget unholy_frenzy_target = 5; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Deathknight.Options\n */\nexport const Deathknight_Options = new Deathknight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight$Type extends MessageType<TankDeathknight> {\n    constructor() {\n        super(\"proto.TankDeathknight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => TankDeathknight_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DeathknightTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => TankDeathknight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight>): TankDeathknight {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight): TankDeathknight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation rotation */ 1:\n                    message.rotation = TankDeathknight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DeathknightTalents talents */ 2:\n                    message.talents = DeathknightTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.TankDeathknight.Options options */ 3:\n                    message.options = TankDeathknight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation rotation = 1; */\n        if (message.rotation)\n            TankDeathknight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DeathknightTalents talents = 2; */\n        if (message.talents)\n            DeathknightTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight.Options options = 3; */\n        if (message.options)\n            TankDeathknight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight\n */\nexport const TankDeathknight = new TankDeathknight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Rotation$Type extends MessageType<TankDeathknight_Rotation> {\n    constructor() {\n        super(\"proto.TankDeathknight.Rotation\", [\n            { no: 4, name: \"presence\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Presence\", TankDeathknight_Rotation_Presence] },\n            { no: 1, name: \"opener\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.Opener\", TankDeathknight_Rotation_Opener] },\n            { no: 2, name: \"optimization_setting\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.OptimizationSetting\", TankDeathknight_Rotation_OptimizationSetting] },\n            { no: 3, name: \"blood_spell\", kind: \"enum\", T: () => [\"proto.TankDeathknight.Rotation.BloodSpell\", TankDeathknight_Rotation_BloodSpell] }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Rotation>): TankDeathknight_Rotation {\n        const message = { presence: 0, opener: 0, optimizationSetting: 0, bloodSpell: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Rotation): TankDeathknight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TankDeathknight.Rotation.Presence presence */ 4:\n                    message.presence = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.Opener opener */ 1:\n                    message.opener = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting */ 2:\n                    message.optimizationSetting = reader.int32();\n                    break;\n                case /* proto.TankDeathknight.Rotation.BloodSpell blood_spell */ 3:\n                    message.bloodSpell = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TankDeathknight.Rotation.Presence presence = 4; */\n        if (message.presence !== 0)\n            writer.tag(4, WireType.Varint).int32(message.presence);\n        /* proto.TankDeathknight.Rotation.Opener opener = 1; */\n        if (message.opener !== 0)\n            writer.tag(1, WireType.Varint).int32(message.opener);\n        /* proto.TankDeathknight.Rotation.OptimizationSetting optimization_setting = 2; */\n        if (message.optimizationSetting !== 0)\n            writer.tag(2, WireType.Varint).int32(message.optimizationSetting);\n        /* proto.TankDeathknight.Rotation.BloodSpell blood_spell = 3; */\n        if (message.bloodSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bloodSpell);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Rotation\n */\nexport const TankDeathknight_Rotation = new TankDeathknight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TankDeathknight_Options$Type extends MessageType<TankDeathknight_Options> {\n    constructor() {\n        super(\"proto.TankDeathknight.Options\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"unholy_frenzy_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<TankDeathknight_Options>): TankDeathknight_Options {\n        const message = { startingRunicPower: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TankDeathknight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TankDeathknight_Options): TankDeathknight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_target */ 2:\n                    message.unholyFrenzyTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TankDeathknight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* proto.RaidTarget unholy_frenzy_target = 2; */\n        if (message.unholyFrenzyTarget)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TankDeathknight.Options\n */\nexport const TankDeathknight_Options = new TankDeathknight_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 improved_heroic_strike = 1;\n     */\n    improvedHeroicStrike: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 2;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_rend = 3;\n     */\n    improvedRend: number;\n    /**\n     * @generated from protobuf field: int32 improved_charge = 4;\n     */\n    improvedCharge: number;\n    /**\n     * @generated from protobuf field: int32 iron_will = 5;\n     */\n    ironWill: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 6;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_overpower = 7;\n     */\n    improvedOverpower: number;\n    /**\n     * @generated from protobuf field: bool anger_management = 8;\n     */\n    angerManagement: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 9;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 10;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 11;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 12;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: int32 poleaxe_specialization = 13;\n     */\n    poleaxeSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 14;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 15;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 sword_specialization = 16;\n     */\n    swordSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 17;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 18;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 trauma = 19;\n     */\n    trauma: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 20;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: bool mortal_strike = 21;\n     */\n    mortalStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 strength_of_arms = 22;\n     */\n    strengthOfArms: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 23;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 24;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mortal_strike = 25;\n     */\n    improvedMortalStrike: number;\n    /**\n     * @generated from protobuf field: int32 unrelenting_assault = 26;\n     */\n    unrelentingAssault: number;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 27;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: bool endless_rage = 28;\n     */\n    endlessRage: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 29;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 30;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool bladestorm = 31;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 armored_to_the_teeth = 32;\n     */\n    armoredToTheTeeth: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 33;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 34;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 improved_demoralizing_shout = 35;\n     */\n    improvedDemoralizingShout: number;\n    /**\n     * @generated from protobuf field: int32 unbridled_wrath = 36;\n     */\n    unbridledWrath: number;\n    /**\n     * @generated from protobuf field: int32 improved_cleave = 37;\n     */\n    improvedCleave: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 38;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_craze = 39;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 commanding_presence = 40;\n     */\n    commandingPresence: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 41;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_execute = 42;\n     */\n    improvedExecute: number;\n    /**\n     * @generated from protobuf field: int32 enrage = 43;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 precision = 44;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 45;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_intercept = 46;\n     */\n    improvedIntercept: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_rage = 47;\n     */\n    improvedBerserkerRage: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 48;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 49;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: bool bloodthirst = 50;\n     */\n    bloodthirst: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_whirlwind = 51;\n     */\n    improvedWhirlwind: number;\n    /**\n     * @generated from protobuf field: int32 furious_attacks = 52;\n     */\n    furiousAttacks: number;\n    /**\n     * @generated from protobuf field: int32 improved_berserker_stance = 53;\n     */\n    improvedBerserkerStance: number;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 54;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 55;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 56;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 unending_fury = 57;\n     */\n    unendingFury: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 58;\n     */\n    titansGrip: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 improved_bloodrage = 59;\n     */\n    improvedBloodrage: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 60;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_thunder_clap = 61;\n     */\n    improvedThunderClap: number;\n    /**\n     * @generated from protobuf field: int32 incite = 62;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 63;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 64;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 65;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 66;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 67;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_spell_reflection = 68;\n     */\n    improvedSpellReflection: number;\n    /**\n     * @generated from protobuf field: int32 improved_disarm = 69;\n     */\n    improvedDisarm: number;\n    /**\n     * @generated from protobuf field: int32 puncture = 70;\n     */\n    puncture: number;\n    /**\n     * @generated from protobuf field: int32 improved_disciplines = 71;\n     */\n    improvedDisciplines: number;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 72;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 gag_order = 73;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 74;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_defensive_stance = 75;\n     */\n    improvedDefensiveStance: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 76;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_rage = 77;\n     */\n    focusedRage: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 78;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 79;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 80;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: bool devastate = 81;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 critical_block = 82;\n     */\n    criticalBlock: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 83;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: int32 damage_shield = 84;\n     */\n    damageShield: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 85;\n     */\n    shockwave: boolean;\n}\n/**\n * @generated from protobuf message proto.Warrior\n */\nexport interface Warrior {\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation rotation = 1;\n     */\n    rotation?: Warrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.Warrior.Options options = 3;\n     */\n    options?: Warrior_Options;\n}\n/**\n * @generated from protobuf message proto.Warrior.Rotation\n */\nexport interface Warrior_Rotation {\n    /**\n     * @generated from protobuf field: bool use_cleave = 1;\n     */\n    useCleave: boolean;\n    /**\n     * @generated from protobuf field: bool use_rend = 2;\n     */\n    useRend: boolean;\n    /**\n     * @generated from protobuf field: bool use_ms = 18;\n     */\n    useMs: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam = 3;\n     */\n    useSlam: boolean;\n    /**\n     * @generated from protobuf field: bool prioritize_ww = 4;\n     */\n    prioritizeWw: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.SunderArmor sunderArmor = 5;\n     */\n    sunderArmor: Warrior_Rotation_SunderArmor;\n    /**\n     * @generated from protobuf field: bool maintain_demo_shout = 6;\n     */\n    maintainDemoShout: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_thunder_clap = 7;\n     */\n    maintainThunderClap: boolean;\n    /**\n     * Queue HS or Cleave when over this threshold.\n     *\n     * @generated from protobuf field: double hs_rage_threshold = 8;\n     */\n    hsRageThreshold: number;\n    /**\n     * Use Mortal Strike when over this threshold.\n     *\n     * @generated from protobuf field: double ms_rage_threshold = 9;\n     */\n    msRageThreshold: number;\n    /**\n     * Use Rend when below this threshold.\n     *\n     * @generated from protobuf field: double rend_rage_threshold_below = 10;\n     */\n    rendRageThresholdBelow: number;\n    /**\n     * Use Slam when over this threshold.\n     *\n     * @generated from protobuf field: double slam_rage_threshold = 11;\n     */\n    slamRageThreshold: number;\n    /**\n     * Refresh Rend when remaining duration is less than this threshold.\n     *\n     * @generated from protobuf field: double rend_cd_threshold = 12;\n     */\n    rendCdThreshold: number;\n    /**\n     * @generated from protobuf field: bool use_hs_during_execute = 13;\n     */\n    useHsDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_bt_during_execute = 14;\n     */\n    useBtDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool spam_execute = 15;\n     */\n    spamExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_ww_during_execute = 16;\n     */\n    useWwDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool use_slam_over_execute = 17;\n     */\n    useSlamOverExecute: boolean;\n    /**\n     * @generated from protobuf field: proto.Warrior.Rotation.StanceOption stance_option = 19;\n     */\n    stanceOption: Warrior_Rotation_StanceOption;\n    /**\n     * @generated from protobuf field: double rend_health_threshold_above = 20;\n     */\n    rendHealthThresholdAbove: number;\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.SunderArmor\n */\nexport enum Warrior_Rotation_SunderArmor {\n    /**\n     * @generated from protobuf enum value: SunderArmorNone = 0;\n     */\n    SunderArmorNone = 0,\n    /**\n     * @generated from protobuf enum value: SunderArmorHelpStack = 1;\n     */\n    SunderArmorHelpStack = 1,\n    /**\n     * @generated from protobuf enum value: SunderArmorMaintain = 2;\n     */\n    SunderArmorMaintain = 2\n}\n/**\n * @generated from protobuf enum proto.Warrior.Rotation.StanceOption\n */\nexport enum Warrior_Rotation_StanceOption {\n    /**\n     * @generated from protobuf enum value: DefaultStance = 0;\n     */\n    DefaultStance = 0,\n    /**\n     * @generated from protobuf enum value: BattleStance = 1;\n     */\n    BattleStance = 1,\n    /**\n     * @generated from protobuf enum value: BerserkerStance = 2;\n     */\n    BerserkerStance = 2\n}\n/**\n * @generated from protobuf message proto.Warrior.Options\n */\nexport interface Warrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 4;\n     */\n    useShatteringThrow: boolean;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 3;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool munch = 5;\n     */\n    munch: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation rotation = 1;\n     */\n    rotation?: ProtectionWarrior_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarriorTalents talents = 2;\n     */\n    talents?: WarriorTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 3;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1;\n     */\n    demoShoutChoice: ProtectionWarrior_Rotation_DemoShoutChoice;\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2;\n     */\n    thunderClapChoice: ProtectionWarrior_Rotation_ThunderClapChoice;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: double hs_rage_threshold = 4;\n     */\n    hsRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool prio_sslam_on_shield_block = 5;\n     */\n    prioSslamOnShieldBlock: boolean;\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.DemoShoutChoice\n */\nexport enum ProtectionWarrior_Rotation_DemoShoutChoice {\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceNone = 0;\n     */\n    DemoShoutChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceMaintain = 1;\n     */\n    DemoShoutChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: DemoShoutChoiceFiller = 2;\n     */\n    DemoShoutChoiceFiller = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.ThunderClapChoice\n */\nexport enum ProtectionWarrior_Rotation_ThunderClapChoice {\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceNone = 0;\n     */\n    ThunderClapChoiceNone = 0,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceMaintain = 1;\n     */\n    ThunderClapChoiceMaintain = 1,\n    /**\n     * @generated from protobuf enum value: ThunderClapChoiceOnCD = 2;\n     */\n    ThunderClapChoiceOnCD = 2\n}\n/**\n * @generated from protobuf enum proto.ProtectionWarrior.Rotation.SpellOption\n */\nexport enum ProtectionWarrior_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Revenge = 1;\n     */\n    Revenge = 1,\n    /**\n     * @generated from protobuf enum value: ShieldSlam = 2;\n     */\n    ShieldSlam = 2,\n    /**\n     * @generated from protobuf enum value: Devastate = 3;\n     */\n    Devastate = 3,\n    /**\n     * @generated from protobuf enum value: SunderArmor = 4;\n     */\n    SunderArmor = 4,\n    /**\n     * @generated from protobuf enum value: Shout = 5;\n     */\n    Shout = 5,\n    /**\n     * @generated from protobuf enum value: DemoralizingShout = 6;\n     */\n    DemoralizingShout = 6,\n    /**\n     * @generated from protobuf enum value: ThunderClap = 7;\n     */\n    ThunderClap = 7,\n    /**\n     * @generated from protobuf enum value: MortalStrike = 8;\n     */\n    MortalStrike = 8,\n    /**\n     * @generated from protobuf enum value: ConcussionBlow = 9;\n     */\n    ConcussionBlow = 9,\n    /**\n     * @generated from protobuf enum value: Shockwave = 10;\n     */\n    Shockwave = 10\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 4;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool precast_shout = 5;\n     */\n    precastShout: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_t2 = 6;\n     */\n    precastShoutT2: boolean;\n    /**\n     * @generated from protobuf field: bool precast_shout_sapphire = 7;\n     */\n    precastShoutSapphire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 8;\n     */\n    useShatteringThrow: boolean;\n    /**\n     * @generated from protobuf field: bool munch = 9;\n     */\n    munch: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarbaricInsults = 43420;\n     */\n    GlyphOfBarbaricInsults = 43420,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlocking = 43425;\n     */\n    GlyphOfBlocking = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43412;\n     */\n    GlyphOfBloodthirst = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnragedRegeneration = 45794;\n     */\n    GlyphOfEnragedRegeneration = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfExecution = 43416;\n     */\n    GlyphOfExecution = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfHamstring = 43417;\n     */\n    GlyphOfHamstring = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicStrike = 43418;\n     */\n    GlyphOfHeroicStrike = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLastStand = 43426;\n     */\n    GlyphOfLastStand = 43426,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfRending = 43423;\n     */\n    GlyphOfRending = 43423,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfTaunt = 43429;\n     */\n    GlyphOfTaunt = 43429,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigilance = 45793;\n     */\n    GlyphOfVigilance = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfWhirlwind = 43432;\n     */\n    GlyphOfWhirlwind = 43432\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodrage = 43396;\n     */\n    GlyphOfBloodrage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfCharge = 43397;\n     */\n    GlyphOfCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfMockingBlow = 43398;\n     */\n    GlyphOfMockingBlow = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"improved_heroic_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_rend\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_charge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"iron_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_overpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"anger_management\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"poleaxe_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"sword_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"trauma\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"mortal_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"strength_of_arms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"improved_mortal_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"unrelenting_assault\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"endless_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"armored_to_the_teeth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"improved_demoralizing_shout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"unbridled_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_cleave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"commanding_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"improved_execute\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_intercept\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_berserker_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"bloodthirst\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_whirlwind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"furious_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"improved_berserker_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"unending_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_bloodrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"improved_thunder_clap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_spell_reflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_disarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"puncture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"improved_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"improved_defensive_stance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"focused_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"critical_block\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"damage_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { improvedHeroicStrike: 0, deflection: 0, improvedRend: 0, improvedCharge: 0, ironWill: 0, tacticalMastery: 0, improvedOverpower: 0, angerManagement: false, impale: 0, deepWounds: 0, twoHandedWeaponSpecialization: 0, tasteForBlood: 0, poleaxeSpecialization: 0, sweepingStrikes: false, maceSpecialization: 0, swordSpecialization: 0, weaponMastery: 0, improvedHamstring: 0, trauma: 0, secondWind: 0, mortalStrike: false, strengthOfArms: 0, improvedSlam: 0, juggernaut: false, improvedMortalStrike: 0, unrelentingAssault: 0, suddenDeath: 0, endlessRage: false, bloodFrenzy: 0, wreckingCrew: 0, bladestorm: false, armoredToTheTeeth: 0, boomingVoice: 0, cruelty: 0, improvedDemoralizingShout: 0, unbridledWrath: 0, improvedCleave: 0, piercingHowl: false, bloodCraze: 0, commandingPresence: 0, dualWieldSpecialization: 0, improvedExecute: 0, enrage: 0, precision: 0, deathWish: false, improvedIntercept: 0, improvedBerserkerRage: 0, flurry: 0, intensifyRage: 0, bloodthirst: false, improvedWhirlwind: 0, furiousAttacks: 0, improvedBerserkerStance: 0, heroicFury: false, rampage: false, bloodsurge: 0, unendingFury: 0, titansGrip: false, improvedBloodrage: 0, shieldSpecialization: 0, improvedThunderClap: 0, incite: 0, anticipation: 0, lastStand: false, improvedRevenge: 0, shieldMastery: 0, toughness: 0, improvedSpellReflection: 0, improvedDisarm: 0, puncture: 0, improvedDisciplines: 0, concussionBlow: false, gagOrder: 0, oneHandedWeaponSpecialization: 0, improvedDefensiveStance: 0, vigilance: false, focusedRage: 0, vitality: 0, safeguard: 0, warbringer: false, devastate: false, criticalBlock: 0, swordAndBoard: 0, damageShield: 0, shockwave: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_heroic_strike */ 1:\n                    message.improvedHeroicStrike = reader.int32();\n                    break;\n                case /* int32 deflection */ 2:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 improved_rend */ 3:\n                    message.improvedRend = reader.int32();\n                    break;\n                case /* int32 improved_charge */ 4:\n                    message.improvedCharge = reader.int32();\n                    break;\n                case /* int32 iron_will */ 5:\n                    message.ironWill = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 6:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 improved_overpower */ 7:\n                    message.improvedOverpower = reader.int32();\n                    break;\n                case /* bool anger_management */ 8:\n                    message.angerManagement = reader.bool();\n                    break;\n                case /* int32 impale */ 9:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 10:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 11:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 12:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* int32 poleaxe_specialization */ 13:\n                    message.poleaxeSpecialization = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 14:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 mace_specialization */ 15:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* int32 sword_specialization */ 16:\n                    message.swordSpecialization = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 17:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 18:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 trauma */ 19:\n                    message.trauma = reader.int32();\n                    break;\n                case /* int32 second_wind */ 20:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* bool mortal_strike */ 21:\n                    message.mortalStrike = reader.bool();\n                    break;\n                case /* int32 strength_of_arms */ 22:\n                    message.strengthOfArms = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 23:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool juggernaut */ 24:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 improved_mortal_strike */ 25:\n                    message.improvedMortalStrike = reader.int32();\n                    break;\n                case /* int32 unrelenting_assault */ 26:\n                    message.unrelentingAssault = reader.int32();\n                    break;\n                case /* int32 sudden_death */ 27:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* bool endless_rage */ 28:\n                    message.endlessRage = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 29:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 30:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool bladestorm */ 31:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 armored_to_the_teeth */ 32:\n                    message.armoredToTheTeeth = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 33:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 cruelty */ 34:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 improved_demoralizing_shout */ 35:\n                    message.improvedDemoralizingShout = reader.int32();\n                    break;\n                case /* int32 unbridled_wrath */ 36:\n                    message.unbridledWrath = reader.int32();\n                    break;\n                case /* int32 improved_cleave */ 37:\n                    message.improvedCleave = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 38:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 39:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 commanding_presence */ 40:\n                    message.commandingPresence = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 41:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_execute */ 42:\n                    message.improvedExecute = reader.int32();\n                    break;\n                case /* int32 enrage */ 43:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 precision */ 44:\n                    message.precision = reader.int32();\n                    break;\n                case /* bool death_wish */ 45:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 improved_intercept */ 46:\n                    message.improvedIntercept = reader.int32();\n                    break;\n                case /* int32 improved_berserker_rage */ 47:\n                    message.improvedBerserkerRage = reader.int32();\n                    break;\n                case /* int32 flurry */ 48:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 49:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* bool bloodthirst */ 50:\n                    message.bloodthirst = reader.bool();\n                    break;\n                case /* int32 improved_whirlwind */ 51:\n                    message.improvedWhirlwind = reader.int32();\n                    break;\n                case /* int32 furious_attacks */ 52:\n                    message.furiousAttacks = reader.int32();\n                    break;\n                case /* int32 improved_berserker_stance */ 53:\n                    message.improvedBerserkerStance = reader.int32();\n                    break;\n                case /* bool heroic_fury */ 54:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool rampage */ 55:\n                    message.rampage = reader.bool();\n                    break;\n                case /* int32 bloodsurge */ 56:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 unending_fury */ 57:\n                    message.unendingFury = reader.int32();\n                    break;\n                case /* bool titans_grip */ 58:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* int32 improved_bloodrage */ 59:\n                    message.improvedBloodrage = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 60:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_thunder_clap */ 61:\n                    message.improvedThunderClap = reader.int32();\n                    break;\n                case /* int32 incite */ 62:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 anticipation */ 63:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool last_stand */ 64:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 65:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 66:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 toughness */ 67:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_spell_reflection */ 68:\n                    message.improvedSpellReflection = reader.int32();\n                    break;\n                case /* int32 improved_disarm */ 69:\n                    message.improvedDisarm = reader.int32();\n                    break;\n                case /* int32 puncture */ 70:\n                    message.puncture = reader.int32();\n                    break;\n                case /* int32 improved_disciplines */ 71:\n                    message.improvedDisciplines = reader.int32();\n                    break;\n                case /* bool concussion_blow */ 72:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 gag_order */ 73:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 74:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_defensive_stance */ 75:\n                    message.improvedDefensiveStance = reader.int32();\n                    break;\n                case /* bool vigilance */ 76:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 focused_rage */ 77:\n                    message.focusedRage = reader.int32();\n                    break;\n                case /* int32 vitality */ 78:\n                    message.vitality = reader.int32();\n                    break;\n                case /* int32 safeguard */ 79:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* bool warbringer */ 80:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* bool devastate */ 81:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 critical_block */ 82:\n                    message.criticalBlock = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 83:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* int32 damage_shield */ 84:\n                    message.damageShield = reader.int32();\n                    break;\n                case /* bool shockwave */ 85:\n                    message.shockwave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_heroic_strike = 1; */\n        if (message.improvedHeroicStrike !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedHeroicStrike);\n        /* int32 deflection = 2; */\n        if (message.deflection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.deflection);\n        /* int32 improved_rend = 3; */\n        if (message.improvedRend !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedRend);\n        /* int32 improved_charge = 4; */\n        if (message.improvedCharge !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCharge);\n        /* int32 iron_will = 5; */\n        if (message.ironWill !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ironWill);\n        /* int32 tactical_mastery = 6; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 improved_overpower = 7; */\n        if (message.improvedOverpower !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedOverpower);\n        /* bool anger_management = 8; */\n        if (message.angerManagement !== false)\n            writer.tag(8, WireType.Varint).bool(message.angerManagement);\n        /* int32 impale = 9; */\n        if (message.impale !== 0)\n            writer.tag(9, WireType.Varint).int32(message.impale);\n        /* int32 deep_wounds = 10; */\n        if (message.deepWounds !== 0)\n            writer.tag(10, WireType.Varint).int32(message.deepWounds);\n        /* int32 two_handed_weapon_specialization = 11; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(11, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* int32 taste_for_blood = 12; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(12, WireType.Varint).int32(message.tasteForBlood);\n        /* int32 poleaxe_specialization = 13; */\n        if (message.poleaxeSpecialization !== 0)\n            writer.tag(13, WireType.Varint).int32(message.poleaxeSpecialization);\n        /* bool sweeping_strikes = 14; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(14, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 mace_specialization = 15; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(15, WireType.Varint).int32(message.maceSpecialization);\n        /* int32 sword_specialization = 16; */\n        if (message.swordSpecialization !== 0)\n            writer.tag(16, WireType.Varint).int32(message.swordSpecialization);\n        /* int32 weapon_mastery = 17; */\n        if (message.weaponMastery !== 0)\n            writer.tag(17, WireType.Varint).int32(message.weaponMastery);\n        /* int32 improved_hamstring = 18; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 trauma = 19; */\n        if (message.trauma !== 0)\n            writer.tag(19, WireType.Varint).int32(message.trauma);\n        /* int32 second_wind = 20; */\n        if (message.secondWind !== 0)\n            writer.tag(20, WireType.Varint).int32(message.secondWind);\n        /* bool mortal_strike = 21; */\n        if (message.mortalStrike !== false)\n            writer.tag(21, WireType.Varint).bool(message.mortalStrike);\n        /* int32 strength_of_arms = 22; */\n        if (message.strengthOfArms !== 0)\n            writer.tag(22, WireType.Varint).int32(message.strengthOfArms);\n        /* int32 improved_slam = 23; */\n        if (message.improvedSlam !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSlam);\n        /* bool juggernaut = 24; */\n        if (message.juggernaut !== false)\n            writer.tag(24, WireType.Varint).bool(message.juggernaut);\n        /* int32 improved_mortal_strike = 25; */\n        if (message.improvedMortalStrike !== 0)\n            writer.tag(25, WireType.Varint).int32(message.improvedMortalStrike);\n        /* int32 unrelenting_assault = 26; */\n        if (message.unrelentingAssault !== 0)\n            writer.tag(26, WireType.Varint).int32(message.unrelentingAssault);\n        /* int32 sudden_death = 27; */\n        if (message.suddenDeath !== 0)\n            writer.tag(27, WireType.Varint).int32(message.suddenDeath);\n        /* bool endless_rage = 28; */\n        if (message.endlessRage !== false)\n            writer.tag(28, WireType.Varint).bool(message.endlessRage);\n        /* int32 blood_frenzy = 29; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 wrecking_crew = 30; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wreckingCrew);\n        /* bool bladestorm = 31; */\n        if (message.bladestorm !== false)\n            writer.tag(31, WireType.Varint).bool(message.bladestorm);\n        /* int32 armored_to_the_teeth = 32; */\n        if (message.armoredToTheTeeth !== 0)\n            writer.tag(32, WireType.Varint).int32(message.armoredToTheTeeth);\n        /* int32 booming_voice = 33; */\n        if (message.boomingVoice !== 0)\n            writer.tag(33, WireType.Varint).int32(message.boomingVoice);\n        /* int32 cruelty = 34; */\n        if (message.cruelty !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cruelty);\n        /* int32 improved_demoralizing_shout = 35; */\n        if (message.improvedDemoralizingShout !== 0)\n            writer.tag(35, WireType.Varint).int32(message.improvedDemoralizingShout);\n        /* int32 unbridled_wrath = 36; */\n        if (message.unbridledWrath !== 0)\n            writer.tag(36, WireType.Varint).int32(message.unbridledWrath);\n        /* int32 improved_cleave = 37; */\n        if (message.improvedCleave !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedCleave);\n        /* bool piercing_howl = 38; */\n        if (message.piercingHowl !== false)\n            writer.tag(38, WireType.Varint).bool(message.piercingHowl);\n        /* int32 blood_craze = 39; */\n        if (message.bloodCraze !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodCraze);\n        /* int32 commanding_presence = 40; */\n        if (message.commandingPresence !== 0)\n            writer.tag(40, WireType.Varint).int32(message.commandingPresence);\n        /* int32 dual_wield_specialization = 41; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_execute = 42; */\n        if (message.improvedExecute !== 0)\n            writer.tag(42, WireType.Varint).int32(message.improvedExecute);\n        /* int32 enrage = 43; */\n        if (message.enrage !== 0)\n            writer.tag(43, WireType.Varint).int32(message.enrage);\n        /* int32 precision = 44; */\n        if (message.precision !== 0)\n            writer.tag(44, WireType.Varint).int32(message.precision);\n        /* bool death_wish = 45; */\n        if (message.deathWish !== false)\n            writer.tag(45, WireType.Varint).bool(message.deathWish);\n        /* int32 improved_intercept = 46; */\n        if (message.improvedIntercept !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedIntercept);\n        /* int32 improved_berserker_rage = 47; */\n        if (message.improvedBerserkerRage !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedBerserkerRage);\n        /* int32 flurry = 48; */\n        if (message.flurry !== 0)\n            writer.tag(48, WireType.Varint).int32(message.flurry);\n        /* int32 intensify_rage = 49; */\n        if (message.intensifyRage !== 0)\n            writer.tag(49, WireType.Varint).int32(message.intensifyRage);\n        /* bool bloodthirst = 50; */\n        if (message.bloodthirst !== false)\n            writer.tag(50, WireType.Varint).bool(message.bloodthirst);\n        /* int32 improved_whirlwind = 51; */\n        if (message.improvedWhirlwind !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedWhirlwind);\n        /* int32 furious_attacks = 52; */\n        if (message.furiousAttacks !== 0)\n            writer.tag(52, WireType.Varint).int32(message.furiousAttacks);\n        /* int32 improved_berserker_stance = 53; */\n        if (message.improvedBerserkerStance !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedBerserkerStance);\n        /* bool heroic_fury = 54; */\n        if (message.heroicFury !== false)\n            writer.tag(54, WireType.Varint).bool(message.heroicFury);\n        /* bool rampage = 55; */\n        if (message.rampage !== false)\n            writer.tag(55, WireType.Varint).bool(message.rampage);\n        /* int32 bloodsurge = 56; */\n        if (message.bloodsurge !== 0)\n            writer.tag(56, WireType.Varint).int32(message.bloodsurge);\n        /* int32 unending_fury = 57; */\n        if (message.unendingFury !== 0)\n            writer.tag(57, WireType.Varint).int32(message.unendingFury);\n        /* bool titans_grip = 58; */\n        if (message.titansGrip !== false)\n            writer.tag(58, WireType.Varint).bool(message.titansGrip);\n        /* int32 improved_bloodrage = 59; */\n        if (message.improvedBloodrage !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedBloodrage);\n        /* int32 shield_specialization = 60; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(60, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 improved_thunder_clap = 61; */\n        if (message.improvedThunderClap !== 0)\n            writer.tag(61, WireType.Varint).int32(message.improvedThunderClap);\n        /* int32 incite = 62; */\n        if (message.incite !== 0)\n            writer.tag(62, WireType.Varint).int32(message.incite);\n        /* int32 anticipation = 63; */\n        if (message.anticipation !== 0)\n            writer.tag(63, WireType.Varint).int32(message.anticipation);\n        /* bool last_stand = 64; */\n        if (message.lastStand !== false)\n            writer.tag(64, WireType.Varint).bool(message.lastStand);\n        /* int32 improved_revenge = 65; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(65, WireType.Varint).int32(message.improvedRevenge);\n        /* int32 shield_mastery = 66; */\n        if (message.shieldMastery !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shieldMastery);\n        /* int32 toughness = 67; */\n        if (message.toughness !== 0)\n            writer.tag(67, WireType.Varint).int32(message.toughness);\n        /* int32 improved_spell_reflection = 68; */\n        if (message.improvedSpellReflection !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedSpellReflection);\n        /* int32 improved_disarm = 69; */\n        if (message.improvedDisarm !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedDisarm);\n        /* int32 puncture = 70; */\n        if (message.puncture !== 0)\n            writer.tag(70, WireType.Varint).int32(message.puncture);\n        /* int32 improved_disciplines = 71; */\n        if (message.improvedDisciplines !== 0)\n            writer.tag(71, WireType.Varint).int32(message.improvedDisciplines);\n        /* bool concussion_blow = 72; */\n        if (message.concussionBlow !== false)\n            writer.tag(72, WireType.Varint).bool(message.concussionBlow);\n        /* int32 gag_order = 73; */\n        if (message.gagOrder !== 0)\n            writer.tag(73, WireType.Varint).int32(message.gagOrder);\n        /* int32 one_handed_weapon_specialization = 74; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(74, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 improved_defensive_stance = 75; */\n        if (message.improvedDefensiveStance !== 0)\n            writer.tag(75, WireType.Varint).int32(message.improvedDefensiveStance);\n        /* bool vigilance = 76; */\n        if (message.vigilance !== false)\n            writer.tag(76, WireType.Varint).bool(message.vigilance);\n        /* int32 focused_rage = 77; */\n        if (message.focusedRage !== 0)\n            writer.tag(77, WireType.Varint).int32(message.focusedRage);\n        /* int32 vitality = 78; */\n        if (message.vitality !== 0)\n            writer.tag(78, WireType.Varint).int32(message.vitality);\n        /* int32 safeguard = 79; */\n        if (message.safeguard !== 0)\n            writer.tag(79, WireType.Varint).int32(message.safeguard);\n        /* bool warbringer = 80; */\n        if (message.warbringer !== false)\n            writer.tag(80, WireType.Varint).bool(message.warbringer);\n        /* bool devastate = 81; */\n        if (message.devastate !== false)\n            writer.tag(81, WireType.Varint).bool(message.devastate);\n        /* int32 critical_block = 82; */\n        if (message.criticalBlock !== 0)\n            writer.tag(82, WireType.Varint).int32(message.criticalBlock);\n        /* int32 sword_and_board = 83; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(83, WireType.Varint).int32(message.swordAndBoard);\n        /* int32 damage_shield = 84; */\n        if (message.damageShield !== 0)\n            writer.tag(84, WireType.Varint).int32(message.damageShield);\n        /* bool shockwave = 85; */\n        if (message.shockwave !== false)\n            writer.tag(85, WireType.Varint).bool(message.shockwave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior$Type extends MessageType<Warrior> {\n    constructor() {\n        super(\"proto.Warrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior>): Warrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior): Warrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warrior.Rotation rotation */ 1:\n                    message.rotation = Warrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warrior.Options options */ 3:\n                    message.options = Warrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warrior.Rotation rotation = 1; */\n        if (message.rotation)\n            Warrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior.Options options = 3; */\n        if (message.options)\n            Warrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior\n */\nexport const Warrior = new Warrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Rotation$Type extends MessageType<Warrior_Rotation> {\n    constructor() {\n        super(\"proto.Warrior.Rotation\", [\n            { no: 1, name: \"use_cleave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_rend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"use_ms\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_slam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"prioritize_ww\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"sunderArmor\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.SunderArmor\", Warrior_Rotation_SunderArmor] },\n            { no: 6, name: \"maintain_demo_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"maintain_thunder_clap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"ms_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"rend_rage_threshold_below\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"slam_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"rend_cd_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"use_hs_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"use_bt_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"spam_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"use_ww_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"use_slam_over_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stance_option\", kind: \"enum\", T: () => [\"proto.Warrior.Rotation.StanceOption\", Warrior_Rotation_StanceOption] },\n            { no: 20, name: \"rend_health_threshold_above\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Rotation>): Warrior_Rotation {\n        const message = { useCleave: false, useRend: false, useMs: false, useSlam: false, prioritizeWw: false, sunderArmor: 0, maintainDemoShout: false, maintainThunderClap: false, hsRageThreshold: 0, msRageThreshold: 0, rendRageThresholdBelow: 0, slamRageThreshold: 0, rendCdThreshold: 0, useHsDuringExecute: false, useBtDuringExecute: false, spamExecute: false, useWwDuringExecute: false, useSlamOverExecute: false, stanceOption: 0, rendHealthThresholdAbove: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Rotation): Warrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_cleave */ 1:\n                    message.useCleave = reader.bool();\n                    break;\n                case /* bool use_rend */ 2:\n                    message.useRend = reader.bool();\n                    break;\n                case /* bool use_ms */ 18:\n                    message.useMs = reader.bool();\n                    break;\n                case /* bool use_slam */ 3:\n                    message.useSlam = reader.bool();\n                    break;\n                case /* bool prioritize_ww */ 4:\n                    message.prioritizeWw = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.SunderArmor sunderArmor */ 5:\n                    message.sunderArmor = reader.int32();\n                    break;\n                case /* bool maintain_demo_shout */ 6:\n                    message.maintainDemoShout = reader.bool();\n                    break;\n                case /* bool maintain_thunder_clap */ 7:\n                    message.maintainThunderClap = reader.bool();\n                    break;\n                case /* double hs_rage_threshold */ 8:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* double ms_rage_threshold */ 9:\n                    message.msRageThreshold = reader.double();\n                    break;\n                case /* double rend_rage_threshold_below */ 10:\n                    message.rendRageThresholdBelow = reader.double();\n                    break;\n                case /* double slam_rage_threshold */ 11:\n                    message.slamRageThreshold = reader.double();\n                    break;\n                case /* double rend_cd_threshold */ 12:\n                    message.rendCdThreshold = reader.double();\n                    break;\n                case /* bool use_hs_during_execute */ 13:\n                    message.useHsDuringExecute = reader.bool();\n                    break;\n                case /* bool use_bt_during_execute */ 14:\n                    message.useBtDuringExecute = reader.bool();\n                    break;\n                case /* bool spam_execute */ 15:\n                    message.spamExecute = reader.bool();\n                    break;\n                case /* bool use_ww_during_execute */ 16:\n                    message.useWwDuringExecute = reader.bool();\n                    break;\n                case /* bool use_slam_over_execute */ 17:\n                    message.useSlamOverExecute = reader.bool();\n                    break;\n                case /* proto.Warrior.Rotation.StanceOption stance_option */ 19:\n                    message.stanceOption = reader.int32();\n                    break;\n                case /* double rend_health_threshold_above */ 20:\n                    message.rendHealthThresholdAbove = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_cleave = 1; */\n        if (message.useCleave !== false)\n            writer.tag(1, WireType.Varint).bool(message.useCleave);\n        /* bool use_rend = 2; */\n        if (message.useRend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRend);\n        /* bool use_ms = 18; */\n        if (message.useMs !== false)\n            writer.tag(18, WireType.Varint).bool(message.useMs);\n        /* bool use_slam = 3; */\n        if (message.useSlam !== false)\n            writer.tag(3, WireType.Varint).bool(message.useSlam);\n        /* bool prioritize_ww = 4; */\n        if (message.prioritizeWw !== false)\n            writer.tag(4, WireType.Varint).bool(message.prioritizeWw);\n        /* proto.Warrior.Rotation.SunderArmor sunderArmor = 5; */\n        if (message.sunderArmor !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sunderArmor);\n        /* bool maintain_demo_shout = 6; */\n        if (message.maintainDemoShout !== false)\n            writer.tag(6, WireType.Varint).bool(message.maintainDemoShout);\n        /* bool maintain_thunder_clap = 7; */\n        if (message.maintainThunderClap !== false)\n            writer.tag(7, WireType.Varint).bool(message.maintainThunderClap);\n        /* double hs_rage_threshold = 8; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.hsRageThreshold);\n        /* double ms_rage_threshold = 9; */\n        if (message.msRageThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.msRageThreshold);\n        /* double rend_rage_threshold_below = 10; */\n        if (message.rendRageThresholdBelow !== 0)\n            writer.tag(10, WireType.Bit64).double(message.rendRageThresholdBelow);\n        /* double slam_rage_threshold = 11; */\n        if (message.slamRageThreshold !== 0)\n            writer.tag(11, WireType.Bit64).double(message.slamRageThreshold);\n        /* double rend_cd_threshold = 12; */\n        if (message.rendCdThreshold !== 0)\n            writer.tag(12, WireType.Bit64).double(message.rendCdThreshold);\n        /* bool use_hs_during_execute = 13; */\n        if (message.useHsDuringExecute !== false)\n            writer.tag(13, WireType.Varint).bool(message.useHsDuringExecute);\n        /* bool use_bt_during_execute = 14; */\n        if (message.useBtDuringExecute !== false)\n            writer.tag(14, WireType.Varint).bool(message.useBtDuringExecute);\n        /* bool spam_execute = 15; */\n        if (message.spamExecute !== false)\n            writer.tag(15, WireType.Varint).bool(message.spamExecute);\n        /* bool use_ww_during_execute = 16; */\n        if (message.useWwDuringExecute !== false)\n            writer.tag(16, WireType.Varint).bool(message.useWwDuringExecute);\n        /* bool use_slam_over_execute = 17; */\n        if (message.useSlamOverExecute !== false)\n            writer.tag(17, WireType.Varint).bool(message.useSlamOverExecute);\n        /* proto.Warrior.Rotation.StanceOption stance_option = 19; */\n        if (message.stanceOption !== 0)\n            writer.tag(19, WireType.Varint).int32(message.stanceOption);\n        /* double rend_health_threshold_above = 20; */\n        if (message.rendHealthThresholdAbove !== 0)\n            writer.tag(20, WireType.Bit64).double(message.rendHealthThresholdAbove);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Rotation\n */\nexport const Warrior_Rotation = new Warrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warrior_Options$Type extends MessageType<Warrior_Options> {\n    constructor() {\n        super(\"proto.Warrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 5, name: \"munch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warrior_Options>): Warrior_Options {\n        const message = { startingRage: 0, useRecklessness: false, useShatteringThrow: false, shout: 0, munch: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warrior_Options): Warrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool use_shattering_throw */ 4:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                case /* proto.WarriorShout shout */ 3:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool munch */ 5:\n                    message.munch = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool use_shattering_throw = 4; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(4, WireType.Varint).bool(message.useShatteringThrow);\n        /* proto.WarriorShout shout = 3; */\n        if (message.shout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.shout);\n        /* bool munch = 5; */\n        if (message.munch !== false)\n            writer.tag(5, WireType.Varint).bool(message.munch);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warrior.Options\n */\nexport const Warrior_Options = new Warrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionWarrior_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarriorTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation rotation */ 1:\n                    message.rotation = ProtectionWarrior_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarriorTalents talents */ 2:\n                    message.talents = WarriorTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionWarrior.Options options */ 3:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionWarrior_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarriorTalents talents = 2; */\n        if (message.talents)\n            WarriorTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior.Options options = 3; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", [\n            { no: 1, name: \"demo_shout_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.DemoShoutChoice\", ProtectionWarrior_Rotation_DemoShoutChoice] },\n            { no: 2, name: \"thunder_clap_choice\", kind: \"enum\", T: () => [\"proto.ProtectionWarrior.Rotation.ThunderClapChoice\", ProtectionWarrior_Rotation_ThunderClapChoice] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"hs_rage_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"prio_sslam_on_shield_block\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = { demoShoutChoice: 0, thunderClapChoice: 0, hsRageThreshold: 0, prioSslamOnShieldBlock: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice */ 1:\n                    message.demoShoutChoice = reader.int32();\n                    break;\n                case /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice */ 2:\n                    message.thunderClapChoice = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double hs_rage_threshold */ 4:\n                    message.hsRageThreshold = reader.double();\n                    break;\n                case /* bool prio_sslam_on_shield_block */ 5:\n                    message.prioSslamOnShieldBlock = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Rotation.DemoShoutChoice demo_shout_choice = 1; */\n        if (message.demoShoutChoice !== 0)\n            writer.tag(1, WireType.Varint).int32(message.demoShoutChoice);\n        /* proto.ProtectionWarrior.Rotation.ThunderClapChoice thunder_clap_choice = 2; */\n        if (message.thunderClapChoice !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderClapChoice);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double hs_rage_threshold = 4; */\n        if (message.hsRageThreshold !== 0)\n            writer.tag(4, WireType.Bit64).double(message.hsRageThreshold);\n        /* bool prio_sslam_on_shield_block = 5; */\n        if (message.prioSslamOnShieldBlock !== false)\n            writer.tag(5, WireType.Varint).bool(message.prioSslamOnShieldBlock);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 5, name: \"precast_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"precast_shout_t2\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"precast_shout_sapphire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"munch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = { startingRage: 0, shout: 0, precastShout: false, precastShoutT2: false, precastShoutSapphire: false, useShatteringThrow: false, munch: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* proto.WarriorShout shout */ 4:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool precast_shout */ 5:\n                    message.precastShout = reader.bool();\n                    break;\n                case /* bool precast_shout_t2 */ 6:\n                    message.precastShoutT2 = reader.bool();\n                    break;\n                case /* bool precast_shout_sapphire */ 7:\n                    message.precastShoutSapphire = reader.bool();\n                    break;\n                case /* bool use_shattering_throw */ 8:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                case /* bool munch */ 9:\n                    message.munch = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* proto.WarriorShout shout = 4; */\n        if (message.shout !== 0)\n            writer.tag(4, WireType.Varint).int32(message.shout);\n        /* bool precast_shout = 5; */\n        if (message.precastShout !== false)\n            writer.tag(5, WireType.Varint).bool(message.precastShout);\n        /* bool precast_shout_t2 = 6; */\n        if (message.precastShoutT2 !== false)\n            writer.tag(6, WireType.Varint).bool(message.precastShoutT2);\n        /* bool precast_shout_sapphire = 7; */\n        if (message.precastShoutSapphire !== false)\n            writer.tag(7, WireType.Varint).bool(message.precastShoutSapphire);\n        /* bool use_shattering_throw = 8; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(8, WireType.Varint).bool(message.useShatteringThrow);\n        /* bool munch = 9; */\n        if (message.munch !== false)\n            writer.tag(9, WireType.Varint).bool(message.munch);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 improved_curse_of_agony = 1;\n     */\n    improvedCurseOfAgony: number;\n    /**\n     * @generated from protobuf field: int32 suppression = 2;\n     */\n    suppression: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 improved_curse_of_weakness = 4;\n     */\n    improvedCurseOfWeakness: number;\n    /**\n     * @generated from protobuf field: int32 improved_drain_soul = 5;\n     */\n    improvedDrainSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 6;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 7;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 fel_concentration = 9;\n     */\n    felConcentration: number;\n    /**\n     * @generated from protobuf field: bool amplify_curse = 10;\n     */\n    amplifyCurse: boolean;\n    /**\n     * @generated from protobuf field: int32 grim_reach = 11;\n     */\n    grimReach: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 12;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: int32 empowered_corruption = 13;\n     */\n    empoweredCorruption: number;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 14;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: bool siphon_life = 15;\n     */\n    siphonLife: boolean;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 16;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_felhunter = 17;\n     */\n    improvedFelhunter: number;\n    /**\n     * @generated from protobuf field: int32 shadow_mastery = 18;\n     */\n    shadowMastery: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 19;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 contagion = 20;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: bool dark_pact = 21;\n     */\n    darkPact: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 22;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: int32 malediction = 23;\n     */\n    malediction: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 24;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: bool unstable_affliction = 25;\n     */\n    unstableAffliction: boolean;\n    /**\n     * @generated from protobuf field: bool pandemic = 26;\n     */\n    pandemic: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 27;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: bool haunt = 28;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 improved_healthstone = 29;\n     */\n    improvedHealthstone: number;\n    /**\n     * @generated from protobuf field: int32 improved_imp = 30;\n     */\n    improvedImp: number;\n    /**\n     * @generated from protobuf field: int32 demonic_embrace = 31;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 32;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 33;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 demonic_brutality = 34;\n     */\n    demonicBrutality: number;\n    /**\n     * @generated from protobuf field: int32 fel_vitality = 35;\n     */\n    felVitality: number;\n    /**\n     * @generated from protobuf field: int32 improved_sayaad = 36;\n     */\n    improvedSayaad: number;\n    /**\n     * @generated from protobuf field: bool soul_link = 37;\n     */\n    soulLink: boolean;\n    /**\n     * @generated from protobuf field: bool fel_domination = 38;\n     */\n    felDomination: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 39;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 unholy_power = 40;\n     */\n    unholyPower: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 41;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: bool mana_feed = 42;\n     */\n    manaFeed: boolean;\n    /**\n     * @generated from protobuf field: int32 master_conjuror = 43;\n     */\n    masterConjuror: number;\n    /**\n     * @generated from protobuf field: int32 master_demonologist = 44;\n     */\n    masterDemonologist: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 45;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: int32 demonic_resilience = 46;\n     */\n    demonicResilience: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 47;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_knowledge = 48;\n     */\n    demonicKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 demonic_tactics = 49;\n     */\n    demonicTactics: number;\n    /**\n     * @generated from protobuf field: int32 decimation = 50;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 improved_demonic_tactics = 51;\n     */\n    improvedDemonicTactics: number;\n    /**\n     * @generated from protobuf field: bool summon_felguard = 52;\n     */\n    summonFelguard: boolean;\n    /**\n     * @generated from protobuf field: int32 nemesis = 53;\n     */\n    nemesis: number;\n    /**\n     * @generated from protobuf field: int32 demonic_pact = 54;\n     */\n    demonicPact: number;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 55;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 improved_shadow_bolt = 56;\n     */\n    improvedShadowBolt: number;\n    /**\n     * @generated from protobuf field: int32 bane = 57;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 58;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 molten_skin = 59;\n     */\n    moltenSkin: number;\n    /**\n     * @generated from protobuf field: int32 cataclysm = 60;\n     */\n    cataclysm: number;\n    /**\n     * @generated from protobuf field: int32 demonic_power = 61;\n     */\n    demonicPower: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 62;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 ruin = 63;\n     */\n    ruin: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 64;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: int32 destructive_reach = 65;\n     */\n    destructiveReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 66;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 67;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 68;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: bool devastation = 69;\n     */\n    devastation: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 70;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 71;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: bool conflagrate = 72;\n     */\n    conflagrate: boolean;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 73;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 pyroclasm = 74;\n     */\n    pyroclasm: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 75;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_leech = 76;\n     */\n    improvedSoulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 77;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 78;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 79;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 80;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 81;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.Warlock\n */\nexport interface Warlock {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation rotation = 1;\n     */\n    rotation?: Warlock_Rotation;\n    /**\n     * @generated from protobuf field: proto.WarlockTalents talents = 2;\n     */\n    talents?: WarlockTalents;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options options = 3;\n     */\n    options?: Warlock_Options;\n}\n/**\n * @generated from protobuf message proto.Warlock.Rotation\n */\nexport interface Warlock_Rotation {\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Preset preset = 1;\n     */\n    preset: Warlock_Rotation_Preset;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Curse curse = 2;\n     */\n    curse: Warlock_Rotation_Curse;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.PrimarySpell primary_spell = 3;\n     */\n    primarySpell: Warlock_Rotation_PrimarySpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SecondaryDot secondary_dot = 4;\n     */\n    secondaryDot: Warlock_Rotation_SecondaryDot;\n    /**\n     * @generated from protobuf field: bool corruption = 5;\n     */\n    corruption: boolean;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 6;\n     */\n    detonateSeed: boolean;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.SpecSpell spec_spell = 7;\n     */\n    specSpell: Warlock_Rotation_SpecSpell;\n    /**\n     * @generated from protobuf field: proto.Warlock.Rotation.Type type = 8;\n     */\n    type: Warlock_Rotation_Type;\n    /**\n     * @generated from protobuf field: bool use_infernal = 9;\n     */\n    useInfernal: boolean;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Preset\n */\nexport enum Warlock_Rotation_Preset {\n    /**\n     * @generated from protobuf enum value: Manual = 0;\n     */\n    Manual = 0,\n    /**\n     * @generated from protobuf enum value: Automatic = 1;\n     */\n    Automatic = 1\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Type\n */\nexport enum Warlock_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Affliction = 0;\n     */\n    Affliction = 0,\n    /**\n     * @generated from protobuf enum value: Demonology = 1;\n     */\n    Demonology = 1,\n    /**\n     * @generated from protobuf enum value: Destruction = 2;\n     */\n    Destruction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.PrimarySpell\n */\nexport enum Warlock_Rotation_PrimarySpell {\n    /**\n     * @generated from protobuf enum value: UnknownSpell = 0;\n     */\n    UnknownSpell = 0,\n    /**\n     * @generated from protobuf enum value: ShadowBolt = 1;\n     */\n    ShadowBolt = 1,\n    /**\n     * @generated from protobuf enum value: Incinerate = 2;\n     */\n    Incinerate = 2,\n    /**\n     * @generated from protobuf enum value: Seed = 3;\n     */\n    Seed = 3\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.Curse\n */\nexport enum Warlock_Rotation_Curse {\n    /**\n     * @generated from protobuf enum value: NoCurse = 0;\n     */\n    NoCurse = 0,\n    /**\n     * @generated from protobuf enum value: Elements = 1;\n     */\n    Elements = 1,\n    /**\n     * @generated from protobuf enum value: Weakness = 2;\n     */\n    Weakness = 2,\n    /**\n     * @generated from protobuf enum value: Doom = 3;\n     */\n    Doom = 3,\n    /**\n     * @generated from protobuf enum value: Agony = 4;\n     */\n    Agony = 4,\n    /**\n     * @generated from protobuf enum value: Tongues = 5;\n     */\n    Tongues = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SecondaryDot\n */\nexport enum Warlock_Rotation_SecondaryDot {\n    /**\n     * @generated from protobuf enum value: NoSecondaryDot = 0;\n     */\n    NoSecondaryDot = 0,\n    /**\n     * @generated from protobuf enum value: Immolate = 1;\n     */\n    Immolate = 1,\n    /**\n     * @generated from protobuf enum value: UnstableAffliction = 2;\n     */\n    UnstableAffliction = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Rotation.SpecSpell\n */\nexport enum Warlock_Rotation_SpecSpell {\n    /**\n     * @generated from protobuf enum value: NoSpecSpell = 0;\n     */\n    NoSpecSpell = 0,\n    /**\n     * @generated from protobuf enum value: ChaosBolt = 1;\n     */\n    ChaosBolt = 1,\n    /**\n     * @generated from protobuf enum value: Haunt = 2;\n     */\n    Haunt = 2\n}\n/**\n * @generated from protobuf message proto.Warlock.Options\n */\nexport interface Warlock_Options {\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Armor armor = 1;\n     */\n    armor: Warlock_Options_Armor;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.Summon summon = 2;\n     */\n    summon: Warlock_Options_Summon;\n    /**\n     * @generated from protobuf field: proto.Warlock.Options.WeaponImbue weaponImbue = 3;\n     */\n    weaponImbue: Warlock_Options_WeaponImbue;\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Summon\n */\nexport enum Warlock_Options_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.Armor\n */\nexport enum Warlock_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: FelArmor = 1;\n     */\n    FelArmor = 1,\n    /**\n     * @generated from protobuf enum value: DemonArmor = 2;\n     */\n    DemonArmor = 2\n}\n/**\n * @generated from protobuf enum proto.Warlock.Options.WeaponImbue\n */\nexport enum Warlock_Options_WeaponImbue {\n    /**\n     * @generated from protobuf enum value: NoWeaponImbue = 0;\n     */\n    NoWeaponImbue = 0,\n    /**\n     * @generated from protobuf enum value: GrandSpellstone = 1;\n     */\n    GrandSpellstone = 1,\n    /**\n     * @generated from protobuf enum value: GrandFirestone = 2;\n     */\n    GrandFirestone = 2\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfAgony = 42456;\n     */\n    GlyphOfCurseOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 42457;\n     */\n    GlyphOfDeathCoil = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfQuickDecay = 50077;\n     */\n    GlyphOfQuickDecay = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfSearingPain = 42466;\n     */\n    GlyphOfSearingPain = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSiphonLife = 42469;\n     */\n    GlyphOfSiphonLife = 42469,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfSuccubus = 42471;\n     */\n    GlyphOfSuccubus = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhausion = 43392;\n     */\n    GlyphOfCurseOfExhausion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfSubjugateDemon = 43393;\n     */\n    GlyphOfSubjugateDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfKilrogg = 43391;\n     */\n    GlyphOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfSouls = 43394;\n     */\n    GlyphOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"improved_curse_of_agony\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_curse_of_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_drain_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fel_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"amplify_curse\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"grim_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"empowered_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"siphon_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_felhunter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"shadow_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"dark_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"malediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"unstable_affliction\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"pandemic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"improved_healthstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"demonic_brutality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"fel_vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_sayaad\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"soul_link\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"fel_domination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"unholy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"mana_feed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"master_conjuror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"master_demonologist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"demonic_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"demonic_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"improved_demonic_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"summon_felguard\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nemesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"demonic_pact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_shadow_bolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"molten_skin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"cataclysm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"demonic_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ruin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"destructive_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"devastation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"conflagrate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"pyroclasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { improvedCurseOfAgony: 0, suppression: 0, improvedCorruption: 0, improvedCurseOfWeakness: 0, improvedDrainSoul: 0, improvedLifeTap: 0, soulSiphon: 0, improvedFear: 0, felConcentration: 0, amplifyCurse: false, grimReach: 0, nightfall: 0, empoweredCorruption: 0, shadowEmbrace: 0, siphonLife: false, curseOfExhaustion: false, improvedFelhunter: 0, shadowMastery: 0, eradication: 0, contagion: 0, darkPact: false, improvedHowlOfTerror: 0, malediction: 0, deathsEmbrace: 0, unstableAffliction: false, pandemic: false, everlastingAffliction: 0, haunt: false, improvedHealthstone: 0, improvedImp: 0, demonicEmbrace: 0, felSynergy: 0, improvedHealthFunnel: 0, demonicBrutality: 0, felVitality: 0, improvedSayaad: 0, soulLink: false, felDomination: false, demonicAegis: 0, unholyPower: 0, masterSummoner: 0, manaFeed: false, masterConjuror: 0, masterDemonologist: 0, moltenCore: 0, demonicResilience: 0, demonicEmpowerment: false, demonicKnowledge: 0, demonicTactics: 0, decimation: 0, improvedDemonicTactics: 0, summonFelguard: false, nemesis: 0, demonicPact: 0, metamorphosis: false, improvedShadowBolt: 0, bane: 0, aftermath: 0, moltenSkin: 0, cataclysm: 0, demonicPower: 0, shadowburn: false, ruin: 0, intensity: 0, destructiveReach: 0, improvedSearingPain: 0, backlash: 0, improvedImmolate: 0, devastation: false, netherProtection: 0, emberstorm: 0, conflagrate: false, soulLeech: 0, pyroclasm: 0, shadowAndFlame: 0, improvedSoulLeech: 0, backdraft: 0, shadowfury: false, empoweredImp: 0, fireAndBrimstone: 0, chaosBolt: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_curse_of_agony */ 1:\n                    message.improvedCurseOfAgony = reader.int32();\n                    break;\n                case /* int32 suppression */ 2:\n                    message.suppression = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 improved_curse_of_weakness */ 4:\n                    message.improvedCurseOfWeakness = reader.int32();\n                    break;\n                case /* int32 improved_drain_soul */ 5:\n                    message.improvedDrainSoul = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 6:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 7:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 fel_concentration */ 9:\n                    message.felConcentration = reader.int32();\n                    break;\n                case /* bool amplify_curse */ 10:\n                    message.amplifyCurse = reader.bool();\n                    break;\n                case /* int32 grim_reach */ 11:\n                    message.grimReach = reader.int32();\n                    break;\n                case /* int32 nightfall */ 12:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* int32 empowered_corruption */ 13:\n                    message.empoweredCorruption = reader.int32();\n                    break;\n                case /* int32 shadow_embrace */ 14:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* bool siphon_life */ 15:\n                    message.siphonLife = reader.bool();\n                    break;\n                case /* bool curse_of_exhaustion */ 16:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_felhunter */ 17:\n                    message.improvedFelhunter = reader.int32();\n                    break;\n                case /* int32 shadow_mastery */ 18:\n                    message.shadowMastery = reader.int32();\n                    break;\n                case /* int32 eradication */ 19:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 contagion */ 20:\n                    message.contagion = reader.int32();\n                    break;\n                case /* bool dark_pact */ 21:\n                    message.darkPact = reader.bool();\n                    break;\n                case /* int32 improved_howl_of_terror */ 22:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* int32 malediction */ 23:\n                    message.malediction = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 24:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* bool unstable_affliction */ 25:\n                    message.unstableAffliction = reader.bool();\n                    break;\n                case /* bool pandemic */ 26:\n                    message.pandemic = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 27:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* bool haunt */ 28:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 improved_healthstone */ 29:\n                    message.improvedHealthstone = reader.int32();\n                    break;\n                case /* int32 improved_imp */ 30:\n                    message.improvedImp = reader.int32();\n                    break;\n                case /* int32 demonic_embrace */ 31:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 32:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 improved_health_funnel */ 33:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 demonic_brutality */ 34:\n                    message.demonicBrutality = reader.int32();\n                    break;\n                case /* int32 fel_vitality */ 35:\n                    message.felVitality = reader.int32();\n                    break;\n                case /* int32 improved_sayaad */ 36:\n                    message.improvedSayaad = reader.int32();\n                    break;\n                case /* bool soul_link */ 37:\n                    message.soulLink = reader.bool();\n                    break;\n                case /* bool fel_domination */ 38:\n                    message.felDomination = reader.bool();\n                    break;\n                case /* int32 demonic_aegis */ 39:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 unholy_power */ 40:\n                    message.unholyPower = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 41:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* bool mana_feed */ 42:\n                    message.manaFeed = reader.bool();\n                    break;\n                case /* int32 master_conjuror */ 43:\n                    message.masterConjuror = reader.int32();\n                    break;\n                case /* int32 master_demonologist */ 44:\n                    message.masterDemonologist = reader.int32();\n                    break;\n                case /* int32 molten_core */ 45:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* int32 demonic_resilience */ 46:\n                    message.demonicResilience = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 47:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 demonic_knowledge */ 48:\n                    message.demonicKnowledge = reader.int32();\n                    break;\n                case /* int32 demonic_tactics */ 49:\n                    message.demonicTactics = reader.int32();\n                    break;\n                case /* int32 decimation */ 50:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 improved_demonic_tactics */ 51:\n                    message.improvedDemonicTactics = reader.int32();\n                    break;\n                case /* bool summon_felguard */ 52:\n                    message.summonFelguard = reader.bool();\n                    break;\n                case /* int32 nemesis */ 53:\n                    message.nemesis = reader.int32();\n                    break;\n                case /* int32 demonic_pact */ 54:\n                    message.demonicPact = reader.int32();\n                    break;\n                case /* bool metamorphosis */ 55:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 improved_shadow_bolt */ 56:\n                    message.improvedShadowBolt = reader.int32();\n                    break;\n                case /* int32 bane */ 57:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 aftermath */ 58:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 molten_skin */ 59:\n                    message.moltenSkin = reader.int32();\n                    break;\n                case /* int32 cataclysm */ 60:\n                    message.cataclysm = reader.int32();\n                    break;\n                case /* int32 demonic_power */ 61:\n                    message.demonicPower = reader.int32();\n                    break;\n                case /* bool shadowburn */ 62:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 ruin */ 63:\n                    message.ruin = reader.int32();\n                    break;\n                case /* int32 intensity */ 64:\n                    message.intensity = reader.int32();\n                    break;\n                case /* int32 destructive_reach */ 65:\n                    message.destructiveReach = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 66:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 backlash */ 67:\n                    message.backlash = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 68:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* bool devastation */ 69:\n                    message.devastation = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 70:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 71:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* bool conflagrate */ 72:\n                    message.conflagrate = reader.bool();\n                    break;\n                case /* int32 soul_leech */ 73:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 pyroclasm */ 74:\n                    message.pyroclasm = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 75:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_soul_leech */ 76:\n                    message.improvedSoulLeech = reader.int32();\n                    break;\n                case /* int32 backdraft */ 77:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowfury */ 78:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 empowered_imp */ 79:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* int32 fire_and_brimstone */ 80:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool chaos_bolt */ 81:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_curse_of_agony = 1; */\n        if (message.improvedCurseOfAgony !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedCurseOfAgony);\n        /* int32 suppression = 2; */\n        if (message.suppression !== 0)\n            writer.tag(2, WireType.Varint).int32(message.suppression);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 improved_curse_of_weakness = 4; */\n        if (message.improvedCurseOfWeakness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedCurseOfWeakness);\n        /* int32 improved_drain_soul = 5; */\n        if (message.improvedDrainSoul !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedDrainSoul);\n        /* int32 improved_life_tap = 6; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 soul_siphon = 7; */\n        if (message.soulSiphon !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulSiphon);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 fel_concentration = 9; */\n        if (message.felConcentration !== 0)\n            writer.tag(9, WireType.Varint).int32(message.felConcentration);\n        /* bool amplify_curse = 10; */\n        if (message.amplifyCurse !== false)\n            writer.tag(10, WireType.Varint).bool(message.amplifyCurse);\n        /* int32 grim_reach = 11; */\n        if (message.grimReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.grimReach);\n        /* int32 nightfall = 12; */\n        if (message.nightfall !== 0)\n            writer.tag(12, WireType.Varint).int32(message.nightfall);\n        /* int32 empowered_corruption = 13; */\n        if (message.empoweredCorruption !== 0)\n            writer.tag(13, WireType.Varint).int32(message.empoweredCorruption);\n        /* int32 shadow_embrace = 14; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(14, WireType.Varint).int32(message.shadowEmbrace);\n        /* bool siphon_life = 15; */\n        if (message.siphonLife !== false)\n            writer.tag(15, WireType.Varint).bool(message.siphonLife);\n        /* bool curse_of_exhaustion = 16; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(16, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_felhunter = 17; */\n        if (message.improvedFelhunter !== 0)\n            writer.tag(17, WireType.Varint).int32(message.improvedFelhunter);\n        /* int32 shadow_mastery = 18; */\n        if (message.shadowMastery !== 0)\n            writer.tag(18, WireType.Varint).int32(message.shadowMastery);\n        /* int32 eradication = 19; */\n        if (message.eradication !== 0)\n            writer.tag(19, WireType.Varint).int32(message.eradication);\n        /* int32 contagion = 20; */\n        if (message.contagion !== 0)\n            writer.tag(20, WireType.Varint).int32(message.contagion);\n        /* bool dark_pact = 21; */\n        if (message.darkPact !== false)\n            writer.tag(21, WireType.Varint).bool(message.darkPact);\n        /* int32 improved_howl_of_terror = 22; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* int32 malediction = 23; */\n        if (message.malediction !== 0)\n            writer.tag(23, WireType.Varint).int32(message.malediction);\n        /* int32 deaths_embrace = 24; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(24, WireType.Varint).int32(message.deathsEmbrace);\n        /* bool unstable_affliction = 25; */\n        if (message.unstableAffliction !== false)\n            writer.tag(25, WireType.Varint).bool(message.unstableAffliction);\n        /* bool pandemic = 26; */\n        if (message.pandemic !== false)\n            writer.tag(26, WireType.Varint).bool(message.pandemic);\n        /* int32 everlasting_affliction = 27; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(27, WireType.Varint).int32(message.everlastingAffliction);\n        /* bool haunt = 28; */\n        if (message.haunt !== false)\n            writer.tag(28, WireType.Varint).bool(message.haunt);\n        /* int32 improved_healthstone = 29; */\n        if (message.improvedHealthstone !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedHealthstone);\n        /* int32 improved_imp = 30; */\n        if (message.improvedImp !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedImp);\n        /* int32 demonic_embrace = 31; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(31, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 fel_synergy = 32; */\n        if (message.felSynergy !== 0)\n            writer.tag(32, WireType.Varint).int32(message.felSynergy);\n        /* int32 improved_health_funnel = 33; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 demonic_brutality = 34; */\n        if (message.demonicBrutality !== 0)\n            writer.tag(34, WireType.Varint).int32(message.demonicBrutality);\n        /* int32 fel_vitality = 35; */\n        if (message.felVitality !== 0)\n            writer.tag(35, WireType.Varint).int32(message.felVitality);\n        /* int32 improved_sayaad = 36; */\n        if (message.improvedSayaad !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedSayaad);\n        /* bool soul_link = 37; */\n        if (message.soulLink !== false)\n            writer.tag(37, WireType.Varint).bool(message.soulLink);\n        /* bool fel_domination = 38; */\n        if (message.felDomination !== false)\n            writer.tag(38, WireType.Varint).bool(message.felDomination);\n        /* int32 demonic_aegis = 39; */\n        if (message.demonicAegis !== 0)\n            writer.tag(39, WireType.Varint).int32(message.demonicAegis);\n        /* int32 unholy_power = 40; */\n        if (message.unholyPower !== 0)\n            writer.tag(40, WireType.Varint).int32(message.unholyPower);\n        /* int32 master_summoner = 41; */\n        if (message.masterSummoner !== 0)\n            writer.tag(41, WireType.Varint).int32(message.masterSummoner);\n        /* bool mana_feed = 42; */\n        if (message.manaFeed !== false)\n            writer.tag(42, WireType.Varint).bool(message.manaFeed);\n        /* int32 master_conjuror = 43; */\n        if (message.masterConjuror !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterConjuror);\n        /* int32 master_demonologist = 44; */\n        if (message.masterDemonologist !== 0)\n            writer.tag(44, WireType.Varint).int32(message.masterDemonologist);\n        /* int32 molten_core = 45; */\n        if (message.moltenCore !== 0)\n            writer.tag(45, WireType.Varint).int32(message.moltenCore);\n        /* int32 demonic_resilience = 46; */\n        if (message.demonicResilience !== 0)\n            writer.tag(46, WireType.Varint).int32(message.demonicResilience);\n        /* bool demonic_empowerment = 47; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(47, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 demonic_knowledge = 48; */\n        if (message.demonicKnowledge !== 0)\n            writer.tag(48, WireType.Varint).int32(message.demonicKnowledge);\n        /* int32 demonic_tactics = 49; */\n        if (message.demonicTactics !== 0)\n            writer.tag(49, WireType.Varint).int32(message.demonicTactics);\n        /* int32 decimation = 50; */\n        if (message.decimation !== 0)\n            writer.tag(50, WireType.Varint).int32(message.decimation);\n        /* int32 improved_demonic_tactics = 51; */\n        if (message.improvedDemonicTactics !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedDemonicTactics);\n        /* bool summon_felguard = 52; */\n        if (message.summonFelguard !== false)\n            writer.tag(52, WireType.Varint).bool(message.summonFelguard);\n        /* int32 nemesis = 53; */\n        if (message.nemesis !== 0)\n            writer.tag(53, WireType.Varint).int32(message.nemesis);\n        /* int32 demonic_pact = 54; */\n        if (message.demonicPact !== 0)\n            writer.tag(54, WireType.Varint).int32(message.demonicPact);\n        /* bool metamorphosis = 55; */\n        if (message.metamorphosis !== false)\n            writer.tag(55, WireType.Varint).bool(message.metamorphosis);\n        /* int32 improved_shadow_bolt = 56; */\n        if (message.improvedShadowBolt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedShadowBolt);\n        /* int32 bane = 57; */\n        if (message.bane !== 0)\n            writer.tag(57, WireType.Varint).int32(message.bane);\n        /* int32 aftermath = 58; */\n        if (message.aftermath !== 0)\n            writer.tag(58, WireType.Varint).int32(message.aftermath);\n        /* int32 molten_skin = 59; */\n        if (message.moltenSkin !== 0)\n            writer.tag(59, WireType.Varint).int32(message.moltenSkin);\n        /* int32 cataclysm = 60; */\n        if (message.cataclysm !== 0)\n            writer.tag(60, WireType.Varint).int32(message.cataclysm);\n        /* int32 demonic_power = 61; */\n        if (message.demonicPower !== 0)\n            writer.tag(61, WireType.Varint).int32(message.demonicPower);\n        /* bool shadowburn = 62; */\n        if (message.shadowburn !== false)\n            writer.tag(62, WireType.Varint).bool(message.shadowburn);\n        /* int32 ruin = 63; */\n        if (message.ruin !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ruin);\n        /* int32 intensity = 64; */\n        if (message.intensity !== 0)\n            writer.tag(64, WireType.Varint).int32(message.intensity);\n        /* int32 destructive_reach = 65; */\n        if (message.destructiveReach !== 0)\n            writer.tag(65, WireType.Varint).int32(message.destructiveReach);\n        /* int32 improved_searing_pain = 66; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(66, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 backlash = 67; */\n        if (message.backlash !== 0)\n            writer.tag(67, WireType.Varint).int32(message.backlash);\n        /* int32 improved_immolate = 68; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedImmolate);\n        /* bool devastation = 69; */\n        if (message.devastation !== false)\n            writer.tag(69, WireType.Varint).bool(message.devastation);\n        /* int32 nether_protection = 70; */\n        if (message.netherProtection !== 0)\n            writer.tag(70, WireType.Varint).int32(message.netherProtection);\n        /* int32 emberstorm = 71; */\n        if (message.emberstorm !== 0)\n            writer.tag(71, WireType.Varint).int32(message.emberstorm);\n        /* bool conflagrate = 72; */\n        if (message.conflagrate !== false)\n            writer.tag(72, WireType.Varint).bool(message.conflagrate);\n        /* int32 soul_leech = 73; */\n        if (message.soulLeech !== 0)\n            writer.tag(73, WireType.Varint).int32(message.soulLeech);\n        /* int32 pyroclasm = 74; */\n        if (message.pyroclasm !== 0)\n            writer.tag(74, WireType.Varint).int32(message.pyroclasm);\n        /* int32 shadow_and_flame = 75; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_soul_leech = 76; */\n        if (message.improvedSoulLeech !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedSoulLeech);\n        /* int32 backdraft = 77; */\n        if (message.backdraft !== 0)\n            writer.tag(77, WireType.Varint).int32(message.backdraft);\n        /* bool shadowfury = 78; */\n        if (message.shadowfury !== false)\n            writer.tag(78, WireType.Varint).bool(message.shadowfury);\n        /* int32 empowered_imp = 79; */\n        if (message.empoweredImp !== 0)\n            writer.tag(79, WireType.Varint).int32(message.empoweredImp);\n        /* int32 fire_and_brimstone = 80; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(80, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool chaos_bolt = 81; */\n        if (message.chaosBolt !== false)\n            writer.tag(81, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock$Type extends MessageType<Warlock> {\n    constructor() {\n        super(\"proto.Warlock\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Warlock_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => WarlockTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Warlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock>): Warlock {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock): Warlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation rotation */ 1:\n                    message.rotation = Warlock_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.WarlockTalents talents */ 2:\n                    message.talents = WarlockTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Warlock.Options options */ 3:\n                    message.options = Warlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation rotation = 1; */\n        if (message.rotation)\n            Warlock_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.WarlockTalents talents = 2; */\n        if (message.talents)\n            WarlockTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock.Options options = 3; */\n        if (message.options)\n            Warlock_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock\n */\nexport const Warlock = new Warlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Rotation$Type extends MessageType<Warlock_Rotation> {\n    constructor() {\n        super(\"proto.Warlock.Rotation\", [\n            { no: 1, name: \"preset\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Preset\", Warlock_Rotation_Preset] },\n            { no: 2, name: \"curse\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Curse\", Warlock_Rotation_Curse] },\n            { no: 3, name: \"primary_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.PrimarySpell\", Warlock_Rotation_PrimarySpell] },\n            { no: 4, name: \"secondary_dot\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SecondaryDot\", Warlock_Rotation_SecondaryDot] },\n            { no: 5, name: \"corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"spec_spell\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.SpecSpell\", Warlock_Rotation_SpecSpell] },\n            { no: 8, name: \"type\", kind: \"enum\", T: () => [\"proto.Warlock.Rotation.Type\", Warlock_Rotation_Type] },\n            { no: 9, name: \"use_infernal\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Rotation>): Warlock_Rotation {\n        const message = { preset: 0, curse: 0, primarySpell: 0, secondaryDot: 0, corruption: false, detonateSeed: false, specSpell: 0, type: 0, useInfernal: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Rotation): Warlock_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Rotation.Preset preset */ 1:\n                    message.preset = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Curse curse */ 2:\n                    message.curse = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.PrimarySpell primary_spell */ 3:\n                    message.primarySpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.SecondaryDot secondary_dot */ 4:\n                    message.secondaryDot = reader.int32();\n                    break;\n                case /* bool corruption */ 5:\n                    message.corruption = reader.bool();\n                    break;\n                case /* bool detonate_seed */ 6:\n                    message.detonateSeed = reader.bool();\n                    break;\n                case /* proto.Warlock.Rotation.SpecSpell spec_spell */ 7:\n                    message.specSpell = reader.int32();\n                    break;\n                case /* proto.Warlock.Rotation.Type type */ 8:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_infernal */ 9:\n                    message.useInfernal = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Rotation.Preset preset = 1; */\n        if (message.preset !== 0)\n            writer.tag(1, WireType.Varint).int32(message.preset);\n        /* proto.Warlock.Rotation.Curse curse = 2; */\n        if (message.curse !== 0)\n            writer.tag(2, WireType.Varint).int32(message.curse);\n        /* proto.Warlock.Rotation.PrimarySpell primary_spell = 3; */\n        if (message.primarySpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primarySpell);\n        /* proto.Warlock.Rotation.SecondaryDot secondary_dot = 4; */\n        if (message.secondaryDot !== 0)\n            writer.tag(4, WireType.Varint).int32(message.secondaryDot);\n        /* bool corruption = 5; */\n        if (message.corruption !== false)\n            writer.tag(5, WireType.Varint).bool(message.corruption);\n        /* bool detonate_seed = 6; */\n        if (message.detonateSeed !== false)\n            writer.tag(6, WireType.Varint).bool(message.detonateSeed);\n        /* proto.Warlock.Rotation.SpecSpell spec_spell = 7; */\n        if (message.specSpell !== 0)\n            writer.tag(7, WireType.Varint).int32(message.specSpell);\n        /* proto.Warlock.Rotation.Type type = 8; */\n        if (message.type !== 0)\n            writer.tag(8, WireType.Varint).int32(message.type);\n        /* bool use_infernal = 9; */\n        if (message.useInfernal !== false)\n            writer.tag(9, WireType.Varint).bool(message.useInfernal);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Rotation\n */\nexport const Warlock_Rotation = new Warlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Warlock_Options$Type extends MessageType<Warlock_Options> {\n    constructor() {\n        super(\"proto.Warlock.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Armor\", Warlock_Options_Armor] },\n            { no: 2, name: \"summon\", kind: \"enum\", T: () => [\"proto.Warlock.Options.Summon\", Warlock_Options_Summon] },\n            { no: 3, name: \"weaponImbue\", kind: \"enum\", T: () => [\"proto.Warlock.Options.WeaponImbue\", Warlock_Options_WeaponImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<Warlock_Options>): Warlock_Options {\n        const message = { armor: 0, summon: 0, weaponImbue: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Warlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Warlock_Options): Warlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Warlock.Options.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.Summon summon */ 2:\n                    message.summon = reader.int32();\n                    break;\n                case /* proto.Warlock.Options.WeaponImbue weaponImbue */ 3:\n                    message.weaponImbue = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Warlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Warlock.Options.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* proto.Warlock.Options.Summon summon = 2; */\n        if (message.summon !== 0)\n            writer.tag(2, WireType.Varint).int32(message.summon);\n        /* proto.Warlock.Options.WeaponImbue weaponImbue = 3; */\n        if (message.weaponImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.weaponImbue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Warlock.Options\n */\nexport const Warlock_Options = new Warlock_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 convection = 1;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 2;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 3;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 4;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 5;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 7;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_fury = 8;\n     */\n    elementalFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_nova = 9;\n     */\n    improvedFireNova: number;\n    /**\n     * @generated from protobuf field: int32 eye_of_the_storm = 10;\n     */\n    eyeOfTheStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 11;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: bool call_of_thunder = 12;\n     */\n    callOfThunder: boolean;\n    /**\n     * @generated from protobuf field: int32 unrelenting_storm = 13;\n     */\n    unrelentingStorm: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 14;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 lightning_mastery = 15;\n     */\n    lightningMastery: number;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 16;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 storm_earth_and_fire = 17;\n     */\n    stormEarthAndFire: number;\n    /**\n     * @generated from protobuf field: int32 booming_echoes = 18;\n     */\n    boomingEchoes: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 19;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lightning_overload = 20;\n     */\n    lightningOverload: number;\n    /**\n     * @generated from protobuf field: int32 astral_shift = 21;\n     */\n    astralShift: number;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 22;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 23;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: int32 shamanism = 24;\n     */\n    shamanism: number;\n    /**\n     * @generated from protobuf field: bool thunderstorm = 25;\n     */\n    thunderstorm: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 enhancing_totems = 26;\n     */\n    enhancingTotems: number;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 27;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_knowledge = 28;\n     */\n    ancestralKnowledge: number;\n    /**\n     * @generated from protobuf field: int32 guardian_totems = 29;\n     */\n    guardianTotems: number;\n    /**\n     * @generated from protobuf field: int32 thundering_strikes = 30;\n     */\n    thunderingStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_ghost_wolf = 31;\n     */\n    improvedGhostWolf: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 32;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_weapons = 33;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_focus = 34;\n     */\n    shamanisticFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 anticipation = 35;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 36;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 37;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_windfury_totem = 38;\n     */\n    improvedWindfuryTotem: number;\n    /**\n     * @generated from protobuf field: bool spirit_weapons = 39;\n     */\n    spiritWeapons: boolean;\n    /**\n     * @generated from protobuf field: int32 mental_dexterity = 40;\n     */\n    mentalDexterity: number;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 41;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 weapon_mastery = 42;\n     */\n    weaponMastery: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 43;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 44;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 45;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool stormstrike = 46;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 47;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: bool lava_lash = 48;\n     */\n    lavaLash: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_stormstrike = 49;\n     */\n    improvedStormstrike: number;\n    /**\n     * @generated from protobuf field: int32 mental_quickness = 50;\n     */\n    mentalQuickness: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 51;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 52;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 53;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 54;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_healing_wave = 55;\n     */\n    improvedHealingWave: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 56;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_reincarnation = 57;\n     */\n    improvedReincarnation: number;\n    /**\n     * @generated from protobuf field: int32 healing_grace = 58;\n     */\n    healingGrace: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 59;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_water_shield = 60;\n     */\n    improvedWaterShield: number;\n    /**\n     * @generated from protobuf field: int32 healing_focus = 61;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: bool tidal_force = 62;\n     */\n    tidalForce: boolean;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 63;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: int32 restorative_totems = 64;\n     */\n    restorativeTotems: number;\n    /**\n     * @generated from protobuf field: int32 tidal_mastery = 65;\n     */\n    tidalMastery: number;\n    /**\n     * @generated from protobuf field: int32 healing_way = 66;\n     */\n    healingWay: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 67;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 68;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 purification = 69;\n     */\n    purification: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 70;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 71;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: bool cleanse_spirit = 72;\n     */\n    cleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 73;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: int32 improved_chain_heal = 74;\n     */\n    improvedChainHeal: number;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 75;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 76;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool earth_shield = 77;\n     */\n    earthShield: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_earth_shield = 78;\n     */\n    improvedEarthShield: number;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 79;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: bool riptide = 80;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use mana tide when appropriate.\n     *\n     * @generated from protobuf field: bool use_mana_tide = 5;\n     */\n    useManaTide: boolean;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 6;\n     */\n    useFireElemental: boolean;\n    /**\n     * If set, will revert to regular fire totems when fire elemental goes OOM,\n     * instead of waiting the full 2 minutes.\n     *\n     * @generated from protobuf field: bool recall_fire_elemental_on_oom = 7;\n     */\n    recallFireElementalOnOom: boolean;\n    /**\n     * If set, any time a 2-minute totem is about to expire, will recall and\n     * replace all totems.\n     *\n     * @generated from protobuf field: bool recall_totems = 8;\n     */\n    recallTotems: boolean;\n    /**\n     * If set will use fire totems as an MCD instead of manually controlling when to place them.\n     *\n     * @generated from protobuf field: bool use_fire_mcd = 9;\n     */\n    useFireMcd: boolean;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation rotation = 1;\n     */\n    rotation?: ElementalShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 3;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Rotation.RotationType type = 1;\n     */\n    type: ElementalShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool in_thunderstorm_range = 2;\n     */\n    inThunderstormRange: boolean;\n    /**\n     * These options are used for the manual rotation.\n     *\n     * @generated from protobuf field: bool use_fire_nova = 4;\n     */\n    useFireNova: boolean;\n    /**\n     * @generated from protobuf field: double fn_min_mana_per = 9;\n     */\n    fnMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool use_chain_lightning = 5;\n     */\n    useChainLightning: boolean;\n    /**\n     * @generated from protobuf field: bool use_cl_only_gap = 11;\n     */\n    useClOnlyGap: boolean;\n    /**\n     * @generated from protobuf field: double cl_min_mana_per = 10;\n     */\n    clMinManaPer: number;\n    /**\n     * @generated from protobuf field: bool overwrite_flameshock = 6;\n     */\n    overwriteFlameshock: boolean;\n    /**\n     * @generated from protobuf field: bool always_crit_lvb = 7;\n     */\n    alwaysCritLvb: boolean;\n    /**\n     * @generated from protobuf field: bool use_thunderstorm = 8;\n     */\n    useThunderstorm: boolean;\n    /**\n     * @generated from protobuf field: double lvb_fs_wait_ms = 12;\n     */\n    lvbFsWaitMs: number;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Rotation.RotationType\n */\nexport enum ElementalShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation rotation = 1;\n     */\n    rotation?: EnhancementShaman_Rotation;\n    /**\n     * @generated from protobuf field: proto.ShamanTalents talents = 2;\n     */\n    talents?: ShamanTalents;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 1;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.RotationType rotation_type = 2;\n     */\n    rotationType: EnhancementShaman_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * weaving options\n     *\n     * @generated from protobuf field: bool lavaburst_weave = 4;\n     */\n    lavaburstWeave: boolean;\n    /**\n     * @generated from protobuf field: bool lightningbolt_weave = 5;\n     */\n    lightningboltWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 maelstromweapon_min_stack = 6;\n     */\n    maelstromweaponMinStack: number;\n    /**\n     * @generated from protobuf field: double auto_weave_delay = 7;\n     */\n    autoWeaveDelay: number;\n    /**\n     * other general rotation config options\n     *\n     * @generated from protobuf field: double firenova_mana_threshold = 8;\n     */\n    firenovaManaThreshold: number;\n    /**\n     * @generated from protobuf field: double shamanistic_rage_mana_threshold = 9;\n     */\n    shamanisticRageManaThreshold: number;\n    /**\n     * @generated from protobuf field: bool weave_flame_shock = 10;\n     */\n    weaveFlameShock: boolean;\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11;\n     */\n    primaryShock: EnhancementShaman_Rotation_PrimaryShock;\n    /**\n     * @generated from protobuf field: int32 flame_shock_clip_ticks = 12;\n     */\n    flameShockClipTicks: number;\n    /**\n     * @generated from protobuf field: double delay_gcd_weave = 13;\n     */\n    delayGcdWeave: number;\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.RotationType\n */\nexport enum EnhancementShaman_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Priority = 1;\n     */\n    Priority = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * TODO: add spells here for custom rotation (if nessecary?)\n *\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.CustomRotationSpell\n */\nexport enum EnhancementShaman_Rotation_CustomRotationSpell {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: Stormstrike = 1;\n     */\n    Stormstrike = 1,\n    /**\n     * find a way to differentiate tooltips for this, lightning bolt weaves, and downranked flametongue\n     *\n     * @generated from protobuf enum value: StormstrikeDebuffMissing = 2;\n     */\n    StormstrikeDebuffMissing = 2,\n    /**\n     * @generated from protobuf enum value: LightningBolt = 3;\n     */\n    LightningBolt = 3,\n    /**\n     * @generated from protobuf enum value: LightningBoltWeave = 4;\n     */\n    LightningBoltWeave = 4,\n    /**\n     * @generated from protobuf enum value: FlameShock = 5;\n     */\n    FlameShock = 5,\n    /**\n     * @generated from protobuf enum value: EarthShock = 6;\n     */\n    EarthShock = 6,\n    /**\n     * @generated from protobuf enum value: LavaLash = 7;\n     */\n    LavaLash = 7,\n    /**\n     * @generated from protobuf enum value: LavaBurst = 8;\n     */\n    LavaBurst = 8,\n    /**\n     * @generated from protobuf enum value: LightningShield = 9;\n     */\n    LightningShield = 9,\n    /**\n     * @generated from protobuf enum value: FireNova = 10;\n     */\n    FireNova = 10,\n    /**\n     * @generated from protobuf enum value: ChainLightning = 11;\n     */\n    ChainLightning = 11,\n    /**\n     * @generated from protobuf enum value: FrostShock = 12;\n     */\n    FrostShock = 12,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 13;\n     */\n    MagmaTotem = 13,\n    /**\n     * @generated from protobuf enum value: LightningBoltDelayedWeave = 14;\n     */\n    LightningBoltDelayedWeave = 14\n}\n/**\n * @generated from protobuf enum proto.EnhancementShaman.Rotation.PrimaryShock\n */\nexport enum EnhancementShaman_Rotation_PrimaryShock {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Earth = 1;\n     */\n    Earth = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: bool bloodlust = 2;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 3;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 5;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLava = 41524;\n     */\n    GlyphOfLava = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserHealingWave = 41535;\n     */\n    GlyphOfLesserHealingWave = 41535,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaTide = 41538;\n     */\n    GlyphOfManaTide = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemOfWrath = 45776;\n     */\n    GlyphOfTotemOfWrath = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterMastery = 41541;\n     */\n    GlyphOfWaterMastery = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 43386;\n     */\n    GlyphOfWaterShield = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfWrath = 3;\n     */\n    TotemOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 4;\n     */\n    FlametongueTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueWeaponDownrank = 3;\n     */\n    FlametongueWeaponDownrank = 3,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 4;\n     */\n    FrostbrandWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"elemental_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_fire_nova\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"eye_of_the_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"call_of_thunder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"unrelenting_storm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lightning_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"storm_earth_and_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"booming_echoes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"lightning_overload\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"astral_shift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"shamanism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"enhancing_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"ancestral_knowledge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"guardian_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"thundering_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_ghost_wolf\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_windfury_totem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"spirit_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"mental_dexterity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"weapon_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"lava_lash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_stormstrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mental_quickness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_healing_wave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_reincarnation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"healing_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_water_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"tidal_force\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"restorative_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"tidal_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"healing_way\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"purification\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"improved_chain_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"earth_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 78, name: \"improved_earth_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, elementalDevastation: 0, reverberation: 0, elementalFocus: false, elementalFury: 0, improvedFireNova: 0, eyeOfTheStorm: 0, elementalReach: 0, callOfThunder: false, unrelentingStorm: 0, elementalPrecision: 0, lightningMastery: 0, elementalMastery: false, stormEarthAndFire: 0, boomingEchoes: 0, elementalOath: 0, lightningOverload: 0, astralShift: 0, totemOfWrath: false, lavaFlows: 0, shamanism: 0, thunderstorm: false, enhancingTotems: 0, earthsGrasp: 0, ancestralKnowledge: 0, guardianTotems: 0, thunderingStrikes: 0, improvedGhostWolf: 0, improvedShields: 0, elementalWeapons: 0, shamanisticFocus: false, anticipation: 0, flurry: 0, toughness: 0, improvedWindfuryTotem: 0, spiritWeapons: false, mentalDexterity: 0, unleashedRage: 0, weaponMastery: 0, frozenPower: 0, dualWieldSpecialization: 0, dualWield: false, stormstrike: false, staticShock: 0, lavaLash: false, improvedStormstrike: 0, mentalQuickness: 0, shamanisticRage: false, earthenPower: 0, maelstromWeapon: 0, feralSpirit: false, improvedHealingWave: 0, totemicFocus: 0, improvedReincarnation: 0, healingGrace: 0, tidalFocus: 0, improvedWaterShield: 0, healingFocus: 0, tidalForce: false, ancestralHealing: 0, restorativeTotems: 0, tidalMastery: 0, healingWay: 0, naturesSwiftness: false, focusedMind: 0, purification: 0, naturesGuardian: 0, manaTideTotem: false, cleanseSpirit: false, blessingOfTheEternals: 0, improvedChainHeal: 0, naturesBlessing: 0, ancestralAwakening: 0, earthShield: false, improvedEarthShield: 0, tidalWaves: 0, riptide: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 convection */ 1:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 2:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 3:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 4:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 5:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 7:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_fury */ 8:\n                    message.elementalFury = reader.int32();\n                    break;\n                case /* int32 improved_fire_nova */ 9:\n                    message.improvedFireNova = reader.int32();\n                    break;\n                case /* int32 eye_of_the_storm */ 10:\n                    message.eyeOfTheStorm = reader.int32();\n                    break;\n                case /* int32 elemental_reach */ 11:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* bool call_of_thunder */ 12:\n                    message.callOfThunder = reader.bool();\n                    break;\n                case /* int32 unrelenting_storm */ 13:\n                    message.unrelentingStorm = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 14:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 lightning_mastery */ 15:\n                    message.lightningMastery = reader.int32();\n                    break;\n                case /* bool elemental_mastery */ 16:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 storm_earth_and_fire */ 17:\n                    message.stormEarthAndFire = reader.int32();\n                    break;\n                case /* int32 booming_echoes */ 18:\n                    message.boomingEchoes = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 19:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lightning_overload */ 20:\n                    message.lightningOverload = reader.int32();\n                    break;\n                case /* int32 astral_shift */ 21:\n                    message.astralShift = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 22:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* int32 lava_flows */ 23:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* int32 shamanism */ 24:\n                    message.shamanism = reader.int32();\n                    break;\n                case /* bool thunderstorm */ 25:\n                    message.thunderstorm = reader.bool();\n                    break;\n                case /* int32 enhancing_totems */ 26:\n                    message.enhancingTotems = reader.int32();\n                    break;\n                case /* int32 earths_grasp */ 27:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* int32 ancestral_knowledge */ 28:\n                    message.ancestralKnowledge = reader.int32();\n                    break;\n                case /* int32 guardian_totems */ 29:\n                    message.guardianTotems = reader.int32();\n                    break;\n                case /* int32 thundering_strikes */ 30:\n                    message.thunderingStrikes = reader.int32();\n                    break;\n                case /* int32 improved_ghost_wolf */ 31:\n                    message.improvedGhostWolf = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 32:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_weapons */ 33:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* bool shamanistic_focus */ 34:\n                    message.shamanisticFocus = reader.bool();\n                    break;\n                case /* int32 anticipation */ 35:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* int32 flurry */ 36:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 toughness */ 37:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_windfury_totem */ 38:\n                    message.improvedWindfuryTotem = reader.int32();\n                    break;\n                case /* bool spirit_weapons */ 39:\n                    message.spiritWeapons = reader.bool();\n                    break;\n                case /* int32 mental_dexterity */ 40:\n                    message.mentalDexterity = reader.int32();\n                    break;\n                case /* int32 unleashed_rage */ 41:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 weapon_mastery */ 42:\n                    message.weaponMastery = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 43:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 44:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* bool dual_wield */ 45:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool stormstrike */ 46:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 47:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* bool lava_lash */ 48:\n                    message.lavaLash = reader.bool();\n                    break;\n                case /* int32 improved_stormstrike */ 49:\n                    message.improvedStormstrike = reader.int32();\n                    break;\n                case /* int32 mental_quickness */ 50:\n                    message.mentalQuickness = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 51:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 earthen_power */ 52:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 53:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 54:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 improved_healing_wave */ 55:\n                    message.improvedHealingWave = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 56:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 improved_reincarnation */ 57:\n                    message.improvedReincarnation = reader.int32();\n                    break;\n                case /* int32 healing_grace */ 58:\n                    message.healingGrace = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 59:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 improved_water_shield */ 60:\n                    message.improvedWaterShield = reader.int32();\n                    break;\n                case /* int32 healing_focus */ 61:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* bool tidal_force */ 62:\n                    message.tidalForce = reader.bool();\n                    break;\n                case /* int32 ancestral_healing */ 63:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* int32 restorative_totems */ 64:\n                    message.restorativeTotems = reader.int32();\n                    break;\n                case /* int32 tidal_mastery */ 65:\n                    message.tidalMastery = reader.int32();\n                    break;\n                case /* int32 healing_way */ 66:\n                    message.healingWay = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 67:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 focused_mind */ 68:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 purification */ 69:\n                    message.purification = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 70:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 71:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* bool cleanse_spirit */ 72:\n                    message.cleanseSpirit = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 73:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* int32 improved_chain_heal */ 74:\n                    message.improvedChainHeal = reader.int32();\n                    break;\n                case /* int32 natures_blessing */ 75:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 76:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool earth_shield */ 77:\n                    message.earthShield = reader.bool();\n                    break;\n                case /* int32 improved_earth_shield */ 78:\n                    message.improvedEarthShield = reader.int32();\n                    break;\n                case /* int32 tidal_waves */ 79:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* bool riptide */ 80:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 convection = 1; */\n        if (message.convection !== 0)\n            writer.tag(1, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 2; */\n        if (message.concussion !== 0)\n            writer.tag(2, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 3; */\n        if (message.callOfFlame !== 0)\n            writer.tag(3, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 4; */\n        if (message.elementalWarding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.elementalWarding);\n        /* int32 elemental_devastation = 5; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* bool elemental_focus = 7; */\n        if (message.elementalFocus !== false)\n            writer.tag(7, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_fury = 8; */\n        if (message.elementalFury !== 0)\n            writer.tag(8, WireType.Varint).int32(message.elementalFury);\n        /* int32 improved_fire_nova = 9; */\n        if (message.improvedFireNova !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedFireNova);\n        /* int32 eye_of_the_storm = 10; */\n        if (message.eyeOfTheStorm !== 0)\n            writer.tag(10, WireType.Varint).int32(message.eyeOfTheStorm);\n        /* int32 elemental_reach = 11; */\n        if (message.elementalReach !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalReach);\n        /* bool call_of_thunder = 12; */\n        if (message.callOfThunder !== false)\n            writer.tag(12, WireType.Varint).bool(message.callOfThunder);\n        /* int32 unrelenting_storm = 13; */\n        if (message.unrelentingStorm !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unrelentingStorm);\n        /* int32 elemental_precision = 14; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(14, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 lightning_mastery = 15; */\n        if (message.lightningMastery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lightningMastery);\n        /* bool elemental_mastery = 16; */\n        if (message.elementalMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.elementalMastery);\n        /* int32 storm_earth_and_fire = 17; */\n        if (message.stormEarthAndFire !== 0)\n            writer.tag(17, WireType.Varint).int32(message.stormEarthAndFire);\n        /* int32 booming_echoes = 18; */\n        if (message.boomingEchoes !== 0)\n            writer.tag(18, WireType.Varint).int32(message.boomingEchoes);\n        /* int32 elemental_oath = 19; */\n        if (message.elementalOath !== 0)\n            writer.tag(19, WireType.Varint).int32(message.elementalOath);\n        /* int32 lightning_overload = 20; */\n        if (message.lightningOverload !== 0)\n            writer.tag(20, WireType.Varint).int32(message.lightningOverload);\n        /* int32 astral_shift = 21; */\n        if (message.astralShift !== 0)\n            writer.tag(21, WireType.Varint).int32(message.astralShift);\n        /* bool totem_of_wrath = 22; */\n        if (message.totemOfWrath !== false)\n            writer.tag(22, WireType.Varint).bool(message.totemOfWrath);\n        /* int32 lava_flows = 23; */\n        if (message.lavaFlows !== 0)\n            writer.tag(23, WireType.Varint).int32(message.lavaFlows);\n        /* int32 shamanism = 24; */\n        if (message.shamanism !== 0)\n            writer.tag(24, WireType.Varint).int32(message.shamanism);\n        /* bool thunderstorm = 25; */\n        if (message.thunderstorm !== false)\n            writer.tag(25, WireType.Varint).bool(message.thunderstorm);\n        /* int32 enhancing_totems = 26; */\n        if (message.enhancingTotems !== 0)\n            writer.tag(26, WireType.Varint).int32(message.enhancingTotems);\n        /* int32 earths_grasp = 27; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthsGrasp);\n        /* int32 ancestral_knowledge = 28; */\n        if (message.ancestralKnowledge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.ancestralKnowledge);\n        /* int32 guardian_totems = 29; */\n        if (message.guardianTotems !== 0)\n            writer.tag(29, WireType.Varint).int32(message.guardianTotems);\n        /* int32 thundering_strikes = 30; */\n        if (message.thunderingStrikes !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thunderingStrikes);\n        /* int32 improved_ghost_wolf = 31; */\n        if (message.improvedGhostWolf !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedGhostWolf);\n        /* int32 improved_shields = 32; */\n        if (message.improvedShields !== 0)\n            writer.tag(32, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_weapons = 33; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(33, WireType.Varint).int32(message.elementalWeapons);\n        /* bool shamanistic_focus = 34; */\n        if (message.shamanisticFocus !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticFocus);\n        /* int32 anticipation = 35; */\n        if (message.anticipation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.anticipation);\n        /* int32 flurry = 36; */\n        if (message.flurry !== 0)\n            writer.tag(36, WireType.Varint).int32(message.flurry);\n        /* int32 toughness = 37; */\n        if (message.toughness !== 0)\n            writer.tag(37, WireType.Varint).int32(message.toughness);\n        /* int32 improved_windfury_totem = 38; */\n        if (message.improvedWindfuryTotem !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedWindfuryTotem);\n        /* bool spirit_weapons = 39; */\n        if (message.spiritWeapons !== false)\n            writer.tag(39, WireType.Varint).bool(message.spiritWeapons);\n        /* int32 mental_dexterity = 40; */\n        if (message.mentalDexterity !== 0)\n            writer.tag(40, WireType.Varint).int32(message.mentalDexterity);\n        /* int32 unleashed_rage = 41; */\n        if (message.unleashedRage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unleashedRage);\n        /* int32 weapon_mastery = 42; */\n        if (message.weaponMastery !== 0)\n            writer.tag(42, WireType.Varint).int32(message.weaponMastery);\n        /* int32 frozen_power = 43; */\n        if (message.frozenPower !== 0)\n            writer.tag(43, WireType.Varint).int32(message.frozenPower);\n        /* int32 dual_wield_specialization = 44; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(44, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* bool dual_wield = 45; */\n        if (message.dualWield !== false)\n            writer.tag(45, WireType.Varint).bool(message.dualWield);\n        /* bool stormstrike = 46; */\n        if (message.stormstrike !== false)\n            writer.tag(46, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 47; */\n        if (message.staticShock !== 0)\n            writer.tag(47, WireType.Varint).int32(message.staticShock);\n        /* bool lava_lash = 48; */\n        if (message.lavaLash !== false)\n            writer.tag(48, WireType.Varint).bool(message.lavaLash);\n        /* int32 improved_stormstrike = 49; */\n        if (message.improvedStormstrike !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedStormstrike);\n        /* int32 mental_quickness = 50; */\n        if (message.mentalQuickness !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mentalQuickness);\n        /* bool shamanistic_rage = 51; */\n        if (message.shamanisticRage !== false)\n            writer.tag(51, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 earthen_power = 52; */\n        if (message.earthenPower !== 0)\n            writer.tag(52, WireType.Varint).int32(message.earthenPower);\n        /* int32 maelstrom_weapon = 53; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(53, WireType.Varint).int32(message.maelstromWeapon);\n        /* bool feral_spirit = 54; */\n        if (message.feralSpirit !== false)\n            writer.tag(54, WireType.Varint).bool(message.feralSpirit);\n        /* int32 improved_healing_wave = 55; */\n        if (message.improvedHealingWave !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedHealingWave);\n        /* int32 totemic_focus = 56; */\n        if (message.totemicFocus !== 0)\n            writer.tag(56, WireType.Varint).int32(message.totemicFocus);\n        /* int32 improved_reincarnation = 57; */\n        if (message.improvedReincarnation !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedReincarnation);\n        /* int32 healing_grace = 58; */\n        if (message.healingGrace !== 0)\n            writer.tag(58, WireType.Varint).int32(message.healingGrace);\n        /* int32 tidal_focus = 59; */\n        if (message.tidalFocus !== 0)\n            writer.tag(59, WireType.Varint).int32(message.tidalFocus);\n        /* int32 improved_water_shield = 60; */\n        if (message.improvedWaterShield !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedWaterShield);\n        /* int32 healing_focus = 61; */\n        if (message.healingFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.healingFocus);\n        /* bool tidal_force = 62; */\n        if (message.tidalForce !== false)\n            writer.tag(62, WireType.Varint).bool(message.tidalForce);\n        /* int32 ancestral_healing = 63; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(63, WireType.Varint).int32(message.ancestralHealing);\n        /* int32 restorative_totems = 64; */\n        if (message.restorativeTotems !== 0)\n            writer.tag(64, WireType.Varint).int32(message.restorativeTotems);\n        /* int32 tidal_mastery = 65; */\n        if (message.tidalMastery !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tidalMastery);\n        /* int32 healing_way = 66; */\n        if (message.healingWay !== 0)\n            writer.tag(66, WireType.Varint).int32(message.healingWay);\n        /* bool natures_swiftness = 67; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(67, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 focused_mind = 68; */\n        if (message.focusedMind !== 0)\n            writer.tag(68, WireType.Varint).int32(message.focusedMind);\n        /* int32 purification = 69; */\n        if (message.purification !== 0)\n            writer.tag(69, WireType.Varint).int32(message.purification);\n        /* int32 natures_guardian = 70; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(70, WireType.Varint).int32(message.naturesGuardian);\n        /* bool mana_tide_totem = 71; */\n        if (message.manaTideTotem !== false)\n            writer.tag(71, WireType.Varint).bool(message.manaTideTotem);\n        /* bool cleanse_spirit = 72; */\n        if (message.cleanseSpirit !== false)\n            writer.tag(72, WireType.Varint).bool(message.cleanseSpirit);\n        /* int32 blessing_of_the_eternals = 73; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(73, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* int32 improved_chain_heal = 74; */\n        if (message.improvedChainHeal !== 0)\n            writer.tag(74, WireType.Varint).int32(message.improvedChainHeal);\n        /* int32 natures_blessing = 75; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(75, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 ancestral_awakening = 76; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(76, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool earth_shield = 77; */\n        if (message.earthShield !== false)\n            writer.tag(77, WireType.Varint).bool(message.earthShield);\n        /* int32 improved_earth_shield = 78; */\n        if (message.improvedEarthShield !== 0)\n            writer.tag(78, WireType.Varint).int32(message.improvedEarthShield);\n        /* int32 tidal_waves = 79; */\n        if (message.tidalWaves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.tidalWaves);\n        /* bool riptide = 80; */\n        if (message.riptide !== false)\n            writer.tag(80, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 5, name: \"use_mana_tide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"recall_fire_elemental_on_oom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"recall_totems\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"use_fire_mcd\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useManaTide: false, useFireElemental: false, recallFireElementalOnOom: false, recallTotems: false, useFireMcd: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_mana_tide */ 5:\n                    message.useManaTide = reader.bool();\n                    break;\n                case /* bool use_fire_elemental */ 6:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* bool recall_fire_elemental_on_oom */ 7:\n                    message.recallFireElementalOnOom = reader.bool();\n                    break;\n                case /* bool recall_totems */ 8:\n                    message.recallTotems = reader.bool();\n                    break;\n                case /* bool use_fire_mcd */ 9:\n                    message.useFireMcd = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        /* bool use_mana_tide = 5; */\n        if (message.useManaTide !== false)\n            writer.tag(5, WireType.Varint).bool(message.useManaTide);\n        /* bool use_fire_elemental = 6; */\n        if (message.useFireElemental !== false)\n            writer.tag(6, WireType.Varint).bool(message.useFireElemental);\n        /* bool recall_fire_elemental_on_oom = 7; */\n        if (message.recallFireElementalOnOom !== false)\n            writer.tag(7, WireType.Varint).bool(message.recallFireElementalOnOom);\n        /* bool recall_totems = 8; */\n        if (message.recallTotems !== false)\n            writer.tag(8, WireType.Varint).bool(message.recallTotems);\n        /* bool use_fire_mcd = 9; */\n        if (message.useFireMcd !== false)\n            writer.tag(9, WireType.Varint).bool(message.useFireMcd);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ElementalShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Rotation rotation */ 1:\n                    message.rotation = ElementalShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            ElementalShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", [\n            { no: 3, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Rotation.RotationType\", ElementalShaman_Rotation_RotationType] },\n            { no: 2, name: \"in_thunderstorm_range\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_fire_nova\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"fn_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_chain_lightning\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"use_cl_only_gap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"cl_min_mana_per\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"overwrite_flameshock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"always_crit_lvb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_thunderstorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"lvb_fs_wait_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = { type: 0, inThunderstormRange: false, useFireNova: false, fnMinManaPer: 0, useChainLightning: false, useClOnlyGap: false, clMinManaPer: 0, overwriteFlameshock: false, alwaysCritLvb: false, useThunderstorm: false, lvbFsWaitMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 3:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.ElementalShaman.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* bool in_thunderstorm_range */ 2:\n                    message.inThunderstormRange = reader.bool();\n                    break;\n                case /* bool use_fire_nova */ 4:\n                    message.useFireNova = reader.bool();\n                    break;\n                case /* double fn_min_mana_per */ 9:\n                    message.fnMinManaPer = reader.double();\n                    break;\n                case /* bool use_chain_lightning */ 5:\n                    message.useChainLightning = reader.bool();\n                    break;\n                case /* bool use_cl_only_gap */ 11:\n                    message.useClOnlyGap = reader.bool();\n                    break;\n                case /* double cl_min_mana_per */ 10:\n                    message.clMinManaPer = reader.double();\n                    break;\n                case /* bool overwrite_flameshock */ 6:\n                    message.overwriteFlameshock = reader.bool();\n                    break;\n                case /* bool always_crit_lvb */ 7:\n                    message.alwaysCritLvb = reader.bool();\n                    break;\n                case /* bool use_thunderstorm */ 8:\n                    message.useThunderstorm = reader.bool();\n                    break;\n                case /* double lvb_fs_wait_ms */ 12:\n                    message.lvbFsWaitMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 3; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* bool in_thunderstorm_range = 2; */\n        if (message.inThunderstormRange !== false)\n            writer.tag(2, WireType.Varint).bool(message.inThunderstormRange);\n        /* bool use_fire_nova = 4; */\n        if (message.useFireNova !== false)\n            writer.tag(4, WireType.Varint).bool(message.useFireNova);\n        /* double fn_min_mana_per = 9; */\n        if (message.fnMinManaPer !== 0)\n            writer.tag(9, WireType.Bit64).double(message.fnMinManaPer);\n        /* bool use_chain_lightning = 5; */\n        if (message.useChainLightning !== false)\n            writer.tag(5, WireType.Varint).bool(message.useChainLightning);\n        /* bool use_cl_only_gap = 11; */\n        if (message.useClOnlyGap !== false)\n            writer.tag(11, WireType.Varint).bool(message.useClOnlyGap);\n        /* double cl_min_mana_per = 10; */\n        if (message.clMinManaPer !== 0)\n            writer.tag(10, WireType.Bit64).double(message.clMinManaPer);\n        /* bool overwrite_flameshock = 6; */\n        if (message.overwriteFlameshock !== false)\n            writer.tag(6, WireType.Varint).bool(message.overwriteFlameshock);\n        /* bool always_crit_lvb = 7; */\n        if (message.alwaysCritLvb !== false)\n            writer.tag(7, WireType.Varint).bool(message.alwaysCritLvb);\n        /* bool use_thunderstorm = 8; */\n        if (message.useThunderstorm !== false)\n            writer.tag(8, WireType.Varint).bool(message.useThunderstorm);\n        /* double lvb_fs_wait_ms = 12; */\n        if (message.lvbFsWaitMs !== 0)\n            writer.tag(12, WireType.Bit64).double(message.lvbFsWaitMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { shield: 0, bloodlust: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => EnhancementShaman_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => ShamanTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Rotation rotation */ 1:\n                    message.rotation = EnhancementShaman_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.ShamanTalents talents */ 2:\n                    message.talents = ShamanTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Rotation rotation = 1; */\n        if (message.rotation)\n            EnhancementShaman_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanTalents talents = 2; */\n        if (message.talents)\n            ShamanTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", [\n            { no: 1, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 2, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.RotationType\", EnhancementShaman_Rotation_RotationType] },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 4, name: \"lavaburst_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"lightningbolt_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"maelstromweapon_min_stack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"auto_weave_delay\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"firenova_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"shamanistic_rage_mana_threshold\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"weave_flame_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"primary_shock\", kind: \"enum\", T: () => [\"proto.EnhancementShaman.Rotation.PrimaryShock\", EnhancementShaman_Rotation_PrimaryShock] },\n            { no: 12, name: \"flame_shock_clip_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"delay_gcd_weave\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = { rotationType: 0, lavaburstWeave: false, lightningboltWeave: false, maelstromweaponMinStack: 0, autoWeaveDelay: 0, firenovaManaThreshold: 0, shamanisticRageManaThreshold: 0, weaveFlameShock: false, primaryShock: 0, flameShockClipTicks: 0, delayGcdWeave: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems totems */ 1:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.EnhancementShaman.Rotation.RotationType rotation_type */ 2:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* bool lavaburst_weave */ 4:\n                    message.lavaburstWeave = reader.bool();\n                    break;\n                case /* bool lightningbolt_weave */ 5:\n                    message.lightningboltWeave = reader.bool();\n                    break;\n                case /* int32 maelstromweapon_min_stack */ 6:\n                    message.maelstromweaponMinStack = reader.int32();\n                    break;\n                case /* double auto_weave_delay */ 7:\n                    message.autoWeaveDelay = reader.double();\n                    break;\n                case /* double firenova_mana_threshold */ 8:\n                    message.firenovaManaThreshold = reader.double();\n                    break;\n                case /* double shamanistic_rage_mana_threshold */ 9:\n                    message.shamanisticRageManaThreshold = reader.double();\n                    break;\n                case /* bool weave_flame_shock */ 10:\n                    message.weaveFlameShock = reader.bool();\n                    break;\n                case /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock */ 11:\n                    message.primaryShock = reader.int32();\n                    break;\n                case /* int32 flame_shock_clip_ticks */ 12:\n                    message.flameShockClipTicks = reader.int32();\n                    break;\n                case /* double delay_gcd_weave */ 13:\n                    message.delayGcdWeave = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems totems = 1; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman.Rotation.RotationType rotation_type = 2; */\n        if (message.rotationType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.rotationType);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* bool lavaburst_weave = 4; */\n        if (message.lavaburstWeave !== false)\n            writer.tag(4, WireType.Varint).bool(message.lavaburstWeave);\n        /* bool lightningbolt_weave = 5; */\n        if (message.lightningboltWeave !== false)\n            writer.tag(5, WireType.Varint).bool(message.lightningboltWeave);\n        /* int32 maelstromweapon_min_stack = 6; */\n        if (message.maelstromweaponMinStack !== 0)\n            writer.tag(6, WireType.Varint).int32(message.maelstromweaponMinStack);\n        /* double auto_weave_delay = 7; */\n        if (message.autoWeaveDelay !== 0)\n            writer.tag(7, WireType.Bit64).double(message.autoWeaveDelay);\n        /* double firenova_mana_threshold = 8; */\n        if (message.firenovaManaThreshold !== 0)\n            writer.tag(8, WireType.Bit64).double(message.firenovaManaThreshold);\n        /* double shamanistic_rage_mana_threshold = 9; */\n        if (message.shamanisticRageManaThreshold !== 0)\n            writer.tag(9, WireType.Bit64).double(message.shamanisticRageManaThreshold);\n        /* bool weave_flame_shock = 10; */\n        if (message.weaveFlameShock !== false)\n            writer.tag(10, WireType.Varint).bool(message.weaveFlameShock);\n        /* proto.EnhancementShaman.Rotation.PrimaryShock primary_shock = 11; */\n        if (message.primaryShock !== 0)\n            writer.tag(11, WireType.Varint).int32(message.primaryShock);\n        /* int32 flame_shock_clip_ticks = 12; */\n        if (message.flameShockClipTicks !== 0)\n            writer.tag(12, WireType.Varint).int32(message.flameShockClipTicks);\n        /* double delay_gcd_weave = 13; */\n        if (message.delayGcdWeave !== 0)\n            writer.tag(13, WireType.Bit64).double(message.delayGcdWeave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] },\n            { no: 5, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { shield: 0, bloodlust: false, syncType: 0, imbueMh: 0, imbueOh: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* bool bloodlust */ 2:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 3:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 5:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* bool bloodlust = 2; */\n        if (message.bloodlust !== false)\n            writer.tag(2, WireType.Varint).bool(message.bloodlust);\n        /* proto.ShamanSyncType sync_type = 3; */\n        if (message.syncType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        /* proto.ShamanImbue imbue_oh = 5; */\n        if (message.imbueOh !== 0)\n            writer.tag(5, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 improved_eviscerate = 1;\n     */\n    improvedEviscerate: number;\n    /**\n     * @generated from protobuf field: int32 remorseless_attacks = 2;\n     */\n    remorselessAttacks: number;\n    /**\n     * @generated from protobuf field: int32 malice = 3;\n     */\n    malice: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 blood_spatter = 5;\n     */\n    bloodSpatter: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: bool vigor = 7;\n     */\n    vigor: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 8;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 9;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 improved_poisons = 11;\n     */\n    improvedPoisons: number;\n    /**\n     * @generated from protobuf field: int32 fleet_footed = 12;\n     */\n    fleetFooted: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 13;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_kidney_shot = 14;\n     */\n    improvedKidneyShot: number;\n    /**\n     * @generated from protobuf field: int32 quick_recovery = 15;\n     */\n    quickRecovery: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 16;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murder = 17;\n     */\n    murder: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 18;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool overkill = 19;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 20;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 focused_attacks = 21;\n     */\n    focusedAttacks: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 22;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: int32 master_poisoner = 23;\n     */\n    masterPoisoner: number;\n    /**\n     * @generated from protobuf field: bool mutilate = 24;\n     */\n    mutilate: boolean;\n    /**\n     * @generated from protobuf field: int32 turn_the_tables = 25;\n     */\n    turnTheTables: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 26;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: bool hunger_for_blood = 27;\n     */\n    hungerForBlood: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_gouge = 28;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 29;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 dual_wield_specialization = 30;\n     */\n    dualWieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 31;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 deflection = 32;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 precision = 33;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 endurance = 34;\n     */\n    endurance: number;\n    /**\n     * @generated from protobuf field: bool riposte = 35;\n     */\n    riposte: boolean;\n    /**\n     * @generated from protobuf field: int32 close_quarters_combat = 36;\n     */\n    closeQuartersCombat: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 37;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 38;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 39;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 40;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 mace_specialization = 41;\n     */\n    maceSpecialization: number;\n    /**\n     * @generated from protobuf field: bool blade_flurry = 42;\n     */\n    bladeFlurry: boolean;\n    /**\n     * @generated from protobuf field: int32 hack_and_slash = 43;\n     */\n    hackAndSlash: number;\n    /**\n     * @generated from protobuf field: int32 weapon_expertise = 44;\n     */\n    weaponExpertise: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 45;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 vitality = 46;\n     */\n    vitality: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 47;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 nerves_of_steel = 48;\n     */\n    nervesOfSteel: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 49;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 50;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 unfair_advantage = 51;\n     */\n    unfairAdvantage: number;\n    /**\n     * @generated from protobuf field: bool surprise_attacks = 52;\n     */\n    surpriseAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 53;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 prey_on_the_weak = 54;\n     */\n    preyOnTheWeak: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 55;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 relentless_strikes = 56;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 master_of_deception = 57;\n     */\n    masterOfDeception: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 58;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 sleight_of_hand = 59;\n     */\n    sleightOfHand: number;\n    /**\n     * @generated from protobuf field: int32 dirty_tricks = 60;\n     */\n    dirtyTricks: number;\n    /**\n     * @generated from protobuf field: int32 camouflage = 61;\n     */\n    camouflage: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 62;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: bool ghostly_strike = 63;\n     */\n    ghostlyStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 64;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: int32 setup = 65;\n     */\n    setup: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 66;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 67;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 heightened_senses = 68;\n     */\n    heightenedSenses: number;\n    /**\n     * @generated from protobuf field: bool preparation = 69;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 dirty_deeds = 70;\n     */\n    dirtyDeeds: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 71;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 master_of_subtlety = 72;\n     */\n    masterOfSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 deadliness = 73;\n     */\n    deadliness: number;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 74;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 75;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 76;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: int32 sinister_calling = 77;\n     */\n    sinisterCalling: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 78;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 79;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool shadowstep = 80;\n     */\n    shadowstep: boolean;\n    /**\n     * @generated from protobuf field: int32 filthy_tricks = 81;\n     */\n    filthyTricks: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 82;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 83;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.Rogue\n */\nexport interface Rogue {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation rotation = 1;\n     */\n    rotation?: Rogue_Rotation;\n    /**\n     * @generated from protobuf field: proto.RogueTalents talents = 2;\n     */\n    talents?: RogueTalents;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options options = 3;\n     */\n    options?: Rogue_Options;\n}\n/**\n * @generated from protobuf message proto.Rogue.Rotation\n */\nexport interface Rogue_Rotation {\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency expose_armor_frequency = 1;\n     */\n    exposeArmorFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_expose_armor = 2;\n     */\n    minimumComboPointsExposeArmor: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3;\n     */\n    tricksOfTheTradeFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4;\n     */\n    combatFinisherPriority: Rogue_Rotation_CombatPriority;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5;\n     */\n    assassinationFinisherPriority: Rogue_Rotation_AssassinationPriority;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_primary_finisher = 6;\n     */\n    minimumComboPointsPrimaryFinisher: number;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_secondary_finisher = 7;\n     */\n    minimumComboPointsSecondaryFinisher: number;\n    /**\n     * @generated from protobuf field: proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];\n     */\n    multiTargetSliceFrequency: Rogue_Rotation_Frequency;\n    /**\n     * @generated from protobuf field: int32 minimum_combo_points_multi_target_slice = 9;\n     */\n    minimumComboPointsMultiTargetSlice: number;\n    /**\n     * @generated from protobuf field: int32 envenom_pool_amount = 10;\n     */\n    envenomPoolAmount: number;\n    /**\n     * @generated from protobuf field: bool use_feint = 11;\n     */\n    useFeint: boolean;\n    /**\n     * @generated from protobuf field: bool allow_cp_overcap = 12;\n     */\n    allowCpOvercap: boolean;\n    /**\n     * @generated from protobuf field: bool allow_cp_undercap = 13;\n     */\n    allowCpUndercap: boolean;\n    /**\n     * @generated from protobuf field: bool open_with_garrote = 14;\n     */\n    openWithGarrote: boolean;\n    /**\n     * @generated from protobuf field: bool rupture_for_bleed = 15;\n     */\n    ruptureForBleed: boolean;\n    /**\n     * @generated from protobuf field: int32 envenom_energy_threshold = 16;\n     */\n    envenomEnergyThreshold: number;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.Frequency\n */\nexport enum Rogue_Rotation_Frequency {\n    /**\n     * @generated from protobuf enum value: Never = 0;\n     */\n    Never = 0,\n    /**\n     * @generated from protobuf enum value: Once = 1;\n     */\n    Once = 1,\n    /**\n     * @generated from protobuf enum value: Maintain = 2;\n     */\n    Maintain = 2,\n    /**\n     * @generated from protobuf enum value: Build = 3;\n     */\n    Build = 3,\n    /**\n     * @generated from protobuf enum value: Fill = 4;\n     */\n    Fill = 4,\n    /**\n     * @generated from protobuf enum value: FrequencyUnknown = 5;\n     */\n    FrequencyUnknown = 5\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.CombatPriority\n */\nexport enum Rogue_Rotation_CombatPriority {\n    /**\n     * @generated from protobuf enum value: RuptureEviscerate = 0;\n     */\n    RuptureEviscerate = 0,\n    /**\n     * @generated from protobuf enum value: EviscerateRupture = 1;\n     */\n    EviscerateRupture = 1,\n    /**\n     * @generated from protobuf enum value: CombatPriorityUnknown = 2;\n     */\n    CombatPriorityUnknown = 2\n}\n/**\n * @generated from protobuf enum proto.Rogue.Rotation.AssassinationPriority\n */\nexport enum Rogue_Rotation_AssassinationPriority {\n    /**\n     * @generated from protobuf enum value: EnvenomRupture = 0;\n     */\n    EnvenomRupture = 0,\n    /**\n     * @generated from protobuf enum value: RuptureEnvenom = 1;\n     */\n    RuptureEnvenom = 1,\n    /**\n     * @generated from protobuf enum value: AssassinationPriorityUnknown = 2;\n     */\n    AssassinationPriorityUnknown = 2\n}\n/**\n * @generated from protobuf message proto.Rogue.Options\n */\nexport interface Rogue_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.Rogue.Options.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: Rogue_Options_PoisonImbue;\n    /**\n     * @generated from protobuf field: int32 starting_overkill_duration = 4;\n     */\n    startingOverkillDuration: number;\n    /**\n     * @generated from protobuf field: bool apply_poisons_manually = 5;\n     */\n    applyPoisonsManually: boolean;\n}\n/**\n * @generated from protobuf enum proto.Rogue.Options.PoisonImbue\n */\nexport enum Rogue_Options_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2,\n    /**\n     * @generated from protobuf enum value: WoundPoison = 3;\n     */\n    WoundPoison = 3\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostlyStrike = 42965;\n     */\n    GlyphOfGhostlyStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungerForBlood = 45761;\n     */\n    GlyphOfHungerForBlood = 45761,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVigor = 42971;\n     */\n    GlyphOfVigor = 42971\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 43380;\n     */\n    GlyphOfVanish = 43380\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"improved_eviscerate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"remorseless_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"malice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"blood_spatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"vigor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"fleet_footed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_kidney_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"quick_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"murder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"master_poisoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"mutilate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"turn_the_tables\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hunger_for_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dual_wield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"endurance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"riposte\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"close_quarters_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"mace_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"blade_flurry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"hack_and_slash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"weapon_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"vitality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"nerves_of_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"unfair_advantage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"surprise_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"prey_on_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"master_of_deception\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sleight_of_hand\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"dirty_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"camouflage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"ghostly_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 64, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"setup\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"heightened_senses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"dirty_deeds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 72, name: \"master_of_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"deadliness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"sinister_calling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"shadowstep\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 81, name: \"filthy_tricks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { improvedEviscerate: 0, remorselessAttacks: 0, malice: 0, ruthlessness: 0, bloodSpatter: 0, puncturingWounds: 0, vigor: false, improvedExposeArmor: 0, lethality: 0, vilePoisons: 0, improvedPoisons: 0, fleetFooted: 0, coldBlood: false, improvedKidneyShot: 0, quickRecovery: 0, sealFate: 0, murder: 0, deadlyBrew: 0, overkill: false, deadenedNerves: 0, focusedAttacks: 0, findWeakness: 0, masterPoisoner: 0, mutilate: false, turnTheTables: 0, cutToTheChase: 0, hungerForBlood: false, improvedGouge: 0, improvedSinisterStrike: 0, dualWieldSpecialization: 0, improvedSliceAndDice: 0, deflection: 0, precision: 0, endurance: 0, riposte: false, closeQuartersCombat: 0, improvedKick: 0, improvedSprint: 0, lightningReflexes: 0, aggression: 0, maceSpecialization: 0, bladeFlurry: false, hackAndSlash: 0, weaponExpertise: 0, bladeTwisting: 0, vitality: 0, adrenalineRush: false, nervesOfSteel: 0, throwingSpecialization: 0, combatPotency: 0, unfairAdvantage: 0, surpriseAttacks: false, savageCombat: 0, preyOnTheWeak: 0, killingSpree: false, relentlessStrikes: 0, masterOfDeception: 0, opportunity: 0, sleightOfHand: 0, dirtyTricks: 0, camouflage: 0, elusiveness: 0, ghostlyStrike: false, serratedBlades: 0, setup: 0, initiative: 0, improvedAmbush: 0, heightenedSenses: 0, preparation: false, dirtyDeeds: 0, hemorrhage: false, masterOfSubtlety: 0, deadliness: 0, envelopingShadows: 0, premeditation: false, cheatDeath: 0, sinisterCalling: 0, waylay: 0, honorAmongThieves: 0, shadowstep: false, filthyTricks: 0, slaughterFromTheShadows: 0, shadowDance: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_eviscerate */ 1:\n                    message.improvedEviscerate = reader.int32();\n                    break;\n                case /* int32 remorseless_attacks */ 2:\n                    message.remorselessAttacks = reader.int32();\n                    break;\n                case /* int32 malice */ 3:\n                    message.malice = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 blood_spatter */ 5:\n                    message.bloodSpatter = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* bool vigor */ 7:\n                    message.vigor = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 8:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 lethality */ 9:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 improved_poisons */ 11:\n                    message.improvedPoisons = reader.int32();\n                    break;\n                case /* int32 fleet_footed */ 12:\n                    message.fleetFooted = reader.int32();\n                    break;\n                case /* bool cold_blood */ 13:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 improved_kidney_shot */ 14:\n                    message.improvedKidneyShot = reader.int32();\n                    break;\n                case /* int32 quick_recovery */ 15:\n                    message.quickRecovery = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 16:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murder */ 17:\n                    message.murder = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 18:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool overkill */ 19:\n                    message.overkill = reader.bool();\n                    break;\n                case /* int32 deadened_nerves */ 20:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 focused_attacks */ 21:\n                    message.focusedAttacks = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 22:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* int32 master_poisoner */ 23:\n                    message.masterPoisoner = reader.int32();\n                    break;\n                case /* bool mutilate */ 24:\n                    message.mutilate = reader.bool();\n                    break;\n                case /* int32 turn_the_tables */ 25:\n                    message.turnTheTables = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 26:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* bool hunger_for_blood */ 27:\n                    message.hungerForBlood = reader.bool();\n                    break;\n                case /* int32 improved_gouge */ 28:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 29:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 dual_wield_specialization */ 30:\n                    message.dualWieldSpecialization = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 31:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 deflection */ 32:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 precision */ 33:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 endurance */ 34:\n                    message.endurance = reader.int32();\n                    break;\n                case /* bool riposte */ 35:\n                    message.riposte = reader.bool();\n                    break;\n                case /* int32 close_quarters_combat */ 36:\n                    message.closeQuartersCombat = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 37:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 38:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 39:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 aggression */ 40:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 mace_specialization */ 41:\n                    message.maceSpecialization = reader.int32();\n                    break;\n                case /* bool blade_flurry */ 42:\n                    message.bladeFlurry = reader.bool();\n                    break;\n                case /* int32 hack_and_slash */ 43:\n                    message.hackAndSlash = reader.int32();\n                    break;\n                case /* int32 weapon_expertise */ 44:\n                    message.weaponExpertise = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 45:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 vitality */ 46:\n                    message.vitality = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 47:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 nerves_of_steel */ 48:\n                    message.nervesOfSteel = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 49:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 50:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 unfair_advantage */ 51:\n                    message.unfairAdvantage = reader.int32();\n                    break;\n                case /* bool surprise_attacks */ 52:\n                    message.surpriseAttacks = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 53:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 prey_on_the_weak */ 54:\n                    message.preyOnTheWeak = reader.int32();\n                    break;\n                case /* bool killing_spree */ 55:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 relentless_strikes */ 56:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 master_of_deception */ 57:\n                    message.masterOfDeception = reader.int32();\n                    break;\n                case /* int32 opportunity */ 58:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 sleight_of_hand */ 59:\n                    message.sleightOfHand = reader.int32();\n                    break;\n                case /* int32 dirty_tricks */ 60:\n                    message.dirtyTricks = reader.int32();\n                    break;\n                case /* int32 camouflage */ 61:\n                    message.camouflage = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 62:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* bool ghostly_strike */ 63:\n                    message.ghostlyStrike = reader.bool();\n                    break;\n                case /* int32 serrated_blades */ 64:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* int32 setup */ 65:\n                    message.setup = reader.int32();\n                    break;\n                case /* int32 initiative */ 66:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 67:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 heightened_senses */ 68:\n                    message.heightenedSenses = reader.int32();\n                    break;\n                case /* bool preparation */ 69:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 dirty_deeds */ 70:\n                    message.dirtyDeeds = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 71:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 master_of_subtlety */ 72:\n                    message.masterOfSubtlety = reader.int32();\n                    break;\n                case /* int32 deadliness */ 73:\n                    message.deadliness = reader.int32();\n                    break;\n                case /* int32 enveloping_shadows */ 74:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* bool premeditation */ 75:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 cheat_death */ 76:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* int32 sinister_calling */ 77:\n                    message.sinisterCalling = reader.int32();\n                    break;\n                case /* int32 waylay */ 78:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 honor_among_thieves */ 79:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool shadowstep */ 80:\n                    message.shadowstep = reader.bool();\n                    break;\n                case /* int32 filthy_tricks */ 81:\n                    message.filthyTricks = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 82:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 83:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_eviscerate = 1; */\n        if (message.improvedEviscerate !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedEviscerate);\n        /* int32 remorseless_attacks = 2; */\n        if (message.remorselessAttacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.remorselessAttacks);\n        /* int32 malice = 3; */\n        if (message.malice !== 0)\n            writer.tag(3, WireType.Varint).int32(message.malice);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 blood_spatter = 5; */\n        if (message.bloodSpatter !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodSpatter);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* bool vigor = 7; */\n        if (message.vigor !== false)\n            writer.tag(7, WireType.Varint).bool(message.vigor);\n        /* int32 improved_expose_armor = 8; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 lethality = 9; */\n        if (message.lethality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.lethality);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 improved_poisons = 11; */\n        if (message.improvedPoisons !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedPoisons);\n        /* int32 fleet_footed = 12; */\n        if (message.fleetFooted !== 0)\n            writer.tag(12, WireType.Varint).int32(message.fleetFooted);\n        /* bool cold_blood = 13; */\n        if (message.coldBlood !== false)\n            writer.tag(13, WireType.Varint).bool(message.coldBlood);\n        /* int32 improved_kidney_shot = 14; */\n        if (message.improvedKidneyShot !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedKidneyShot);\n        /* int32 quick_recovery = 15; */\n        if (message.quickRecovery !== 0)\n            writer.tag(15, WireType.Varint).int32(message.quickRecovery);\n        /* int32 seal_fate = 16; */\n        if (message.sealFate !== 0)\n            writer.tag(16, WireType.Varint).int32(message.sealFate);\n        /* int32 murder = 17; */\n        if (message.murder !== 0)\n            writer.tag(17, WireType.Varint).int32(message.murder);\n        /* int32 deadly_brew = 18; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.deadlyBrew);\n        /* bool overkill = 19; */\n        if (message.overkill !== false)\n            writer.tag(19, WireType.Varint).bool(message.overkill);\n        /* int32 deadened_nerves = 20; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(20, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 focused_attacks = 21; */\n        if (message.focusedAttacks !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedAttacks);\n        /* int32 find_weakness = 22; */\n        if (message.findWeakness !== 0)\n            writer.tag(22, WireType.Varint).int32(message.findWeakness);\n        /* int32 master_poisoner = 23; */\n        if (message.masterPoisoner !== 0)\n            writer.tag(23, WireType.Varint).int32(message.masterPoisoner);\n        /* bool mutilate = 24; */\n        if (message.mutilate !== false)\n            writer.tag(24, WireType.Varint).bool(message.mutilate);\n        /* int32 turn_the_tables = 25; */\n        if (message.turnTheTables !== 0)\n            writer.tag(25, WireType.Varint).int32(message.turnTheTables);\n        /* int32 cut_to_the_chase = 26; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(26, WireType.Varint).int32(message.cutToTheChase);\n        /* bool hunger_for_blood = 27; */\n        if (message.hungerForBlood !== false)\n            writer.tag(27, WireType.Varint).bool(message.hungerForBlood);\n        /* int32 improved_gouge = 28; */\n        if (message.improvedGouge !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedGouge);\n        /* int32 improved_sinister_strike = 29; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(29, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 dual_wield_specialization = 30; */\n        if (message.dualWieldSpecialization !== 0)\n            writer.tag(30, WireType.Varint).int32(message.dualWieldSpecialization);\n        /* int32 improved_slice_and_dice = 31; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 deflection = 32; */\n        if (message.deflection !== 0)\n            writer.tag(32, WireType.Varint).int32(message.deflection);\n        /* int32 precision = 33; */\n        if (message.precision !== 0)\n            writer.tag(33, WireType.Varint).int32(message.precision);\n        /* int32 endurance = 34; */\n        if (message.endurance !== 0)\n            writer.tag(34, WireType.Varint).int32(message.endurance);\n        /* bool riposte = 35; */\n        if (message.riposte !== false)\n            writer.tag(35, WireType.Varint).bool(message.riposte);\n        /* int32 close_quarters_combat = 36; */\n        if (message.closeQuartersCombat !== 0)\n            writer.tag(36, WireType.Varint).int32(message.closeQuartersCombat);\n        /* int32 improved_kick = 37; */\n        if (message.improvedKick !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedKick);\n        /* int32 improved_sprint = 38; */\n        if (message.improvedSprint !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedSprint);\n        /* int32 lightning_reflexes = 39; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 aggression = 40; */\n        if (message.aggression !== 0)\n            writer.tag(40, WireType.Varint).int32(message.aggression);\n        /* int32 mace_specialization = 41; */\n        if (message.maceSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.maceSpecialization);\n        /* bool blade_flurry = 42; */\n        if (message.bladeFlurry !== false)\n            writer.tag(42, WireType.Varint).bool(message.bladeFlurry);\n        /* int32 hack_and_slash = 43; */\n        if (message.hackAndSlash !== 0)\n            writer.tag(43, WireType.Varint).int32(message.hackAndSlash);\n        /* int32 weapon_expertise = 44; */\n        if (message.weaponExpertise !== 0)\n            writer.tag(44, WireType.Varint).int32(message.weaponExpertise);\n        /* int32 blade_twisting = 45; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(45, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 vitality = 46; */\n        if (message.vitality !== 0)\n            writer.tag(46, WireType.Varint).int32(message.vitality);\n        /* bool adrenaline_rush = 47; */\n        if (message.adrenalineRush !== false)\n            writer.tag(47, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 nerves_of_steel = 48; */\n        if (message.nervesOfSteel !== 0)\n            writer.tag(48, WireType.Varint).int32(message.nervesOfSteel);\n        /* int32 throwing_specialization = 49; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(49, WireType.Varint).int32(message.throwingSpecialization);\n        /* int32 combat_potency = 50; */\n        if (message.combatPotency !== 0)\n            writer.tag(50, WireType.Varint).int32(message.combatPotency);\n        /* int32 unfair_advantage = 51; */\n        if (message.unfairAdvantage !== 0)\n            writer.tag(51, WireType.Varint).int32(message.unfairAdvantage);\n        /* bool surprise_attacks = 52; */\n        if (message.surpriseAttacks !== false)\n            writer.tag(52, WireType.Varint).bool(message.surpriseAttacks);\n        /* int32 savage_combat = 53; */\n        if (message.savageCombat !== 0)\n            writer.tag(53, WireType.Varint).int32(message.savageCombat);\n        /* int32 prey_on_the_weak = 54; */\n        if (message.preyOnTheWeak !== 0)\n            writer.tag(54, WireType.Varint).int32(message.preyOnTheWeak);\n        /* bool killing_spree = 55; */\n        if (message.killingSpree !== false)\n            writer.tag(55, WireType.Varint).bool(message.killingSpree);\n        /* int32 relentless_strikes = 56; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 master_of_deception = 57; */\n        if (message.masterOfDeception !== 0)\n            writer.tag(57, WireType.Varint).int32(message.masterOfDeception);\n        /* int32 opportunity = 58; */\n        if (message.opportunity !== 0)\n            writer.tag(58, WireType.Varint).int32(message.opportunity);\n        /* int32 sleight_of_hand = 59; */\n        if (message.sleightOfHand !== 0)\n            writer.tag(59, WireType.Varint).int32(message.sleightOfHand);\n        /* int32 dirty_tricks = 60; */\n        if (message.dirtyTricks !== 0)\n            writer.tag(60, WireType.Varint).int32(message.dirtyTricks);\n        /* int32 camouflage = 61; */\n        if (message.camouflage !== 0)\n            writer.tag(61, WireType.Varint).int32(message.camouflage);\n        /* int32 elusiveness = 62; */\n        if (message.elusiveness !== 0)\n            writer.tag(62, WireType.Varint).int32(message.elusiveness);\n        /* bool ghostly_strike = 63; */\n        if (message.ghostlyStrike !== false)\n            writer.tag(63, WireType.Varint).bool(message.ghostlyStrike);\n        /* int32 serrated_blades = 64; */\n        if (message.serratedBlades !== 0)\n            writer.tag(64, WireType.Varint).int32(message.serratedBlades);\n        /* int32 setup = 65; */\n        if (message.setup !== 0)\n            writer.tag(65, WireType.Varint).int32(message.setup);\n        /* int32 initiative = 66; */\n        if (message.initiative !== 0)\n            writer.tag(66, WireType.Varint).int32(message.initiative);\n        /* int32 improved_ambush = 67; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(67, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 heightened_senses = 68; */\n        if (message.heightenedSenses !== 0)\n            writer.tag(68, WireType.Varint).int32(message.heightenedSenses);\n        /* bool preparation = 69; */\n        if (message.preparation !== false)\n            writer.tag(69, WireType.Varint).bool(message.preparation);\n        /* int32 dirty_deeds = 70; */\n        if (message.dirtyDeeds !== 0)\n            writer.tag(70, WireType.Varint).int32(message.dirtyDeeds);\n        /* bool hemorrhage = 71; */\n        if (message.hemorrhage !== false)\n            writer.tag(71, WireType.Varint).bool(message.hemorrhage);\n        /* int32 master_of_subtlety = 72; */\n        if (message.masterOfSubtlety !== 0)\n            writer.tag(72, WireType.Varint).int32(message.masterOfSubtlety);\n        /* int32 deadliness = 73; */\n        if (message.deadliness !== 0)\n            writer.tag(73, WireType.Varint).int32(message.deadliness);\n        /* int32 enveloping_shadows = 74; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(74, WireType.Varint).int32(message.envelopingShadows);\n        /* bool premeditation = 75; */\n        if (message.premeditation !== false)\n            writer.tag(75, WireType.Varint).bool(message.premeditation);\n        /* int32 cheat_death = 76; */\n        if (message.cheatDeath !== 0)\n            writer.tag(76, WireType.Varint).int32(message.cheatDeath);\n        /* int32 sinister_calling = 77; */\n        if (message.sinisterCalling !== 0)\n            writer.tag(77, WireType.Varint).int32(message.sinisterCalling);\n        /* int32 waylay = 78; */\n        if (message.waylay !== 0)\n            writer.tag(78, WireType.Varint).int32(message.waylay);\n        /* int32 honor_among_thieves = 79; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(79, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool shadowstep = 80; */\n        if (message.shadowstep !== false)\n            writer.tag(80, WireType.Varint).bool(message.shadowstep);\n        /* int32 filthy_tricks = 81; */\n        if (message.filthyTricks !== 0)\n            writer.tag(81, WireType.Varint).int32(message.filthyTricks);\n        /* int32 slaughter_from_the_shadows = 82; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(82, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* bool shadow_dance = 83; */\n        if (message.shadowDance !== false)\n            writer.tag(83, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue$Type extends MessageType<Rogue> {\n    constructor() {\n        super(\"proto.Rogue\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Rogue_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => RogueTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Rogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue>): Rogue {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue): Rogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation rotation */ 1:\n                    message.rotation = Rogue_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.RogueTalents talents */ 2:\n                    message.talents = RogueTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Rogue.Options options */ 3:\n                    message.options = Rogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation rotation = 1; */\n        if (message.rotation)\n            Rogue_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RogueTalents talents = 2; */\n        if (message.talents)\n            RogueTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options options = 3; */\n        if (message.options)\n            Rogue_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue\n */\nexport const Rogue = new Rogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Rotation$Type extends MessageType<Rogue_Rotation> {\n    constructor() {\n        super(\"proto.Rogue.Rotation\", [\n            { no: 1, name: \"expose_armor_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 2, name: \"minimum_combo_points_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"tricks_of_the_trade_frequency\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 4, name: \"combat_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.CombatPriority\", Rogue_Rotation_CombatPriority] },\n            { no: 5, name: \"assassination_finisher_priority\", kind: \"enum\", T: () => [\"proto.Rogue.Rotation.AssassinationPriority\", Rogue_Rotation_AssassinationPriority] },\n            { no: 6, name: \"minimum_combo_points_primary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"minimum_combo_points_secondary_finisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"MultiTargetSliceFrequency\", kind: \"enum\", jsonName: \"MultiTargetSliceFrequency\", T: () => [\"proto.Rogue.Rotation.Frequency\", Rogue_Rotation_Frequency] },\n            { no: 9, name: \"minimum_combo_points_multi_target_slice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"envenom_pool_amount\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"use_feint\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"allow_cp_overcap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"allow_cp_undercap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"open_with_garrote\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"rupture_for_bleed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"envenom_energy_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Rotation>): Rogue_Rotation {\n        const message = { exposeArmorFrequency: 0, minimumComboPointsExposeArmor: 0, tricksOfTheTradeFrequency: 0, combatFinisherPriority: 0, assassinationFinisherPriority: 0, minimumComboPointsPrimaryFinisher: 0, minimumComboPointsSecondaryFinisher: 0, multiTargetSliceFrequency: 0, minimumComboPointsMultiTargetSlice: 0, envenomPoolAmount: 0, useFeint: false, allowCpOvercap: false, allowCpUndercap: false, openWithGarrote: false, ruptureForBleed: false, envenomEnergyThreshold: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Rotation): Rogue_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Rogue.Rotation.Frequency expose_armor_frequency */ 1:\n                    message.exposeArmorFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_expose_armor */ 2:\n                    message.minimumComboPointsExposeArmor = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency */ 3:\n                    message.tricksOfTheTradeFrequency = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority */ 4:\n                    message.combatFinisherPriority = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority */ 5:\n                    message.assassinationFinisherPriority = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_primary_finisher */ 6:\n                    message.minimumComboPointsPrimaryFinisher = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_secondary_finisher */ 7:\n                    message.minimumComboPointsSecondaryFinisher = reader.int32();\n                    break;\n                case /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"];*/ 8:\n                    message.multiTargetSliceFrequency = reader.int32();\n                    break;\n                case /* int32 minimum_combo_points_multi_target_slice */ 9:\n                    message.minimumComboPointsMultiTargetSlice = reader.int32();\n                    break;\n                case /* int32 envenom_pool_amount */ 10:\n                    message.envenomPoolAmount = reader.int32();\n                    break;\n                case /* bool use_feint */ 11:\n                    message.useFeint = reader.bool();\n                    break;\n                case /* bool allow_cp_overcap */ 12:\n                    message.allowCpOvercap = reader.bool();\n                    break;\n                case /* bool allow_cp_undercap */ 13:\n                    message.allowCpUndercap = reader.bool();\n                    break;\n                case /* bool open_with_garrote */ 14:\n                    message.openWithGarrote = reader.bool();\n                    break;\n                case /* bool rupture_for_bleed */ 15:\n                    message.ruptureForBleed = reader.bool();\n                    break;\n                case /* int32 envenom_energy_threshold */ 16:\n                    message.envenomEnergyThreshold = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Rogue.Rotation.Frequency expose_armor_frequency = 1; */\n        if (message.exposeArmorFrequency !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exposeArmorFrequency);\n        /* int32 minimum_combo_points_expose_armor = 2; */\n        if (message.minimumComboPointsExposeArmor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minimumComboPointsExposeArmor);\n        /* proto.Rogue.Rotation.Frequency tricks_of_the_trade_frequency = 3; */\n        if (message.tricksOfTheTradeFrequency !== 0)\n            writer.tag(3, WireType.Varint).int32(message.tricksOfTheTradeFrequency);\n        /* proto.Rogue.Rotation.CombatPriority combat_finisher_priority = 4; */\n        if (message.combatFinisherPriority !== 0)\n            writer.tag(4, WireType.Varint).int32(message.combatFinisherPriority);\n        /* proto.Rogue.Rotation.AssassinationPriority assassination_finisher_priority = 5; */\n        if (message.assassinationFinisherPriority !== 0)\n            writer.tag(5, WireType.Varint).int32(message.assassinationFinisherPriority);\n        /* int32 minimum_combo_points_primary_finisher = 6; */\n        if (message.minimumComboPointsPrimaryFinisher !== 0)\n            writer.tag(6, WireType.Varint).int32(message.minimumComboPointsPrimaryFinisher);\n        /* int32 minimum_combo_points_secondary_finisher = 7; */\n        if (message.minimumComboPointsSecondaryFinisher !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minimumComboPointsSecondaryFinisher);\n        /* proto.Rogue.Rotation.Frequency MultiTargetSliceFrequency = 8 [json_name = \"MultiTargetSliceFrequency\"]; */\n        if (message.multiTargetSliceFrequency !== 0)\n            writer.tag(8, WireType.Varint).int32(message.multiTargetSliceFrequency);\n        /* int32 minimum_combo_points_multi_target_slice = 9; */\n        if (message.minimumComboPointsMultiTargetSlice !== 0)\n            writer.tag(9, WireType.Varint).int32(message.minimumComboPointsMultiTargetSlice);\n        /* int32 envenom_pool_amount = 10; */\n        if (message.envenomPoolAmount !== 0)\n            writer.tag(10, WireType.Varint).int32(message.envenomPoolAmount);\n        /* bool use_feint = 11; */\n        if (message.useFeint !== false)\n            writer.tag(11, WireType.Varint).bool(message.useFeint);\n        /* bool allow_cp_overcap = 12; */\n        if (message.allowCpOvercap !== false)\n            writer.tag(12, WireType.Varint).bool(message.allowCpOvercap);\n        /* bool allow_cp_undercap = 13; */\n        if (message.allowCpUndercap !== false)\n            writer.tag(13, WireType.Varint).bool(message.allowCpUndercap);\n        /* bool open_with_garrote = 14; */\n        if (message.openWithGarrote !== false)\n            writer.tag(14, WireType.Varint).bool(message.openWithGarrote);\n        /* bool rupture_for_bleed = 15; */\n        if (message.ruptureForBleed !== false)\n            writer.tag(15, WireType.Varint).bool(message.ruptureForBleed);\n        /* int32 envenom_energy_threshold = 16; */\n        if (message.envenomEnergyThreshold !== 0)\n            writer.tag(16, WireType.Varint).int32(message.envenomEnergyThreshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Rotation\n */\nexport const Rogue_Rotation = new Rogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Rogue_Options$Type extends MessageType<Rogue_Options> {\n    constructor() {\n        super(\"proto.Rogue.Options\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.Rogue.Options.PoisonImbue\", Rogue_Options_PoisonImbue] },\n            { no: 4, name: \"starting_overkill_duration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"apply_poisons_manually\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Rogue_Options>): Rogue_Options {\n        const message = { mhImbue: 0, ohImbue: 0, startingOverkillDuration: 0, applyPoisonsManually: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Rogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Rogue_Options): Rogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.Rogue.Options.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                case /* int32 starting_overkill_duration */ 4:\n                    message.startingOverkillDuration = reader.int32();\n                    break;\n                case /* bool apply_poisons_manually */ 5:\n                    message.applyPoisonsManually = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Rogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue.Options.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.Rogue.Options.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        /* int32 starting_overkill_duration = 4; */\n        if (message.startingOverkillDuration !== 0)\n            writer.tag(4, WireType.Varint).int32(message.startingOverkillDuration);\n        /* bool apply_poisons_manually = 5; */\n        if (message.applyPoisonsManually !== false)\n            writer.tag(5, WireType.Varint).bool(message.applyPoisonsManually);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Rogue.Options\n */\nexport const Rogue_Options = new Rogue_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\nimport { RaidTarget } from \"./common\";\n/**\n * WotLK talents\n *\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 unbreakable_will = 1;\n     */\n    unbreakableWill: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 silent_resolve = 3;\n     */\n    silentResolve: number;\n    /**\n     * @generated from protobuf field: int32 improved_inner_fire = 4;\n     */\n    improvedInnerFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_fortitude = 5;\n     */\n    improvedPowerWordFortitude: number;\n    /**\n     * @generated from protobuf field: int32 martyrdom = 6;\n     */\n    martyrdom: number;\n    /**\n     * @generated from protobuf field: int32 meditation = 7;\n     */\n    meditation: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 8;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_power_word_shield = 9;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 absolution = 10;\n     */\n    absolution: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 11;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 improved_mana_burn = 12;\n     */\n    improvedManaBurn: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 13;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 mental_strength = 14;\n     */\n    mentalStrength: number;\n    /**\n     * @generated from protobuf field: bool soul_warding = 15;\n     */\n    soulWarding: boolean;\n    /**\n     * @generated from protobuf field: int32 focused_power = 16;\n     */\n    focusedPower: number;\n    /**\n     * @generated from protobuf field: int32 enlightenment = 17;\n     */\n    enlightenment: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 18;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 19;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flash_heal = 20;\n     */\n    improvedFlashHeal: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 21;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 22;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 aspiration = 23;\n     */\n    aspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 24;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 25;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 grace = 26;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 27;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: bool penance = 28;\n     */\n    penance: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 healing_focus = 29;\n     */\n    healingFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_renew = 30;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 holy_specialization = 31;\n     */\n    holySpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spell_warding = 32;\n     */\n    spellWarding: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 33;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 34;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_recovery = 35;\n     */\n    blessedRecovery: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 36;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 holy_reach = 37;\n     */\n    holyReach: number;\n    /**\n     * @generated from protobuf field: int32 improved_healing = 38;\n     */\n    improvedHealing: number;\n    /**\n     * @generated from protobuf field: int32 searing_light = 39;\n     */\n    searingLight: number;\n    /**\n     * @generated from protobuf field: int32 healing_prayers = 40;\n     */\n    healingPrayers: number;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 41;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 spiritual_guidance = 42;\n     */\n    spiritualGuidance: number;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 43;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_healing = 44;\n     */\n    spiritualHealing: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 45;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 46;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 47;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 48;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 49;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 serendipity = 50;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 empowered_renew = 51;\n     */\n    empoweredRenew: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 52;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 53;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 divine_providence = 54;\n     */\n    divineProvidence: number;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 55;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 spirit_tap = 56;\n     */\n    spiritTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_spirit_tap = 57;\n     */\n    improvedSpiritTap: number;\n    /**\n     * @generated from protobuf field: int32 darkness = 58;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 shadow_affinity = 59;\n     */\n    shadowAffinity: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 60;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 shadow_focus = 61;\n     */\n    shadowFocus: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 62;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 63;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: bool mind_flay = 64;\n     */\n    mindFlay: boolean;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 65;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 shadow_reach = 66;\n     */\n    shadowReach: number;\n    /**\n     * @generated from protobuf field: int32 shadow_weaving = 67;\n     */\n    shadowWeaving: number;\n    /**\n     * @generated from protobuf field: bool silence = 68;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 69;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_vampiric_embrace = 70;\n     */\n    improvedVampiricEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 focused_mind = 71;\n     */\n    focusedMind: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 72;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 73;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 74;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_power = 75;\n     */\n    shadowPower: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadowform = 76;\n     */\n    improvedShadowform: number;\n    /**\n     * @generated from protobuf field: int32 misery = 77;\n     */\n    misery: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 78;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 79;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 80;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 81;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 82;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation rotation = 1;\n     */\n    rotation?: ShadowPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Rotation.RotationType rotation_type = 1;\n     */\n    rotationType: ShadowPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool precast_vt = 2;\n     */\n    precastVt: boolean; // casts VT ahead of the start of the fight so that it lands on 0\n    /**\n     * @generated from protobuf field: double latency = 3;\n     */\n    latency: number; // Latency between actions\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Rotation.RotationType\n */\nexport enum ShadowPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Basic = 1;\n     */\n    Basic = 1,\n    /**\n     * @generated from protobuf enum value: Clipping = 2;\n     */\n    Clipping = 2,\n    /**\n     * @generated from protobuf enum value: Ideal = 3;\n     */\n    Ideal = 3,\n    /**\n     * @generated from protobuf enum value: AoE = 4;\n     */\n    AoE = 4\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options.Armor armor = 2;\n     */\n    armor: ShadowPriest_Options_Armor;\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 4;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 5;\n     */\n    useShadowWordDeath: boolean;\n}\n/**\n * @generated from protobuf enum proto.ShadowPriest.Options.Armor\n */\nexport enum ShadowPriest_Options_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.SmitePriest\n */\nexport interface SmitePriest {\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Rotation rotation = 1;\n     */\n    rotation?: SmitePriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.SmitePriest.Options options = 3;\n     */\n    options?: SmitePriest_Options;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Rotation\n */\nexport interface SmitePriest_Rotation {\n    /**\n     * @generated from protobuf field: bool use_mind_blast = 2;\n     */\n    useMindBlast: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadow_word_death = 3;\n     */\n    useShadowWordDeath: boolean;\n    /**\n     * @generated from protobuf field: bool use_devouring_plague = 4;\n     */\n    useDevouringPlague: boolean;\n    /**\n     * @generated from protobuf field: bool meme_dream = 5;\n     */\n    memeDream: boolean;\n    /**\n     * @generated from protobuf field: double allowed_holy_fire_delay_ms = 6;\n     */\n    allowedHolyFireDelayMs: number;\n}\n/**\n * @generated from protobuf message proto.SmitePriest.Options\n */\nexport interface SmitePriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.HealingPriest\n */\nexport interface HealingPriest {\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Rotation rotation = 1;\n     */\n    rotation?: HealingPriest_Rotation;\n    /**\n     * @generated from protobuf field: proto.PriestTalents talents = 2;\n     */\n    talents?: PriestTalents;\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Options options = 3;\n     */\n    options?: HealingPriest_Options;\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Rotation\n */\nexport interface HealingPriest_Rotation {\n    /**\n     * @generated from protobuf field: proto.HealingPriest.Rotation.RotationType type = 1;\n     */\n    type: HealingPriest_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 2;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.HealingPriest.Rotation.RotationType\n */\nexport enum HealingPriest_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Cycle = 1;\n     */\n    Cycle = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.HealingPriest.Rotation.SpellOption\n */\nexport enum HealingPriest_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: GreaterHeal = 1;\n     */\n    GreaterHeal = 1,\n    /**\n     * @generated from protobuf enum value: FlashHeal = 2;\n     */\n    FlashHeal = 2,\n    /**\n     * @generated from protobuf enum value: Renew = 3;\n     */\n    Renew = 3,\n    /**\n     * @generated from protobuf enum value: PowerWordShield = 4;\n     */\n    PowerWordShield = 4,\n    /**\n     * @generated from protobuf enum value: CircleOfHealing = 5;\n     */\n    CircleOfHealing = 5,\n    /**\n     * @generated from protobuf enum value: PrayerOfHealing = 6;\n     */\n    PrayerOfHealing = 6,\n    /**\n     * @generated from protobuf enum value: PrayerOfMending = 7;\n     */\n    PrayerOfMending = 7,\n    /**\n     * @generated from protobuf enum value: Penance = 8;\n     */\n    Penance = 8,\n    /**\n     * @generated from protobuf enum value: BindingHeal = 9;\n     */\n    BindingHeal = 9\n}\n/**\n * @generated from protobuf message proto.HealingPriest.Options\n */\nexport interface HealingPriest_Options {\n    /**\n     * @generated from protobuf field: bool use_inner_fire = 3;\n     */\n    useInnerFire: boolean;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 1;\n     */\n    useShadowfiend: boolean;\n    /**\n     * @generated from protobuf field: proto.RaidTarget power_infusion_target = 2;\n     */\n    powerInfusionTarget?: RaidTarget;\n    /**\n     * Number of times for rapture to proc each minute, ie when a PWS is fully absorbed.\n     *\n     * @generated from protobuf field: double raptures_per_minute = 4;\n     */\n    rapturesPerMinute: number;\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfHymnOfHope = 45758;\n     */\n    GlyphOfHymnOfHope = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindControl = 42405;\n     */\n    GlyphOfMindControl = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindSear = 45757;\n     */\n    GlyphOfMindSear = 45757,\n    /**\n     * @generated from protobuf enum value: GlyphOfPainSuppression = 45760;\n     */\n    GlyphOfPainSuppression = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 42407;\n     */\n    GlyphOfShadow = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritOfRedemption = 42417;\n     */\n    GlyphOfSpiritOfRedemption = 42417\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"unbreakable_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"silent_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_inner_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_power_word_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"martyrdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"absolution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_mana_burn\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"mental_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soul_warding\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"focused_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"enlightenment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_flash_heal\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"aspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"penance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"healing_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"holy_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"spell_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"blessed_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"holy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"improved_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"searing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"healing_prayers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"spiritual_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"spiritual_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"empowered_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"divine_providence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_spirit_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"shadow_affinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shadow_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"mind_flay\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 65, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"shadow_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"shadow_weaving\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 69, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"improved_vampiric_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"focused_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 75, name: \"shadow_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"improved_shadowform\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"misery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 80, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { unbreakableWill: 0, twinDisciplines: 0, silentResolve: 0, improvedInnerFire: 0, improvedPowerWordFortitude: 0, martyrdom: 0, meditation: 0, innerFocus: false, improvedPowerWordShield: 0, absolution: 0, mentalAgility: 0, improvedManaBurn: 0, reflectiveShield: 0, mentalStrength: 0, soulWarding: false, focusedPower: 0, enlightenment: 0, focusedWill: 0, powerInfusion: false, improvedFlashHeal: 0, renewedHope: 0, rapture: 0, aspiration: 0, divineAegis: 0, painSuppression: false, grace: 0, borrowedTime: 0, penance: false, healingFocus: 0, improvedRenew: 0, holySpecialization: 0, spellWarding: 0, divineFury: 0, desperatePrayer: false, blessedRecovery: 0, inspiration: 0, holyReach: 0, improvedHealing: 0, searingLight: 0, healingPrayers: 0, spiritOfRedemption: false, spiritualGuidance: 0, surgeOfLight: 0, spiritualHealing: 0, holyConcentration: 0, lightwell: false, blessedResilience: 0, bodyAndSoul: 0, empoweredHealing: 0, serendipity: 0, empoweredRenew: 0, circleOfHealing: false, testOfFaith: 0, divineProvidence: 0, guardianSpirit: false, spiritTap: 0, improvedSpiritTap: 0, darkness: 0, shadowAffinity: 0, improvedShadowWordPain: 0, shadowFocus: 0, improvedPsychicScream: 0, improvedMindBlast: 0, mindFlay: false, veiledShadows: 0, shadowReach: 0, shadowWeaving: 0, silence: false, vampiricEmbrace: false, improvedVampiricEmbrace: 0, focusedMind: 0, mindMelt: 0, improvedDevouringPlague: 0, shadowform: false, shadowPower: 0, improvedShadowform: 0, misery: 0, psychicHorror: false, vampiricTouch: false, painAndSuffering: 0, twistedFaith: 0, dispersion: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unbreakable_will */ 1:\n                    message.unbreakableWill = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 silent_resolve */ 3:\n                    message.silentResolve = reader.int32();\n                    break;\n                case /* int32 improved_inner_fire */ 4:\n                    message.improvedInnerFire = reader.int32();\n                    break;\n                case /* int32 improved_power_word_fortitude */ 5:\n                    message.improvedPowerWordFortitude = reader.int32();\n                    break;\n                case /* int32 martyrdom */ 6:\n                    message.martyrdom = reader.int32();\n                    break;\n                case /* int32 meditation */ 7:\n                    message.meditation = reader.int32();\n                    break;\n                case /* bool inner_focus */ 8:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 improved_power_word_shield */ 9:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 absolution */ 10:\n                    message.absolution = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 11:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 improved_mana_burn */ 12:\n                    message.improvedManaBurn = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 13:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 mental_strength */ 14:\n                    message.mentalStrength = reader.int32();\n                    break;\n                case /* bool soul_warding */ 15:\n                    message.soulWarding = reader.bool();\n                    break;\n                case /* int32 focused_power */ 16:\n                    message.focusedPower = reader.int32();\n                    break;\n                case /* int32 enlightenment */ 17:\n                    message.enlightenment = reader.int32();\n                    break;\n                case /* int32 focused_will */ 18:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* bool power_infusion */ 19:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 improved_flash_heal */ 20:\n                    message.improvedFlashHeal = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 21:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* int32 rapture */ 22:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 aspiration */ 23:\n                    message.aspiration = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 24:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 25:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 grace */ 26:\n                    message.grace = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 27:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* bool penance */ 28:\n                    message.penance = reader.bool();\n                    break;\n                case /* int32 healing_focus */ 29:\n                    message.healingFocus = reader.int32();\n                    break;\n                case /* int32 improved_renew */ 30:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 holy_specialization */ 31:\n                    message.holySpecialization = reader.int32();\n                    break;\n                case /* int32 spell_warding */ 32:\n                    message.spellWarding = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 33:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 34:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 blessed_recovery */ 35:\n                    message.blessedRecovery = reader.int32();\n                    break;\n                case /* int32 inspiration */ 36:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 holy_reach */ 37:\n                    message.holyReach = reader.int32();\n                    break;\n                case /* int32 improved_healing */ 38:\n                    message.improvedHealing = reader.int32();\n                    break;\n                case /* int32 searing_light */ 39:\n                    message.searingLight = reader.int32();\n                    break;\n                case /* int32 healing_prayers */ 40:\n                    message.healingPrayers = reader.int32();\n                    break;\n                case /* bool spirit_of_redemption */ 41:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 spiritual_guidance */ 42:\n                    message.spiritualGuidance = reader.int32();\n                    break;\n                case /* int32 surge_of_light */ 43:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 spiritual_healing */ 44:\n                    message.spiritualHealing = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 45:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 46:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 47:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 48:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 49:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 serendipity */ 50:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 empowered_renew */ 51:\n                    message.empoweredRenew = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 52:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* int32 test_of_faith */ 53:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 divine_providence */ 54:\n                    message.divineProvidence = reader.int32();\n                    break;\n                case /* bool guardian_spirit */ 55:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 spirit_tap */ 56:\n                    message.spiritTap = reader.int32();\n                    break;\n                case /* int32 improved_spirit_tap */ 57:\n                    message.improvedSpiritTap = reader.int32();\n                    break;\n                case /* int32 darkness */ 58:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 shadow_affinity */ 59:\n                    message.shadowAffinity = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 60:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 shadow_focus */ 61:\n                    message.shadowFocus = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 62:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 63:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* bool mind_flay */ 64:\n                    message.mindFlay = reader.bool();\n                    break;\n                case /* int32 veiled_shadows */ 65:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 shadow_reach */ 66:\n                    message.shadowReach = reader.int32();\n                    break;\n                case /* int32 shadow_weaving */ 67:\n                    message.shadowWeaving = reader.int32();\n                    break;\n                case /* bool silence */ 68:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 69:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 improved_vampiric_embrace */ 70:\n                    message.improvedVampiricEmbrace = reader.int32();\n                    break;\n                case /* int32 focused_mind */ 71:\n                    message.focusedMind = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 72:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 73:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* bool shadowform */ 74:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 shadow_power */ 75:\n                    message.shadowPower = reader.int32();\n                    break;\n                case /* int32 improved_shadowform */ 76:\n                    message.improvedShadowform = reader.int32();\n                    break;\n                case /* int32 misery */ 77:\n                    message.misery = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 78:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* bool vampiric_touch */ 79:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 pain_and_suffering */ 80:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 81:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool dispersion */ 82:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unbreakable_will = 1; */\n        if (message.unbreakableWill !== 0)\n            writer.tag(1, WireType.Varint).int32(message.unbreakableWill);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 silent_resolve = 3; */\n        if (message.silentResolve !== 0)\n            writer.tag(3, WireType.Varint).int32(message.silentResolve);\n        /* int32 improved_inner_fire = 4; */\n        if (message.improvedInnerFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedInnerFire);\n        /* int32 improved_power_word_fortitude = 5; */\n        if (message.improvedPowerWordFortitude !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedPowerWordFortitude);\n        /* int32 martyrdom = 6; */\n        if (message.martyrdom !== 0)\n            writer.tag(6, WireType.Varint).int32(message.martyrdom);\n        /* int32 meditation = 7; */\n        if (message.meditation !== 0)\n            writer.tag(7, WireType.Varint).int32(message.meditation);\n        /* bool inner_focus = 8; */\n        if (message.innerFocus !== false)\n            writer.tag(8, WireType.Varint).bool(message.innerFocus);\n        /* int32 improved_power_word_shield = 9; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 absolution = 10; */\n        if (message.absolution !== 0)\n            writer.tag(10, WireType.Varint).int32(message.absolution);\n        /* int32 mental_agility = 11; */\n        if (message.mentalAgility !== 0)\n            writer.tag(11, WireType.Varint).int32(message.mentalAgility);\n        /* int32 improved_mana_burn = 12; */\n        if (message.improvedManaBurn !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedManaBurn);\n        /* int32 reflective_shield = 13; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(13, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 mental_strength = 14; */\n        if (message.mentalStrength !== 0)\n            writer.tag(14, WireType.Varint).int32(message.mentalStrength);\n        /* bool soul_warding = 15; */\n        if (message.soulWarding !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulWarding);\n        /* int32 focused_power = 16; */\n        if (message.focusedPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.focusedPower);\n        /* int32 enlightenment = 17; */\n        if (message.enlightenment !== 0)\n            writer.tag(17, WireType.Varint).int32(message.enlightenment);\n        /* int32 focused_will = 18; */\n        if (message.focusedWill !== 0)\n            writer.tag(18, WireType.Varint).int32(message.focusedWill);\n        /* bool power_infusion = 19; */\n        if (message.powerInfusion !== false)\n            writer.tag(19, WireType.Varint).bool(message.powerInfusion);\n        /* int32 improved_flash_heal = 20; */\n        if (message.improvedFlashHeal !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFlashHeal);\n        /* int32 renewed_hope = 21; */\n        if (message.renewedHope !== 0)\n            writer.tag(21, WireType.Varint).int32(message.renewedHope);\n        /* int32 rapture = 22; */\n        if (message.rapture !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapture);\n        /* int32 aspiration = 23; */\n        if (message.aspiration !== 0)\n            writer.tag(23, WireType.Varint).int32(message.aspiration);\n        /* int32 divine_aegis = 24; */\n        if (message.divineAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 25; */\n        if (message.painSuppression !== false)\n            writer.tag(25, WireType.Varint).bool(message.painSuppression);\n        /* int32 grace = 26; */\n        if (message.grace !== 0)\n            writer.tag(26, WireType.Varint).int32(message.grace);\n        /* int32 borrowed_time = 27; */\n        if (message.borrowedTime !== 0)\n            writer.tag(27, WireType.Varint).int32(message.borrowedTime);\n        /* bool penance = 28; */\n        if (message.penance !== false)\n            writer.tag(28, WireType.Varint).bool(message.penance);\n        /* int32 healing_focus = 29; */\n        if (message.healingFocus !== 0)\n            writer.tag(29, WireType.Varint).int32(message.healingFocus);\n        /* int32 improved_renew = 30; */\n        if (message.improvedRenew !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedRenew);\n        /* int32 holy_specialization = 31; */\n        if (message.holySpecialization !== 0)\n            writer.tag(31, WireType.Varint).int32(message.holySpecialization);\n        /* int32 spell_warding = 32; */\n        if (message.spellWarding !== 0)\n            writer.tag(32, WireType.Varint).int32(message.spellWarding);\n        /* int32 divine_fury = 33; */\n        if (message.divineFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 34; */\n        if (message.desperatePrayer !== false)\n            writer.tag(34, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 blessed_recovery = 35; */\n        if (message.blessedRecovery !== 0)\n            writer.tag(35, WireType.Varint).int32(message.blessedRecovery);\n        /* int32 inspiration = 36; */\n        if (message.inspiration !== 0)\n            writer.tag(36, WireType.Varint).int32(message.inspiration);\n        /* int32 holy_reach = 37; */\n        if (message.holyReach !== 0)\n            writer.tag(37, WireType.Varint).int32(message.holyReach);\n        /* int32 improved_healing = 38; */\n        if (message.improvedHealing !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedHealing);\n        /* int32 searing_light = 39; */\n        if (message.searingLight !== 0)\n            writer.tag(39, WireType.Varint).int32(message.searingLight);\n        /* int32 healing_prayers = 40; */\n        if (message.healingPrayers !== 0)\n            writer.tag(40, WireType.Varint).int32(message.healingPrayers);\n        /* bool spirit_of_redemption = 41; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(41, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 spiritual_guidance = 42; */\n        if (message.spiritualGuidance !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualGuidance);\n        /* int32 surge_of_light = 43; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(43, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 spiritual_healing = 44; */\n        if (message.spiritualHealing !== 0)\n            writer.tag(44, WireType.Varint).int32(message.spiritualHealing);\n        /* int32 holy_concentration = 45; */\n        if (message.holyConcentration !== 0)\n            writer.tag(45, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 46; */\n        if (message.lightwell !== false)\n            writer.tag(46, WireType.Varint).bool(message.lightwell);\n        /* int32 blessed_resilience = 47; */\n        if (message.blessedResilience !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blessedResilience);\n        /* int32 body_and_soul = 48; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(48, WireType.Varint).int32(message.bodyAndSoul);\n        /* int32 empowered_healing = 49; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(49, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 serendipity = 50; */\n        if (message.serendipity !== 0)\n            writer.tag(50, WireType.Varint).int32(message.serendipity);\n        /* int32 empowered_renew = 51; */\n        if (message.empoweredRenew !== 0)\n            writer.tag(51, WireType.Varint).int32(message.empoweredRenew);\n        /* bool circle_of_healing = 52; */\n        if (message.circleOfHealing !== false)\n            writer.tag(52, WireType.Varint).bool(message.circleOfHealing);\n        /* int32 test_of_faith = 53; */\n        if (message.testOfFaith !== 0)\n            writer.tag(53, WireType.Varint).int32(message.testOfFaith);\n        /* int32 divine_providence = 54; */\n        if (message.divineProvidence !== 0)\n            writer.tag(54, WireType.Varint).int32(message.divineProvidence);\n        /* bool guardian_spirit = 55; */\n        if (message.guardianSpirit !== false)\n            writer.tag(55, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 spirit_tap = 56; */\n        if (message.spiritTap !== 0)\n            writer.tag(56, WireType.Varint).int32(message.spiritTap);\n        /* int32 improved_spirit_tap = 57; */\n        if (message.improvedSpiritTap !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedSpiritTap);\n        /* int32 darkness = 58; */\n        if (message.darkness !== 0)\n            writer.tag(58, WireType.Varint).int32(message.darkness);\n        /* int32 shadow_affinity = 59; */\n        if (message.shadowAffinity !== 0)\n            writer.tag(59, WireType.Varint).int32(message.shadowAffinity);\n        /* int32 improved_shadow_word_pain = 60; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 shadow_focus = 61; */\n        if (message.shadowFocus !== 0)\n            writer.tag(61, WireType.Varint).int32(message.shadowFocus);\n        /* int32 improved_psychic_scream = 62; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(62, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 63; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(63, WireType.Varint).int32(message.improvedMindBlast);\n        /* bool mind_flay = 64; */\n        if (message.mindFlay !== false)\n            writer.tag(64, WireType.Varint).bool(message.mindFlay);\n        /* int32 veiled_shadows = 65; */\n        if (message.veiledShadows !== 0)\n            writer.tag(65, WireType.Varint).int32(message.veiledShadows);\n        /* int32 shadow_reach = 66; */\n        if (message.shadowReach !== 0)\n            writer.tag(66, WireType.Varint).int32(message.shadowReach);\n        /* int32 shadow_weaving = 67; */\n        if (message.shadowWeaving !== 0)\n            writer.tag(67, WireType.Varint).int32(message.shadowWeaving);\n        /* bool silence = 68; */\n        if (message.silence !== false)\n            writer.tag(68, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 69; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(69, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 improved_vampiric_embrace = 70; */\n        if (message.improvedVampiricEmbrace !== 0)\n            writer.tag(70, WireType.Varint).int32(message.improvedVampiricEmbrace);\n        /* int32 focused_mind = 71; */\n        if (message.focusedMind !== 0)\n            writer.tag(71, WireType.Varint).int32(message.focusedMind);\n        /* int32 mind_melt = 72; */\n        if (message.mindMelt !== 0)\n            writer.tag(72, WireType.Varint).int32(message.mindMelt);\n        /* int32 improved_devouring_plague = 73; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* bool shadowform = 74; */\n        if (message.shadowform !== false)\n            writer.tag(74, WireType.Varint).bool(message.shadowform);\n        /* int32 shadow_power = 75; */\n        if (message.shadowPower !== 0)\n            writer.tag(75, WireType.Varint).int32(message.shadowPower);\n        /* int32 improved_shadowform = 76; */\n        if (message.improvedShadowform !== 0)\n            writer.tag(76, WireType.Varint).int32(message.improvedShadowform);\n        /* int32 misery = 77; */\n        if (message.misery !== 0)\n            writer.tag(77, WireType.Varint).int32(message.misery);\n        /* bool psychic_horror = 78; */\n        if (message.psychicHorror !== false)\n            writer.tag(78, WireType.Varint).bool(message.psychicHorror);\n        /* bool vampiric_touch = 79; */\n        if (message.vampiricTouch !== false)\n            writer.tag(79, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 pain_and_suffering = 80; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(80, WireType.Varint).int32(message.painAndSuffering);\n        /* int32 twisted_faith = 81; */\n        if (message.twistedFaith !== 0)\n            writer.tag(81, WireType.Varint).int32(message.twistedFaith);\n        /* bool dispersion = 82; */\n        if (message.dispersion !== false)\n            writer.tag(82, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ShadowPriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation rotation */ 1:\n                    message.rotation = ShadowPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            ShadowPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Rotation.RotationType\", ShadowPriest_Rotation_RotationType] },\n            { no: 2, name: \"precast_vt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"latency\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = { rotationType: 0, precastVt: false, latency: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Rotation.RotationType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool precast_vt */ 2:\n                    message.precastVt = reader.bool();\n                    break;\n                case /* double latency */ 3:\n                    message.latency = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Rotation.RotationType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool precast_vt = 2; */\n        if (message.precastVt !== false)\n            writer.tag(2, WireType.Varint).bool(message.precastVt);\n        /* double latency = 3; */\n        if (message.latency !== 0)\n            writer.tag(3, WireType.Bit64).double(message.latency);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"armor\", kind: \"enum\", T: () => [\"proto.ShadowPriest.Options.Armor\", ShadowPriest_Options_Armor] },\n            { no: 4, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = { useShadowfiend: false, armor: 0, useMindBlast: false, useShadowWordDeath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.ShadowPriest.Options.Armor armor */ 2:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_mind_blast */ 4:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 5:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.ShadowPriest.Options.Armor armor = 2; */\n        if (message.armor !== 0)\n            writer.tag(2, WireType.Varint).int32(message.armor);\n        /* bool use_mind_blast = 4; */\n        if (message.useMindBlast !== false)\n            writer.tag(4, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 5; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useShadowWordDeath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest$Type extends MessageType<SmitePriest> {\n    constructor() {\n        super(\"proto.SmitePriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => SmitePriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => SmitePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest>): SmitePriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest): SmitePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SmitePriest.Rotation rotation */ 1:\n                    message.rotation = SmitePriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.SmitePriest.Options options */ 3:\n                    message.options = SmitePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SmitePriest.Rotation rotation = 1; */\n        if (message.rotation)\n            SmitePriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest.Options options = 3; */\n        if (message.options)\n            SmitePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest\n */\nexport const SmitePriest = new SmitePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Rotation$Type extends MessageType<SmitePriest_Rotation> {\n    constructor() {\n        super(\"proto.SmitePriest.Rotation\", [\n            { no: 2, name: \"use_mind_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"use_shadow_word_death\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"use_devouring_plague\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"meme_dream\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"allowed_holy_fire_delay_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Rotation>): SmitePriest_Rotation {\n        const message = { useMindBlast: false, useShadowWordDeath: false, useDevouringPlague: false, memeDream: false, allowedHolyFireDelayMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Rotation): SmitePriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_mind_blast */ 2:\n                    message.useMindBlast = reader.bool();\n                    break;\n                case /* bool use_shadow_word_death */ 3:\n                    message.useShadowWordDeath = reader.bool();\n                    break;\n                case /* bool use_devouring_plague */ 4:\n                    message.useDevouringPlague = reader.bool();\n                    break;\n                case /* bool meme_dream */ 5:\n                    message.memeDream = reader.bool();\n                    break;\n                case /* double allowed_holy_fire_delay_ms */ 6:\n                    message.allowedHolyFireDelayMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_mind_blast = 2; */\n        if (message.useMindBlast !== false)\n            writer.tag(2, WireType.Varint).bool(message.useMindBlast);\n        /* bool use_shadow_word_death = 3; */\n        if (message.useShadowWordDeath !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShadowWordDeath);\n        /* bool use_devouring_plague = 4; */\n        if (message.useDevouringPlague !== false)\n            writer.tag(4, WireType.Varint).bool(message.useDevouringPlague);\n        /* bool meme_dream = 5; */\n        if (message.memeDream !== false)\n            writer.tag(5, WireType.Varint).bool(message.memeDream);\n        /* double allowed_holy_fire_delay_ms = 6; */\n        if (message.allowedHolyFireDelayMs !== 0)\n            writer.tag(6, WireType.Bit64).double(message.allowedHolyFireDelayMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Rotation\n */\nexport const SmitePriest_Rotation = new SmitePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SmitePriest_Options$Type extends MessageType<SmitePriest_Options> {\n    constructor() {\n        super(\"proto.SmitePriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<SmitePriest_Options>): SmitePriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SmitePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SmitePriest_Options): SmitePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SmitePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SmitePriest.Options\n */\nexport const SmitePriest_Options = new SmitePriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest$Type extends MessageType<HealingPriest> {\n    constructor() {\n        super(\"proto.HealingPriest\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => HealingPriest_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PriestTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => HealingPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest>): HealingPriest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest): HealingPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HealingPriest.Rotation rotation */ 1:\n                    message.rotation = HealingPriest_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PriestTalents talents */ 2:\n                    message.talents = PriestTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.HealingPriest.Options options */ 3:\n                    message.options = HealingPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HealingPriest.Rotation rotation = 1; */\n        if (message.rotation)\n            HealingPriest_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PriestTalents talents = 2; */\n        if (message.talents)\n            PriestTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest.Options options = 3; */\n        if (message.options)\n            HealingPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest\n */\nexport const HealingPriest = new HealingPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Rotation$Type extends MessageType<HealingPriest_Rotation> {\n    constructor() {\n        super(\"proto.HealingPriest.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.HealingPriest.Rotation.RotationType\", HealingPriest_Rotation_RotationType] },\n            { no: 2, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest_Rotation>): HealingPriest_Rotation {\n        const message = { type: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Rotation): HealingPriest_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HealingPriest.Rotation.RotationType type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 2:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HealingPriest.Rotation.RotationType type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* proto.CustomRotation custom_rotation = 2; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Rotation\n */\nexport const HealingPriest_Rotation = new HealingPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingPriest_Options$Type extends MessageType<HealingPriest_Options> {\n    constructor() {\n        super(\"proto.HealingPriest.Options\", [\n            { no: 3, name: \"use_inner_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 1, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 4, name: \"raptures_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingPriest_Options>): HealingPriest_Options {\n        const message = { useInnerFire: false, useShadowfiend: false, rapturesPerMinute: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingPriest_Options): HealingPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_inner_fire */ 3:\n                    message.useInnerFire = reader.bool();\n                    break;\n                case /* bool use_shadowfiend */ 1:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                case /* proto.RaidTarget power_infusion_target */ 2:\n                    message.powerInfusionTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                case /* double raptures_per_minute */ 4:\n                    message.rapturesPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_inner_fire = 3; */\n        if (message.useInnerFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.useInnerFire);\n        /* bool use_shadowfiend = 1; */\n        if (message.useShadowfiend !== false)\n            writer.tag(1, WireType.Varint).bool(message.useShadowfiend);\n        /* proto.RaidTarget power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            RaidTarget.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* double raptures_per_minute = 4; */\n        if (message.rapturesPerMinute !== 0)\n            writer.tag(4, WireType.Bit64).double(message.rapturesPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingPriest.Options\n */\nexport const HealingPriest_Options = new HealingPriest_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 spiritual_focus = 1;\n     */\n    spiritualFocus: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 2;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 healing_light = 3;\n     */\n    healingLight: number;\n    /**\n     * @generated from protobuf field: int32 divine_intellect = 4;\n     */\n    divineIntellect: number;\n    /**\n     * @generated from protobuf field: int32 unyielding_faith = 5;\n     */\n    unyieldingFaith: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 6;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 illumination = 7;\n     */\n    illumination: number;\n    /**\n     * @generated from protobuf field: int32 improved_lay_on_hands = 8;\n     */\n    improvedLayOnHands: number;\n    /**\n     * @generated from protobuf field: int32 improved_concentration_aura = 9;\n     */\n    improvedConcentrationAura: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_wisdom = 10;\n     */\n    improvedBlessingOfWisdom: number;\n    /**\n     * @generated from protobuf field: int32 blessed_hands = 11;\n     */\n    blessedHands: number;\n    /**\n     * @generated from protobuf field: int32 pure_of_heart = 12;\n     */\n    pureOfHeart: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 13;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_light = 14;\n     */\n    sanctifiedLight: number;\n    /**\n     * @generated from protobuf field: int32 purifying_power = 15;\n     */\n    purifyingPower: number;\n    /**\n     * @generated from protobuf field: int32 holy_power = 16;\n     */\n    holyPower: number;\n    /**\n     * @generated from protobuf field: int32 lights_grace = 17;\n     */\n    lightsGrace: number;\n    /**\n     * @generated from protobuf field: bool holy_shock = 18;\n     */\n    holyShock: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: int32 sacred_cleansing = 20;\n     */\n    sacredCleansing: number;\n    /**\n     * @generated from protobuf field: int32 holy_guidance = 21;\n     */\n    holyGuidance: number;\n    /**\n     * @generated from protobuf field: bool divine_illumination = 22;\n     */\n    divineIllumination: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 23;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 24;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 25;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 26;\n     */\n    beaconOfLight: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 27;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 divine_strength = 28;\n     */\n    divineStrength: number;\n    /**\n     * @generated from protobuf field: int32 stoicism = 29;\n     */\n    stoicism: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 30;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 anticipation = 31;\n     */\n    anticipation: number;\n    /**\n     * @generated from protobuf field: bool divine_sacrifice = 32;\n     */\n    divineSacrifice: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_righteous_fury = 33;\n     */\n    improvedRighteousFury: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 34;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardian = 35;\n     */\n    divineGuardian: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 36;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 improved_devotion_aura = 37;\n     */\n    improvedDevotionAura: number;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 38;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: int32 reckoning = 39;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 40;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 one_handed_weapon_specialization = 41;\n     */\n    oneHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 spiritual_attunement = 42;\n     */\n    spiritualAttunement: number;\n    /**\n     * @generated from protobuf field: bool holy_shield = 43;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 ardent_defender = 44;\n     */\n    ardentDefender: number;\n    /**\n     * @generated from protobuf field: int32 redoubt = 45;\n     */\n    redoubt: number;\n    /**\n     * @generated from protobuf field: int32 combat_expertise = 46;\n     */\n    combatExpertise: number;\n    /**\n     * @generated from protobuf field: int32 touched_by_the_light = 47;\n     */\n    touchedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool avengers_shield = 48;\n     */\n    avengersShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 49;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 50;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 51;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 52;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 deflection = 53;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 benediction = 54;\n     */\n    benediction: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgements = 55;\n     */\n    improvedJudgements: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_crusader = 56;\n     */\n    heartOfTheCrusader: number;\n    /**\n     * @generated from protobuf field: int32 improved_blessing_of_might = 57;\n     */\n    improvedBlessingOfMight: number;\n    /**\n     * @generated from protobuf field: int32 vindication = 58;\n     */\n    vindication: number;\n    /**\n     * @generated from protobuf field: int32 conviction = 59;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool seal_of_command = 60;\n     */\n    sealOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 61;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 eye_for_an_eye = 62;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 sanctity_of_battle = 63;\n     */\n    sanctityOfBattle: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 64;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 two_handed_weapon_specialization = 65;\n     */\n    twoHandedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 66;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: int32 vengeance = 67;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 68;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 69;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: bool repentance = 70;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_wise = 71;\n     */\n    judgementsOfTheWise: number;\n    /**\n     * @generated from protobuf field: int32 fanaticism = 72;\n     */\n    fanaticism: number;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 73;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 swift_retribution = 74;\n     */\n    swiftRetribution: number;\n    /**\n     * @generated from protobuf field: bool crusader_strike = 75;\n     */\n    crusaderStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 sheath_of_light = 76;\n     */\n    sheathOfLight: number;\n    /**\n     * @generated from protobuf field: int32 righteous_vengeance = 77;\n     */\n    righteousVengeance: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 78;\n     */\n    divineStorm: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation rotation = 1;\n     */\n    rotation?: RetributionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: int32 exo_slack = 1;\n     */\n    exoSlack: number;\n    /**\n     * @generated from protobuf field: int32 cons_slack = 2;\n     */\n    consSlack: number;\n    /**\n     * @generated from protobuf field: double divine_plea_percentage = 3;\n     */\n    divinePleaPercentage: number;\n    /**\n     * @generated from protobuf field: int32 holy_wrath_threshold = 4;\n     */\n    holyWrathThreshold: number;\n    /**\n     * @generated from protobuf field: int32 sov_targets = 5;\n     */\n    sovTargets: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_cast_sequence = 10;\n     */\n    customCastSequence?: CustomRotation;\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Rotation.RotationType type = 9;\n     */\n    type: RetributionPaladin_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: bool use_divine_plea = 11;\n     */\n    useDivinePlea: boolean;\n    /**\n     * @generated from protobuf field: bool avoid_clipping_consecration = 12;\n     */\n    avoidClippingConsecration: boolean;\n    /**\n     * @generated from protobuf field: bool hold_last_avenging_wrath_until_execution = 13;\n     */\n    holdLastAvengingWrathUntilExecution: boolean;\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.SpellOption\n */\nexport enum RetributionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: DivineStorm = 2;\n     */\n    DivineStorm = 2,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 3;\n     */\n    HammerOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: Consecration = 4;\n     */\n    Consecration = 4,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 5;\n     */\n    HolyWrath = 5,\n    /**\n     * @generated from protobuf enum value: CrusaderStrike = 6;\n     */\n    CrusaderStrike = 6,\n    /**\n     * @generated from protobuf enum value: Exorcism = 7;\n     */\n    Exorcism = 7,\n    /**\n     * @generated from protobuf enum value: DivinePlea = 8;\n     */\n    DivinePlea = 8\n}\n/**\n * @generated from protobuf enum proto.RetributionPaladin.Rotation.RotationType\n */\nexport enum RetributionPaladin_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: Standard = 1;\n     */\n    Standard = 1,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2,\n    /**\n     * @generated from protobuf enum value: CastSequence = 3;\n     */\n    CastSequence = 3\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Rotation rotation = 1;\n     */\n    rotation?: ProtectionPaladin_Rotation;\n    /**\n     * @generated from protobuf field: proto.PaladinTalents talents = 2;\n     */\n    talents?: PaladinTalents;\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n    /**\n     * @generated from protobuf field: bool hammer_first = 1;\n     */\n    hammerFirst: boolean;\n    /**\n     * @generated from protobuf field: bool use_custom_prio = 2;\n     */\n    useCustomPrio: boolean;\n    /**\n     * @generated from protobuf field: bool squeeze_holy_wrath = 4;\n     */\n    squeezeHolyWrath: boolean;\n    /**\n     * @generated from protobuf field: double wait_slack = 5;\n     */\n    waitSlack: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 3;\n     */\n    customRotation?: CustomRotation;\n}\n/**\n * @generated from protobuf enum proto.ProtectionPaladin.Rotation.SpellOption\n */\nexport enum ProtectionPaladin_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 1;\n     */\n    JudgementOfWisdom = 1,\n    /**\n     * @generated from protobuf enum value: HammerOfWrath = 2;\n     */\n    HammerOfWrath = 2,\n    /**\n     * @generated from protobuf enum value: Consecration = 3;\n     */\n    Consecration = 3,\n    /**\n     * @generated from protobuf enum value: HolyWrath = 4;\n     */\n    HolyWrath = 4,\n    /**\n     * @generated from protobuf enum value: Exorcism = 5;\n     */\n    Exorcism = 5,\n    /**\n     * @generated from protobuf enum value: ShieldOfRighteousness = 6;\n     */\n    ShieldOfRighteousness = 6,\n    /**\n     * @generated from protobuf enum value: AvengersShield = 7;\n     */\n    AvengersShield = 7,\n    /**\n     * @generated from protobuf enum value: HammerOfTheRighteous = 8;\n     */\n    HammerOfTheRighteous = 8,\n    /**\n     * @generated from protobuf enum value: HolyShield = 9;\n     */\n    HolyShield = 9\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: double damage_taken_per_second = 4;\n     */\n    damageTakenPerSecond: number;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 5;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengerSShield = 41101;\n     */\n    GlyphOfAvengerSShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfAvengingWrath = 41107;\n     */\n    GlyphOfAvengingWrath = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineStorm = 45743;\n     */\n    GlyphOfDivineStorm = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashOfLight = 41105;\n     */\n    GlyphOfFlashOfLight = 41105,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyLight = 41106;\n     */\n    GlyphOfHolyLight = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousDefense = 41100;\n     */\n    GlyphOfRighteousDefense = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfCommand = 41094;\n     */\n    GlyphOfSealOfCommand = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfLight = 41110;\n     */\n    GlyphOfSealOfLight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfRighteousness = 43868;\n     */\n    GlyphOfSealOfRighteousness = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfVengeance = 43869;\n     */\n    GlyphOfSealOfVengeance = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfWisdom = 41109;\n     */\n    GlyphOfSealOfWisdom = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfRighteousness = 45744;\n     */\n    GlyphOfShieldOfRighteousness = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritualAttunement = 41096;\n     */\n    GlyphOfSpiritualAttunement = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfWisdom = 43366;\n     */\n    GlyphOfBlessingOfWisdom = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfSenseUndead = 43368;\n     */\n    GlyphOfSenseUndead = 43368,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWise = 43369;\n     */\n    GlyphOfTheWise = 43369\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2,\n    /**\n     * @generated from protobuf enum value: BlessingOfSalvation = 3;\n     */\n    BlessingOfSalvation = 3,\n    /**\n     * @generated from protobuf enum value: BlessingOfWisdom = 4;\n     */\n    BlessingOfWisdom = 4,\n    /**\n     * @generated from protobuf enum value: BlessingOfSanctuary = 5;\n     */\n    BlessingOfSanctuary = 5,\n    /**\n     * @generated from protobuf enum value: BlessingOfLight = 6;\n     */\n    BlessingOfLight = 6\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"spiritual_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"healing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"divine_intellect\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"unyielding_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"illumination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"improved_lay_on_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"improved_concentration_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_blessing_of_wisdom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"blessed_hands\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"pure_of_heart\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"sanctified_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"purifying_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"holy_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"lights_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"holy_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"sacred_cleansing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"holy_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"divine_illumination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"stoicism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"anticipation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"divine_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_righteous_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"divine_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_devotion_aura\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"one_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"spiritual_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"ardent_defender\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"redoubt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"combat_expertise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"touched_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"avengers_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"benediction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"improved_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"improved_blessing_of_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vindication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"seal_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"sanctity_of_battle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"two_handed_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"fanaticism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"swift_retribution\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"crusader_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 76, name: \"sheath_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"righteous_vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { spiritualFocus: 0, sealsOfThePure: 0, healingLight: 0, divineIntellect: 0, unyieldingFaith: 0, auraMastery: false, illumination: 0, improvedLayOnHands: 0, improvedConcentrationAura: 0, improvedBlessingOfWisdom: 0, blessedHands: 0, pureOfHeart: 0, divineFavor: false, sanctifiedLight: 0, purifyingPower: 0, holyPower: 0, lightsGrace: 0, holyShock: false, blessedLife: 0, sacredCleansing: 0, holyGuidance: 0, divineIllumination: false, judgementsOfThePure: 0, infusionOfLight: 0, enlightenedJudgements: 0, beaconOfLight: false, divinity: 0, divineStrength: 0, stoicism: 0, guardiansFavor: 0, anticipation: 0, divineSacrifice: false, improvedRighteousFury: 0, toughness: 0, divineGuardian: 0, improvedHammerOfJustice: 0, improvedDevotionAura: 0, blessingOfSanctuary: false, reckoning: 0, sacredDuty: 0, oneHandedWeaponSpecialization: 0, spiritualAttunement: 0, holyShield: false, ardentDefender: 0, redoubt: 0, combatExpertise: 0, touchedByTheLight: 0, avengersShield: false, guardedByTheLight: 0, shieldOfTheTemplar: 0, judgementsOfTheJust: 0, hammerOfTheRighteous: false, deflection: 0, benediction: 0, improvedJudgements: 0, heartOfTheCrusader: 0, improvedBlessingOfMight: 0, vindication: 0, conviction: 0, sealOfCommand: false, pursuitOfJustice: 0, eyeForAnEye: 0, sanctityOfBattle: 0, crusade: 0, twoHandedWeaponSpecialization: 0, sanctifiedRetribution: false, vengeance: 0, divinePurpose: 0, theArtOfWar: 0, repentance: false, judgementsOfTheWise: 0, fanaticism: 0, sanctifiedWrath: 0, swiftRetribution: 0, crusaderStrike: false, sheathOfLight: 0, righteousVengeance: 0, divineStorm: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spiritual_focus */ 1:\n                    message.spiritualFocus = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 2:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 healing_light */ 3:\n                    message.healingLight = reader.int32();\n                    break;\n                case /* int32 divine_intellect */ 4:\n                    message.divineIntellect = reader.int32();\n                    break;\n                case /* int32 unyielding_faith */ 5:\n                    message.unyieldingFaith = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 6:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 illumination */ 7:\n                    message.illumination = reader.int32();\n                    break;\n                case /* int32 improved_lay_on_hands */ 8:\n                    message.improvedLayOnHands = reader.int32();\n                    break;\n                case /* int32 improved_concentration_aura */ 9:\n                    message.improvedConcentrationAura = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_wisdom */ 10:\n                    message.improvedBlessingOfWisdom = reader.int32();\n                    break;\n                case /* int32 blessed_hands */ 11:\n                    message.blessedHands = reader.int32();\n                    break;\n                case /* int32 pure_of_heart */ 12:\n                    message.pureOfHeart = reader.int32();\n                    break;\n                case /* bool divine_favor */ 13:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 sanctified_light */ 14:\n                    message.sanctifiedLight = reader.int32();\n                    break;\n                case /* int32 purifying_power */ 15:\n                    message.purifyingPower = reader.int32();\n                    break;\n                case /* int32 holy_power */ 16:\n                    message.holyPower = reader.int32();\n                    break;\n                case /* int32 lights_grace */ 17:\n                    message.lightsGrace = reader.int32();\n                    break;\n                case /* bool holy_shock */ 18:\n                    message.holyShock = reader.bool();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* int32 sacred_cleansing */ 20:\n                    message.sacredCleansing = reader.int32();\n                    break;\n                case /* int32 holy_guidance */ 21:\n                    message.holyGuidance = reader.int32();\n                    break;\n                case /* bool divine_illumination */ 22:\n                    message.divineIllumination = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_pure */ 23:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 infusion_of_light */ 24:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 25:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 26:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 divinity */ 27:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 divine_strength */ 28:\n                    message.divineStrength = reader.int32();\n                    break;\n                case /* int32 stoicism */ 29:\n                    message.stoicism = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 30:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 anticipation */ 31:\n                    message.anticipation = reader.int32();\n                    break;\n                case /* bool divine_sacrifice */ 32:\n                    message.divineSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_righteous_fury */ 33:\n                    message.improvedRighteousFury = reader.int32();\n                    break;\n                case /* int32 toughness */ 34:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 divine_guardian */ 35:\n                    message.divineGuardian = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 36:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 improved_devotion_aura */ 37:\n                    message.improvedDevotionAura = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 38:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* int32 reckoning */ 39:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* int32 sacred_duty */ 40:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 one_handed_weapon_specialization */ 41:\n                    message.oneHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 spiritual_attunement */ 42:\n                    message.spiritualAttunement = reader.int32();\n                    break;\n                case /* bool holy_shield */ 43:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 ardent_defender */ 44:\n                    message.ardentDefender = reader.int32();\n                    break;\n                case /* int32 redoubt */ 45:\n                    message.redoubt = reader.int32();\n                    break;\n                case /* int32 combat_expertise */ 46:\n                    message.combatExpertise = reader.int32();\n                    break;\n                case /* int32 touched_by_the_light */ 47:\n                    message.touchedByTheLight = reader.int32();\n                    break;\n                case /* bool avengers_shield */ 48:\n                    message.avengersShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 49:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 50:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 51:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 52:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 deflection */ 53:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 benediction */ 54:\n                    message.benediction = reader.int32();\n                    break;\n                case /* int32 improved_judgements */ 55:\n                    message.improvedJudgements = reader.int32();\n                    break;\n                case /* int32 heart_of_the_crusader */ 56:\n                    message.heartOfTheCrusader = reader.int32();\n                    break;\n                case /* int32 improved_blessing_of_might */ 57:\n                    message.improvedBlessingOfMight = reader.int32();\n                    break;\n                case /* int32 vindication */ 58:\n                    message.vindication = reader.int32();\n                    break;\n                case /* int32 conviction */ 59:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool seal_of_command */ 60:\n                    message.sealOfCommand = reader.bool();\n                    break;\n                case /* int32 pursuit_of_justice */ 61:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* int32 eye_for_an_eye */ 62:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 sanctity_of_battle */ 63:\n                    message.sanctityOfBattle = reader.int32();\n                    break;\n                case /* int32 crusade */ 64:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 two_handed_weapon_specialization */ 65:\n                    message.twoHandedWeaponSpecialization = reader.int32();\n                    break;\n                case /* bool sanctified_retribution */ 66:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* int32 vengeance */ 67:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 divine_purpose */ 68:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 the_art_of_war */ 69:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* bool repentance */ 70:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 judgements_of_the_wise */ 71:\n                    message.judgementsOfTheWise = reader.int32();\n                    break;\n                case /* int32 fanaticism */ 72:\n                    message.fanaticism = reader.int32();\n                    break;\n                case /* int32 sanctified_wrath */ 73:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 swift_retribution */ 74:\n                    message.swiftRetribution = reader.int32();\n                    break;\n                case /* bool crusader_strike */ 75:\n                    message.crusaderStrike = reader.bool();\n                    break;\n                case /* int32 sheath_of_light */ 76:\n                    message.sheathOfLight = reader.int32();\n                    break;\n                case /* int32 righteous_vengeance */ 77:\n                    message.righteousVengeance = reader.int32();\n                    break;\n                case /* bool divine_storm */ 78:\n                    message.divineStorm = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spiritual_focus = 1; */\n        if (message.spiritualFocus !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spiritualFocus);\n        /* int32 seals_of_the_pure = 2; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(2, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 healing_light = 3; */\n        if (message.healingLight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.healingLight);\n        /* int32 divine_intellect = 4; */\n        if (message.divineIntellect !== 0)\n            writer.tag(4, WireType.Varint).int32(message.divineIntellect);\n        /* int32 unyielding_faith = 5; */\n        if (message.unyieldingFaith !== 0)\n            writer.tag(5, WireType.Varint).int32(message.unyieldingFaith);\n        /* bool aura_mastery = 6; */\n        if (message.auraMastery !== false)\n            writer.tag(6, WireType.Varint).bool(message.auraMastery);\n        /* int32 illumination = 7; */\n        if (message.illumination !== 0)\n            writer.tag(7, WireType.Varint).int32(message.illumination);\n        /* int32 improved_lay_on_hands = 8; */\n        if (message.improvedLayOnHands !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedLayOnHands);\n        /* int32 improved_concentration_aura = 9; */\n        if (message.improvedConcentrationAura !== 0)\n            writer.tag(9, WireType.Varint).int32(message.improvedConcentrationAura);\n        /* int32 improved_blessing_of_wisdom = 10; */\n        if (message.improvedBlessingOfWisdom !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedBlessingOfWisdom);\n        /* int32 blessed_hands = 11; */\n        if (message.blessedHands !== 0)\n            writer.tag(11, WireType.Varint).int32(message.blessedHands);\n        /* int32 pure_of_heart = 12; */\n        if (message.pureOfHeart !== 0)\n            writer.tag(12, WireType.Varint).int32(message.pureOfHeart);\n        /* bool divine_favor = 13; */\n        if (message.divineFavor !== false)\n            writer.tag(13, WireType.Varint).bool(message.divineFavor);\n        /* int32 sanctified_light = 14; */\n        if (message.sanctifiedLight !== 0)\n            writer.tag(14, WireType.Varint).int32(message.sanctifiedLight);\n        /* int32 purifying_power = 15; */\n        if (message.purifyingPower !== 0)\n            writer.tag(15, WireType.Varint).int32(message.purifyingPower);\n        /* int32 holy_power = 16; */\n        if (message.holyPower !== 0)\n            writer.tag(16, WireType.Varint).int32(message.holyPower);\n        /* int32 lights_grace = 17; */\n        if (message.lightsGrace !== 0)\n            writer.tag(17, WireType.Varint).int32(message.lightsGrace);\n        /* bool holy_shock = 18; */\n        if (message.holyShock !== false)\n            writer.tag(18, WireType.Varint).bool(message.holyShock);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* int32 sacred_cleansing = 20; */\n        if (message.sacredCleansing !== 0)\n            writer.tag(20, WireType.Varint).int32(message.sacredCleansing);\n        /* int32 holy_guidance = 21; */\n        if (message.holyGuidance !== 0)\n            writer.tag(21, WireType.Varint).int32(message.holyGuidance);\n        /* bool divine_illumination = 22; */\n        if (message.divineIllumination !== false)\n            writer.tag(22, WireType.Varint).bool(message.divineIllumination);\n        /* int32 judgements_of_the_pure = 23; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(23, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 infusion_of_light = 24; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 enlightened_judgements = 25; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(25, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 26; */\n        if (message.beaconOfLight !== false)\n            writer.tag(26, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 divinity = 27; */\n        if (message.divinity !== 0)\n            writer.tag(27, WireType.Varint).int32(message.divinity);\n        /* int32 divine_strength = 28; */\n        if (message.divineStrength !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineStrength);\n        /* int32 stoicism = 29; */\n        if (message.stoicism !== 0)\n            writer.tag(29, WireType.Varint).int32(message.stoicism);\n        /* int32 guardians_favor = 30; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(30, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 anticipation = 31; */\n        if (message.anticipation !== 0)\n            writer.tag(31, WireType.Varint).int32(message.anticipation);\n        /* bool divine_sacrifice = 32; */\n        if (message.divineSacrifice !== false)\n            writer.tag(32, WireType.Varint).bool(message.divineSacrifice);\n        /* int32 improved_righteous_fury = 33; */\n        if (message.improvedRighteousFury !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedRighteousFury);\n        /* int32 toughness = 34; */\n        if (message.toughness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.toughness);\n        /* int32 divine_guardian = 35; */\n        if (message.divineGuardian !== 0)\n            writer.tag(35, WireType.Varint).int32(message.divineGuardian);\n        /* int32 improved_hammer_of_justice = 36; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 improved_devotion_aura = 37; */\n        if (message.improvedDevotionAura !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedDevotionAura);\n        /* bool blessing_of_sanctuary = 38; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(38, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* int32 reckoning = 39; */\n        if (message.reckoning !== 0)\n            writer.tag(39, WireType.Varint).int32(message.reckoning);\n        /* int32 sacred_duty = 40; */\n        if (message.sacredDuty !== 0)\n            writer.tag(40, WireType.Varint).int32(message.sacredDuty);\n        /* int32 one_handed_weapon_specialization = 41; */\n        if (message.oneHandedWeaponSpecialization !== 0)\n            writer.tag(41, WireType.Varint).int32(message.oneHandedWeaponSpecialization);\n        /* int32 spiritual_attunement = 42; */\n        if (message.spiritualAttunement !== 0)\n            writer.tag(42, WireType.Varint).int32(message.spiritualAttunement);\n        /* bool holy_shield = 43; */\n        if (message.holyShield !== false)\n            writer.tag(43, WireType.Varint).bool(message.holyShield);\n        /* int32 ardent_defender = 44; */\n        if (message.ardentDefender !== 0)\n            writer.tag(44, WireType.Varint).int32(message.ardentDefender);\n        /* int32 redoubt = 45; */\n        if (message.redoubt !== 0)\n            writer.tag(45, WireType.Varint).int32(message.redoubt);\n        /* int32 combat_expertise = 46; */\n        if (message.combatExpertise !== 0)\n            writer.tag(46, WireType.Varint).int32(message.combatExpertise);\n        /* int32 touched_by_the_light = 47; */\n        if (message.touchedByTheLight !== 0)\n            writer.tag(47, WireType.Varint).int32(message.touchedByTheLight);\n        /* bool avengers_shield = 48; */\n        if (message.avengersShield !== false)\n            writer.tag(48, WireType.Varint).bool(message.avengersShield);\n        /* int32 guarded_by_the_light = 49; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(49, WireType.Varint).int32(message.guardedByTheLight);\n        /* int32 shield_of_the_templar = 50; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* int32 judgements_of_the_just = 51; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(51, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* bool hammer_of_the_righteous = 52; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(52, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 deflection = 53; */\n        if (message.deflection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.deflection);\n        /* int32 benediction = 54; */\n        if (message.benediction !== 0)\n            writer.tag(54, WireType.Varint).int32(message.benediction);\n        /* int32 improved_judgements = 55; */\n        if (message.improvedJudgements !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedJudgements);\n        /* int32 heart_of_the_crusader = 56; */\n        if (message.heartOfTheCrusader !== 0)\n            writer.tag(56, WireType.Varint).int32(message.heartOfTheCrusader);\n        /* int32 improved_blessing_of_might = 57; */\n        if (message.improvedBlessingOfMight !== 0)\n            writer.tag(57, WireType.Varint).int32(message.improvedBlessingOfMight);\n        /* int32 vindication = 58; */\n        if (message.vindication !== 0)\n            writer.tag(58, WireType.Varint).int32(message.vindication);\n        /* int32 conviction = 59; */\n        if (message.conviction !== 0)\n            writer.tag(59, WireType.Varint).int32(message.conviction);\n        /* bool seal_of_command = 60; */\n        if (message.sealOfCommand !== false)\n            writer.tag(60, WireType.Varint).bool(message.sealOfCommand);\n        /* int32 pursuit_of_justice = 61; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(61, WireType.Varint).int32(message.pursuitOfJustice);\n        /* int32 eye_for_an_eye = 62; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(62, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 sanctity_of_battle = 63; */\n        if (message.sanctityOfBattle !== 0)\n            writer.tag(63, WireType.Varint).int32(message.sanctityOfBattle);\n        /* int32 crusade = 64; */\n        if (message.crusade !== 0)\n            writer.tag(64, WireType.Varint).int32(message.crusade);\n        /* int32 two_handed_weapon_specialization = 65; */\n        if (message.twoHandedWeaponSpecialization !== 0)\n            writer.tag(65, WireType.Varint).int32(message.twoHandedWeaponSpecialization);\n        /* bool sanctified_retribution = 66; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(66, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* int32 vengeance = 67; */\n        if (message.vengeance !== 0)\n            writer.tag(67, WireType.Varint).int32(message.vengeance);\n        /* int32 divine_purpose = 68; */\n        if (message.divinePurpose !== 0)\n            writer.tag(68, WireType.Varint).int32(message.divinePurpose);\n        /* int32 the_art_of_war = 69; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(69, WireType.Varint).int32(message.theArtOfWar);\n        /* bool repentance = 70; */\n        if (message.repentance !== false)\n            writer.tag(70, WireType.Varint).bool(message.repentance);\n        /* int32 judgements_of_the_wise = 71; */\n        if (message.judgementsOfTheWise !== 0)\n            writer.tag(71, WireType.Varint).int32(message.judgementsOfTheWise);\n        /* int32 fanaticism = 72; */\n        if (message.fanaticism !== 0)\n            writer.tag(72, WireType.Varint).int32(message.fanaticism);\n        /* int32 sanctified_wrath = 73; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(73, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 swift_retribution = 74; */\n        if (message.swiftRetribution !== 0)\n            writer.tag(74, WireType.Varint).int32(message.swiftRetribution);\n        /* bool crusader_strike = 75; */\n        if (message.crusaderStrike !== false)\n            writer.tag(75, WireType.Varint).bool(message.crusaderStrike);\n        /* int32 sheath_of_light = 76; */\n        if (message.sheathOfLight !== 0)\n            writer.tag(76, WireType.Varint).int32(message.sheathOfLight);\n        /* int32 righteous_vengeance = 77; */\n        if (message.righteousVengeance !== 0)\n            writer.tag(77, WireType.Varint).int32(message.righteousVengeance);\n        /* bool divine_storm = 78; */\n        if (message.divineStorm !== false)\n            writer.tag(78, WireType.Varint).bool(message.divineStorm);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => RetributionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Rotation rotation */ 1:\n                    message.rotation = RetributionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            RetributionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", [\n            { no: 1, name: \"exo_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"cons_slack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"divine_plea_percentage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"holy_wrath_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"sov_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 10, name: \"custom_cast_sequence\", kind: \"message\", T: () => CustomRotation },\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RetributionPaladin.Rotation.RotationType\", RetributionPaladin_Rotation_RotationType] },\n            { no: 11, name: \"use_divine_plea\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"avoid_clipping_consecration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"hold_last_avenging_wrath_until_execution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = { exoSlack: 0, consSlack: 0, divinePleaPercentage: 0, holyWrathThreshold: 0, sovTargets: 0, type: 0, useDivinePlea: false, avoidClippingConsecration: false, holdLastAvengingWrathUntilExecution: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 exo_slack */ 1:\n                    message.exoSlack = reader.int32();\n                    break;\n                case /* int32 cons_slack */ 2:\n                    message.consSlack = reader.int32();\n                    break;\n                case /* double divine_plea_percentage */ 3:\n                    message.divinePleaPercentage = reader.double();\n                    break;\n                case /* int32 holy_wrath_threshold */ 4:\n                    message.holyWrathThreshold = reader.int32();\n                    break;\n                case /* int32 sov_targets */ 5:\n                    message.sovTargets = reader.int32();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* proto.CustomRotation custom_cast_sequence */ 10:\n                    message.customCastSequence = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customCastSequence);\n                    break;\n                case /* proto.RetributionPaladin.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* bool use_divine_plea */ 11:\n                    message.useDivinePlea = reader.bool();\n                    break;\n                case /* bool avoid_clipping_consecration */ 12:\n                    message.avoidClippingConsecration = reader.bool();\n                    break;\n                case /* bool hold_last_avenging_wrath_until_execution */ 13:\n                    message.holdLastAvengingWrathUntilExecution = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 exo_slack = 1; */\n        if (message.exoSlack !== 0)\n            writer.tag(1, WireType.Varint).int32(message.exoSlack);\n        /* int32 cons_slack = 2; */\n        if (message.consSlack !== 0)\n            writer.tag(2, WireType.Varint).int32(message.consSlack);\n        /* double divine_plea_percentage = 3; */\n        if (message.divinePleaPercentage !== 0)\n            writer.tag(3, WireType.Bit64).double(message.divinePleaPercentage);\n        /* int32 holy_wrath_threshold = 4; */\n        if (message.holyWrathThreshold !== 0)\n            writer.tag(4, WireType.Varint).int32(message.holyWrathThreshold);\n        /* int32 sov_targets = 5; */\n        if (message.sovTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sovTargets);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CustomRotation custom_cast_sequence = 10; */\n        if (message.customCastSequence)\n            CustomRotation.internalBinaryWrite(message.customCastSequence, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* bool use_divine_plea = 11; */\n        if (message.useDivinePlea !== false)\n            writer.tag(11, WireType.Varint).bool(message.useDivinePlea);\n        /* bool avoid_clipping_consecration = 12; */\n        if (message.avoidClippingConsecration !== false)\n            writer.tag(12, WireType.Varint).bool(message.avoidClippingConsecration);\n        /* bool hold_last_avenging_wrath_until_execution = 13; */\n        if (message.holdLastAvengingWrathUntilExecution !== false)\n            writer.tag(13, WireType.Varint).bool(message.holdLastAvengingWrathUntilExecution);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => ProtectionPaladin_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => PaladinTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Rotation rotation */ 1:\n                    message.rotation = ProtectionPaladin_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.PaladinTalents talents */ 2:\n                    message.talents = PaladinTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Rotation rotation = 1; */\n        if (message.rotation)\n            ProtectionPaladin_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PaladinTalents talents = 2; */\n        if (message.talents)\n            PaladinTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", [\n            { no: 1, name: \"hammer_first\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"use_custom_prio\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"squeeze_holy_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"wait_slack\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = { hammerFirst: false, useCustomPrio: false, squeezeHolyWrath: false, waitSlack: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hammer_first */ 1:\n                    message.hammerFirst = reader.bool();\n                    break;\n                case /* bool use_custom_prio */ 2:\n                    message.useCustomPrio = reader.bool();\n                    break;\n                case /* bool squeeze_holy_wrath */ 4:\n                    message.squeezeHolyWrath = reader.bool();\n                    break;\n                case /* double wait_slack */ 5:\n                    message.waitSlack = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 3:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hammer_first = 1; */\n        if (message.hammerFirst !== false)\n            writer.tag(1, WireType.Varint).bool(message.hammerFirst);\n        /* bool use_custom_prio = 2; */\n        if (message.useCustomPrio !== false)\n            writer.tag(2, WireType.Varint).bool(message.useCustomPrio);\n        /* bool squeeze_holy_wrath = 4; */\n        if (message.squeezeHolyWrath !== false)\n            writer.tag(4, WireType.Varint).bool(message.squeezeHolyWrath);\n        /* double wait_slack = 5; */\n        if (message.waitSlack !== 0)\n            writer.tag(5, WireType.Bit64).double(message.waitSlack);\n        /* proto.CustomRotation custom_rotation = 3; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"damage_taken_per_second\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = { judgement: 0, seal: 0, aura: 0, damageTakenPerSecond: 0, useAvengingWrath: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* double damage_taken_per_second */ 4:\n                    message.damageTakenPerSecond = reader.double();\n                    break;\n                case /* bool use_avenging_wrath */ 5:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* double damage_taken_per_second = 4; */\n        if (message.damageTakenPerSecond !== 0)\n            writer.tag(4, WireType.Bit64).double(message.damageTakenPerSecond);\n        /* bool use_avenging_wrath = 5; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_subtlety = 1;\n     */\n    arcaneSubtlety: number;\n    /**\n     * @generated from protobuf field: int32 arcane_focus = 2;\n     */\n    arcaneFocus: number;\n    /**\n     * @generated from protobuf field: int32 arcane_stability = 3;\n     */\n    arcaneStability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_fortitude = 4;\n     */\n    arcaneFortitude: number;\n    /**\n     * @generated from protobuf field: int32 magic_absorption = 5;\n     */\n    magicAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_concentration = 6;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 magic_attunement = 7;\n     */\n    magicAttunement: number;\n    /**\n     * @generated from protobuf field: int32 spell_impact = 8;\n     */\n    spellImpact: number;\n    /**\n     * @generated from protobuf field: int32 student_of_the_mind = 9;\n     */\n    studentOfTheMind: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 10;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_shielding = 11;\n     */\n    arcaneShielding: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 12;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 arcane_meditation = 13;\n     */\n    arcaneMeditation: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 14;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 15;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 16;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 arcane_mind = 17;\n     */\n    arcaneMind: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 18;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 arcane_instability = 19;\n     */\n    arcaneInstability: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 20;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: int32 arcane_empowerment = 21;\n     */\n    arcaneEmpowerment: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 22;\n     */\n    arcanePower: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 23;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 24;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: int32 mind_mastery = 25;\n     */\n    mindMastery: number;\n    /**\n     * @generated from protobuf field: bool slow = 26;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 27;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 28;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 spell_power = 29;\n     */\n    spellPower: number;\n    /**\n     * @generated from protobuf field: bool arcane_barrage = 30;\n     */\n    arcaneBarrage: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 improved_fire_blast = 31;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 incineration = 32;\n     */\n    incineration: number;\n    /**\n     * @generated from protobuf field: int32 improved_fireball = 33;\n     */\n    improvedFireball: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 34;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 burning_determination = 35;\n     */\n    burningDetermination: number;\n    /**\n     * @generated from protobuf field: int32 world_in_flames = 36;\n     */\n    worldInFlames: number;\n    /**\n     * @generated from protobuf field: int32 flame_throwing = 37;\n     */\n    flameThrowing: number;\n    /**\n     * @generated from protobuf field: int32 impact = 38;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: bool pyroblast = 39;\n     */\n    pyroblast: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 40;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 41;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: int32 molten_shields = 42;\n     */\n    moltenShields: number;\n    /**\n     * @generated from protobuf field: int32 master_of_elements = 43;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 playing_with_fire = 44;\n     */\n    playingWithFire: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 45;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 46;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 47;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 48;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 49;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: bool combustion = 50;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 51;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 fiery_payback = 52;\n     */\n    fieryPayback: number;\n    /**\n     * @generated from protobuf field: int32 empowered_fire = 53;\n     */\n    empoweredFire: number;\n    /**\n     * @generated from protobuf field: int32 firestarter = 54;\n     */\n    firestarter: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 55;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 hot_streak = 56;\n     */\n    hotStreak: number;\n    /**\n     * @generated from protobuf field: int32 burnout = 57;\n     */\n    burnout: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 58;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 frostbite = 59;\n     */\n    frostbite: number;\n    /**\n     * @generated from protobuf field: int32 improved_frostbolt = 60;\n     */\n    improvedFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 61;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 62;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: int32 frost_warding = 63;\n     */\n    frostWarding: number;\n    /**\n     * @generated from protobuf field: int32 precision = 64;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 65;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 66;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 67;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_blizzard = 68;\n     */\n    improvedBlizzard: number;\n    /**\n     * @generated from protobuf field: int32 arctic_reach = 69;\n     */\n    arcticReach: number;\n    /**\n     * @generated from protobuf field: int32 frost_channeling = 70;\n     */\n    frostChanneling: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 71;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 72;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 73;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 frozen_core = 74;\n     */\n    frozenCore: number;\n    /**\n     * @generated from protobuf field: int32 cold_as_ice = 75;\n     */\n    coldAsIce: number;\n    /**\n     * @generated from protobuf field: int32 winters_chill = 76;\n     */\n    wintersChill: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 77;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 78;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 arctic_winds = 79;\n     */\n    arcticWinds: number;\n    /**\n     * @generated from protobuf field: int32 empowered_frostbolt = 80;\n     */\n    empoweredFrostbolt: number;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 81;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 82;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: bool summon_water_elemental = 83;\n     */\n    summonWaterElemental: boolean;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 84;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: int32 chilled_to_the_bone = 85;\n     */\n    chilledToTheBone: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 86;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.Mage\n */\nexport interface Mage {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation rotation = 1;\n     */\n    rotation?: Mage_Rotation;\n    /**\n     * @generated from protobuf field: proto.MageTalents talents = 2;\n     */\n    talents?: MageTalents;\n    /**\n     * @generated from protobuf field: proto.Mage.Options options = 3;\n     */\n    options?: Mage_Options;\n}\n/**\n * @generated from protobuf message proto.Mage.Rotation\n */\nexport interface Mage_Rotation {\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.Type type = 1;\n     */\n    type: Mage_Rotation_Type;\n    /**\n     * Arcane Options.\n     *\n     * @generated from protobuf field: int32 min_blast_before_missiles = 2;\n     */\n    minBlastBeforeMissiles: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_missiles_gamble = 8;\n     */\n    num4StackBlastsToMissilesGamble: number;\n    /**\n     * @generated from protobuf field: int32 num_4_stack_blasts_to_early_missiles = 9;\n     */\n    num4StackBlastsToEarlyMissiles: number;\n    /**\n     * @generated from protobuf field: int32 extra_blasts_during_first_ap = 10;\n     */\n    extraBlastsDuringFirstAp: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3;\n     */\n    primaryFireSpell: Mage_Rotation_PrimaryFireSpell;\n    /**\n     * @generated from protobuf field: bool maintain_improved_scorch = 4;\n     */\n    maintainImprovedScorch: boolean;\n    /**\n     * @generated from protobuf field: int32 num_extra_targets = 5;\n     */\n    numExtraTargets: number;\n    /**\n     * @generated from protobuf field: bool optimize_cds_for_execute = 11;\n     */\n    optimizeCdsForExecute: boolean;\n    /**\n     * @generated from protobuf field: int32 cqs_latency = 12;\n     */\n    cqsLatency: number;\n    /**\n     * @generated from protobuf field: bool lb_before_hotstreak = 13;\n     */\n    lbBeforeHotstreak: boolean;\n    /**\n     * Frost Options.\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: double water_elemental_disobey_chance = 6;\n     */\n    waterElementalDisobeyChance: number;\n    /**\n     * @generated from protobuf field: proto.Mage.Rotation.AoeRotation aoe = 7;\n     */\n    aoe: Mage_Rotation_AoeRotation;\n}\n/**\n * Just used for controlling which options are displayed in the UI. Is not\n * used by the sim.\n *\n * @generated from protobuf enum proto.Mage.Rotation.Type\n */\nexport enum Mage_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Arcane = 0;\n     */\n    Arcane = 0,\n    /**\n     * @generated from protobuf enum value: Fire = 1;\n     */\n    Fire = 1,\n    /**\n     * @generated from protobuf enum value: Frost = 2;\n     */\n    Frost = 2,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3\n}\n/**\n * Fire Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.PrimaryFireSpell\n */\nexport enum Mage_Rotation_PrimaryFireSpell {\n    /**\n     * @generated from protobuf enum value: Fireball = 0;\n     */\n    Fireball = 0,\n    /**\n     * @generated from protobuf enum value: FrostfireBolt = 1;\n     */\n    FrostfireBolt = 1\n}\n/**\n * Aoe Options.\n *\n * @generated from protobuf enum proto.Mage.Rotation.AoeRotation\n */\nexport enum Mage_Rotation_AoeRotation {\n    /**\n     * @generated from protobuf enum value: ArcaneExplosion = 0;\n     */\n    ArcaneExplosion = 0,\n    /**\n     * @generated from protobuf enum value: Flamestrike = 1;\n     */\n    Flamestrike = 1,\n    /**\n     * @generated from protobuf enum value: Blizzard = 2;\n     */\n    Blizzard = 2\n}\n/**\n * @generated from protobuf message proto.Mage.Options\n */\nexport interface Mage_Options {\n    /**\n     * @generated from protobuf field: proto.Mage.Options.ArmorType armor = 1;\n     */\n    armor: Mage_Options_ArmorType;\n    /**\n     * Number of Evocation ticks to use. If 0, use all of them.\n     *\n     * @generated from protobuf field: int32 evocation_ticks = 2;\n     */\n    evocationTicks: number;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 3;\n     */\n    focusMagicPercentUptime: number;\n}\n/**\n * @generated from protobuf enum proto.Mage.Options.ArmorType\n */\nexport enum Mage_Options_ArmorType {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: MageArmor = 1;\n     */\n    MageArmor = 1,\n    /**\n     * @generated from protobuf enum value: MoltenArmor = 2;\n     */\n    MoltenArmor = 2\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneExplosion = 42734;\n     */\n    GlyphOfArcaneExplosion = 42734,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfEternalWater = 50045;\n     */\n    GlyphOfEternalWater = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireBlast = 42740;\n     */\n    GlyphOfFireBlast = 42740,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceArmor = 42743;\n     */\n    GlyphOfIceArmor = 42743,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 45737;\n     */\n    GlyphOfLivingBomb = 45737,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaGem = 42750;\n     */\n    GlyphOfManaGem = 42750,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfRemoveCurse = 42753;\n     */\n    GlyphOfRemoveCurse = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfScorch = 42747;\n     */\n    GlyphOfScorch = 42747,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterElemental = 42754;\n     */\n    GlyphOfWaterElemental = 42754\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneIntellect = 43339;\n     */\n    GlyphOfArcaneIntellect = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireWard = 43357;\n     */\n    GlyphOfFireWard = 43357,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 43359;\n     */\n    GlyphOfFrostArmor = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostWard = 43360;\n     */\n    GlyphOfFrostWard = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"arcane_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"arcane_stability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"arcane_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"magic_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"magic_attunement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spell_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"student_of_the_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"arcane_shielding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_meditation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"arcane_mind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"arcane_instability\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"arcane_empowerment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"mind_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"spell_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"incineration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"improved_fireball\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"burning_determination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"world_in_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"flame_throwing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"pyroblast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"molten_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"playing_with_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"fiery_payback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"empowered_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"firestarter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"burnout\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"frostbite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"improved_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"frost_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 68, name: \"improved_blizzard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"arctic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"frost_channeling\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 73, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"frozen_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"cold_as_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"winters_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"arctic_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"empowered_frostbolt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 82, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"summon_water_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 84, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"chilled_to_the_bone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 86, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneSubtlety: 0, arcaneFocus: 0, arcaneStability: 0, arcaneFortitude: 0, magicAbsorption: 0, arcaneConcentration: 0, magicAttunement: 0, spellImpact: 0, studentOfTheMind: 0, focusMagic: false, arcaneShielding: 0, improvedCounterspell: 0, arcaneMeditation: 0, tormentTheWeak: 0, improvedBlink: 0, presenceOfMind: false, arcaneMind: 0, prismaticCloak: 0, arcaneInstability: 0, arcanePotency: 0, arcaneEmpowerment: 0, arcanePower: false, incantersAbsorption: 0, arcaneFlows: 0, mindMastery: 0, slow: false, missileBarrage: 0, netherwindPresence: 0, spellPower: 0, arcaneBarrage: false, improvedFireBlast: 0, incineration: 0, improvedFireball: 0, ignite: 0, burningDetermination: 0, worldInFlames: 0, flameThrowing: 0, impact: 0, pyroblast: false, burningSoul: 0, improvedScorch: 0, moltenShields: 0, masterOfElements: 0, playingWithFire: 0, criticalMass: 0, blastWave: false, blazingSpeed: 0, firePower: 0, pyromaniac: 0, combustion: false, moltenFury: 0, fieryPayback: 0, empoweredFire: 0, firestarter: 0, dragonsBreath: false, hotStreak: 0, burnout: 0, livingBomb: false, frostbite: 0, improvedFrostbolt: 0, iceFloes: 0, iceShards: 0, frostWarding: 0, precision: 0, permafrost: 0, piercingIce: 0, icyVeins: false, improvedBlizzard: 0, arcticReach: 0, frostChanneling: 0, shatter: 0, coldSnap: false, improvedConeOfCold: 0, frozenCore: 0, coldAsIce: 0, wintersChill: 0, shatteredBarrier: 0, iceBarrier: false, arcticWinds: 0, empoweredFrostbolt: 0, fingersOfFrost: 0, brainFreeze: 0, summonWaterElemental: false, enduringWinter: 0, chilledToTheBone: 0, deepFreeze: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_subtlety */ 1:\n                    message.arcaneSubtlety = reader.int32();\n                    break;\n                case /* int32 arcane_focus */ 2:\n                    message.arcaneFocus = reader.int32();\n                    break;\n                case /* int32 arcane_stability */ 3:\n                    message.arcaneStability = reader.int32();\n                    break;\n                case /* int32 arcane_fortitude */ 4:\n                    message.arcaneFortitude = reader.int32();\n                    break;\n                case /* int32 magic_absorption */ 5:\n                    message.magicAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_concentration */ 6:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 magic_attunement */ 7:\n                    message.magicAttunement = reader.int32();\n                    break;\n                case /* int32 spell_impact */ 8:\n                    message.spellImpact = reader.int32();\n                    break;\n                case /* int32 student_of_the_mind */ 9:\n                    message.studentOfTheMind = reader.int32();\n                    break;\n                case /* bool focus_magic */ 10:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 arcane_shielding */ 11:\n                    message.arcaneShielding = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 12:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 arcane_meditation */ 13:\n                    message.arcaneMeditation = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 14:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 15:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 16:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 arcane_mind */ 17:\n                    message.arcaneMind = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 18:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 arcane_instability */ 19:\n                    message.arcaneInstability = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 20:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* int32 arcane_empowerment */ 21:\n                    message.arcaneEmpowerment = reader.int32();\n                    break;\n                case /* bool arcane_power */ 22:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 23:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 24:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* int32 mind_mastery */ 25:\n                    message.mindMastery = reader.int32();\n                    break;\n                case /* bool slow */ 26:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 27:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 28:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 spell_power */ 29:\n                    message.spellPower = reader.int32();\n                    break;\n                case /* bool arcane_barrage */ 30:\n                    message.arcaneBarrage = reader.bool();\n                    break;\n                case /* int32 improved_fire_blast */ 31:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 incineration */ 32:\n                    message.incineration = reader.int32();\n                    break;\n                case /* int32 improved_fireball */ 33:\n                    message.improvedFireball = reader.int32();\n                    break;\n                case /* int32 ignite */ 34:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 burning_determination */ 35:\n                    message.burningDetermination = reader.int32();\n                    break;\n                case /* int32 world_in_flames */ 36:\n                    message.worldInFlames = reader.int32();\n                    break;\n                case /* int32 flame_throwing */ 37:\n                    message.flameThrowing = reader.int32();\n                    break;\n                case /* int32 impact */ 38:\n                    message.impact = reader.int32();\n                    break;\n                case /* bool pyroblast */ 39:\n                    message.pyroblast = reader.bool();\n                    break;\n                case /* int32 burning_soul */ 40:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_scorch */ 41:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* int32 molten_shields */ 42:\n                    message.moltenShields = reader.int32();\n                    break;\n                case /* int32 master_of_elements */ 43:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 playing_with_fire */ 44:\n                    message.playingWithFire = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 45:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool blast_wave */ 46:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* int32 blazing_speed */ 47:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 fire_power */ 48:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 49:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* bool combustion */ 50:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 51:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 fiery_payback */ 52:\n                    message.fieryPayback = reader.int32();\n                    break;\n                case /* int32 empowered_fire */ 53:\n                    message.empoweredFire = reader.int32();\n                    break;\n                case /* int32 firestarter */ 54:\n                    message.firestarter = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 55:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 hot_streak */ 56:\n                    message.hotStreak = reader.int32();\n                    break;\n                case /* int32 burnout */ 57:\n                    message.burnout = reader.int32();\n                    break;\n                case /* bool living_bomb */ 58:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 frostbite */ 59:\n                    message.frostbite = reader.int32();\n                    break;\n                case /* int32 improved_frostbolt */ 60:\n                    message.improvedFrostbolt = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 61:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 62:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* int32 frost_warding */ 63:\n                    message.frostWarding = reader.int32();\n                    break;\n                case /* int32 precision */ 64:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 permafrost */ 65:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 66:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* bool icy_veins */ 67:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 improved_blizzard */ 68:\n                    message.improvedBlizzard = reader.int32();\n                    break;\n                case /* int32 arctic_reach */ 69:\n                    message.arcticReach = reader.int32();\n                    break;\n                case /* int32 frost_channeling */ 70:\n                    message.frostChanneling = reader.int32();\n                    break;\n                case /* int32 shatter */ 71:\n                    message.shatter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 72:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 improved_cone_of_cold */ 73:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 frozen_core */ 74:\n                    message.frozenCore = reader.int32();\n                    break;\n                case /* int32 cold_as_ice */ 75:\n                    message.coldAsIce = reader.int32();\n                    break;\n                case /* int32 winters_chill */ 76:\n                    message.wintersChill = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 77:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 78:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 arctic_winds */ 79:\n                    message.arcticWinds = reader.int32();\n                    break;\n                case /* int32 empowered_frostbolt */ 80:\n                    message.empoweredFrostbolt = reader.int32();\n                    break;\n                case /* int32 fingers_of_frost */ 81:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 brain_freeze */ 82:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* bool summon_water_elemental */ 83:\n                    message.summonWaterElemental = reader.bool();\n                    break;\n                case /* int32 enduring_winter */ 84:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* int32 chilled_to_the_bone */ 85:\n                    message.chilledToTheBone = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 86:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_subtlety = 1; */\n        if (message.arcaneSubtlety !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneSubtlety);\n        /* int32 arcane_focus = 2; */\n        if (message.arcaneFocus !== 0)\n            writer.tag(2, WireType.Varint).int32(message.arcaneFocus);\n        /* int32 arcane_stability = 3; */\n        if (message.arcaneStability !== 0)\n            writer.tag(3, WireType.Varint).int32(message.arcaneStability);\n        /* int32 arcane_fortitude = 4; */\n        if (message.arcaneFortitude !== 0)\n            writer.tag(4, WireType.Varint).int32(message.arcaneFortitude);\n        /* int32 magic_absorption = 5; */\n        if (message.magicAbsorption !== 0)\n            writer.tag(5, WireType.Varint).int32(message.magicAbsorption);\n        /* int32 arcane_concentration = 6; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(6, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 magic_attunement = 7; */\n        if (message.magicAttunement !== 0)\n            writer.tag(7, WireType.Varint).int32(message.magicAttunement);\n        /* int32 spell_impact = 8; */\n        if (message.spellImpact !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spellImpact);\n        /* int32 student_of_the_mind = 9; */\n        if (message.studentOfTheMind !== 0)\n            writer.tag(9, WireType.Varint).int32(message.studentOfTheMind);\n        /* bool focus_magic = 10; */\n        if (message.focusMagic !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusMagic);\n        /* int32 arcane_shielding = 11; */\n        if (message.arcaneShielding !== 0)\n            writer.tag(11, WireType.Varint).int32(message.arcaneShielding);\n        /* int32 improved_counterspell = 12; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 arcane_meditation = 13; */\n        if (message.arcaneMeditation !== 0)\n            writer.tag(13, WireType.Varint).int32(message.arcaneMeditation);\n        /* int32 torment_the_weak = 14; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 improved_blink = 15; */\n        if (message.improvedBlink !== 0)\n            writer.tag(15, WireType.Varint).int32(message.improvedBlink);\n        /* bool presence_of_mind = 16; */\n        if (message.presenceOfMind !== false)\n            writer.tag(16, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 arcane_mind = 17; */\n        if (message.arcaneMind !== 0)\n            writer.tag(17, WireType.Varint).int32(message.arcaneMind);\n        /* int32 prismatic_cloak = 18; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(18, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 arcane_instability = 19; */\n        if (message.arcaneInstability !== 0)\n            writer.tag(19, WireType.Varint).int32(message.arcaneInstability);\n        /* int32 arcane_potency = 20; */\n        if (message.arcanePotency !== 0)\n            writer.tag(20, WireType.Varint).int32(message.arcanePotency);\n        /* int32 arcane_empowerment = 21; */\n        if (message.arcaneEmpowerment !== 0)\n            writer.tag(21, WireType.Varint).int32(message.arcaneEmpowerment);\n        /* bool arcane_power = 22; */\n        if (message.arcanePower !== false)\n            writer.tag(22, WireType.Varint).bool(message.arcanePower);\n        /* int32 incanters_absorption = 23; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(23, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 arcane_flows = 24; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(24, WireType.Varint).int32(message.arcaneFlows);\n        /* int32 mind_mastery = 25; */\n        if (message.mindMastery !== 0)\n            writer.tag(25, WireType.Varint).int32(message.mindMastery);\n        /* bool slow = 26; */\n        if (message.slow !== false)\n            writer.tag(26, WireType.Varint).bool(message.slow);\n        /* int32 missile_barrage = 27; */\n        if (message.missileBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.missileBarrage);\n        /* int32 netherwind_presence = 28; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(28, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 spell_power = 29; */\n        if (message.spellPower !== 0)\n            writer.tag(29, WireType.Varint).int32(message.spellPower);\n        /* bool arcane_barrage = 30; */\n        if (message.arcaneBarrage !== false)\n            writer.tag(30, WireType.Varint).bool(message.arcaneBarrage);\n        /* int32 improved_fire_blast = 31; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 incineration = 32; */\n        if (message.incineration !== 0)\n            writer.tag(32, WireType.Varint).int32(message.incineration);\n        /* int32 improved_fireball = 33; */\n        if (message.improvedFireball !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedFireball);\n        /* int32 ignite = 34; */\n        if (message.ignite !== 0)\n            writer.tag(34, WireType.Varint).int32(message.ignite);\n        /* int32 burning_determination = 35; */\n        if (message.burningDetermination !== 0)\n            writer.tag(35, WireType.Varint).int32(message.burningDetermination);\n        /* int32 world_in_flames = 36; */\n        if (message.worldInFlames !== 0)\n            writer.tag(36, WireType.Varint).int32(message.worldInFlames);\n        /* int32 flame_throwing = 37; */\n        if (message.flameThrowing !== 0)\n            writer.tag(37, WireType.Varint).int32(message.flameThrowing);\n        /* int32 impact = 38; */\n        if (message.impact !== 0)\n            writer.tag(38, WireType.Varint).int32(message.impact);\n        /* bool pyroblast = 39; */\n        if (message.pyroblast !== false)\n            writer.tag(39, WireType.Varint).bool(message.pyroblast);\n        /* int32 burning_soul = 40; */\n        if (message.burningSoul !== 0)\n            writer.tag(40, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_scorch = 41; */\n        if (message.improvedScorch !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedScorch);\n        /* int32 molten_shields = 42; */\n        if (message.moltenShields !== 0)\n            writer.tag(42, WireType.Varint).int32(message.moltenShields);\n        /* int32 master_of_elements = 43; */\n        if (message.masterOfElements !== 0)\n            writer.tag(43, WireType.Varint).int32(message.masterOfElements);\n        /* int32 playing_with_fire = 44; */\n        if (message.playingWithFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.playingWithFire);\n        /* int32 critical_mass = 45; */\n        if (message.criticalMass !== 0)\n            writer.tag(45, WireType.Varint).int32(message.criticalMass);\n        /* bool blast_wave = 46; */\n        if (message.blastWave !== false)\n            writer.tag(46, WireType.Varint).bool(message.blastWave);\n        /* int32 blazing_speed = 47; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(47, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 fire_power = 48; */\n        if (message.firePower !== 0)\n            writer.tag(48, WireType.Varint).int32(message.firePower);\n        /* int32 pyromaniac = 49; */\n        if (message.pyromaniac !== 0)\n            writer.tag(49, WireType.Varint).int32(message.pyromaniac);\n        /* bool combustion = 50; */\n        if (message.combustion !== false)\n            writer.tag(50, WireType.Varint).bool(message.combustion);\n        /* int32 molten_fury = 51; */\n        if (message.moltenFury !== 0)\n            writer.tag(51, WireType.Varint).int32(message.moltenFury);\n        /* int32 fiery_payback = 52; */\n        if (message.fieryPayback !== 0)\n            writer.tag(52, WireType.Varint).int32(message.fieryPayback);\n        /* int32 empowered_fire = 53; */\n        if (message.empoweredFire !== 0)\n            writer.tag(53, WireType.Varint).int32(message.empoweredFire);\n        /* int32 firestarter = 54; */\n        if (message.firestarter !== 0)\n            writer.tag(54, WireType.Varint).int32(message.firestarter);\n        /* bool dragons_breath = 55; */\n        if (message.dragonsBreath !== false)\n            writer.tag(55, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 hot_streak = 56; */\n        if (message.hotStreak !== 0)\n            writer.tag(56, WireType.Varint).int32(message.hotStreak);\n        /* int32 burnout = 57; */\n        if (message.burnout !== 0)\n            writer.tag(57, WireType.Varint).int32(message.burnout);\n        /* bool living_bomb = 58; */\n        if (message.livingBomb !== false)\n            writer.tag(58, WireType.Varint).bool(message.livingBomb);\n        /* int32 frostbite = 59; */\n        if (message.frostbite !== 0)\n            writer.tag(59, WireType.Varint).int32(message.frostbite);\n        /* int32 improved_frostbolt = 60; */\n        if (message.improvedFrostbolt !== 0)\n            writer.tag(60, WireType.Varint).int32(message.improvedFrostbolt);\n        /* int32 ice_floes = 61; */\n        if (message.iceFloes !== 0)\n            writer.tag(61, WireType.Varint).int32(message.iceFloes);\n        /* int32 ice_shards = 62; */\n        if (message.iceShards !== 0)\n            writer.tag(62, WireType.Varint).int32(message.iceShards);\n        /* int32 frost_warding = 63; */\n        if (message.frostWarding !== 0)\n            writer.tag(63, WireType.Varint).int32(message.frostWarding);\n        /* int32 precision = 64; */\n        if (message.precision !== 0)\n            writer.tag(64, WireType.Varint).int32(message.precision);\n        /* int32 permafrost = 65; */\n        if (message.permafrost !== 0)\n            writer.tag(65, WireType.Varint).int32(message.permafrost);\n        /* int32 piercing_ice = 66; */\n        if (message.piercingIce !== 0)\n            writer.tag(66, WireType.Varint).int32(message.piercingIce);\n        /* bool icy_veins = 67; */\n        if (message.icyVeins !== false)\n            writer.tag(67, WireType.Varint).bool(message.icyVeins);\n        /* int32 improved_blizzard = 68; */\n        if (message.improvedBlizzard !== 0)\n            writer.tag(68, WireType.Varint).int32(message.improvedBlizzard);\n        /* int32 arctic_reach = 69; */\n        if (message.arcticReach !== 0)\n            writer.tag(69, WireType.Varint).int32(message.arcticReach);\n        /* int32 frost_channeling = 70; */\n        if (message.frostChanneling !== 0)\n            writer.tag(70, WireType.Varint).int32(message.frostChanneling);\n        /* int32 shatter = 71; */\n        if (message.shatter !== 0)\n            writer.tag(71, WireType.Varint).int32(message.shatter);\n        /* bool cold_snap = 72; */\n        if (message.coldSnap !== false)\n            writer.tag(72, WireType.Varint).bool(message.coldSnap);\n        /* int32 improved_cone_of_cold = 73; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(73, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 frozen_core = 74; */\n        if (message.frozenCore !== 0)\n            writer.tag(74, WireType.Varint).int32(message.frozenCore);\n        /* int32 cold_as_ice = 75; */\n        if (message.coldAsIce !== 0)\n            writer.tag(75, WireType.Varint).int32(message.coldAsIce);\n        /* int32 winters_chill = 76; */\n        if (message.wintersChill !== 0)\n            writer.tag(76, WireType.Varint).int32(message.wintersChill);\n        /* int32 shattered_barrier = 77; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(77, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 78; */\n        if (message.iceBarrier !== false)\n            writer.tag(78, WireType.Varint).bool(message.iceBarrier);\n        /* int32 arctic_winds = 79; */\n        if (message.arcticWinds !== 0)\n            writer.tag(79, WireType.Varint).int32(message.arcticWinds);\n        /* int32 empowered_frostbolt = 80; */\n        if (message.empoweredFrostbolt !== 0)\n            writer.tag(80, WireType.Varint).int32(message.empoweredFrostbolt);\n        /* int32 fingers_of_frost = 81; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(81, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 brain_freeze = 82; */\n        if (message.brainFreeze !== 0)\n            writer.tag(82, WireType.Varint).int32(message.brainFreeze);\n        /* bool summon_water_elemental = 83; */\n        if (message.summonWaterElemental !== false)\n            writer.tag(83, WireType.Varint).bool(message.summonWaterElemental);\n        /* int32 enduring_winter = 84; */\n        if (message.enduringWinter !== 0)\n            writer.tag(84, WireType.Varint).int32(message.enduringWinter);\n        /* int32 chilled_to_the_bone = 85; */\n        if (message.chilledToTheBone !== 0)\n            writer.tag(85, WireType.Varint).int32(message.chilledToTheBone);\n        /* bool deep_freeze = 86; */\n        if (message.deepFreeze !== false)\n            writer.tag(86, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage$Type extends MessageType<Mage> {\n    constructor() {\n        super(\"proto.Mage\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Mage_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => MageTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Mage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Mage>): Mage {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage): Mage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation rotation */ 1:\n                    message.rotation = Mage_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.MageTalents talents */ 2:\n                    message.talents = MageTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Mage.Options options */ 3:\n                    message.options = Mage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation rotation = 1; */\n        if (message.rotation)\n            Mage_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.MageTalents talents = 2; */\n        if (message.talents)\n            MageTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage.Options options = 3; */\n        if (message.options)\n            Mage_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage\n */\nexport const Mage = new Mage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Rotation$Type extends MessageType<Mage_Rotation> {\n    constructor() {\n        super(\"proto.Mage.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.Type\", Mage_Rotation_Type] },\n            { no: 2, name: \"min_blast_before_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"num_4_stack_blasts_to_missiles_gamble\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"num_4_stack_blasts_to_early_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"extra_blasts_during_first_ap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"primary_fire_spell\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.PrimaryFireSpell\", Mage_Rotation_PrimaryFireSpell] },\n            { no: 4, name: \"maintain_improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"num_extra_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"optimize_cds_for_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"cqs_latency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"lb_before_hotstreak\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"aoe\", kind: \"enum\", T: () => [\"proto.Mage.Rotation.AoeRotation\", Mage_Rotation_AoeRotation] }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Rotation>): Mage_Rotation {\n        const message = { type: 0, minBlastBeforeMissiles: 0, num4StackBlastsToMissilesGamble: 0, num4StackBlastsToEarlyMissiles: 0, extraBlastsDuringFirstAp: 0, primaryFireSpell: 0, maintainImprovedScorch: false, numExtraTargets: 0, optimizeCdsForExecute: false, cqsLatency: 0, lbBeforeHotstreak: false, waterElementalDisobeyChance: 0, aoe: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Rotation): Mage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 min_blast_before_missiles */ 2:\n                    message.minBlastBeforeMissiles = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_missiles_gamble */ 8:\n                    message.num4StackBlastsToMissilesGamble = reader.int32();\n                    break;\n                case /* int32 num_4_stack_blasts_to_early_missiles */ 9:\n                    message.num4StackBlastsToEarlyMissiles = reader.int32();\n                    break;\n                case /* int32 extra_blasts_during_first_ap */ 10:\n                    message.extraBlastsDuringFirstAp = reader.int32();\n                    break;\n                case /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell */ 3:\n                    message.primaryFireSpell = reader.int32();\n                    break;\n                case /* bool maintain_improved_scorch */ 4:\n                    message.maintainImprovedScorch = reader.bool();\n                    break;\n                case /* int32 num_extra_targets */ 5:\n                    message.numExtraTargets = reader.int32();\n                    break;\n                case /* bool optimize_cds_for_execute */ 11:\n                    message.optimizeCdsForExecute = reader.bool();\n                    break;\n                case /* int32 cqs_latency */ 12:\n                    message.cqsLatency = reader.int32();\n                    break;\n                case /* bool lb_before_hotstreak */ 13:\n                    message.lbBeforeHotstreak = reader.bool();\n                    break;\n                case /* double water_elemental_disobey_chance */ 6:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                case /* proto.Mage.Rotation.AoeRotation aoe */ 7:\n                    message.aoe = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* int32 min_blast_before_missiles = 2; */\n        if (message.minBlastBeforeMissiles !== 0)\n            writer.tag(2, WireType.Varint).int32(message.minBlastBeforeMissiles);\n        /* int32 num_4_stack_blasts_to_missiles_gamble = 8; */\n        if (message.num4StackBlastsToMissilesGamble !== 0)\n            writer.tag(8, WireType.Varint).int32(message.num4StackBlastsToMissilesGamble);\n        /* int32 num_4_stack_blasts_to_early_missiles = 9; */\n        if (message.num4StackBlastsToEarlyMissiles !== 0)\n            writer.tag(9, WireType.Varint).int32(message.num4StackBlastsToEarlyMissiles);\n        /* int32 extra_blasts_during_first_ap = 10; */\n        if (message.extraBlastsDuringFirstAp !== 0)\n            writer.tag(10, WireType.Varint).int32(message.extraBlastsDuringFirstAp);\n        /* proto.Mage.Rotation.PrimaryFireSpell primary_fire_spell = 3; */\n        if (message.primaryFireSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.primaryFireSpell);\n        /* bool maintain_improved_scorch = 4; */\n        if (message.maintainImprovedScorch !== false)\n            writer.tag(4, WireType.Varint).bool(message.maintainImprovedScorch);\n        /* int32 num_extra_targets = 5; */\n        if (message.numExtraTargets !== 0)\n            writer.tag(5, WireType.Varint).int32(message.numExtraTargets);\n        /* bool optimize_cds_for_execute = 11; */\n        if (message.optimizeCdsForExecute !== false)\n            writer.tag(11, WireType.Varint).bool(message.optimizeCdsForExecute);\n        /* int32 cqs_latency = 12; */\n        if (message.cqsLatency !== 0)\n            writer.tag(12, WireType.Varint).int32(message.cqsLatency);\n        /* bool lb_before_hotstreak = 13; */\n        if (message.lbBeforeHotstreak !== false)\n            writer.tag(13, WireType.Varint).bool(message.lbBeforeHotstreak);\n        /* double water_elemental_disobey_chance = 6; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(6, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        /* proto.Mage.Rotation.AoeRotation aoe = 7; */\n        if (message.aoe !== 0)\n            writer.tag(7, WireType.Varint).int32(message.aoe);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Rotation\n */\nexport const Mage_Rotation = new Mage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Mage_Options$Type extends MessageType<Mage_Options> {\n    constructor() {\n        super(\"proto.Mage.Options\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.Mage.Options.ArmorType\", Mage_Options_ArmorType] },\n            { no: 2, name: \"evocation_ticks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Mage_Options>): Mage_Options {\n        const message = { armor: 0, evocationTicks: 0, focusMagicPercentUptime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Mage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Mage_Options): Mage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Mage.Options.ArmorType armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* int32 evocation_ticks */ 2:\n                    message.evocationTicks = reader.int32();\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 3:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Mage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Mage.Options.ArmorType armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* int32 evocation_ticks = 2; */\n        if (message.evocationTicks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.evocationTicks);\n        /* int32 focus_magic_percent_uptime = 3; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusMagicPercentUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Mage.Options\n */\nexport const Mage_Options = new Mage_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { CustomRotation } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_aspect_of_the_hawk = 1;\n     */\n    improvedAspectOfTheHawk: number;\n    /**\n     * @generated from protobuf field: int32 endurance_training = 2;\n     */\n    enduranceTraining: number;\n    /**\n     * @generated from protobuf field: int32 focused_fire = 3;\n     */\n    focusedFire: number;\n    /**\n     * @generated from protobuf field: int32 improved_aspect_of_the_monkey = 4;\n     */\n    improvedAspectOfTheMonkey: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 5;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 improved_revive_pet = 6;\n     */\n    improvedRevivePet: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 7;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: bool aspect_mastery = 8;\n     */\n    aspectMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_fury = 9;\n     */\n    unleashedFury: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 10;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 ferocity = 11;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 12;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: bool intimidation = 13;\n     */\n    intimidation: boolean;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 14;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 animal_handler = 15;\n     */\n    animalHandler: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 16;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 ferocious_inspiration = 17;\n     */\n    ferociousInspiration: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 18;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 catlike_reflexes = 19;\n     */\n    catlikeReflexes: number;\n    /**\n     * @generated from protobuf field: int32 invigoration = 20;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: int32 serpents_swiftness = 21;\n     */\n    serpentsSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 longevity = 22;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 23;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 24;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 25;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 26;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 improved_concussive_shot = 27;\n     */\n    improvedConcussiveShot: number;\n    /**\n     * @generated from protobuf field: int32 focused_aim = 28;\n     */\n    focusedAim: number;\n    /**\n     * @generated from protobuf field: int32 lethal_shots = 29;\n     */\n    lethalShots: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 30;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: int32 improved_hunters_mark = 31;\n     */\n    improvedHuntersMark: number;\n    /**\n     * @generated from protobuf field: int32 mortal_shots = 32;\n     */\n    mortalShots: number;\n    /**\n     * @generated from protobuf field: int32 go_for_the_throat = 33;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_shot = 34;\n     */\n    improvedArcaneShot: number;\n    /**\n     * @generated from protobuf field: bool aimed_shot = 35;\n     */\n    aimedShot: boolean;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 36;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 improved_stings = 37;\n     */\n    improvedStings: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 38;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 39;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: bool readiness = 40;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 barrage = 41;\n     */\n    barrage: number;\n    /**\n     * @generated from protobuf field: int32 combat_experience = 42;\n     */\n    combatExperience: number;\n    /**\n     * @generated from protobuf field: int32 ranged_weapon_specialization = 43;\n     */\n    rangedWeaponSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 44;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 45;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_barrage = 46;\n     */\n    improvedBarrage: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 47;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 48;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 wild_quiver = 49;\n     */\n    wildQuiver: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 50;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 51;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 52;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 53;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 improved_tracking = 54;\n     */\n    improvedTracking: number;\n    /**\n     * @generated from protobuf field: int32 hawk_eye = 55;\n     */\n    hawkEye: number;\n    /**\n     * @generated from protobuf field: int32 savage_strikes = 56;\n     */\n    savageStrikes: number;\n    /**\n     * @generated from protobuf field: int32 surefooted = 57;\n     */\n    surefooted: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 58;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 59;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 survival_instincts = 60;\n     */\n    survivalInstincts: number;\n    /**\n     * @generated from protobuf field: int32 survivalist = 61;\n     */\n    survivalist: number;\n    /**\n     * @generated from protobuf field: bool scatter_shot = 62;\n     */\n    scatterShot: boolean;\n    /**\n     * @generated from protobuf field: int32 deflection = 63;\n     */\n    deflection: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 64;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 65;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 66;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 hunter_vs_wild = 67;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 killer_instinct = 68;\n     */\n    killerInstinct: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 69;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 70;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 71;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 expose_weakness = 72;\n     */\n    exposeWeakness: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 73;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 74;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: int32 master_tactician = 75;\n     */\n    masterTactician: number;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 76;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 77;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 78;\n     */\n    blackArrow: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 79;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 hunting_party = 80;\n     */\n    huntingParty: number;\n    /**\n     * @generated from protobuf field: bool explosive_shot = 81;\n     */\n    explosiveShot: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: int32 cobra_reflexes = 1;\n     */\n    cobraReflexes: number;\n    /**\n     * @generated from protobuf field: bool dive = 2;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 5;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 6;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 7;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 8;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 11;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 12;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: int32 cornered = 13;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 14;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 15;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 16;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 17;\n     */\n    bullheaded: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 18;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 20;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 improved_cower = 21;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 22;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: bool heart_of_the_pheonix = 23;\n     */\n    heartOfThePheonix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 24;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: bool rabid = 25;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 26;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 27;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 28;\n     */\n    sharkAttack: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: bool charge = 29;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_of_the_rhino = 30;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 31;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 32;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 33;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: bool last_stand = 34;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 35;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 36;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 37;\n     */\n    silverback: number;\n}\n/**\n * @generated from protobuf message proto.Hunter\n */\nexport interface Hunter {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation rotation = 1;\n     */\n    rotation?: Hunter_Rotation;\n    /**\n     * @generated from protobuf field: proto.HunterTalents talents = 2;\n     */\n    talents?: HunterTalents;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options options = 3;\n     */\n    options?: Hunter_Options;\n}\n/**\n * @generated from protobuf message proto.Hunter.Rotation\n */\nexport interface Hunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.RotationType type = 9;\n     */\n    type: Hunter_Rotation_RotationType;\n    /**\n     * @generated from protobuf field: proto.Hunter.Rotation.StingType sting = 5;\n     */\n    sting: Hunter_Rotation_StingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 2;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: proto.CustomRotation custom_rotation = 8;\n     */\n    customRotation?: CustomRotation;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.RotationType\n */\nexport enum Hunter_Rotation_RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.StingType\n */\nexport enum Hunter_Rotation_StingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n/**\n * @generated from protobuf enum proto.Hunter.Rotation.SpellOption\n */\nexport enum Hunter_Rotation_SpellOption {\n    /**\n     * @generated from protobuf enum value: NoSpell = 0;\n     */\n    NoSpell = 0,\n    /**\n     * @generated from protobuf enum value: SteadyShot = 1;\n     */\n    SteadyShot = 1,\n    /**\n     * @generated from protobuf enum value: ArcaneShot = 2;\n     */\n    ArcaneShot = 2,\n    /**\n     * @generated from protobuf enum value: AimedShot = 3;\n     */\n    AimedShot = 3,\n    /**\n     * @generated from protobuf enum value: MultiShot = 4;\n     */\n    MultiShot = 4,\n    /**\n     * @generated from protobuf enum value: SerpentStingSpell = 5;\n     */\n    SerpentStingSpell = 5,\n    /**\n     * @generated from protobuf enum value: ScorpidStingSpell = 6;\n     */\n    ScorpidStingSpell = 6,\n    /**\n     * @generated from protobuf enum value: KillShot = 7;\n     */\n    KillShot = 7,\n    /**\n     * @generated from protobuf enum value: BlackArrow = 8;\n     */\n    BlackArrow = 8,\n    /**\n     * @generated from protobuf enum value: ChimeraShot = 9;\n     */\n    ChimeraShot = 9,\n    /**\n     * @generated from protobuf enum value: ExplosiveShot = 10;\n     */\n    ExplosiveShot = 10,\n    /**\n     * @generated from protobuf enum value: ExplosiveShotDownrank = 13;\n     */\n    ExplosiveShotDownrank = 13,\n    /**\n     * @generated from protobuf enum value: ExplosiveTrap = 11;\n     */\n    ExplosiveTrap = 11,\n    /**\n     * @generated from protobuf enum value: Volley = 12;\n     */\n    Volley = 12\n}\n/**\n * @generated from protobuf message proto.Hunter.Options\n */\nexport interface Hunter_Options {\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.Ammo ammo = 1;\n     */\n    ammo: Hunter_Options_Ammo;\n    /**\n     * @generated from protobuf field: proto.Hunter.Options.PetType pet_type = 2;\n     */\n    petType: Hunter_Options_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 7;\n     */\n    sniperTrainingUptime: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 5;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.Ammo\n */\nexport enum Hunter_Options_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.Hunter.Options.PetType\n */\nexport enum Hunter_Options_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfTheViper = 42901;\n     */\n    GlyphOfAspectOfTheViper = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveTrap = 45733;\n     */\n    GlyphOfExplosiveTrap = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostTrap = 42906;\n     */\n    GlyphOfFrostTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfHuntersMark = 42907;\n     */\n    GlyphOfHuntersMark = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMultiShot = 42910;\n     */\n    GlyphOfMultiShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheBeast = 42899;\n     */\n    GlyphOfTheBeast = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheHawk = 42909;\n     */\n    GlyphOfTheHawk = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrueshotAura = 42915;\n     */\n    GlyphOfTrueshotAura = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfVolley = 42916;\n     */\n    GlyphOfVolley = 42916,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfMendPet = 43350;\n     */\n    GlyphOfMendPet = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfPossessedStrength = 43354;\n     */\n    GlyphOfPossessedStrength = 43354,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePack = 43355;\n     */\n    GlyphOfThePack = 43355\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_aspect_of_the_hawk\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"endurance_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focused_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_aspect_of_the_monkey\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_revive_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"aspect_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"unleashed_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"intimidation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"animal_handler\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"ferocious_inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"catlike_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"serpents_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"improved_concussive_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"focused_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"lethal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"improved_hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"mortal_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"improved_arcane_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"aimed_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"combat_experience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"ranged_weapon_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"improved_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"wild_quiver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"improved_tracking\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hawk_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"savage_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"surefooted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"survival_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"survivalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"scatter_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"deflection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 67, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"killer_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 70, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 71, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"expose_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 74, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"master_tactician\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 77, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 79, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"hunting_party\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"explosive_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedAspectOfTheHawk: 0, enduranceTraining: 0, focusedFire: 0, improvedAspectOfTheMonkey: 0, thickHide: 0, improvedRevivePet: 0, pathfinding: 0, aspectMastery: false, unleashedFury: 0, improvedMendPet: 0, ferocity: 0, spiritBond: 0, intimidation: false, bestialDiscipline: 0, animalHandler: 0, frenzy: 0, ferociousInspiration: 0, bestialWrath: false, catlikeReflexes: 0, invigoration: 0, serpentsSwiftness: 0, longevity: 0, theBeastWithin: false, cobraStrikes: 0, kindredSpirits: 0, beastMastery: false, improvedConcussiveShot: 0, focusedAim: 0, lethalShots: 0, carefulAim: 0, improvedHuntersMark: 0, mortalShots: 0, goForTheThroat: 0, improvedArcaneShot: 0, aimedShot: false, rapidKilling: 0, improvedStings: 0, efficiency: 0, concussiveBarrage: 0, readiness: false, barrage: 0, combatExperience: 0, rangedWeaponSpecialization: 0, piercingShots: 0, trueshotAura: false, improvedBarrage: 0, masterMarksman: 0, rapidRecuperation: 0, wildQuiver: 0, silencingShot: false, improvedSteadyShot: 0, markedForDeath: 0, chimeraShot: false, improvedTracking: 0, hawkEye: 0, savageStrikes: 0, surefooted: 0, entrapment: 0, trapMastery: 0, survivalInstincts: 0, survivalist: 0, scatterShot: false, deflection: 0, survivalTactics: 0, tNT: 0, lockAndLoad: 0, hunterVsWild: 0, killerInstinct: 0, counterattack: false, lightningReflexes: 0, resourcefulness: 0, exposeWeakness: 0, wyvernSting: false, thrillOfTheHunt: 0, masterTactician: 0, noxiousStings: 0, pointOfNoEscape: 0, blackArrow: false, sniperTraining: 0, huntingParty: 0, explosiveShot: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_aspect_of_the_hawk */ 1:\n                    message.improvedAspectOfTheHawk = reader.int32();\n                    break;\n                case /* int32 endurance_training */ 2:\n                    message.enduranceTraining = reader.int32();\n                    break;\n                case /* int32 focused_fire */ 3:\n                    message.focusedFire = reader.int32();\n                    break;\n                case /* int32 improved_aspect_of_the_monkey */ 4:\n                    message.improvedAspectOfTheMonkey = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 5:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 improved_revive_pet */ 6:\n                    message.improvedRevivePet = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 7:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* bool aspect_mastery */ 8:\n                    message.aspectMastery = reader.bool();\n                    break;\n                case /* int32 unleashed_fury */ 9:\n                    message.unleashedFury = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 10:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 ferocity */ 11:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 12:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* bool intimidation */ 13:\n                    message.intimidation = reader.bool();\n                    break;\n                case /* int32 bestial_discipline */ 14:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 animal_handler */ 15:\n                    message.animalHandler = reader.int32();\n                    break;\n                case /* int32 frenzy */ 16:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 ferocious_inspiration */ 17:\n                    message.ferociousInspiration = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 18:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* int32 catlike_reflexes */ 19:\n                    message.catlikeReflexes = reader.int32();\n                    break;\n                case /* int32 invigoration */ 20:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* int32 serpents_swiftness */ 21:\n                    message.serpentsSwiftness = reader.int32();\n                    break;\n                case /* int32 longevity */ 22:\n                    message.longevity = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 23:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 cobra_strikes */ 24:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* int32 kindred_spirits */ 25:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 26:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 improved_concussive_shot */ 27:\n                    message.improvedConcussiveShot = reader.int32();\n                    break;\n                case /* int32 focused_aim */ 28:\n                    message.focusedAim = reader.int32();\n                    break;\n                case /* int32 lethal_shots */ 29:\n                    message.lethalShots = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 30:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* int32 improved_hunters_mark */ 31:\n                    message.improvedHuntersMark = reader.int32();\n                    break;\n                case /* int32 mortal_shots */ 32:\n                    message.mortalShots = reader.int32();\n                    break;\n                case /* int32 go_for_the_throat */ 33:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 improved_arcane_shot */ 34:\n                    message.improvedArcaneShot = reader.int32();\n                    break;\n                case /* bool aimed_shot */ 35:\n                    message.aimedShot = reader.bool();\n                    break;\n                case /* int32 rapid_killing */ 36:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 improved_stings */ 37:\n                    message.improvedStings = reader.int32();\n                    break;\n                case /* int32 efficiency */ 38:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 concussive_barrage */ 39:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* bool readiness */ 40:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 barrage */ 41:\n                    message.barrage = reader.int32();\n                    break;\n                case /* int32 combat_experience */ 42:\n                    message.combatExperience = reader.int32();\n                    break;\n                case /* int32 ranged_weapon_specialization */ 43:\n                    message.rangedWeaponSpecialization = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 44:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 45:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 improved_barrage */ 46:\n                    message.improvedBarrage = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 47:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 48:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 wild_quiver */ 49:\n                    message.wildQuiver = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 50:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 improved_steady_shot */ 51:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 52:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 53:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 improved_tracking */ 54:\n                    message.improvedTracking = reader.int32();\n                    break;\n                case /* int32 hawk_eye */ 55:\n                    message.hawkEye = reader.int32();\n                    break;\n                case /* int32 savage_strikes */ 56:\n                    message.savageStrikes = reader.int32();\n                    break;\n                case /* int32 surefooted */ 57:\n                    message.surefooted = reader.int32();\n                    break;\n                case /* int32 entrapment */ 58:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 59:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 survival_instincts */ 60:\n                    message.survivalInstincts = reader.int32();\n                    break;\n                case /* int32 survivalist */ 61:\n                    message.survivalist = reader.int32();\n                    break;\n                case /* bool scatter_shot */ 62:\n                    message.scatterShot = reader.bool();\n                    break;\n                case /* int32 deflection */ 63:\n                    message.deflection = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 64:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 65:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 lock_and_load */ 66:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 hunter_vs_wild */ 67:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 killer_instinct */ 68:\n                    message.killerInstinct = reader.int32();\n                    break;\n                case /* bool counterattack */ 69:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lightning_reflexes */ 70:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 71:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 expose_weakness */ 72:\n                    message.exposeWeakness = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 73:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 74:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* int32 master_tactician */ 75:\n                    message.masterTactician = reader.int32();\n                    break;\n                case /* int32 noxious_stings */ 76:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 77:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* bool black_arrow */ 78:\n                    message.blackArrow = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 79:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 hunting_party */ 80:\n                    message.huntingParty = reader.int32();\n                    break;\n                case /* bool explosive_shot */ 81:\n                    message.explosiveShot = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_aspect_of_the_hawk = 1; */\n        if (message.improvedAspectOfTheHawk !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedAspectOfTheHawk);\n        /* int32 endurance_training = 2; */\n        if (message.enduranceTraining !== 0)\n            writer.tag(2, WireType.Varint).int32(message.enduranceTraining);\n        /* int32 focused_fire = 3; */\n        if (message.focusedFire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.focusedFire);\n        /* int32 improved_aspect_of_the_monkey = 4; */\n        if (message.improvedAspectOfTheMonkey !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedAspectOfTheMonkey);\n        /* int32 thick_hide = 5; */\n        if (message.thickHide !== 0)\n            writer.tag(5, WireType.Varint).int32(message.thickHide);\n        /* int32 improved_revive_pet = 6; */\n        if (message.improvedRevivePet !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedRevivePet);\n        /* int32 pathfinding = 7; */\n        if (message.pathfinding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.pathfinding);\n        /* bool aspect_mastery = 8; */\n        if (message.aspectMastery !== false)\n            writer.tag(8, WireType.Varint).bool(message.aspectMastery);\n        /* int32 unleashed_fury = 9; */\n        if (message.unleashedFury !== 0)\n            writer.tag(9, WireType.Varint).int32(message.unleashedFury);\n        /* int32 improved_mend_pet = 10; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 ferocity = 11; */\n        if (message.ferocity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.ferocity);\n        /* int32 spirit_bond = 12; */\n        if (message.spiritBond !== 0)\n            writer.tag(12, WireType.Varint).int32(message.spiritBond);\n        /* bool intimidation = 13; */\n        if (message.intimidation !== false)\n            writer.tag(13, WireType.Varint).bool(message.intimidation);\n        /* int32 bestial_discipline = 14; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 animal_handler = 15; */\n        if (message.animalHandler !== 0)\n            writer.tag(15, WireType.Varint).int32(message.animalHandler);\n        /* int32 frenzy = 16; */\n        if (message.frenzy !== 0)\n            writer.tag(16, WireType.Varint).int32(message.frenzy);\n        /* int32 ferocious_inspiration = 17; */\n        if (message.ferociousInspiration !== 0)\n            writer.tag(17, WireType.Varint).int32(message.ferociousInspiration);\n        /* bool bestial_wrath = 18; */\n        if (message.bestialWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.bestialWrath);\n        /* int32 catlike_reflexes = 19; */\n        if (message.catlikeReflexes !== 0)\n            writer.tag(19, WireType.Varint).int32(message.catlikeReflexes);\n        /* int32 invigoration = 20; */\n        if (message.invigoration !== 0)\n            writer.tag(20, WireType.Varint).int32(message.invigoration);\n        /* int32 serpents_swiftness = 21; */\n        if (message.serpentsSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.serpentsSwiftness);\n        /* int32 longevity = 22; */\n        if (message.longevity !== 0)\n            writer.tag(22, WireType.Varint).int32(message.longevity);\n        /* bool the_beast_within = 23; */\n        if (message.theBeastWithin !== false)\n            writer.tag(23, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 cobra_strikes = 24; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(24, WireType.Varint).int32(message.cobraStrikes);\n        /* int32 kindred_spirits = 25; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(25, WireType.Varint).int32(message.kindredSpirits);\n        /* bool beast_mastery = 26; */\n        if (message.beastMastery !== false)\n            writer.tag(26, WireType.Varint).bool(message.beastMastery);\n        /* int32 improved_concussive_shot = 27; */\n        if (message.improvedConcussiveShot !== 0)\n            writer.tag(27, WireType.Varint).int32(message.improvedConcussiveShot);\n        /* int32 focused_aim = 28; */\n        if (message.focusedAim !== 0)\n            writer.tag(28, WireType.Varint).int32(message.focusedAim);\n        /* int32 lethal_shots = 29; */\n        if (message.lethalShots !== 0)\n            writer.tag(29, WireType.Varint).int32(message.lethalShots);\n        /* int32 careful_aim = 30; */\n        if (message.carefulAim !== 0)\n            writer.tag(30, WireType.Varint).int32(message.carefulAim);\n        /* int32 improved_hunters_mark = 31; */\n        if (message.improvedHuntersMark !== 0)\n            writer.tag(31, WireType.Varint).int32(message.improvedHuntersMark);\n        /* int32 mortal_shots = 32; */\n        if (message.mortalShots !== 0)\n            writer.tag(32, WireType.Varint).int32(message.mortalShots);\n        /* int32 go_for_the_throat = 33; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(33, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 improved_arcane_shot = 34; */\n        if (message.improvedArcaneShot !== 0)\n            writer.tag(34, WireType.Varint).int32(message.improvedArcaneShot);\n        /* bool aimed_shot = 35; */\n        if (message.aimedShot !== false)\n            writer.tag(35, WireType.Varint).bool(message.aimedShot);\n        /* int32 rapid_killing = 36; */\n        if (message.rapidKilling !== 0)\n            writer.tag(36, WireType.Varint).int32(message.rapidKilling);\n        /* int32 improved_stings = 37; */\n        if (message.improvedStings !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedStings);\n        /* int32 efficiency = 38; */\n        if (message.efficiency !== 0)\n            writer.tag(38, WireType.Varint).int32(message.efficiency);\n        /* int32 concussive_barrage = 39; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(39, WireType.Varint).int32(message.concussiveBarrage);\n        /* bool readiness = 40; */\n        if (message.readiness !== false)\n            writer.tag(40, WireType.Varint).bool(message.readiness);\n        /* int32 barrage = 41; */\n        if (message.barrage !== 0)\n            writer.tag(41, WireType.Varint).int32(message.barrage);\n        /* int32 combat_experience = 42; */\n        if (message.combatExperience !== 0)\n            writer.tag(42, WireType.Varint).int32(message.combatExperience);\n        /* int32 ranged_weapon_specialization = 43; */\n        if (message.rangedWeaponSpecialization !== 0)\n            writer.tag(43, WireType.Varint).int32(message.rangedWeaponSpecialization);\n        /* int32 piercing_shots = 44; */\n        if (message.piercingShots !== 0)\n            writer.tag(44, WireType.Varint).int32(message.piercingShots);\n        /* bool trueshot_aura = 45; */\n        if (message.trueshotAura !== false)\n            writer.tag(45, WireType.Varint).bool(message.trueshotAura);\n        /* int32 improved_barrage = 46; */\n        if (message.improvedBarrage !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedBarrage);\n        /* int32 master_marksman = 47; */\n        if (message.masterMarksman !== 0)\n            writer.tag(47, WireType.Varint).int32(message.masterMarksman);\n        /* int32 rapid_recuperation = 48; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(48, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 wild_quiver = 49; */\n        if (message.wildQuiver !== 0)\n            writer.tag(49, WireType.Varint).int32(message.wildQuiver);\n        /* bool silencing_shot = 50; */\n        if (message.silencingShot !== false)\n            writer.tag(50, WireType.Varint).bool(message.silencingShot);\n        /* int32 improved_steady_shot = 51; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(51, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 marked_for_death = 52; */\n        if (message.markedForDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 53; */\n        if (message.chimeraShot !== false)\n            writer.tag(53, WireType.Varint).bool(message.chimeraShot);\n        /* int32 improved_tracking = 54; */\n        if (message.improvedTracking !== 0)\n            writer.tag(54, WireType.Varint).int32(message.improvedTracking);\n        /* int32 hawk_eye = 55; */\n        if (message.hawkEye !== 0)\n            writer.tag(55, WireType.Varint).int32(message.hawkEye);\n        /* int32 savage_strikes = 56; */\n        if (message.savageStrikes !== 0)\n            writer.tag(56, WireType.Varint).int32(message.savageStrikes);\n        /* int32 surefooted = 57; */\n        if (message.surefooted !== 0)\n            writer.tag(57, WireType.Varint).int32(message.surefooted);\n        /* int32 entrapment = 58; */\n        if (message.entrapment !== 0)\n            writer.tag(58, WireType.Varint).int32(message.entrapment);\n        /* int32 trap_mastery = 59; */\n        if (message.trapMastery !== 0)\n            writer.tag(59, WireType.Varint).int32(message.trapMastery);\n        /* int32 survival_instincts = 60; */\n        if (message.survivalInstincts !== 0)\n            writer.tag(60, WireType.Varint).int32(message.survivalInstincts);\n        /* int32 survivalist = 61; */\n        if (message.survivalist !== 0)\n            writer.tag(61, WireType.Varint).int32(message.survivalist);\n        /* bool scatter_shot = 62; */\n        if (message.scatterShot !== false)\n            writer.tag(62, WireType.Varint).bool(message.scatterShot);\n        /* int32 deflection = 63; */\n        if (message.deflection !== 0)\n            writer.tag(63, WireType.Varint).int32(message.deflection);\n        /* int32 survival_tactics = 64; */\n        if (message.survivalTactics !== 0)\n            writer.tag(64, WireType.Varint).int32(message.survivalTactics);\n        /* int32 t_n_t = 65; */\n        if (message.tNT !== 0)\n            writer.tag(65, WireType.Varint).int32(message.tNT);\n        /* int32 lock_and_load = 66; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(66, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 hunter_vs_wild = 67; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(67, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 killer_instinct = 68; */\n        if (message.killerInstinct !== 0)\n            writer.tag(68, WireType.Varint).int32(message.killerInstinct);\n        /* bool counterattack = 69; */\n        if (message.counterattack !== false)\n            writer.tag(69, WireType.Varint).bool(message.counterattack);\n        /* int32 lightning_reflexes = 70; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(70, WireType.Varint).int32(message.lightningReflexes);\n        /* int32 resourcefulness = 71; */\n        if (message.resourcefulness !== 0)\n            writer.tag(71, WireType.Varint).int32(message.resourcefulness);\n        /* int32 expose_weakness = 72; */\n        if (message.exposeWeakness !== 0)\n            writer.tag(72, WireType.Varint).int32(message.exposeWeakness);\n        /* bool wyvern_sting = 73; */\n        if (message.wyvernSting !== false)\n            writer.tag(73, WireType.Varint).bool(message.wyvernSting);\n        /* int32 thrill_of_the_hunt = 74; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(74, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* int32 master_tactician = 75; */\n        if (message.masterTactician !== 0)\n            writer.tag(75, WireType.Varint).int32(message.masterTactician);\n        /* int32 noxious_stings = 76; */\n        if (message.noxiousStings !== 0)\n            writer.tag(76, WireType.Varint).int32(message.noxiousStings);\n        /* int32 point_of_no_escape = 77; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(77, WireType.Varint).int32(message.pointOfNoEscape);\n        /* bool black_arrow = 78; */\n        if (message.blackArrow !== false)\n            writer.tag(78, WireType.Varint).bool(message.blackArrow);\n        /* int32 sniper_training = 79; */\n        if (message.sniperTraining !== 0)\n            writer.tag(79, WireType.Varint).int32(message.sniperTraining);\n        /* int32 hunting_party = 80; */\n        if (message.huntingParty !== 0)\n            writer.tag(80, WireType.Varint).int32(message.huntingParty);\n        /* bool explosive_shot = 81; */\n        if (message.explosiveShot !== false)\n            writer.tag(81, WireType.Varint).bool(message.explosiveShot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"cobra_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"heart_of_the_pheonix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { cobraReflexes: 0, dive: false, greatStamina: 0, naturalArmor: 0, boarsSpeed: false, mobility: 0, owlsFocus: 0, spikedCollar: 0, cullingTheHerd: 0, lionhearted: 0, carrionFeeder: false, greatResistance: 0, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false, graceOfTheMantis: 0, wildHunt: 0, roarOfSacrifice: false, improvedCower: 0, bloodthirsty: 0, heartOfThePheonix: false, spidersBite: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, charge: false, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, lastStand: false, taunt: false, intervene: false, silverback: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 cobra_reflexes */ 1:\n                    message.cobraReflexes = reader.int32();\n                    break;\n                case /* bool dive */ 2:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* bool boars_speed */ 5:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 mobility */ 6:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 7:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 8:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 11:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 great_resistance */ 12:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* int32 cornered */ 13:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 14:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 15:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 16:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 17:\n                    message.bullheaded = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 18:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* bool roar_of_sacrifice */ 20:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* int32 improved_cower */ 21:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 22:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* bool heart_of_the_pheonix */ 23:\n                    message.heartOfThePheonix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 24:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* bool rabid */ 25:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 26:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 27:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 28:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* bool charge */ 29:\n                    message.charge = reader.bool();\n                    break;\n                case /* int32 blood_of_the_rhino */ 30:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 31:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 32:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 33:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* bool last_stand */ 34:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 35:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool intervene */ 36:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 37:\n                    message.silverback = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 cobra_reflexes = 1; */\n        if (message.cobraReflexes !== 0)\n            writer.tag(1, WireType.Varint).int32(message.cobraReflexes);\n        /* bool dive = 2; */\n        if (message.dive !== false)\n            writer.tag(2, WireType.Varint).bool(message.dive);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* bool boars_speed = 5; */\n        if (message.boarsSpeed !== false)\n            writer.tag(5, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 mobility = 6; */\n        if (message.mobility !== 0)\n            writer.tag(6, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 7; */\n        if (message.owlsFocus !== 0)\n            writer.tag(7, WireType.Varint).int32(message.owlsFocus);\n        /* int32 spiked_collar = 8; */\n        if (message.spikedCollar !== 0)\n            writer.tag(8, WireType.Varint).int32(message.spikedCollar);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool carrion_feeder = 11; */\n        if (message.carrionFeeder !== false)\n            writer.tag(11, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 great_resistance = 12; */\n        if (message.greatResistance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.greatResistance);\n        /* int32 cornered = 13; */\n        if (message.cornered !== 0)\n            writer.tag(13, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 14; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 15; */\n        if (message.wolverineBite !== false)\n            writer.tag(15, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 16; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(16, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 17; */\n        if (message.bullheaded !== false)\n            writer.tag(17, WireType.Varint).bool(message.bullheaded);\n        /* int32 grace_of_the_mantis = 18; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(18, WireType.Varint).int32(message.graceOfTheMantis);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* bool roar_of_sacrifice = 20; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(20, WireType.Varint).bool(message.roarOfSacrifice);\n        /* int32 improved_cower = 21; */\n        if (message.improvedCower !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 22; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(22, WireType.Varint).int32(message.bloodthirsty);\n        /* bool heart_of_the_pheonix = 23; */\n        if (message.heartOfThePheonix !== false)\n            writer.tag(23, WireType.Varint).bool(message.heartOfThePheonix);\n        /* int32 spiders_bite = 24; */\n        if (message.spidersBite !== 0)\n            writer.tag(24, WireType.Varint).int32(message.spidersBite);\n        /* bool rabid = 25; */\n        if (message.rabid !== false)\n            writer.tag(25, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 26; */\n        if (message.lickYourWounds !== false)\n            writer.tag(26, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 27; */\n        if (message.callOfTheWild !== false)\n            writer.tag(27, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 28; */\n        if (message.sharkAttack !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sharkAttack);\n        /* bool charge = 29; */\n        if (message.charge !== false)\n            writer.tag(29, WireType.Varint).bool(message.charge);\n        /* int32 blood_of_the_rhino = 30; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(30, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 31; */\n        if (message.petBarding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 32; */\n        if (message.guardDog !== 0)\n            writer.tag(32, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 33; */\n        if (message.thunderstomp !== false)\n            writer.tag(33, WireType.Varint).bool(message.thunderstomp);\n        /* bool last_stand = 34; */\n        if (message.lastStand !== false)\n            writer.tag(34, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 35; */\n        if (message.taunt !== false)\n            writer.tag(35, WireType.Varint).bool(message.taunt);\n        /* bool intervene = 36; */\n        if (message.intervene !== false)\n            writer.tag(36, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 37; */\n        if (message.silverback !== 0)\n            writer.tag(37, WireType.Varint).int32(message.silverback);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter$Type extends MessageType<Hunter> {\n    constructor() {\n        super(\"proto.Hunter\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => Hunter_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => HunterTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => Hunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter>): Hunter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter): Hunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation rotation */ 1:\n                    message.rotation = Hunter_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.HunterTalents talents */ 2:\n                    message.talents = HunterTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.Hunter.Options options */ 3:\n                    message.options = Hunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation rotation = 1; */\n        if (message.rotation)\n            Hunter_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HunterTalents talents = 2; */\n        if (message.talents)\n            HunterTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter.Options options = 3; */\n        if (message.options)\n            Hunter_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter\n */\nexport const Hunter = new Hunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Rotation$Type extends MessageType<Hunter_Rotation> {\n    constructor() {\n        super(\"proto.Hunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.RotationType\", Hunter_Rotation_RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.Hunter.Rotation.StingType\", Hunter_Rotation_StingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"custom_rotation\", kind: \"message\", T: () => CustomRotation },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Rotation>): Hunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, timeToTrapWeaveMs: 0, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Rotation): Hunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Rotation.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.Hunter.Rotation.StingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double time_to_trap_weave_ms */ 2:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* proto.CustomRotation custom_rotation */ 8:\n                    message.customRotation = CustomRotation.internalBinaryRead(reader, reader.uint32(), options, message.customRotation);\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Rotation.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.Hunter.Rotation.StingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double time_to_trap_weave_ms = 2; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(2, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* proto.CustomRotation custom_rotation = 8; */\n        if (message.customRotation)\n            CustomRotation.internalBinaryWrite(message.customRotation, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Rotation\n */\nexport const Hunter_Rotation = new Hunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Hunter_Options$Type extends MessageType<Hunter_Options> {\n    constructor() {\n        super(\"proto.Hunter.Options\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.Hunter.Options.Ammo\", Hunter_Options_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.Hunter.Options.PetType\", Hunter_Options_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Hunter_Options>): Hunter_Options {\n        const message = { ammo: 0, petType: 0, petUptime: 0, sniperTrainingUptime: 0, useHuntersMark: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Hunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hunter_Options): Hunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Hunter.Options.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.Hunter.Options.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double sniper_training_uptime */ 7:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 5:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Hunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Hunter.Options.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.Hunter.Options.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double sniper_training_uptime = 7; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(7, WireType.Bit64).double(message.sniperTrainingUptime);\n        /* bool use_hunters_mark = 5; */\n        if (message.useHuntersMark !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Hunter.Options\n */\nexport const Hunter_Options = new Hunter_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidTarget } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 starlight_wrath = 1;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 2;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 3;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 4;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 improved_moonfire = 5;\n     */\n    improvedMoonfire: number;\n    /**\n     * @generated from protobuf field: int32 brambles = 6;\n     */\n    brambles: number;\n    /**\n     * @generated from protobuf field: int32 natures_grace = 7;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: bool natures_splendor = 8;\n     */\n    naturesSplendor: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_reach = 9;\n     */\n    naturesReach: number;\n    /**\n     * @generated from protobuf field: int32 vengeance = 10;\n     */\n    vengeance: number;\n    /**\n     * @generated from protobuf field: int32 celestial_focus = 11;\n     */\n    celestialFocus: number;\n    /**\n     * @generated from protobuf field: int32 lunar_guidance = 12;\n     */\n    lunarGuidance: number;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 13;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_insect_swarm = 14;\n     */\n    improvedInsectSwarm: number;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 15;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: int32 moonfury = 16;\n     */\n    moonfury: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 17;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 18;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_moonkin_form = 19;\n     */\n    improvedMoonkinForm: number;\n    /**\n     * @generated from protobuf field: int32 improved_faerie_fire = 20;\n     */\n    improvedFaerieFire: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 21;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 wrath_of_cenarius = 22;\n     */\n    wrathOfCenarius: number;\n    /**\n     * @generated from protobuf field: int32 eclipse = 23;\n     */\n    eclipse: number;\n    /**\n     * @generated from protobuf field: bool typhoon = 24;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 25;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 26;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: int32 earth_and_moon = 27;\n     */\n    earthAndMoon: number;\n    /**\n     * @generated from protobuf field: bool starfall = 28;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 ferocity = 29;\n     */\n    ferocity: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 30;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 feral_instinct = 31;\n     */\n    feralInstinct: number;\n    /**\n     * @generated from protobuf field: int32 savage_fury = 32;\n     */\n    savageFury: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 33;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: int32 feral_swiftness = 34;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 35;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 sharpened_claws = 36;\n     */\n    sharpenedClaws: number;\n    /**\n     * @generated from protobuf field: int32 shredding_attacks = 37;\n     */\n    shreddingAttacks: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 38;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 39;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 primal_precision = 40;\n     */\n    primalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 41;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 42;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 43;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 44;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 45;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 survival_of_the_fittest = 46;\n     */\n    survivalOfTheFittest: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 47;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_leader_of_the_pack = 48;\n     */\n    improvedLeaderOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 primal_tenacity = 49;\n     */\n    primalTenacity: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_pack = 50;\n     */\n    protectorOfThePack: number;\n    /**\n     * @generated from protobuf field: int32 predatory_instincts = 51;\n     */\n    predatoryInstincts: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 52;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 53;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool mangle = 54;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mangle = 55;\n     */\n    improvedMangle: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 56;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool primal_gore = 57;\n     */\n    primalGore: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 58;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 improved_mark_of_the_wild = 59;\n     */\n    improvedMarkOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 natures_focus = 60;\n     */\n    naturesFocus: number;\n    /**\n     * @generated from protobuf field: int32 furor = 61;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 62;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 subtlety = 63;\n     */\n    subtlety: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 64;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 intensity = 65;\n     */\n    intensity: number;\n    /**\n     * @generated from protobuf field: bool omen_of_clarity = 66;\n     */\n    omenOfClarity: boolean;\n    /**\n     * @generated from protobuf field: int32 master_shapeshifter = 67;\n     */\n    masterShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 tranquil_spirit = 68;\n     */\n    tranquilSpirit: number;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 69;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 70;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 gift_of_nature = 71;\n     */\n    giftOfNature: number;\n    /**\n     * @generated from protobuf field: int32 improved_tranquility = 72;\n     */\n    improvedTranquility: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 73;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 74;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 living_spirit = 75;\n     */\n    livingSpirit: number;\n    /**\n     * @generated from protobuf field: bool swiftmend = 76;\n     */\n    swiftmend: boolean;\n    /**\n     * @generated from protobuf field: int32 natural_perfection = 77;\n     */\n    naturalPerfection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_rejuvenation = 78;\n     */\n    empoweredRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 79;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 80;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 81;\n     */\n    treeOfLife: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_tree_of_life = 82;\n     */\n    improvedTreeOfLife: number;\n    /**\n     * @generated from protobuf field: int32 improved_barkskin = 83;\n     */\n    improvedBarkskin: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 84;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 85;\n     */\n    wildGrowth: boolean;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation rotation = 1;\n     */\n    rotation?: BalanceDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.Type type = 1;\n     */\n    type: BalanceDruid_Rotation_Type;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.MfUsage mf_usage = 2;\n     */\n    mfUsage: BalanceDruid_Rotation_MfUsage;\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Rotation.IsUsage is_usage = 3;\n     */\n    isUsage: BalanceDruid_Rotation_IsUsage;\n    /**\n     * @generated from protobuf field: bool use_battle_res = 4;\n     */\n    useBattleRes: boolean;\n    /**\n     * @generated from protobuf field: bool use_wrath = 5;\n     */\n    useWrath: boolean;\n    /**\n     * @generated from protobuf field: bool use_starfire = 6;\n     */\n    useStarfire: boolean;\n    /**\n     * @generated from protobuf field: bool use_typhoon = 7;\n     */\n    useTyphoon: boolean;\n    /**\n     * @generated from protobuf field: bool use_hurricane = 8;\n     */\n    useHurricane: boolean;\n    /**\n     * @generated from protobuf field: bool use_smart_cooldowns = 9;\n     */\n    useSmartCooldowns: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 10;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 player_latency = 11;\n     */\n    playerLatency: number;\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.Type\n */\nexport enum BalanceDruid_Rotation_Type {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Adaptive = 1;\n     */\n    Adaptive = 1,\n    /**\n     * @generated from protobuf enum value: Manual = 2;\n     */\n    Manual = 2\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.MfUsage\n */\nexport enum BalanceDruid_Rotation_MfUsage {\n    /**\n     * @generated from protobuf enum value: NoMf = 0;\n     */\n    NoMf = 0,\n    /**\n     * @generated from protobuf enum value: BeforeLunar = 1;\n     */\n    BeforeLunar = 1,\n    /**\n     * @generated from protobuf enum value: MaximizeMf = 2;\n     */\n    MaximizeMf = 2\n}\n/**\n * @generated from protobuf enum proto.BalanceDruid.Rotation.IsUsage\n */\nexport enum BalanceDruid_Rotation_IsUsage {\n    /**\n     * @generated from protobuf enum value: NoIs = 0;\n     */\n    NoIs = 0,\n    /**\n     * @generated from protobuf enum value: BeforeSolar = 1;\n     */\n    BeforeSolar = 1,\n    /**\n     * @generated from protobuf enum value: MaximizeIs = 2;\n     */\n    MaximizeIs = 2\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1;\n     */\n    bearWeaveType: FeralDruid_Rotation_BearweaveType;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 2;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_rip = 3;\n     */\n    minCombosForRip: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 4;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 5;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: bool mangle_spam = 6;\n     */\n    mangleSpam: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 7;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_bite = 8;\n     */\n    minCombosForBite: number;\n    /**\n     * @generated from protobuf field: int32 berserk_bite_thresh = 9;\n     */\n    berserkBiteThresh: number;\n    /**\n     * @generated from protobuf field: bool powerbear = 10;\n     */\n    powerbear: boolean;\n    /**\n     * @generated from protobuf field: float max_roar_offset = 11;\n     */\n    maxRoarOffset: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12;\n     */\n    biteModeType: FeralDruid_Rotation_BiteModeType;\n    /**\n     * @generated from protobuf field: float hot_uptime = 13;\n     */\n    hotUptime: number;\n    /**\n     * @generated from protobuf field: bool snek_weave = 14;\n     */\n    snekWeave: boolean;\n    /**\n     * @generated from protobuf field: bool flower_weave = 15;\n     */\n    flowerWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 raid_targets = 16;\n     */\n    raidTargets: number;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BearweaveType\n */\nexport enum FeralDruid_Rotation_BearweaveType {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Mangle = 1;\n     */\n    Mangle = 1,\n    /**\n     * @generated from protobuf enum value: Lacerate = 2;\n     */\n    Lacerate = 2\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BiteModeType\n */\nexport enum FeralDruid_Rotation_BiteModeType {\n    /**\n     * @generated from protobuf enum value: Emperical = 0;\n     */\n    Emperical = 0,\n    /**\n     * @generated from protobuf enum value: Analytical = 1;\n     */\n    Analytical = 1\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: int32 latency_ms = 2;\n     */\n    latencyMs: number;\n    /**\n     * @generated from protobuf field: bool prepop_ooc = 3;\n     */\n    prepopOoc: boolean;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 4;\n     */\n    assumeBleedActive: boolean;\n    /**\n     * @generated from protobuf field: bool pre_pop_berserk = 5;\n     */\n    prePopBerserk: boolean;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralTankDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.DruidTalents talents = 2;\n     */\n    talents?: DruidTalents;\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: double lacerate_time = 3;\n     */\n    lacerateTime: number;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.RaidTarget innervate_target = 1;\n     */\n    innervateTarget?: RaidTarget;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfClaw = 48720;\n     */\n    GlyphOfClaw = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfGrowling = 40899;\n     */\n    GlyphOfGrowling = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfNourish = 45603;\n     */\n    GlyphOfNourish = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfRake = 40903;\n     */\n    GlyphOfRake = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidRejuvenation = 50125;\n     */\n    GlyphOfRapidRejuvenation = 50125,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfShred = 40901;\n     */\n    GlyphOfShred = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfSurvivalInstincts = 46372;\n     */\n    GlyphOfSurvivalInstincts = 46372,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheWild = 43335;\n     */\n    GlyphOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_moonfire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"brambles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"natures_splendor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"natures_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"vengeance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"celestial_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lunar_guidance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"improved_insect_swarm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"moonfury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"improved_moonkin_form\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"improved_faerie_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"wrath_of_cenarius\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eclipse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"earth_and_moon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"ferocity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"feral_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"savage_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"sharpened_claws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"shredding_attacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"primal_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"survival_of_the_fittest\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"improved_leader_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"primal_tenacity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"protector_of_the_pack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"predatory_instincts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"improved_mangle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"primal_gore\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"improved_mark_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"natures_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"subtlety\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 64, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 65, name: \"intensity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 66, name: \"omen_of_clarity\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 67, name: \"master_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 68, name: \"tranquil_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 69, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 70, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 71, name: \"gift_of_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 72, name: \"improved_tranquility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 73, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 74, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 75, name: \"living_spirit\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 76, name: \"swiftmend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 77, name: \"natural_perfection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 78, name: \"empowered_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 79, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 80, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 81, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 82, name: \"improved_tree_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 83, name: \"improved_barkskin\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 84, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 85, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { starlightWrath: 0, genesis: 0, moonglow: 0, naturesMajesty: 0, improvedMoonfire: 0, brambles: 0, naturesGrace: 0, naturesSplendor: false, naturesReach: 0, vengeance: 0, celestialFocus: 0, lunarGuidance: 0, insectSwarm: false, improvedInsectSwarm: 0, dreamstate: 0, moonfury: 0, balanceOfPower: 0, moonkinForm: false, improvedMoonkinForm: 0, improvedFaerieFire: 0, owlkinFrenzy: 0, wrathOfCenarius: 0, eclipse: 0, typhoon: false, forceOfNature: false, galeWinds: 0, earthAndMoon: 0, starfall: false, ferocity: 0, feralAggression: 0, feralInstinct: 0, savageFury: 0, thickHide: 0, feralSwiftness: 0, survivalInstincts: false, sharpenedClaws: 0, shreddingAttacks: 0, predatoryStrikes: 0, primalFury: 0, primalPrecision: 0, brutalImpact: 0, feralCharge: false, nurturingInstinct: 0, naturalReaction: 0, heartOfTheWild: 0, survivalOfTheFittest: 0, leaderOfThePack: false, improvedLeaderOfThePack: 0, primalTenacity: 0, protectorOfThePack: 0, predatoryInstincts: 0, infectedWounds: 0, kingOfTheJungle: 0, mangle: false, improvedMangle: 0, rendAndTear: 0, primalGore: false, berserk: false, improvedMarkOfTheWild: 0, naturesFocus: 0, furor: 0, naturalist: 0, subtlety: 0, naturalShapeshifter: 0, intensity: 0, omenOfClarity: false, masterShapeshifter: 0, tranquilSpirit: 0, improvedRejuvenation: 0, naturesSwiftness: false, giftOfNature: 0, improvedTranquility: 0, empoweredTouch: 0, naturesBounty: 0, livingSpirit: 0, swiftmend: false, naturalPerfection: 0, empoweredRejuvenation: 0, livingSeed: 0, revitalize: 0, treeOfLife: false, improvedTreeOfLife: 0, improvedBarkskin: 0, giftOfTheEarthmother: 0, wildGrowth: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 starlight_wrath */ 1:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 genesis */ 2:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 3:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 4:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 improved_moonfire */ 5:\n                    message.improvedMoonfire = reader.int32();\n                    break;\n                case /* int32 brambles */ 6:\n                    message.brambles = reader.int32();\n                    break;\n                case /* int32 natures_grace */ 7:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* bool natures_splendor */ 8:\n                    message.naturesSplendor = reader.bool();\n                    break;\n                case /* int32 natures_reach */ 9:\n                    message.naturesReach = reader.int32();\n                    break;\n                case /* int32 vengeance */ 10:\n                    message.vengeance = reader.int32();\n                    break;\n                case /* int32 celestial_focus */ 11:\n                    message.celestialFocus = reader.int32();\n                    break;\n                case /* int32 lunar_guidance */ 12:\n                    message.lunarGuidance = reader.int32();\n                    break;\n                case /* bool insect_swarm */ 13:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* int32 improved_insect_swarm */ 14:\n                    message.improvedInsectSwarm = reader.int32();\n                    break;\n                case /* int32 dreamstate */ 15:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* int32 moonfury */ 16:\n                    message.moonfury = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 17:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 18:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* int32 improved_moonkin_form */ 19:\n                    message.improvedMoonkinForm = reader.int32();\n                    break;\n                case /* int32 improved_faerie_fire */ 20:\n                    message.improvedFaerieFire = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 21:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 wrath_of_cenarius */ 22:\n                    message.wrathOfCenarius = reader.int32();\n                    break;\n                case /* int32 eclipse */ 23:\n                    message.eclipse = reader.int32();\n                    break;\n                case /* bool typhoon */ 24:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* bool force_of_nature */ 25:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* int32 gale_winds */ 26:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* int32 earth_and_moon */ 27:\n                    message.earthAndMoon = reader.int32();\n                    break;\n                case /* bool starfall */ 28:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 ferocity */ 29:\n                    message.ferocity = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 30:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 feral_instinct */ 31:\n                    message.feralInstinct = reader.int32();\n                    break;\n                case /* int32 savage_fury */ 32:\n                    message.savageFury = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 33:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* int32 feral_swiftness */ 34:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 35:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 sharpened_claws */ 36:\n                    message.sharpenedClaws = reader.int32();\n                    break;\n                case /* int32 shredding_attacks */ 37:\n                    message.shreddingAttacks = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 38:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 39:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 primal_precision */ 40:\n                    message.primalPrecision = reader.int32();\n                    break;\n                case /* int32 brutal_impact */ 41:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* bool feral_charge */ 42:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 nurturing_instinct */ 43:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 44:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 45:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 survival_of_the_fittest */ 46:\n                    message.survivalOfTheFittest = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 47:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 improved_leader_of_the_pack */ 48:\n                    message.improvedLeaderOfThePack = reader.int32();\n                    break;\n                case /* int32 primal_tenacity */ 49:\n                    message.primalTenacity = reader.int32();\n                    break;\n                case /* int32 protector_of_the_pack */ 50:\n                    message.protectorOfThePack = reader.int32();\n                    break;\n                case /* int32 predatory_instincts */ 51:\n                    message.predatoryInstincts = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 52:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 53:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool mangle */ 54:\n                    message.mangle = reader.bool();\n                    break;\n                case /* int32 improved_mangle */ 55:\n                    message.improvedMangle = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 56:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool primal_gore */ 57:\n                    message.primalGore = reader.bool();\n                    break;\n                case /* bool berserk */ 58:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 improved_mark_of_the_wild */ 59:\n                    message.improvedMarkOfTheWild = reader.int32();\n                    break;\n                case /* int32 natures_focus */ 60:\n                    message.naturesFocus = reader.int32();\n                    break;\n                case /* int32 furor */ 61:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 naturalist */ 62:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 subtlety */ 63:\n                    message.subtlety = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 64:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 intensity */ 65:\n                    message.intensity = reader.int32();\n                    break;\n                case /* bool omen_of_clarity */ 66:\n                    message.omenOfClarity = reader.bool();\n                    break;\n                case /* int32 master_shapeshifter */ 67:\n                    message.masterShapeshifter = reader.int32();\n                    break;\n                case /* int32 tranquil_spirit */ 68:\n                    message.tranquilSpirit = reader.int32();\n                    break;\n                case /* int32 improved_rejuvenation */ 69:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 70:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 gift_of_nature */ 71:\n                    message.giftOfNature = reader.int32();\n                    break;\n                case /* int32 improved_tranquility */ 72:\n                    message.improvedTranquility = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 73:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 74:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 living_spirit */ 75:\n                    message.livingSpirit = reader.int32();\n                    break;\n                case /* bool swiftmend */ 76:\n                    message.swiftmend = reader.bool();\n                    break;\n                case /* int32 natural_perfection */ 77:\n                    message.naturalPerfection = reader.int32();\n                    break;\n                case /* int32 empowered_rejuvenation */ 78:\n                    message.empoweredRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 79:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 80:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool tree_of_life */ 81:\n                    message.treeOfLife = reader.bool();\n                    break;\n                case /* int32 improved_tree_of_life */ 82:\n                    message.improvedTreeOfLife = reader.int32();\n                    break;\n                case /* int32 improved_barkskin */ 83:\n                    message.improvedBarkskin = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 84:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool wild_growth */ 85:\n                    message.wildGrowth = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 starlight_wrath = 1; */\n        if (message.starlightWrath !== 0)\n            writer.tag(1, WireType.Varint).int32(message.starlightWrath);\n        /* int32 genesis = 2; */\n        if (message.genesis !== 0)\n            writer.tag(2, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 3; */\n        if (message.moonglow !== 0)\n            writer.tag(3, WireType.Varint).int32(message.moonglow);\n        /* int32 natures_majesty = 4; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 improved_moonfire = 5; */\n        if (message.improvedMoonfire !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedMoonfire);\n        /* int32 brambles = 6; */\n        if (message.brambles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.brambles);\n        /* int32 natures_grace = 7; */\n        if (message.naturesGrace !== 0)\n            writer.tag(7, WireType.Varint).int32(message.naturesGrace);\n        /* bool natures_splendor = 8; */\n        if (message.naturesSplendor !== false)\n            writer.tag(8, WireType.Varint).bool(message.naturesSplendor);\n        /* int32 natures_reach = 9; */\n        if (message.naturesReach !== 0)\n            writer.tag(9, WireType.Varint).int32(message.naturesReach);\n        /* int32 vengeance = 10; */\n        if (message.vengeance !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vengeance);\n        /* int32 celestial_focus = 11; */\n        if (message.celestialFocus !== 0)\n            writer.tag(11, WireType.Varint).int32(message.celestialFocus);\n        /* int32 lunar_guidance = 12; */\n        if (message.lunarGuidance !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lunarGuidance);\n        /* bool insect_swarm = 13; */\n        if (message.insectSwarm !== false)\n            writer.tag(13, WireType.Varint).bool(message.insectSwarm);\n        /* int32 improved_insect_swarm = 14; */\n        if (message.improvedInsectSwarm !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedInsectSwarm);\n        /* int32 dreamstate = 15; */\n        if (message.dreamstate !== 0)\n            writer.tag(15, WireType.Varint).int32(message.dreamstate);\n        /* int32 moonfury = 16; */\n        if (message.moonfury !== 0)\n            writer.tag(16, WireType.Varint).int32(message.moonfury);\n        /* int32 balance_of_power = 17; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(17, WireType.Varint).int32(message.balanceOfPower);\n        /* bool moonkin_form = 18; */\n        if (message.moonkinForm !== false)\n            writer.tag(18, WireType.Varint).bool(message.moonkinForm);\n        /* int32 improved_moonkin_form = 19; */\n        if (message.improvedMoonkinForm !== 0)\n            writer.tag(19, WireType.Varint).int32(message.improvedMoonkinForm);\n        /* int32 improved_faerie_fire = 20; */\n        if (message.improvedFaerieFire !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedFaerieFire);\n        /* int32 owlkin_frenzy = 21; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 wrath_of_cenarius = 22; */\n        if (message.wrathOfCenarius !== 0)\n            writer.tag(22, WireType.Varint).int32(message.wrathOfCenarius);\n        /* int32 eclipse = 23; */\n        if (message.eclipse !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eclipse);\n        /* bool typhoon = 24; */\n        if (message.typhoon !== false)\n            writer.tag(24, WireType.Varint).bool(message.typhoon);\n        /* bool force_of_nature = 25; */\n        if (message.forceOfNature !== false)\n            writer.tag(25, WireType.Varint).bool(message.forceOfNature);\n        /* int32 gale_winds = 26; */\n        if (message.galeWinds !== 0)\n            writer.tag(26, WireType.Varint).int32(message.galeWinds);\n        /* int32 earth_and_moon = 27; */\n        if (message.earthAndMoon !== 0)\n            writer.tag(27, WireType.Varint).int32(message.earthAndMoon);\n        /* bool starfall = 28; */\n        if (message.starfall !== false)\n            writer.tag(28, WireType.Varint).bool(message.starfall);\n        /* int32 ferocity = 29; */\n        if (message.ferocity !== 0)\n            writer.tag(29, WireType.Varint).int32(message.ferocity);\n        /* int32 feral_aggression = 30; */\n        if (message.feralAggression !== 0)\n            writer.tag(30, WireType.Varint).int32(message.feralAggression);\n        /* int32 feral_instinct = 31; */\n        if (message.feralInstinct !== 0)\n            writer.tag(31, WireType.Varint).int32(message.feralInstinct);\n        /* int32 savage_fury = 32; */\n        if (message.savageFury !== 0)\n            writer.tag(32, WireType.Varint).int32(message.savageFury);\n        /* int32 thick_hide = 33; */\n        if (message.thickHide !== 0)\n            writer.tag(33, WireType.Varint).int32(message.thickHide);\n        /* int32 feral_swiftness = 34; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(34, WireType.Varint).int32(message.feralSwiftness);\n        /* bool survival_instincts = 35; */\n        if (message.survivalInstincts !== false)\n            writer.tag(35, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 sharpened_claws = 36; */\n        if (message.sharpenedClaws !== 0)\n            writer.tag(36, WireType.Varint).int32(message.sharpenedClaws);\n        /* int32 shredding_attacks = 37; */\n        if (message.shreddingAttacks !== 0)\n            writer.tag(37, WireType.Varint).int32(message.shreddingAttacks);\n        /* int32 predatory_strikes = 38; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(38, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 primal_fury = 39; */\n        if (message.primalFury !== 0)\n            writer.tag(39, WireType.Varint).int32(message.primalFury);\n        /* int32 primal_precision = 40; */\n        if (message.primalPrecision !== 0)\n            writer.tag(40, WireType.Varint).int32(message.primalPrecision);\n        /* int32 brutal_impact = 41; */\n        if (message.brutalImpact !== 0)\n            writer.tag(41, WireType.Varint).int32(message.brutalImpact);\n        /* bool feral_charge = 42; */\n        if (message.feralCharge !== false)\n            writer.tag(42, WireType.Varint).bool(message.feralCharge);\n        /* int32 nurturing_instinct = 43; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(43, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 natural_reaction = 44; */\n        if (message.naturalReaction !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalReaction);\n        /* int32 heart_of_the_wild = 45; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(45, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 survival_of_the_fittest = 46; */\n        if (message.survivalOfTheFittest !== 0)\n            writer.tag(46, WireType.Varint).int32(message.survivalOfTheFittest);\n        /* bool leader_of_the_pack = 47; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(47, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 improved_leader_of_the_pack = 48; */\n        if (message.improvedLeaderOfThePack !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedLeaderOfThePack);\n        /* int32 primal_tenacity = 49; */\n        if (message.primalTenacity !== 0)\n            writer.tag(49, WireType.Varint).int32(message.primalTenacity);\n        /* int32 protector_of_the_pack = 50; */\n        if (message.protectorOfThePack !== 0)\n            writer.tag(50, WireType.Varint).int32(message.protectorOfThePack);\n        /* int32 predatory_instincts = 51; */\n        if (message.predatoryInstincts !== 0)\n            writer.tag(51, WireType.Varint).int32(message.predatoryInstincts);\n        /* int32 infected_wounds = 52; */\n        if (message.infectedWounds !== 0)\n            writer.tag(52, WireType.Varint).int32(message.infectedWounds);\n        /* int32 king_of_the_jungle = 53; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(53, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool mangle = 54; */\n        if (message.mangle !== false)\n            writer.tag(54, WireType.Varint).bool(message.mangle);\n        /* int32 improved_mangle = 55; */\n        if (message.improvedMangle !== 0)\n            writer.tag(55, WireType.Varint).int32(message.improvedMangle);\n        /* int32 rend_and_tear = 56; */\n        if (message.rendAndTear !== 0)\n            writer.tag(56, WireType.Varint).int32(message.rendAndTear);\n        /* bool primal_gore = 57; */\n        if (message.primalGore !== false)\n            writer.tag(57, WireType.Varint).bool(message.primalGore);\n        /* bool berserk = 58; */\n        if (message.berserk !== false)\n            writer.tag(58, WireType.Varint).bool(message.berserk);\n        /* int32 improved_mark_of_the_wild = 59; */\n        if (message.improvedMarkOfTheWild !== 0)\n            writer.tag(59, WireType.Varint).int32(message.improvedMarkOfTheWild);\n        /* int32 natures_focus = 60; */\n        if (message.naturesFocus !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesFocus);\n        /* int32 furor = 61; */\n        if (message.furor !== 0)\n            writer.tag(61, WireType.Varint).int32(message.furor);\n        /* int32 naturalist = 62; */\n        if (message.naturalist !== 0)\n            writer.tag(62, WireType.Varint).int32(message.naturalist);\n        /* int32 subtlety = 63; */\n        if (message.subtlety !== 0)\n            writer.tag(63, WireType.Varint).int32(message.subtlety);\n        /* int32 natural_shapeshifter = 64; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(64, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 intensity = 65; */\n        if (message.intensity !== 0)\n            writer.tag(65, WireType.Varint).int32(message.intensity);\n        /* bool omen_of_clarity = 66; */\n        if (message.omenOfClarity !== false)\n            writer.tag(66, WireType.Varint).bool(message.omenOfClarity);\n        /* int32 master_shapeshifter = 67; */\n        if (message.masterShapeshifter !== 0)\n            writer.tag(67, WireType.Varint).int32(message.masterShapeshifter);\n        /* int32 tranquil_spirit = 68; */\n        if (message.tranquilSpirit !== 0)\n            writer.tag(68, WireType.Varint).int32(message.tranquilSpirit);\n        /* int32 improved_rejuvenation = 69; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(69, WireType.Varint).int32(message.improvedRejuvenation);\n        /* bool natures_swiftness = 70; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(70, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 gift_of_nature = 71; */\n        if (message.giftOfNature !== 0)\n            writer.tag(71, WireType.Varint).int32(message.giftOfNature);\n        /* int32 improved_tranquility = 72; */\n        if (message.improvedTranquility !== 0)\n            writer.tag(72, WireType.Varint).int32(message.improvedTranquility);\n        /* int32 empowered_touch = 73; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(73, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 natures_bounty = 74; */\n        if (message.naturesBounty !== 0)\n            writer.tag(74, WireType.Varint).int32(message.naturesBounty);\n        /* int32 living_spirit = 75; */\n        if (message.livingSpirit !== 0)\n            writer.tag(75, WireType.Varint).int32(message.livingSpirit);\n        /* bool swiftmend = 76; */\n        if (message.swiftmend !== false)\n            writer.tag(76, WireType.Varint).bool(message.swiftmend);\n        /* int32 natural_perfection = 77; */\n        if (message.naturalPerfection !== 0)\n            writer.tag(77, WireType.Varint).int32(message.naturalPerfection);\n        /* int32 empowered_rejuvenation = 78; */\n        if (message.empoweredRejuvenation !== 0)\n            writer.tag(78, WireType.Varint).int32(message.empoweredRejuvenation);\n        /* int32 living_seed = 79; */\n        if (message.livingSeed !== 0)\n            writer.tag(79, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 80; */\n        if (message.revitalize !== 0)\n            writer.tag(80, WireType.Varint).int32(message.revitalize);\n        /* bool tree_of_life = 81; */\n        if (message.treeOfLife !== false)\n            writer.tag(81, WireType.Varint).bool(message.treeOfLife);\n        /* int32 improved_tree_of_life = 82; */\n        if (message.improvedTreeOfLife !== 0)\n            writer.tag(82, WireType.Varint).int32(message.improvedTreeOfLife);\n        /* int32 improved_barkskin = 83; */\n        if (message.improvedBarkskin !== 0)\n            writer.tag(83, WireType.Varint).int32(message.improvedBarkskin);\n        /* int32 gift_of_the_earthmother = 84; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(84, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool wild_growth = 85; */\n        if (message.wildGrowth !== false)\n            writer.tag(85, WireType.Varint).bool(message.wildGrowth);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BalanceDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation rotation */ 1:\n                    message.rotation = BalanceDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            BalanceDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", [\n            { no: 1, name: \"type\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.Type\", BalanceDruid_Rotation_Type] },\n            { no: 2, name: \"mf_usage\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.MfUsage\", BalanceDruid_Rotation_MfUsage] },\n            { no: 3, name: \"is_usage\", kind: \"enum\", T: () => [\"proto.BalanceDruid.Rotation.IsUsage\", BalanceDruid_Rotation_IsUsage] },\n            { no: 4, name: \"use_battle_res\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"use_starfire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"use_typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"use_hurricane\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"use_smart_cooldowns\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"player_latency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = { type: 0, mfUsage: 0, isUsage: 0, useBattleRes: false, useWrath: false, useStarfire: false, useTyphoon: false, useHurricane: false, useSmartCooldowns: false, maintainFaerieFire: false, playerLatency: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Rotation.Type type */ 1:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.BalanceDruid.Rotation.MfUsage mf_usage */ 2:\n                    message.mfUsage = reader.int32();\n                    break;\n                case /* proto.BalanceDruid.Rotation.IsUsage is_usage */ 3:\n                    message.isUsage = reader.int32();\n                    break;\n                case /* bool use_battle_res */ 4:\n                    message.useBattleRes = reader.bool();\n                    break;\n                case /* bool use_wrath */ 5:\n                    message.useWrath = reader.bool();\n                    break;\n                case /* bool use_starfire */ 6:\n                    message.useStarfire = reader.bool();\n                    break;\n                case /* bool use_typhoon */ 7:\n                    message.useTyphoon = reader.bool();\n                    break;\n                case /* bool use_hurricane */ 8:\n                    message.useHurricane = reader.bool();\n                    break;\n                case /* bool use_smart_cooldowns */ 9:\n                    message.useSmartCooldowns = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 10:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 player_latency */ 11:\n                    message.playerLatency = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Rotation.Type type = 1; */\n        if (message.type !== 0)\n            writer.tag(1, WireType.Varint).int32(message.type);\n        /* proto.BalanceDruid.Rotation.MfUsage mf_usage = 2; */\n        if (message.mfUsage !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mfUsage);\n        /* proto.BalanceDruid.Rotation.IsUsage is_usage = 3; */\n        if (message.isUsage !== 0)\n            writer.tag(3, WireType.Varint).int32(message.isUsage);\n        /* bool use_battle_res = 4; */\n        if (message.useBattleRes !== false)\n            writer.tag(4, WireType.Varint).bool(message.useBattleRes);\n        /* bool use_wrath = 5; */\n        if (message.useWrath !== false)\n            writer.tag(5, WireType.Varint).bool(message.useWrath);\n        /* bool use_starfire = 6; */\n        if (message.useStarfire !== false)\n            writer.tag(6, WireType.Varint).bool(message.useStarfire);\n        /* bool use_typhoon = 7; */\n        if (message.useTyphoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.useTyphoon);\n        /* bool use_hurricane = 8; */\n        if (message.useHurricane !== false)\n            writer.tag(8, WireType.Varint).bool(message.useHurricane);\n        /* bool use_smart_cooldowns = 9; */\n        if (message.useSmartCooldowns !== false)\n            writer.tag(9, WireType.Varint).bool(message.useSmartCooldowns);\n        /* bool maintain_faerie_fire = 10; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(10, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 player_latency = 11; */\n        if (message.playerLatency !== 0)\n            writer.tag(11, WireType.Varint).int32(message.playerLatency);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"bear_weave_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BearweaveType\", FeralDruid_Rotation_BearweaveType] },\n            { no: 2, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"min_combos_for_rip\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mangle_spam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 8, name: \"min_combos_for_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"berserk_bite_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"powerbear\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"max_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 12, name: \"bite_mode_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BiteModeType\", FeralDruid_Rotation_BiteModeType] },\n            { no: 13, name: \"hot_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 14, name: \"snek_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"flower_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"raid_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { bearWeaveType: 0, maintainFaerieFire: false, minCombosForRip: 0, useRake: false, useBite: false, mangleSpam: false, biteTime: 0, minCombosForBite: 0, berserkBiteThresh: 0, powerbear: false, maxRoarOffset: 0, biteModeType: 0, hotUptime: 0, snekWeave: false, flowerWeave: false, raidTargets: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type */ 1:\n                    message.bearWeaveType = reader.int32();\n                    break;\n                case /* bool maintain_faerie_fire */ 2:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 min_combos_for_rip */ 3:\n                    message.minCombosForRip = reader.int32();\n                    break;\n                case /* bool use_rake */ 4:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 5:\n                    message.useBite = reader.bool();\n                    break;\n                case /* bool mangle_spam */ 6:\n                    message.mangleSpam = reader.bool();\n                    break;\n                case /* float bite_time */ 7:\n                    message.biteTime = reader.float();\n                    break;\n                case /* int32 min_combos_for_bite */ 8:\n                    message.minCombosForBite = reader.int32();\n                    break;\n                case /* int32 berserk_bite_thresh */ 9:\n                    message.berserkBiteThresh = reader.int32();\n                    break;\n                case /* bool powerbear */ 10:\n                    message.powerbear = reader.bool();\n                    break;\n                case /* float max_roar_offset */ 11:\n                    message.maxRoarOffset = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type */ 12:\n                    message.biteModeType = reader.int32();\n                    break;\n                case /* float hot_uptime */ 13:\n                    message.hotUptime = reader.float();\n                    break;\n                case /* bool snek_weave */ 14:\n                    message.snekWeave = reader.bool();\n                    break;\n                case /* bool flower_weave */ 15:\n                    message.flowerWeave = reader.bool();\n                    break;\n                case /* int32 raid_targets */ 16:\n                    message.raidTargets = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1; */\n        if (message.bearWeaveType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.bearWeaveType);\n        /* bool maintain_faerie_fire = 2; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 min_combos_for_rip = 3; */\n        if (message.minCombosForRip !== 0)\n            writer.tag(3, WireType.Varint).int32(message.minCombosForRip);\n        /* bool use_rake = 4; */\n        if (message.useRake !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 5; */\n        if (message.useBite !== false)\n            writer.tag(5, WireType.Varint).bool(message.useBite);\n        /* bool mangle_spam = 6; */\n        if (message.mangleSpam !== false)\n            writer.tag(6, WireType.Varint).bool(message.mangleSpam);\n        /* float bite_time = 7; */\n        if (message.biteTime !== 0)\n            writer.tag(7, WireType.Bit32).float(message.biteTime);\n        /* int32 min_combos_for_bite = 8; */\n        if (message.minCombosForBite !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minCombosForBite);\n        /* int32 berserk_bite_thresh = 9; */\n        if (message.berserkBiteThresh !== 0)\n            writer.tag(9, WireType.Varint).int32(message.berserkBiteThresh);\n        /* bool powerbear = 10; */\n        if (message.powerbear !== false)\n            writer.tag(10, WireType.Varint).bool(message.powerbear);\n        /* float max_roar_offset = 11; */\n        if (message.maxRoarOffset !== 0)\n            writer.tag(11, WireType.Bit32).float(message.maxRoarOffset);\n        /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12; */\n        if (message.biteModeType !== 0)\n            writer.tag(12, WireType.Varint).int32(message.biteModeType);\n        /* float hot_uptime = 13; */\n        if (message.hotUptime !== 0)\n            writer.tag(13, WireType.Bit32).float(message.hotUptime);\n        /* bool snek_weave = 14; */\n        if (message.snekWeave !== false)\n            writer.tag(14, WireType.Varint).bool(message.snekWeave);\n        /* bool flower_weave = 15; */\n        if (message.flowerWeave !== false)\n            writer.tag(15, WireType.Varint).bool(message.flowerWeave);\n        /* int32 raid_targets = 16; */\n        if (message.raidTargets !== 0)\n            writer.tag(16, WireType.Varint).int32(message.raidTargets);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"latency_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"prepop_ooc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"pre_pop_berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { latencyMs: 0, prepopOoc: false, assumeBleedActive: false, prePopBerserk: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* int32 latency_ms */ 2:\n                    message.latencyMs = reader.int32();\n                    break;\n                case /* bool prepop_ooc */ 3:\n                    message.prepopOoc = reader.bool();\n                    break;\n                case /* bool assume_bleed_active */ 4:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                case /* bool pre_pop_berserk */ 5:\n                    message.prePopBerserk = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 latency_ms = 2; */\n        if (message.latencyMs !== 0)\n            writer.tag(2, WireType.Varint).int32(message.latencyMs);\n        /* bool prepop_ooc = 3; */\n        if (message.prepopOoc !== false)\n            writer.tag(3, WireType.Varint).bool(message.prepopOoc);\n        /* bool assume_bleed_active = 4; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(4, WireType.Varint).bool(message.assumeBleedActive);\n        /* bool pre_pop_berserk = 5; */\n        if (message.prePopBerserk !== false)\n            writer.tag(5, WireType.Varint).bool(message.prePopBerserk);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralTankDruid_Rotation },\n            { no: 2, name: \"talents\", kind: \"message\", T: () => DruidTalents },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Rotation rotation */ 1:\n                    message.rotation = FeralTankDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.DruidTalents talents */ 2:\n                    message.talents = DruidTalents.internalBinaryRead(reader, reader.uint32(), options, message.talents);\n                    break;\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralTankDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DruidTalents talents = 2; */\n        if (message.talents)\n            DruidTalents.internalBinaryWrite(message.talents, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"lacerate_time\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, lacerateTime: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* double lacerate_time */ 3:\n                    message.lacerateTime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* double lacerate_time = 3; */\n        if (message.lacerateTime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.lacerateTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => RaidTarget },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidTarget innervate_target */ 1:\n                    message.innervateTarget = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidTarget innervate_target = 1; */\n        if (message.innervateTarget)\n            RaidTarget.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n","// @generated by protobuf-ts 2.0.4 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { PseudoStat } from \"./common\";\nimport { Stat } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { SimDatabase } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { TankDeathknight } from \"./deathknight\";\nimport { Deathknight } from \"./deathknight\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { Warrior } from \"./warrior\";\nimport { Warlock } from \"./warlock\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { Rogue } from \"./rogue\";\nimport { SmitePriest } from \"./priest\";\nimport { ShadowPriest } from \"./priest\";\nimport { HealingPriest } from \"./priest\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { Mage } from \"./mage\";\nimport { Hunter } from \"./hunter\";\nimport { FeralTankDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { IndividualBuffs } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 16;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats = 36;\n     */\n    bonusStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 15;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 6;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 22;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"feralTankDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralTankDruid feral_tank_druid = 26;\n         */\n        feralTankDruid: FeralTankDruid;\n    } | {\n        oneofKind: \"hunter\";\n        /**\n         * @generated from protobuf field: proto.Hunter hunter = 7;\n         */\n        hunter: Hunter;\n    } | {\n        oneofKind: \"mage\";\n        /**\n         * @generated from protobuf field: proto.Mage mage = 8;\n         */\n        mage: Mage;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 9;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 25;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"healingPriest\";\n        /**\n         * @generated from protobuf field: proto.HealingPriest healing_priest = 34;\n         */\n        healingPriest: HealingPriest;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 10;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"smitePriest\";\n        /**\n         * @generated from protobuf field: proto.SmitePriest smite_priest = 20;\n         */\n        smitePriest: SmitePriest;\n    } | {\n        oneofKind: \"rogue\";\n        /**\n         * @generated from protobuf field: proto.Rogue rogue = 11;\n         */\n        rogue: Rogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 12;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 18;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"warlock\";\n        /**\n         * @generated from protobuf field: proto.Warlock warlock = 13;\n         */\n        warlock: Warlock;\n    } | {\n        oneofKind: \"warrior\";\n        /**\n         * @generated from protobuf field: proto.Warrior warrior = 14;\n         */\n        warrior: Warrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 21;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: \"deathknight\";\n        /**\n         * @generated from protobuf field: proto.Deathknight deathknight = 31;\n         */\n        deathknight: Deathknight;\n    } | {\n        oneofKind: \"tankDeathknight\";\n        /**\n         * @generated from protobuf field: proto.TankDeathknight tank_deathknight = 32;\n         */\n        tankDeathknight: TankDeathknight;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * @generated from protobuf field: string talentsString = 17;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 28;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 29;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 30;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 19;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 23;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 33;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 27;\n     */\n    healingModel?: HealingModel;\n    /**\n     * Items/enchants/gems/etc to include in the database.\n     *\n     * @generated from protobuf field: proto.SimDatabase database = 35;\n     */\n    database?: SimDatabase;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 2;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 4;\n     */\n    tanks: RaidTarget[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n    /**\n     * Extra fake players to add. Currently only used by healing sims.\n     *\n     * @generated from protobuf field: int32 target_dummies = 6;\n     */\n    targetDummies: number;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool save_all_values = 7;\n     */\n    saveAllValues: boolean; // Only used internally.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to this target by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to this target by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n    /**\n     * Total healing done to this target by this action.\n     *\n     * @generated from protobuf field: double healing = 11;\n     */\n    healing: number;\n    /**\n     * Total shielding done to this target by this action.\n     *\n     * @generated from protobuf field: double shielding = 13;\n     */\n    shielding: number;\n    /**\n     * Total time spent casting this action, in milliseconds, either from hard casts, GCD, or channeling.\n     *\n     * @generated from protobuf field: double cast_time_ms = 14;\n     */\n    castTimeMs: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 maxSeed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 minSeed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n    /**\n     * @generated from protobuf field: repeated double all_values = 8;\n     */\n    allValues: number[];\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dpasp = 16;\n     */\n    dpasp?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 14;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tto = 15;\n     */\n    tto?: DistributionMetrics; // Time To OOM, in seconds.\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: proto.UnitStats base_stats = 6;\n     */\n    baseStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats gear_stats = 1;\n     */\n    gearStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats talents_stats = 7;\n     */\n    talentsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats buffs_stats = 8;\n     */\n    buffsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats consumes_stats = 9;\n     */\n    consumesStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats final_stats = 2;\n     */\n    finalStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: repeated proto.ActionID cooldowns = 5;\n     */\n    cooldowns: ActionID[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 8;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.PseudoStat pseudo_stats_to_weigh = 10;\n     */\n    pseudoStatsToWeigh: PseudoStat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues hps = 4;\n     */\n    hps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: proto.UnitStats weights = 1;\n     */\n    weights?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats weights_stdev = 2;\n     */\n    weightsStdev?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values = 3;\n     */\n    epValues?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values_stdev = 4;\n     */\n    epValuesStdev?: UnitStats;\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * @generated from protobuf field: double hps = 9;\n     */\n    hps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 16, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 36, name: \"bonus_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 15, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 6, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 22, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 26, name: \"feral_tank_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralTankDruid },\n            { no: 7, name: \"hunter\", kind: \"message\", oneof: \"spec\", T: () => Hunter },\n            { no: 8, name: \"mage\", kind: \"message\", oneof: \"spec\", T: () => Mage },\n            { no: 9, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 25, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 34, name: \"healing_priest\", kind: \"message\", oneof: \"spec\", T: () => HealingPriest },\n            { no: 10, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 20, name: \"smite_priest\", kind: \"message\", oneof: \"spec\", T: () => SmitePriest },\n            { no: 11, name: \"rogue\", kind: \"message\", oneof: \"spec\", T: () => Rogue },\n            { no: 12, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 18, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 13, name: \"warlock\", kind: \"message\", oneof: \"spec\", T: () => Warlock },\n            { no: 14, name: \"warrior\", kind: \"message\", oneof: \"spec\", T: () => Warrior },\n            { no: 21, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 31, name: \"deathknight\", kind: \"message\", oneof: \"spec\", T: () => Deathknight },\n            { no: 32, name: \"tank_deathknight\", kind: \"message\", oneof: \"spec\", T: () => TankDeathknight },\n            { no: 17, name: \"talentsString\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 28, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 29, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 30, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 19, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 23, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 27, name: \"healing_model\", kind: \"message\", T: () => HealingModel },\n            { no: 35, name: \"database\", kind: \"message\", T: () => SimDatabase }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, class: 0, spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 16:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.UnitStats bonus_stats */ 36:\n                    message.bonusStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStats);\n                    break;\n                case /* proto.IndividualBuffs buffs */ 15:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 6:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 22:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.FeralTankDruid feral_tank_druid */ 26:\n                    message.spec = {\n                        oneofKind: \"feralTankDruid\",\n                        feralTankDruid: FeralTankDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralTankDruid)\n                    };\n                    break;\n                case /* proto.Hunter hunter */ 7:\n                    message.spec = {\n                        oneofKind: \"hunter\",\n                        hunter: Hunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).hunter)\n                    };\n                    break;\n                case /* proto.Mage mage */ 8:\n                    message.spec = {\n                        oneofKind: \"mage\",\n                        mage: Mage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).mage)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 9:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 25:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.HealingPriest healing_priest */ 34:\n                    message.spec = {\n                        oneofKind: \"healingPriest\",\n                        healingPriest: HealingPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).healingPriest)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 10:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.SmitePriest smite_priest */ 20:\n                    message.spec = {\n                        oneofKind: \"smitePriest\",\n                        smitePriest: SmitePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).smitePriest)\n                    };\n                    break;\n                case /* proto.Rogue rogue */ 11:\n                    message.spec = {\n                        oneofKind: \"rogue\",\n                        rogue: Rogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).rogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 12:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 18:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.Warlock warlock */ 13:\n                    message.spec = {\n                        oneofKind: \"warlock\",\n                        warlock: Warlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warlock)\n                    };\n                    break;\n                case /* proto.Warrior warrior */ 14:\n                    message.spec = {\n                        oneofKind: \"warrior\",\n                        warrior: Warrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).warrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 21:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* proto.Deathknight deathknight */ 31:\n                    message.spec = {\n                        oneofKind: \"deathknight\",\n                        deathknight: Deathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).deathknight)\n                    };\n                    break;\n                case /* proto.TankDeathknight tank_deathknight */ 32:\n                    message.spec = {\n                        oneofKind: \"tankDeathknight\",\n                        tankDeathknight: TankDeathknight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).tankDeathknight)\n                    };\n                    break;\n                case /* string talentsString */ 17:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 28:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 29:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 30:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 19:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* bool in_front_of_target */ 23:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 33:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 27:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                case /* proto.SimDatabase database */ 35:\n                    message.database = SimDatabase.internalBinaryRead(reader, reader.uint32(), options, message.database);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 16; */\n        if (message.name !== \"\")\n            writer.tag(16, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats = 36; */\n        if (message.bonusStats)\n            UnitStats.internalBinaryWrite(message.bonusStats, writer.tag(36, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs buffs = 15; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 6; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 22; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralTankDruid feral_tank_druid = 26; */\n        if (message.spec.oneofKind === \"feralTankDruid\")\n            FeralTankDruid.internalBinaryWrite(message.spec.feralTankDruid, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Hunter hunter = 7; */\n        if (message.spec.oneofKind === \"hunter\")\n            Hunter.internalBinaryWrite(message.spec.hunter, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Mage mage = 8; */\n        if (message.spec.oneofKind === \"mage\")\n            Mage.internalBinaryWrite(message.spec.mage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 9; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 25; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HealingPriest healing_priest = 34; */\n        if (message.spec.oneofKind === \"healingPriest\")\n            HealingPriest.internalBinaryWrite(message.spec.healingPriest, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 10; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SmitePriest smite_priest = 20; */\n        if (message.spec.oneofKind === \"smitePriest\")\n            SmitePriest.internalBinaryWrite(message.spec.smitePriest, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Rogue rogue = 11; */\n        if (message.spec.oneofKind === \"rogue\")\n            Rogue.internalBinaryWrite(message.spec.rogue, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 12; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 18; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warlock warlock = 13; */\n        if (message.spec.oneofKind === \"warlock\")\n            Warlock.internalBinaryWrite(message.spec.warlock, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Warrior warrior = 14; */\n        if (message.spec.oneofKind === \"warrior\")\n            Warrior.internalBinaryWrite(message.spec.warrior, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 21; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Deathknight deathknight = 31; */\n        if (message.spec.oneofKind === \"deathknight\")\n            Deathknight.internalBinaryWrite(message.spec.deathknight, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TankDeathknight tank_deathknight = 32; */\n        if (message.spec.oneofKind === \"tankDeathknight\")\n            TankDeathknight.internalBinaryWrite(message.spec.tankDeathknight, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* string talentsString = 17; */\n        if (message.talentsString !== \"\")\n            writer.tag(17, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 28; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 29; */\n        if (message.profession1 !== 0)\n            writer.tag(29, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 30; */\n        if (message.profession2 !== 0)\n            writer.tag(30, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 19; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* bool in_front_of_target = 23; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(23, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 33; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(33, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 27; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimDatabase database = 35; */\n        if (message.database)\n            SimDatabase.internalBinaryWrite(message.database, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], tanks: [], staggerStormstrikes: false, targetDummies: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.RaidBuffs buffs */ 2:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 4:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                case /* int32 target_dummies */ 6:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs buffs = 2; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        /* int32 target_dummies = 6; */\n        if (message.targetDummies !== 0)\n            writer.tag(6, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"save_all_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false, saveAllValues: false };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                case /* bool save_all_values */ 7:\n                    message.saveAllValues = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        /* bool save_all_values = 7; */\n        if (message.saveAllValues !== false)\n            writer.tag(7, WireType.Varint).bool(message.saveAllValues);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"healing\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"shielding\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"cast_time_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0, healing: 0, shielding: 0, castTimeMs: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                case /* double healing */ 11:\n                    message.healing = reader.double();\n                    break;\n                case /* double shielding */ 13:\n                    message.shielding = reader.double();\n                    break;\n                case /* double cast_time_ms */ 14:\n                    message.castTimeMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        /* double healing = 11; */\n        if (message.healing !== 0)\n            writer.tag(11, WireType.Bit64).double(message.healing);\n        /* double shielding = 13; */\n        if (message.shielding !== 0)\n            writer.tag(13, WireType.Bit64).double(message.shielding);\n        /* double cast_time_ms = 14; */\n        if (message.castTimeMs !== 0)\n            writer.tag(14, WireType.Bit64).double(message.castTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"maxSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"minSeed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } },\n            { no: 8, name: \"all_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {}, allValues: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 maxSeed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 minSeed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                case /* repeated double all_values */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.allValues.push(reader.double());\n                    else\n                        message.allValues.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 maxSeed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 minSeed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        /* repeated double all_values = 8; */\n        if (message.allValues.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.allValues.length; i++)\n                writer.double(message.allValues[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 16, name: \"dpasp\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 14, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 15, name: \"tto\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics dpasp */ 16:\n                    message.dpasp = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dpasp);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 14:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.DistributionMetrics tto */ 15:\n                    message.tto = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tto);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dpasp = 16; */\n        if (message.dpasp)\n            DistributionMetrics.internalBinaryWrite(message.dpasp, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 14; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tto = 15; */\n        if (message.tto)\n            DistributionMetrics.internalBinaryWrite(message.tto, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 1, name: \"gear_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 7, name: \"talents_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 8, name: \"buffs_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 9, name: \"consumes_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"final_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 5, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { sets: [], cooldowns: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats base_stats */ 6:\n                    message.baseStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.baseStats);\n                    break;\n                case /* proto.UnitStats gear_stats */ 1:\n                    message.gearStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.gearStats);\n                    break;\n                case /* proto.UnitStats talents_stats */ 7:\n                    message.talentsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.talentsStats);\n                    break;\n                case /* proto.UnitStats buffs_stats */ 8:\n                    message.buffsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.buffsStats);\n                    break;\n                case /* proto.UnitStats consumes_stats */ 9:\n                    message.consumesStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.consumesStats);\n                    break;\n                case /* proto.UnitStats final_stats */ 2:\n                    message.finalStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.finalStats);\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* repeated proto.ActionID cooldowns */ 5:\n                    message.cooldowns.push(ActionID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats base_stats = 6; */\n        if (message.baseStats)\n            UnitStats.internalBinaryWrite(message.baseStats, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats gear_stats = 1; */\n        if (message.gearStats)\n            UnitStats.internalBinaryWrite(message.gearStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats talents_stats = 7; */\n        if (message.talentsStats)\n            UnitStats.internalBinaryWrite(message.talentsStats, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats buffs_stats = 8; */\n        if (message.buffsStats)\n            UnitStats.internalBinaryWrite(message.buffsStats, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats consumes_stats = 9; */\n        if (message.consumesStats)\n            UnitStats.internalBinaryWrite(message.consumesStats, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats final_stats = 2; */\n        if (message.finalStats)\n            UnitStats.internalBinaryWrite(message.finalStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ActionID cooldowns = 5; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            ActionID.internalBinaryWrite(message.cooldowns[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 10, name: \"pseudo_stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.PseudoStat\", PseudoStat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], pseudoStatsToWeigh: [], epReferenceStat: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 8:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* repeated proto.PseudoStat pseudo_stats_to_weigh */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStatsToWeigh.push(reader.int32());\n                    else\n                        message.pseudoStatsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* repeated proto.PseudoStat pseudo_stats_to_weigh = 10; */\n        if (message.pseudoStatsToWeigh.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStatsToWeigh.length; i++)\n                writer.int32(message.pseudoStatsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 4, name: \"hps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues hps */ 4:\n                    message.hps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues hps = 4; */\n        if (message.hps)\n            StatWeightValues.internalBinaryWrite(message.hps, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"weights_stdev\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"ep_values\", kind: \"message\", T: () => UnitStats },\n            { no: 4, name: \"ep_values_stdev\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats weights */ 1:\n                    message.weights = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weights);\n                    break;\n                case /* proto.UnitStats weights_stdev */ 2:\n                    message.weightsStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weightsStdev);\n                    break;\n                case /* proto.UnitStats ep_values */ 3:\n                    message.epValues = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValues);\n                    break;\n                case /* proto.UnitStats ep_values_stdev */ 4:\n                    message.epValuesStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValuesStdev);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats weights = 1; */\n        if (message.weights)\n            UnitStats.internalBinaryWrite(message.weights, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats weights_stdev = 2; */\n        if (message.weightsStdev)\n            UnitStats.internalBinaryWrite(message.weightsStdev, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values = 3; */\n        if (message.epValues)\n            UnitStats.internalBinaryWrite(message.epValues, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values_stdev = 4; */\n        if (message.epValuesStdev)\n            UnitStats.internalBinaryWrite(message.epValuesStdev, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0, hps: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* double hps */ 9:\n                    message.hps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* double hps = 9; */\n        if (message.hps !== 0)\n            writer.tag(9, WireType.Bit64).double(message.hps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n","// @generated by protobuf-ts 2.0.4\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { Glyphs } from \"./common\";\nimport { Cooldowns } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { RaidTarget } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { Faction } from \"./common\";\nimport { EnchantType } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Class } from \"./common\";\nimport { ItemQuality } from \"./common\";\nimport { GemColor } from \"./common\";\nimport { RangedWeaponType } from \"./common\";\nimport { HandType } from \"./common\";\nimport { WeaponType } from \"./common\";\nimport { ArmorType } from \"./common\";\nimport { ItemType } from \"./common\";\nimport { PresetEncounter } from \"./common\";\n/**\n * Holds all WoW data for the UI.\n *\n * @generated from protobuf message proto.UIDatabase\n */\nexport interface UIDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.UIItem items = 1;\n     */\n    items: UIItem[];\n    /**\n     * @generated from protobuf field: repeated proto.UIEnchant enchants = 2;\n     */\n    enchants: UIEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.UIGem gems = 3;\n     */\n    gems: UIGem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 6;\n     */\n    encounters: PresetEncounter[];\n    /**\n     * Entities for which we just need a name/icon.\n     *\n     * @generated from protobuf field: repeated proto.IconData item_icons = 4;\n     */\n    itemIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.IconData spell_icons = 5;\n     */\n    spellIcons: IconData[];\n}\n/**\n * Contains all information about an Item needed by the UI.\n * Generally this will include everything needed by the sim, plus some\n * additional data for displaying / filtering.\n *\n * @generated from protobuf message proto.UIItem\n */\nexport interface UIItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 5;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 6;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 7;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 8;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 9;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 10;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 11;\n     */\n    socketBonus: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 12;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 13;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 14;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 ilvl = 15;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: int32 phase = 16;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 17;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 18;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: bool heroic = 19;\n     */\n    heroic: boolean;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 20;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * Name of the item set to which this item belongs, if any.\n     *\n     * @generated from protobuf field: string set_name = 22;\n     */\n    setName: string;\n}\n/**\n * @generated from protobuf message proto.UIEnchant\n */\nexport interface UIEnchant {\n    /**\n     * All enchants have an effect ID. Some also have an item ID, others have a spell ID,\n     * and yet others have both item and spell IDs. No single ID alone is enough to\n     * uniquely identify an enchant. Uniqueness requires either effect ID + slot, or\n     * effect ID + item/spell ID.\n     *\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number; // ID of the effect.\n    /**\n     * @generated from protobuf field: int32 item_id = 2;\n     */\n    itemId: number; // ID of the enchant \"item\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: int32 spell_id = 3;\n     */\n    spellId: number; // ID of the enchant \"spell\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: string name = 4;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 5;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 6;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: repeated proto.ItemType extra_types = 13;\n     */\n    extraTypes: ItemType[]; // Extra types for enchants that can go in multiple slots (like armor kits).\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 7;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 9;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 10;\n     */\n    phase: number;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 11;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 12;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.UIGem\n */\nexport interface UIGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: int32 phase = 6;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 7;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 8;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 9;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.IconData\n */\nexport interface IconData {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n}\n/**\n * TODO:\n * Source\n * Raid\n * Req. Profession\n *\n * @generated from protobuf message proto.DatabaseFilters\n */\nexport interface DatabaseFilters {\n    /**\n     * @generated from protobuf field: repeated proto.ArmorType armor_types = 1;\n     */\n    armorTypes: ArmorType[];\n    /**\n     * @generated from protobuf field: repeated proto.WeaponType weapon_types = 2;\n     */\n    weaponTypes: WeaponType[];\n    /**\n     * @generated from protobuf field: double min_mh_weapon_speed = 4;\n     */\n    minMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_mh_weapon_speed = 5;\n     */\n    maxMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_oh_weapon_speed = 9;\n     */\n    minOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_oh_weapon_speed = 10;\n     */\n    maxOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: bool one_handed_weapons = 6;\n     */\n    oneHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool two_handed_weapons = 7;\n     */\n    twoHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool matching_gems_only = 8;\n     */\n    matchingGemsOnly: boolean;\n    /**\n     * Item IDs for favorited items.\n     *\n     * @generated from protobuf field: repeated int32 favorite_items = 11;\n     */\n    favoriteItems: number[];\n    /**\n     * Item IDs for favorited gems.\n     *\n     * @generated from protobuf field: repeated int32 favorite_gems = 12;\n     */\n    favoriteGems: number[];\n    /**\n     * Uniquely-identifying strings for favorited enchants.\n     *\n     * @generated from protobuf field: repeated string favorite_enchants = 13;\n     */\n    favoriteEnchants: string[];\n}\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_damage_metrics = 8;\n     */\n    showDamageMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_healing_metrics = 7;\n     */\n    showHealingMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: string language = 9;\n     */\n    language: string;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: proto.DatabaseFilters filters = 10;\n     */\n    filters?: DatabaseFilters;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.RaidTarget tanks = 7;\n     */\n    tanks: RaidTarget[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: int32 target_dummies = 9;\n     */\n    targetDummies: number;\n    /**\n     * Deprecate after 2 months (on 2023/02/13)\n     *\n     * @generated from protobuf field: repeated double ep_weights = 6;\n     */\n    epWeights: number[];\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_weights_stats = 10;\n     */\n    epWeightsStats?: UnitStats;\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * Deprecate after 2 months (on 2023/02/13)\n     *\n     * @generated from protobuf field: repeated double bonus_stats = 2;\n     */\n    bonusStats: number[];\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats_stats = 3;\n     */\n    bonusStatsStats?: UnitStats;\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 6;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: string rotation_json = 8;\n     */\n    rotationJson: string;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * A buff bot placed in a raid.\n *\n * @generated from protobuf message proto.BuffBot\n */\nexport interface BuffBot {\n    /**\n     * Uniquely identifies which buffbot this is.\n     *\n     * @generated from protobuf field: string id = 1;\n     */\n    id: string;\n    /**\n     * @generated from protobuf field: int32 raid_index = 2;\n     */\n    raidIndex: number;\n    /**\n     * The assigned player to innervate. Only used for druid buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget innervate_assignment = 3;\n     */\n    innervateAssignment?: RaidTarget;\n    /**\n     * The assigned player to PI. Only used for disc priest buffbots.\n     *\n     * @generated from protobuf field: proto.RaidTarget power_infusion_assignment = 4;\n     */\n    powerInfusionAssignment?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.RaidTarget tricks_of_the_trade_assignment = 5;\n     */\n    tricksOfTheTradeAssignment?: RaidTarget;\n    /**\n     * @generated from protobuf field: proto.RaidTarget unholy_frenzy_assignment = 6;\n     */\n    unholyFrenzyAssignment?: RaidTarget;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: repeated proto.BuffBot buff_bots = 2;\n     */\n    buffBots: BuffBot[];\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIDatabase$Type extends MessageType<UIDatabase> {\n    constructor() {\n        super(\"proto.UIDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItem },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIGem },\n            { no: 6, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter },\n            { no: 4, name: \"item_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 5, name: \"spell_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData }\n        ]);\n    }\n    create(value?: PartialMessage<UIDatabase>): UIDatabase {\n        const message = { items: [], enchants: [], gems: [], encounters: [], itemIcons: [], spellIcons: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDatabase): UIDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UIItem items */ 1:\n                    message.items.push(UIItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIEnchant enchants */ 2:\n                    message.enchants.push(UIEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIGem gems */ 3:\n                    message.gems.push(UIGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 6:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData item_icons */ 4:\n                    message.itemIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData spell_icons */ 5:\n                    message.spellIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UIItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            UIItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            UIEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            UIGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 6; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData item_icons = 4; */\n        for (let i = 0; i < message.itemIcons.length; i++)\n            IconData.internalBinaryWrite(message.itemIcons[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData spell_icons = 5; */\n        for (let i = 0; i < message.spellIcons.length; i++)\n            IconData.internalBinaryWrite(message.spellIcons[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIDatabase\n */\nexport const UIDatabase = new UIDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItem$Type extends MessageType<UIItem> {\n    constructor() {\n        super(\"proto.UIItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 5, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 6, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 7, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 8, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 9, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 11, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 18, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UIItem>): UIItem {\n        const message = { id: 0, name: \"\", icon: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, ilvl: 0, phase: 0, quality: 0, unique: false, heroic: false, classAllowlist: [], requiredProfession: 0, setName: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItem): UIItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 5:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 6:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 7:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 8:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 12:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 13:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 14:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 ilvl */ 15:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* int32 phase */ 16:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 17:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 18:\n                    message.unique = reader.bool();\n                    break;\n                case /* bool heroic */ 19:\n                    message.heroic = reader.bool();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 20:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* string set_name */ 22:\n                    message.setName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 5; */\n        if (message.armorType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 6; */\n        if (message.weaponType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 7; */\n        if (message.handType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 8; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 9; */\n        if (message.stats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 10; */\n        if (message.gemSockets.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 11; */\n        if (message.socketBonus.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 12; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 13; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 14; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 ilvl = 15; */\n        if (message.ilvl !== 0)\n            writer.tag(15, WireType.Varint).int32(message.ilvl);\n        /* int32 phase = 16; */\n        if (message.phase !== 0)\n            writer.tag(16, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 17; */\n        if (message.quality !== 0)\n            writer.tag(17, WireType.Varint).int32(message.quality);\n        /* bool unique = 18; */\n        if (message.unique !== false)\n            writer.tag(18, WireType.Varint).bool(message.unique);\n        /* bool heroic = 19; */\n        if (message.heroic !== false)\n            writer.tag(19, WireType.Varint).bool(message.heroic);\n        /* repeated proto.Class class_allowlist = 20; */\n        if (message.classAllowlist.length) {\n            writer.tag(20, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* string set_name = 22; */\n        if (message.setName !== \"\")\n            writer.tag(22, WireType.LengthDelimited).string(message.setName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItem\n */\nexport const UIItem = new UIItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIEnchant$Type extends MessageType<UIEnchant> {\n    constructor() {\n        super(\"proto.UIEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 13, name: \"extra_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ItemType\", ItemType] },\n            { no: 7, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 10, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 12, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIEnchant>): UIEnchant {\n        const message = { effectId: 0, itemId: 0, spellId: 0, name: \"\", icon: \"\", type: 0, extraTypes: [], enchantType: 0, stats: [], quality: 0, phase: 0, classAllowlist: [], requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIEnchant): UIEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* int32 item_id */ 2:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 3:\n                    message.spellId = reader.int32();\n                    break;\n                case /* string name */ 4:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 5:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 6:\n                    message.type = reader.int32();\n                    break;\n                case /* repeated proto.ItemType extra_types */ 13:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.extraTypes.push(reader.int32());\n                    else\n                        message.extraTypes.push(reader.int32());\n                    break;\n                case /* proto.EnchantType enchant_type */ 7:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 9:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 10:\n                    message.phase = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 12:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* int32 item_id = 2; */\n        if (message.itemId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 3; */\n        if (message.spellId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.spellId);\n        /* string name = 4; */\n        if (message.name !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.name);\n        /* string icon = 5; */\n        if (message.icon !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 6; */\n        if (message.type !== 0)\n            writer.tag(6, WireType.Varint).int32(message.type);\n        /* repeated proto.ItemType extra_types = 13; */\n        if (message.extraTypes.length) {\n            writer.tag(13, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.extraTypes.length; i++)\n                writer.int32(message.extraTypes[i]);\n            writer.join();\n        }\n        /* proto.EnchantType enchant_type = 7; */\n        if (message.enchantType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 9; */\n        if (message.quality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.quality);\n        /* int32 phase = 10; */\n        if (message.phase !== 0)\n            writer.tag(10, WireType.Varint).int32(message.phase);\n        /* repeated proto.Class class_allowlist = 11; */\n        if (message.classAllowlist.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 12; */\n        if (message.requiredProfession !== 0)\n            writer.tag(12, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIEnchant\n */\nexport const UIEnchant = new UIEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIGem$Type extends MessageType<UIGem> {\n    constructor() {\n        super(\"proto.UIGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 8, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIGem>): UIGem {\n        const message = { id: 0, name: \"\", icon: \"\", color: 0, stats: [], phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIGem): UIGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* int32 phase */ 6:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 7:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 8:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 9:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* int32 phase = 6; */\n        if (message.phase !== 0)\n            writer.tag(6, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 7; */\n        if (message.quality !== 0)\n            writer.tag(7, WireType.Varint).int32(message.quality);\n        /* bool unique = 8; */\n        if (message.unique !== false)\n            writer.tag(8, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 9; */\n        if (message.requiredProfession !== 0)\n            writer.tag(9, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIGem\n */\nexport const UIGem = new UIGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IconData$Type extends MessageType<IconData> {\n    constructor() {\n        super(\"proto.IconData\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IconData>): IconData {\n        const message = { id: 0, name: \"\", icon: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IconData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IconData): IconData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IconData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IconData\n */\nexport const IconData = new IconData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DatabaseFilters$Type extends MessageType<DatabaseFilters> {\n    constructor() {\n        super(\"proto.DatabaseFilters\", [\n            { no: 1, name: \"armor_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 2, name: \"weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 4, name: \"min_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"min_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"max_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"one_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"two_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"matching_gems_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"favorite_items\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"favorite_gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"favorite_enchants\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DatabaseFilters>): DatabaseFilters {\n        const message = { armorTypes: [], weaponTypes: [], minMhWeaponSpeed: 0, maxMhWeaponSpeed: 0, minOhWeaponSpeed: 0, maxOhWeaponSpeed: 0, oneHandedWeapons: false, twoHandedWeapons: false, matchingGemsOnly: false, favoriteItems: [], favoriteGems: [], favoriteEnchants: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DatabaseFilters>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseFilters): DatabaseFilters {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ArmorType armor_types */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.armorTypes.push(reader.int32());\n                    else\n                        message.armorTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.WeaponType weapon_types */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weaponTypes.push(reader.int32());\n                    else\n                        message.weaponTypes.push(reader.int32());\n                    break;\n                case /* double min_mh_weapon_speed */ 4:\n                    message.minMhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_mh_weapon_speed */ 5:\n                    message.maxMhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_oh_weapon_speed */ 9:\n                    message.minOhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_oh_weapon_speed */ 10:\n                    message.maxOhWeaponSpeed = reader.double();\n                    break;\n                case /* bool one_handed_weapons */ 6:\n                    message.oneHandedWeapons = reader.bool();\n                    break;\n                case /* bool two_handed_weapons */ 7:\n                    message.twoHandedWeapons = reader.bool();\n                    break;\n                case /* bool matching_gems_only */ 8:\n                    message.matchingGemsOnly = reader.bool();\n                    break;\n                case /* repeated int32 favorite_items */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteItems.push(reader.int32());\n                    else\n                        message.favoriteItems.push(reader.int32());\n                    break;\n                case /* repeated int32 favorite_gems */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteGems.push(reader.int32());\n                    else\n                        message.favoriteGems.push(reader.int32());\n                    break;\n                case /* repeated string favorite_enchants */ 13:\n                    message.favoriteEnchants.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DatabaseFilters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ArmorType armor_types = 1; */\n        if (message.armorTypes.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.armorTypes.length; i++)\n                writer.int32(message.armorTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.WeaponType weapon_types = 2; */\n        if (message.weaponTypes.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weaponTypes.length; i++)\n                writer.int32(message.weaponTypes[i]);\n            writer.join();\n        }\n        /* double min_mh_weapon_speed = 4; */\n        if (message.minMhWeaponSpeed !== 0)\n            writer.tag(4, WireType.Bit64).double(message.minMhWeaponSpeed);\n        /* double max_mh_weapon_speed = 5; */\n        if (message.maxMhWeaponSpeed !== 0)\n            writer.tag(5, WireType.Bit64).double(message.maxMhWeaponSpeed);\n        /* double min_oh_weapon_speed = 9; */\n        if (message.minOhWeaponSpeed !== 0)\n            writer.tag(9, WireType.Bit64).double(message.minOhWeaponSpeed);\n        /* double max_oh_weapon_speed = 10; */\n        if (message.maxOhWeaponSpeed !== 0)\n            writer.tag(10, WireType.Bit64).double(message.maxOhWeaponSpeed);\n        /* bool one_handed_weapons = 6; */\n        if (message.oneHandedWeapons !== false)\n            writer.tag(6, WireType.Varint).bool(message.oneHandedWeapons);\n        /* bool two_handed_weapons = 7; */\n        if (message.twoHandedWeapons !== false)\n            writer.tag(7, WireType.Varint).bool(message.twoHandedWeapons);\n        /* bool matching_gems_only = 8; */\n        if (message.matchingGemsOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.matchingGemsOnly);\n        /* repeated int32 favorite_items = 11; */\n        if (message.favoriteItems.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteItems.length; i++)\n                writer.int32(message.favoriteItems[i]);\n            writer.join();\n        }\n        /* repeated int32 favorite_gems = 12; */\n        if (message.favoriteGems.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteGems.length; i++)\n                writer.int32(message.favoriteGems[i]);\n            writer.join();\n        }\n        /* repeated string favorite_enchants = 13; */\n        for (let i = 0; i < message.favoriteEnchants.length; i++)\n            writer.tag(13, WireType.LengthDelimited).string(message.favoriteEnchants[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DatabaseFilters\n */\nexport const DatabaseFilters = new DatabaseFilters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"show_damage_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"show_healing_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"language\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 10, name: \"filters\", kind: \"message\", T: () => DatabaseFilters }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showDamageMetrics: false, showThreatMetrics: false, showHealingMetrics: false, showExperimental: false, language: \"\", faction: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_damage_metrics */ 8:\n                    message.showDamageMetrics = reader.bool();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_healing_metrics */ 7:\n                    message.showHealingMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* string language */ 9:\n                    message.language = reader.string();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                case /* proto.DatabaseFilters filters */ 10:\n                    message.filters = DatabaseFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_damage_metrics = 8; */\n        if (message.showDamageMetrics !== false)\n            writer.tag(8, WireType.Varint).bool(message.showDamageMetrics);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_healing_metrics = 7; */\n        if (message.showHealingMetrics !== false)\n            writer.tag(7, WireType.Varint).bool(message.showHealingMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* string language = 9; */\n        if (message.language !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.language);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        /* proto.DatabaseFilters filters = 10; */\n        if (message.filters)\n            DatabaseFilters.internalBinaryWrite(message.filters, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => RaidTarget },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 9, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"ep_weights\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"ep_weights_stats\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], targetDummies: 0, epWeights: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.RaidTarget tanks */ 7:\n                    message.tanks.push(RaidTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* int32 target_dummies */ 9:\n                    message.targetDummies = reader.int32();\n                    break;\n                case /* repeated double ep_weights */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epWeights.push(reader.double());\n                    else\n                        message.epWeights.push(reader.double());\n                    break;\n                case /* proto.UnitStats ep_weights_stats */ 10:\n                    message.epWeightsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epWeightsStats);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.RaidTarget tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            RaidTarget.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* int32 target_dummies = 9; */\n        if (message.targetDummies !== 0)\n            writer.tag(9, WireType.Varint).int32(message.targetDummies);\n        /* repeated double ep_weights = 6; */\n        if (message.epWeights.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epWeights.length; i++)\n                writer.double(message.epWeights[i]);\n            writer.join();\n        }\n        /* proto.UnitStats ep_weights_stats = 10; */\n        if (message.epWeightsStats)\n            UnitStats.internalBinaryWrite(message.epWeightsStats, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 2, name: \"bonus_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"bonus_stats_stats\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = { bonusStats: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* repeated double bonus_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.bonusStats.push(reader.double());\n                    else\n                        message.bonusStats.push(reader.double());\n                    break;\n                case /* proto.UnitStats bonus_stats_stats */ 3:\n                    message.bonusStatsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStatsStats);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double bonus_stats = 2; */\n        if (message.bonusStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.bonusStats.length; i++)\n                writer.double(message.bonusStats[i]);\n            writer.join();\n        }\n        /* proto.UnitStats bonus_stats_stats = 3; */\n        if (message.bonusStatsStats)\n            UnitStats.internalBinaryWrite(message.bonusStatsStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 6, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 8, name: \"rotation_json\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0, rotationJson: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 6:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* string rotation_json */ 8:\n                    message.rotationJson = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* proto.Cooldowns cooldowns = 6; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* string rotation_json = 8; */\n        if (message.rotationJson !== \"\")\n            writer.tag(8, WireType.LengthDelimited).string(message.rotationJson);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BuffBot$Type extends MessageType<BuffBot> {\n    constructor() {\n        super(\"proto.BuffBot\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"raid_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"innervate_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 4, name: \"power_infusion_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 5, name: \"tricks_of_the_trade_assignment\", kind: \"message\", T: () => RaidTarget },\n            { no: 6, name: \"unholy_frenzy_assignment\", kind: \"message\", T: () => RaidTarget }\n        ]);\n    }\n    create(value?: PartialMessage<BuffBot>): BuffBot {\n        const message = { id: \"\", raidIndex: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BuffBot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuffBot): BuffBot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string id */ 1:\n                    message.id = reader.string();\n                    break;\n                case /* int32 raid_index */ 2:\n                    message.raidIndex = reader.int32();\n                    break;\n                case /* proto.RaidTarget innervate_assignment */ 3:\n                    message.innervateAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.innervateAssignment);\n                    break;\n                case /* proto.RaidTarget power_infusion_assignment */ 4:\n                    message.powerInfusionAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionAssignment);\n                    break;\n                case /* proto.RaidTarget tricks_of_the_trade_assignment */ 5:\n                    message.tricksOfTheTradeAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeAssignment);\n                    break;\n                case /* proto.RaidTarget unholy_frenzy_assignment */ 6:\n                    message.unholyFrenzyAssignment = RaidTarget.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyAssignment);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BuffBot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string id = 1; */\n        if (message.id !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.id);\n        /* int32 raid_index = 2; */\n        if (message.raidIndex !== 0)\n            writer.tag(2, WireType.Varint).int32(message.raidIndex);\n        /* proto.RaidTarget innervate_assignment = 3; */\n        if (message.innervateAssignment)\n            RaidTarget.internalBinaryWrite(message.innervateAssignment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget power_infusion_assignment = 4; */\n        if (message.powerInfusionAssignment)\n            RaidTarget.internalBinaryWrite(message.powerInfusionAssignment, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget tricks_of_the_trade_assignment = 5; */\n        if (message.tricksOfTheTradeAssignment)\n            RaidTarget.internalBinaryWrite(message.tricksOfTheTradeAssignment, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidTarget unholy_frenzy_assignment = 6; */\n        if (message.unholyFrenzyAssignment)\n            RaidTarget.internalBinaryWrite(message.unholyFrenzyAssignment, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BuffBot\n */\nexport const BuffBot = new BuffBot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { buffBots: [], faction: 0, phase: 0 };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"buff_bots\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BuffBot },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = { buffBots: [] };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* repeated proto.BuffBot buff_bots */ 2:\n                    message.buffBots.push(BuffBot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.BuffBot buff_bots = 2; */\n        for (let i = 0; i < message.buffBots.length; i++)\n            BuffBot.internalBinaryWrite(message.buffBots[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","export const CURRENT_PHASE = 1;\n\n// Github pages serves our site under the /wotlk directory (because the repo name is wotlk)\nexport const REPO_NAME = 'wotlk';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n","// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null)\n\t\treturn true;\n\n\tif (a == null || b == null)\n\t\treturn false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => v > arr[cur] ? i : cur, 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn 1.645 * stDev / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\", dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number, lowerIsBetter?: boolean, noColor?: boolean) {\n\tconst delta = after - before;\n\tlet deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\tdeltaStr = '+' + deltaStr;\n\t}\n\telem.textContent = deltaStr;\n\n\tif (noColor) {\n\t\telem.classList.remove('positive');\n\t\telem.classList.remove('negative');\n\t} else if (delta >= 0 != Boolean(lowerIsBetter)) {\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr.map((v, i) => {\n\t\t\tconst withoutThisElem = arr.slice();\n\t\t\twithoutThisElem.splice(i, 1);\n\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k - 1);\n\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: ((_a: T, _b: T) => boolean) = comparator ? ((a, b) => comparator(a, b) == 0) : ((a, b) => a == b);\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr.map(v => {\n\t\t\treturn smaller.map(permutation => {\n\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\tnewPerm.push(v);\n\t\t\t\treturn newPerm;\n\t\t\t});\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n","import { GemColor } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport {\n\tUIGem as Gem,\n} from '../proto/ui.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n\tGemColor.GemColorRed,\n\tGemColor.GemColorOrange,\n\tGemColor.GemColorYellow,\n\tGemColor.GemColorGreen,\n\tGemColor.GemColorBlue,\n\tGemColor.GemColorPurple,\n\tGemColor.GemColorPrismatic,\n]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n\treturn gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n\treturn (gem.color == GemColor.GemColorMeta) == (socketColor == GemColor.GemColorMeta);\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n\treadonly id: number;\n\treadonly description: string;\n\n\treadonly minRed: number;\n\treadonly minYellow: number;\n\treadonly minBlue: number;\n\n\treadonly compareColorGreater: GemColor;\n\treadonly compareColorLesser: GemColor;\n\n\tconstructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n\t\tthis.id = id;\n\t\tthis.description = description;\n\t\tthis.minRed = minRed;\n\t\tthis.minYellow = minYellow;\n\t\tthis.minBlue = minBlue;\n\t\tthis.compareColorGreater = compareColorGreater;\n\t\tthis.compareColorLesser = compareColorLesser;\n\n\t\tmetaGemConditions.set(this.id, this);\n\t}\n\n\t// Whether the condition is met, i.e. the meta gem is activated.\n\tisMet(numRed: number, numYellow: number, numBlue: number): boolean {\n\t\tif (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.compareColorGreater == GemColor.GemColorUnknown) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n\t\tconst numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n\t\treturn numGreater > numLesser;\n\t}\n\n\tisCompareColorCondition(): boolean {\n\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t}\n\n\tisOneOfEach(): boolean {\n\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t}\n\n\tisTwoAndOne(): boolean {\n\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t}\n\n\tisThreeOfAColor(): boolean {\n\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t}\n\n\tprivate static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n\t\tif (gemColor == GemColor.GemColorRed) {\n\t\t\treturn numRed;\n\t\t} else if (gemColor == GemColor.GemColorYellow) {\n\t\t\treturn numYellow;\n\t\t} else if (gemColor == GemColor.GemColorBlue) {\n\t\t\treturn numBlue;\n\t\t} else {\n\t\t\tthrow new Error('Invalid gem color for category check: ' + gemColor);\n\t\t}\n\t}\n\n\tstatic fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n\t}\n\n\tstatic fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n\t}\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n\tif (!metaGemConditions.has(id)) {\n\t\tthrow new Error('Missing meta gem condition for gem: ' + id);\n\t}\n\n\treturn metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n\treturn getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n\treturn getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41377, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst gemSocketCssClasses: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'socket-color-blue',\n\t[GemColor.GemColorMeta]: 'socket-color-meta',\n\t[GemColor.GemColorRed]: 'socket-color-red',\n\t[GemColor.GemColorYellow]: 'socket-color-yellow',\n\t[GemColor.GemColorPrismatic]: 'socket-color-prismatic',\n};\nexport function setGemSocketCssClass(elem: HTMLElement, color: GemColor) {\n\tObject.values(gemSocketCssClasses).forEach(cssClass => elem.classList.remove(cssClass));\n\n\tif (gemSocketCssClasses[color]) {\n\t\telem.classList.add(gemSocketCssClasses[color] as string);\n\t\treturn;\n\t}\n\n\tthrow new Error('No css class for gem socket color: ' + color);\n}\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n\t[GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n\t[GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n\t[GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n\t[GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n\tif (emptyGemSocketIcons[color])\n\t\treturn emptyGemSocketIcons[color] as string;\n\n\tthrow new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { REPO_NAME } from '../constants/other.js'\nimport { camelToSnakeCase } from '../utils.js';\nimport { getEnumValues } from '../utils.js';\nimport { intersection } from '../utils.js';\nimport { maxIndex } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport { Player } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ArmorType } from '../proto/common.js';\nimport { Class } from '../proto/common.js';\nimport { EnchantType } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { HandType } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { Faction } from '../proto/common.js';\nimport { RaidTarget } from '../proto/common.js';\nimport { RangedWeaponType } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { Blessings } from '../proto/paladin.js';\nimport {\n\tBlessingsAssignment,\n\tBlessingsAssignments,\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { Stats } from './stats.js';\n\nimport * as Gems from '../proto_utils/gems.js';\n\nimport {\n\tBalanceDruid,\n\tFeralDruid,\n\tFeralTankDruid,\n\tBalanceDruid_Rotation as BalanceDruidRotation,\n\tFeralDruid_Rotation as FeralDruidRotation,\n\tFeralTankDruid_Rotation as FeralTankDruidRotation,\n\tDruidTalents,\n\tBalanceDruid_Options as BalanceDruidOptions,\n\tFeralDruid_Options as FeralDruidOptions,\n\tFeralTankDruid_Options as FeralTankDruidOptions\n} from '../proto/druid.js';\nimport { ElementalShaman, EnhancementShaman_Rotation as EnhancementShamanRotation, ElementalShaman_Rotation as ElementalShamanRotation, ShamanTalents, ElementalShaman_Options as ElementalShamanOptions, EnhancementShaman_Options as EnhancementShamanOptions, EnhancementShaman } from '../proto/shaman.js';\nimport { Hunter, Hunter_Rotation as HunterRotation, HunterTalents, Hunter_Options as HunterOptions } from '../proto/hunter.js';\nimport { Mage, Mage_Rotation as MageRotation, MageTalents, Mage_Options as MageOptions } from '../proto/mage.js';\nimport { Rogue, Rogue_Rotation as RogueRotation, RogueTalents, Rogue_Options as RogueOptions } from '../proto/rogue.js';\nimport { RetributionPaladin, RetributionPaladin_Rotation as RetributionPaladinRotation, PaladinTalents, RetributionPaladin_Options as RetributionPaladinOptions } from '../proto/paladin.js';\nimport { ProtectionPaladin, ProtectionPaladin_Rotation as ProtectionPaladinRotation, ProtectionPaladin_Options as ProtectionPaladinOptions } from '../proto/paladin.js';\nimport {\n\tPriestTalents,\n\tHealingPriest,\n\tHealingPriest_Rotation as HealingPriestRotation,\n\tHealingPriest_Options as HealingPriestOptions,\n\tShadowPriest,\n\tShadowPriest_Rotation as ShadowPriestRotation,\n\tShadowPriest_Options as ShadowPriestOptions,\n\tSmitePriest,\n\tSmitePriest_Rotation as SmitePriestRotation,\n\tSmitePriest_Options as SmitePriestOptions,\n} from '../proto/priest.js';\nimport { Warlock, Warlock_Rotation as WarlockRotation, WarlockTalents, Warlock_Options as WarlockOptions } from '../proto/warlock.js';\nimport { Warrior, Warrior_Rotation as WarriorRotation, WarriorTalents, Warrior_Options as WarriorOptions } from '../proto/warrior.js';\nimport { Deathknight, Deathknight_Rotation as DeathknightRotation, DeathknightTalents, Deathknight_Options as DeathknightOptions } from '../proto/deathknight.js';\nimport { TankDeathknight, TankDeathknight_Rotation as TankDeathknightRotation, TankDeathknight_Options as TankDeathknightOptions } from '../proto/deathknight.js';\nimport { ProtectionWarrior, ProtectionWarrior_Rotation as ProtectionWarriorRotation, ProtectionWarrior_Options as ProtectionWarriorOptions } from '../proto/warrior.js';\n\nexport type DeathknightSpecs = [Spec.SpecDeathknight, Spec.SpecTankDeathknight];\nexport type DruidSpecs = [Spec.SpecBalanceDruid, Spec.SpecFeralDruid, Spec.SpecFeralTankDruid];\nexport type HunterSpecs = Spec.SpecHunter;\nexport type MageSpecs = Spec.SpecMage;\nexport type RogueSpecs = Spec.SpecRogue;\nexport type PaladinSpecs = [Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin];\nexport type PriestSpecs = [Spec.SpecHealingPriest, Spec.SpecShadowPriest, Spec.SpecSmitePriest];\nexport type ShamanSpecs = [Spec.SpecElementalShaman, Spec.SpecEnhancementShaman];\nexport type WarlockSpecs = Spec.SpecWarlock;\nexport type WarriorSpecs = [Spec.SpecWarrior, Spec.SpecProtectionWarrior];\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\n// The order in which specs should be presented, when it matters.\n// Currently this is only used for the order of the paladin blessings UI.\nexport const naturalSpecOrder: Array<Spec> = [\n\tSpec.SpecBalanceDruid,\n\tSpec.SpecFeralDruid,\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecHunter,\n\tSpec.SpecMage,\n\tSpec.SpecRetributionPaladin,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecHealingPriest,\n\tSpec.SpecShadowPriest,\n\tSpec.SpecSmitePriest,\n\tSpec.SpecRogue,\n\tSpec.SpecElementalShaman,\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecWarlock,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\n\nexport const naturalClassOrder: Array<Class> = [\n\tClass.ClassDeathknight,\n\tClass.ClassDruid,\n\tClass.ClassHunter,\n\tClass.ClassMage,\n\tClass.ClassPaladin,\n\tClass.ClassPriest,\n\tClass.ClassRogue,\n\tClass.ClassShaman,\n\tClass.ClassWarlock,\n\tClass.ClassWarrior,\n]\n\nexport const specNames: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: 'Balance Druid',\n\t[Spec.SpecElementalShaman]: 'Elemental Shaman',\n\t[Spec.SpecEnhancementShaman]: 'Enhancement Shaman',\n\t[Spec.SpecFeralDruid]: 'Feral DPS Druid',\n\t[Spec.SpecFeralTankDruid]: 'Feral Tank Druid',\n\t[Spec.SpecHunter]: 'Hunter',\n\t[Spec.SpecMage]: 'Mage',\n\t[Spec.SpecRogue]: 'Rogue',\n\t[Spec.SpecRetributionPaladin]: 'Retribution Paladin',\n\t[Spec.SpecProtectionPaladin]: 'Protection Paladin',\n\t[Spec.SpecHealingPriest]: 'Priest',\n\t[Spec.SpecShadowPriest]: 'Shadow Priest',\n\t[Spec.SpecSmitePriest]: 'Smite Priest',\n\t[Spec.SpecWarlock]: 'Warlock',\n\t[Spec.SpecWarrior]: 'DPS Warrior',\n\t[Spec.SpecProtectionWarrior]: 'Protection Warrior',\n\t[Spec.SpecDeathknight]: 'DPS Death Knight',\n\t[Spec.SpecTankDeathknight]: 'Tank Death Knight',\n};\n\nexport const classNames: Record<Class, string> = {\n\t[Class.ClassUnknown]: '',\n\t[Class.ClassDruid]: 'Druid',\n\t[Class.ClassHunter]: 'Hunter',\n\t[Class.ClassMage]: 'Mage',\n\t[Class.ClassPaladin]: 'Paladin',\n\t[Class.ClassPriest]: 'Priest',\n\t[Class.ClassRogue]: 'Rogue',\n\t[Class.ClassShaman]: 'Shaman',\n\t[Class.ClassWarlock]: 'Warlock',\n\t[Class.ClassWarrior]: 'Warrior',\n\t[Class.ClassDeathknight]: 'Death Knight'\n}\n\nexport const classColors: Record<Class, string> = {\n\t[Class.ClassUnknown]: '#fff',\n\t[Class.ClassDruid]: '#ff7d0a',\n\t[Class.ClassHunter]: '#abd473',\n\t[Class.ClassMage]: '#69ccf0',\n\t[Class.ClassPaladin]: '#f58cba',\n\t[Class.ClassPriest]: '#fff',\n\t[Class.ClassRogue]: '#fff569',\n\t[Class.ClassShaman]: '#2459ff',\n\t[Class.ClassWarlock]: '#9482c9',\n\t[Class.ClassWarrior]: '#c79c6e',\n\t[Class.ClassDeathknight]: '#c41e3a'\n}\n\nexport const specIconsLarge: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_starfall.jpg',\n\t[Spec.SpecElementalShaman]: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_lightning.jpg',\n\t[Spec.SpecEnhancementShaman]: 'https://wow.zamimg.com/images/wow/icons/large/ability_shaman_stormstrike.jpg',\n\t[Spec.SpecFeralDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_catform.jpg',\n\t[Spec.SpecFeralTankDruid]: 'https://wow.zamimg.com/images/wow/icons/large/ability_racial_bearform.jpg',\n\t[Spec.SpecHunter]: 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg',\n\t[Spec.SpecMage]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_magicalsentry.jpg',\n\t[Spec.SpecRogue]: 'https://wow.zamimg.com/images/wow/icons/large/classicon_rogue.jpg',\n\t[Spec.SpecRetributionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_auraoflight.jpg',\n\t[Spec.SpecProtectionPaladin]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_devotionaura.jpg',\n\t[Spec.SpecHealingPriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_guardianspirit.jpg',\n\t[Spec.SpecShadowPriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadowwordpain.jpg',\n\t[Spec.SpecSmitePriest]: 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_holysmite.jpg',\n\t[Spec.SpecWarlock]: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg',\n\t[Spec.SpecWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_innerrage.jpg',\n\t[Spec.SpecProtectionWarrior]: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_defensivestance.jpg',\n\t[Spec.SpecDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n\t[Spec.SpecTankDeathknight]: 'https://wow.zamimg.com/images/wow/icons/medium/class_deathknight.jpg',\n};\n\nexport const talentTreeIcons: Record<Class, Array<string>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_starfall.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_racial_bearform.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_healingtouch.jpg',\n\t],\n\t[Class.ClassHunter]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_beasttaming.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_marksmanship.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_swiftstrike.jpg',\n\t],\n\t[Class.ClassMage]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_magicalsentry.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_fire_firebolt02.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_frost_frostbolt02.jpg',\n\t],\n\t[Class.ClassPaladin]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_devotionaura.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_auraoflight.jpg',\n\t],\n\t[Class.ClassPriest]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_powerinfusion.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_holy_holybolt.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowwordpain.jpg',\n\t],\n\t[Class.ClassRogue]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_rogue_eviscerate.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_backstab.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_stealth.jpg',\n\t],\n\t[Class.ClassShaman]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_lightning.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_shaman_stormstrike.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_magicimmunity.jpg',\n\t],\n\t[Class.ClassWarlock]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_deathcoil.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_metamorphosis.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_rainoffire.jpg',\n\t],\n\t[Class.ClassWarrior]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_savageblow.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/ability_warrior_innerrage.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/inv_shield_06.jpg',\n\t],\n\t[Class.ClassDeathknight]: [\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_bloodpresence.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_frostpresence.jpg',\n\t\t'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_unholypresence.jpg',\n\t],\n};\n\nexport const titleIcons: Record<Class|Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '/wotlk/assets/img/balance_druid_icon.png',\n\t[Spec.SpecElementalShaman]: '/wotlk/assets/img/elemental_shaman_icon.png',\n\t[Spec.SpecEnhancementShaman]: '/wotlk/assets/img/enhancement_shaman_icon.png',\n\t[Spec.SpecFeralDruid]: '/wotlk/assets/img/feral_druid_icon.png',\n\t[Spec.SpecFeralTankDruid]: '/wotlk/assets/img/feral_druid_tank_icon.png',\n\t[Spec.SpecHunter]: '/wotlk/assets/img/hunter_icon.png',\n\t[Spec.SpecMage]: '/wotlk/assets/img/mage_icon.png',\n\t[Spec.SpecRogue]: '/wotlk/assets/img/rogue_icon.png',\n\t[Spec.SpecRetributionPaladin]: '/wotlk/assets/img/retribution_icon.png',\n\t[Spec.SpecProtectionPaladin]: '/wotlk/assets/img/protection_paladin_icon.png',\n\t[Spec.SpecHealingPriest]: '/wotlk/assets/img/priest_icon.png',\n\t[Spec.SpecShadowPriest]: '/wotlk/assets/img/shadow_priest_icon.png',\n\t[Spec.SpecSmitePriest]: '/wotlk/assets/img/smite_priest_icon.png',\n\t[Spec.SpecWarlock]: '/wotlk/assets/img/warlock_icon.png',\n\t[Spec.SpecWarrior]: '/wotlk/assets/img/warrior_icon.png',\n\t[Spec.SpecProtectionWarrior]: '/wotlk/assets/img/protection_warrior_icon.png',\n\t[Spec.SpecDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n\t[Spec.SpecTankDeathknight]: '/wotlk/assets/img/death_knight_icon.png',\n};\n\nexport const raidSimIcon: string = '/wotlk/assets/img/raid_icon.png';\nexport const raidSimLabel: string = 'Full Raid Sim';\n\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char))));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTreeIcon(spec: Spec, talentsString: string): string {\n\tconst talentTreeIdx = getTalentTree(talentsString);\n\treturn talentTreeIcons[specToClass[spec]][talentTreeIdx];\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/SPEC/`);\nexport function getSpecSiteUrl(spec: Spec): string {\n\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\tspecString = camelToSnakeCase(specString); // 'balance_druid'\n\treturn specSiteUrlTemplate.toString().replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport type RotationUnion =\n\tBalanceDruidRotation |\n\tFeralDruidRotation |\n\tFeralTankDruidRotation |\n\tHunterRotation |\n\tMageRotation |\n\tElementalShamanRotation |\n\tEnhancementShamanRotation |\n\tRogueRotation |\n\tRetributionPaladinRotation |\n\tProtectionPaladinRotation |\n\tHealingPriestRotation |\n\tShadowPriestRotation |\n\tSmitePriestRotation |\n\tWarlockRotation |\n\tWarriorRotation |\n\tProtectionWarriorRotation |\n\tDeathknightRotation |\n\tTankDeathknightRotation;\nexport type SpecRotation<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidRotation :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanRotation :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanRotation :\n\tT extends Spec.SpecFeralDruid ? FeralDruidRotation :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidRotation :\n\tT extends Spec.SpecHunter ? HunterRotation :\n\tT extends Spec.SpecMage ? MageRotation :\n\tT extends Spec.SpecRogue ? RogueRotation :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinRotation :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinRotation :\n\tT extends Spec.SpecHealingPriest ? HealingPriestRotation :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestRotation :\n\tT extends Spec.SpecSmitePriest ? SmitePriestRotation :\n\tT extends Spec.SpecWarlock ? WarlockRotation :\n\tT extends Spec.SpecWarrior ? WarriorRotation :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorRotation :\n\tT extends Spec.SpecDeathknight ? DeathknightRotation :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightRotation :\n\tElementalShamanRotation; // Should never reach this case\n\nexport type TalentsUnion =\n\tDruidTalents |\n\tHunterTalents |\n\tMageTalents |\n\tRogueTalents |\n\tPaladinTalents |\n\tPriestTalents |\n\tShamanTalents |\n\tWarlockTalents |\n\tWarriorTalents |\n\tDeathknightTalents;\nexport type SpecTalents<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? DruidTalents :\n\tT extends Spec.SpecElementalShaman ? ShamanTalents :\n\tT extends Spec.SpecEnhancementShaman ? ShamanTalents :\n\tT extends Spec.SpecFeralDruid ? DruidTalents :\n\tT extends Spec.SpecFeralTankDruid ? DruidTalents :\n\tT extends Spec.SpecHunter ? HunterTalents :\n\tT extends Spec.SpecMage ? MageTalents :\n\tT extends Spec.SpecRogue ? RogueTalents :\n\tT extends Spec.SpecRetributionPaladin ? PaladinTalents :\n\tT extends Spec.SpecProtectionPaladin ? PaladinTalents :\n\tT extends Spec.SpecHealingPriest ? PriestTalents :\n\tT extends Spec.SpecShadowPriest ? PriestTalents :\n\tT extends Spec.SpecSmitePriest ? PriestTalents :\n\tT extends Spec.SpecWarlock ? WarlockTalents :\n\tT extends Spec.SpecWarrior ? WarriorTalents :\n\tT extends Spec.SpecProtectionWarrior ? WarriorTalents :\n\tT extends Spec.SpecDeathknight ? DeathknightTalents :\n\tT extends Spec.SpecTankDeathknight ? DeathknightTalents :\n\tShamanTalents; // Should never reach this case\n\nexport type SpecOptionsUnion =\n\tBalanceDruidOptions |\n\tElementalShamanOptions |\n\tEnhancementShamanOptions |\n\tFeralDruidOptions |\n\tFeralTankDruidOptions |\n\tHunterOptions |\n\tMageOptions |\n\tRogueOptions |\n\tRetributionPaladinOptions |\n\tProtectionPaladinOptions |\n\tHealingPriestOptions |\n\tShadowPriestOptions |\n\tSmitePriestOptions |\n\tWarlockOptions |\n\tWarriorOptions |\n\tProtectionWarriorOptions |\n\tDeathknightOptions |\n\tTankDeathknightOptions;\nexport type SpecOptions<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruidOptions :\n\tT extends Spec.SpecElementalShaman ? ElementalShamanOptions :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShamanOptions :\n\tT extends Spec.SpecFeralDruid ? FeralDruidOptions :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruidOptions :\n\tT extends Spec.SpecHunter ? HunterOptions :\n\tT extends Spec.SpecMage ? MageOptions :\n\tT extends Spec.SpecRogue ? RogueOptions :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladinOptions :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladinOptions :\n\tT extends Spec.SpecHealingPriest ? HealingPriestOptions :\n\tT extends Spec.SpecShadowPriest ? ShadowPriestOptions :\n\tT extends Spec.SpecSmitePriest ? SmitePriestOptions :\n\tT extends Spec.SpecWarlock ? WarlockOptions :\n\tT extends Spec.SpecWarrior ? WarriorOptions :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarriorOptions :\n\tT extends Spec.SpecDeathknight ? DeathknightOptions :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknightOptions :\n\tElementalShamanOptions; // Should never reach this case\n\nexport type SpecProtoUnion =\n\tBalanceDruid |\n\tElementalShaman |\n\tEnhancementShaman |\n\tFeralDruid |\n\tFeralTankDruid |\n\tHunter |\n\tMage |\n\tRogue |\n\tRetributionPaladin |\n\tProtectionPaladin |\n\tHealingPriest |\n\tShadowPriest |\n\tSmitePriest |\n\tWarlock |\n\tWarrior |\n\tProtectionWarrior |\n\tDeathknight |\n\tTankDeathknight;\nexport type SpecProto<T extends Spec> =\n\tT extends Spec.SpecBalanceDruid ? BalanceDruid :\n\tT extends Spec.SpecElementalShaman ? ElementalShaman :\n\tT extends Spec.SpecEnhancementShaman ? EnhancementShaman :\n\tT extends Spec.SpecFeralDruid ? FeralDruid :\n\tT extends Spec.SpecFeralTankDruid ? FeralTankDruid :\n\tT extends Spec.SpecHunter ? Hunter :\n\tT extends Spec.SpecMage ? Mage :\n\tT extends Spec.SpecRogue ? Rogue :\n\tT extends Spec.SpecRetributionPaladin ? RetributionPaladin :\n\tT extends Spec.SpecProtectionPaladin ? ProtectionPaladin :\n\tT extends Spec.SpecHealingPriest ? HealingPriest :\n\tT extends Spec.SpecShadowPriest ? ShadowPriest :\n\tT extends Spec.SpecSmitePriest ? SmitePriest :\n\tT extends Spec.SpecWarlock ? Warlock :\n\tT extends Spec.SpecWarrior ? Warrior :\n\tT extends Spec.SpecProtectionWarrior ? ProtectionWarrior :\n\tT extends Spec.SpecDeathknight ? Deathknight :\n\tT extends Spec.SpecTankDeathknight ? TankDeathknight :\n\tElementalShaman; // Should never reach this case\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n\trotationCreate: () => SpecRotation<SpecType>;\n\trotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n\trotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n\trotationToJson: (a: SpecRotation<SpecType>) => any;\n\trotationFromJson: (obj: any) => SpecRotation<SpecType>;\n\trotationFromPlayer: (player: Player) => SpecRotation<SpecType>;\n\n\ttalentsCreate: () => SpecTalents<SpecType>;\n\ttalentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n\ttalentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n\ttalentsToJson: (a: SpecTalents<SpecType>) => any;\n\ttalentsFromJson: (obj: any) => SpecTalents<SpecType>;\n\ttalentsFromPlayer: (player: Player) => SpecTalents<SpecType>;\n\n\toptionsCreate: () => SpecOptions<SpecType>;\n\toptionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n\toptionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n\toptionsToJson: (a: SpecOptions<SpecType>) => any;\n\toptionsFromJson: (obj: any) => SpecOptions<SpecType>;\n\toptionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n\t[Spec.SpecBalanceDruid]: {\n\t\trotationCreate: () => BalanceDruidRotation.create(),\n\t\trotationEquals: (a, b) => BalanceDruidRotation.equals(a as BalanceDruidRotation, b as BalanceDruidRotation),\n\t\trotationCopy: (a) => BalanceDruidRotation.clone(a as BalanceDruidRotation),\n\t\trotationToJson: (a) => BalanceDruidRotation.toJson(a as BalanceDruidRotation),\n\t\trotationFromJson: (obj) => BalanceDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.rotation || BalanceDruidRotation.create()\n\t\t\t: BalanceDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => BalanceDruidOptions.create(),\n\t\toptionsEquals: (a, b) => BalanceDruidOptions.equals(a as BalanceDruidOptions, b as BalanceDruidOptions),\n\t\toptionsCopy: (a) => BalanceDruidOptions.clone(a as BalanceDruidOptions),\n\t\toptionsToJson: (a) => BalanceDruidOptions.toJson(a as BalanceDruidOptions),\n\t\toptionsFromJson: (obj) => BalanceDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'balanceDruid'\n\t\t\t? player.spec.balanceDruid.options || BalanceDruidOptions.create()\n\t\t\t: BalanceDruidOptions.create(),\n\t},\n\t[Spec.SpecElementalShaman]: {\n\t\trotationCreate: () => ElementalShamanRotation.create(),\n\t\trotationEquals: (a, b) => ElementalShamanRotation.equals(a as ElementalShamanRotation, b as ElementalShamanRotation),\n\t\trotationCopy: (a) => ElementalShamanRotation.clone(a as ElementalShamanRotation),\n\t\trotationToJson: (a) => ElementalShamanRotation.toJson(a as ElementalShamanRotation),\n\t\trotationFromJson: (obj) => ElementalShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.rotation || ElementalShamanRotation.create()\n\t\t\t: ElementalShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.talents || ShamanTalents.create()\n\t\t\t: ShamanTalents.create(),\n\n\t\toptionsCreate: () => ElementalShamanOptions.create(),\n\t\toptionsEquals: (a, b) => ElementalShamanOptions.equals(a as ElementalShamanOptions, b as ElementalShamanOptions),\n\t\toptionsCopy: (a) => ElementalShamanOptions.clone(a as ElementalShamanOptions),\n\t\toptionsToJson: (a) => ElementalShamanOptions.toJson(a as ElementalShamanOptions),\n\t\toptionsFromJson: (obj) => ElementalShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'elementalShaman'\n\t\t\t? player.spec.elementalShaman.options || ElementalShamanOptions.create()\n\t\t\t: ElementalShamanOptions.create(),\n\t},\n\t[Spec.SpecEnhancementShaman]: {\n\t\trotationCreate: () => EnhancementShamanRotation.create(),\n\t\trotationEquals: (a, b) => EnhancementShamanRotation.equals(a as EnhancementShamanRotation, b as EnhancementShamanRotation),\n\t\trotationCopy: (a) => EnhancementShamanRotation.clone(a as EnhancementShamanRotation),\n\t\trotationToJson: (a) => EnhancementShamanRotation.toJson(a as EnhancementShamanRotation),\n\t\trotationFromJson: (obj) => EnhancementShamanRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.rotation || EnhancementShamanRotation.create()\n\t\t\t: EnhancementShamanRotation.create(),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: (a) => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: (a) => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: (obj) => ShamanTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.talents || ShamanTalents.create()\n\t\t\t: ShamanTalents.create(),\n\n\t\toptionsCreate: () => EnhancementShamanOptions.create(),\n\t\toptionsEquals: (a, b) => EnhancementShamanOptions.equals(a as EnhancementShamanOptions, b as EnhancementShamanOptions),\n\t\toptionsCopy: (a) => EnhancementShamanOptions.clone(a as EnhancementShamanOptions),\n\t\toptionsToJson: (a) => EnhancementShamanOptions.toJson(a as EnhancementShamanOptions),\n\t\toptionsFromJson: (obj) => EnhancementShamanOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'enhancementShaman'\n\t\t\t? player.spec.enhancementShaman.options || EnhancementShamanOptions.create()\n\t\t\t: EnhancementShamanOptions.create(),\n\t},\n\t[Spec.SpecFeralDruid]: {\n\t\trotationCreate: () => FeralDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralDruidRotation.equals(a as FeralDruidRotation, b as FeralDruidRotation),\n\t\trotationCopy: (a) => FeralDruidRotation.clone(a as FeralDruidRotation),\n\t\trotationToJson: (a) => FeralDruidRotation.toJson(a as FeralDruidRotation),\n\t\trotationFromJson: (obj) => FeralDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.rotation || FeralDruidRotation.create()\n\t\t\t: FeralDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => FeralDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralDruidOptions.equals(a as FeralDruidOptions, b as FeralDruidOptions),\n\t\toptionsCopy: (a) => FeralDruidOptions.clone(a as FeralDruidOptions),\n\t\toptionsToJson: (a) => FeralDruidOptions.toJson(a as FeralDruidOptions),\n\t\toptionsFromJson: (obj) => FeralDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralDruid'\n\t\t\t? player.spec.feralDruid.options || FeralDruidOptions.create()\n\t\t\t: FeralDruidOptions.create(),\n\t},\n\t[Spec.SpecFeralTankDruid]: {\n\t\trotationCreate: () => FeralTankDruidRotation.create(),\n\t\trotationEquals: (a, b) => FeralTankDruidRotation.equals(a as FeralTankDruidRotation, b as FeralTankDruidRotation),\n\t\trotationCopy: (a) => FeralTankDruidRotation.clone(a as FeralTankDruidRotation),\n\t\trotationToJson: (a) => FeralTankDruidRotation.toJson(a as FeralTankDruidRotation),\n\t\trotationFromJson: (obj) => FeralTankDruidRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.rotation || FeralTankDruidRotation.create()\n\t\t\t: FeralTankDruidRotation.create(),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: (a) => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: (a) => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: (obj) => DruidTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.talents || DruidTalents.create()\n\t\t\t: DruidTalents.create(),\n\n\t\toptionsCreate: () => FeralTankDruidOptions.create(),\n\t\toptionsEquals: (a, b) => FeralTankDruidOptions.equals(a as FeralTankDruidOptions, b as FeralTankDruidOptions),\n\t\toptionsCopy: (a) => FeralTankDruidOptions.clone(a as FeralTankDruidOptions),\n\t\toptionsToJson: (a) => FeralTankDruidOptions.toJson(a as FeralTankDruidOptions),\n\t\toptionsFromJson: (obj) => FeralTankDruidOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'feralTankDruid'\n\t\t\t? player.spec.feralTankDruid.options || FeralTankDruidOptions.create()\n\t\t\t: FeralTankDruidOptions.create(),\n\t},\n\t[Spec.SpecHunter]: {\n\t\trotationCreate: () => HunterRotation.create(),\n\t\trotationEquals: (a, b) => HunterRotation.equals(a as HunterRotation, b as HunterRotation),\n\t\trotationCopy: (a) => HunterRotation.clone(a as HunterRotation),\n\t\trotationToJson: (a) => HunterRotation.toJson(a as HunterRotation),\n\t\trotationFromJson: (obj) => HunterRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.rotation || HunterRotation.create()\n\t\t\t: HunterRotation.create(),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: (a) => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: (a) => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: (obj) => HunterTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.talents || HunterTalents.create()\n\t\t\t: HunterTalents.create(),\n\n\t\toptionsCreate: () => HunterOptions.create(),\n\t\toptionsEquals: (a, b) => HunterOptions.equals(a as HunterOptions, b as HunterOptions),\n\t\toptionsCopy: (a) => HunterOptions.clone(a as HunterOptions),\n\t\toptionsToJson: (a) => HunterOptions.toJson(a as HunterOptions),\n\t\toptionsFromJson: (obj) => HunterOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'hunter'\n\t\t\t? player.spec.hunter.options || HunterOptions.create()\n\t\t\t: HunterOptions.create(),\n\t},\n\t[Spec.SpecMage]: {\n\t\trotationCreate: () => MageRotation.create(),\n\t\trotationEquals: (a, b) => MageRotation.equals(a as MageRotation, b as MageRotation),\n\t\trotationCopy: (a) => MageRotation.clone(a as MageRotation),\n\t\trotationToJson: (a) => MageRotation.toJson(a as MageRotation),\n\t\trotationFromJson: (obj) => MageRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.rotation || MageRotation.create()\n\t\t\t: MageRotation.create(),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: (a) => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: (a) => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: (obj) => MageTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.talents || MageTalents.create()\n\t\t\t: MageTalents.create(),\n\n\t\toptionsCreate: () => MageOptions.create(),\n\t\toptionsEquals: (a, b) => MageOptions.equals(a as MageOptions, b as MageOptions),\n\t\toptionsCopy: (a) => MageOptions.clone(a as MageOptions),\n\t\toptionsToJson: (a) => MageOptions.toJson(a as MageOptions),\n\t\toptionsFromJson: (obj) => MageOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'mage'\n\t\t\t? player.spec.mage.options || MageOptions.create()\n\t\t\t: MageOptions.create(),\n\t},\n\t[Spec.SpecRetributionPaladin]: {\n\t\trotationCreate: () => RetributionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => RetributionPaladinRotation.equals(a as RetributionPaladinRotation, b as RetributionPaladinRotation),\n\t\trotationCopy: (a) => RetributionPaladinRotation.clone(a as RetributionPaladinRotation),\n\t\trotationToJson: (a) => RetributionPaladinRotation.toJson(a as RetributionPaladinRotation),\n\t\trotationFromJson: (obj) => RetributionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.rotation || RetributionPaladinRotation.create()\n\t\t\t: RetributionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.talents || PaladinTalents.create()\n\t\t\t: PaladinTalents.create(),\n\n\t\toptionsCreate: () => RetributionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => RetributionPaladinOptions.equals(a as RetributionPaladinOptions, b as RetributionPaladinOptions),\n\t\toptionsCopy: (a) => RetributionPaladinOptions.clone(a as RetributionPaladinOptions),\n\t\toptionsToJson: (a) => RetributionPaladinOptions.toJson(a as RetributionPaladinOptions),\n\t\toptionsFromJson: (obj) => RetributionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'retributionPaladin'\n\t\t\t? player.spec.retributionPaladin.options || RetributionPaladinOptions.create()\n\t\t\t: RetributionPaladinOptions.create(),\n\t},\n\t[Spec.SpecProtectionPaladin]: {\n\t\trotationCreate: () => ProtectionPaladinRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionPaladinRotation.equals(a as ProtectionPaladinRotation, b as ProtectionPaladinRotation),\n\t\trotationCopy: (a) => ProtectionPaladinRotation.clone(a as ProtectionPaladinRotation),\n\t\trotationToJson: (a) => ProtectionPaladinRotation.toJson(a as ProtectionPaladinRotation),\n\t\trotationFromJson: (obj) => ProtectionPaladinRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.rotation || ProtectionPaladinRotation.create()\n\t\t\t: ProtectionPaladinRotation.create(),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: (a) => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: (a) => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: (obj) => PaladinTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.talents || PaladinTalents.create()\n\t\t\t: PaladinTalents.create(),\n\n\t\toptionsCreate: () => ProtectionPaladinOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionPaladinOptions.equals(a as ProtectionPaladinOptions, b as ProtectionPaladinOptions),\n\t\toptionsCopy: (a) => ProtectionPaladinOptions.clone(a as ProtectionPaladinOptions),\n\t\toptionsToJson: (a) => ProtectionPaladinOptions.toJson(a as ProtectionPaladinOptions),\n\t\toptionsFromJson: (obj) => ProtectionPaladinOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionPaladin'\n\t\t\t? player.spec.protectionPaladin.options || ProtectionPaladinOptions.create()\n\t\t\t: ProtectionPaladinOptions.create(),\n\t},\n\t[Spec.SpecRogue]: {\n\t\trotationCreate: () => RogueRotation.create(),\n\t\trotationEquals: (a, b) => RogueRotation.equals(a as RogueRotation, b as RogueRotation),\n\t\trotationCopy: (a) => RogueRotation.clone(a as RogueRotation),\n\t\trotationToJson: (a) => RogueRotation.toJson(a as RogueRotation),\n\t\trotationFromJson: (obj) => RogueRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.rotation || RogueRotation.create()\n\t\t\t: RogueRotation.create(),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: (a) => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: (a) => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: (obj) => RogueTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.talents || RogueTalents.create()\n\t\t\t: RogueTalents.create(),\n\n\t\toptionsCreate: () => RogueOptions.create(),\n\t\toptionsEquals: (a, b) => RogueOptions.equals(a as RogueOptions, b as RogueOptions),\n\t\toptionsCopy: (a) => RogueOptions.clone(a as RogueOptions),\n\t\toptionsToJson: (a) => RogueOptions.toJson(a as RogueOptions),\n\t\toptionsFromJson: (obj) => RogueOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'rogue'\n\t\t\t? player.spec.rogue.options || RogueOptions.create()\n\t\t\t: RogueOptions.create(),\n\t},\n\t[Spec.SpecHealingPriest]: {\n\t\trotationCreate: () => HealingPriestRotation.create(),\n\t\trotationEquals: (a, b) => HealingPriestRotation.equals(a as HealingPriestRotation, b as HealingPriestRotation),\n\t\trotationCopy: (a) => HealingPriestRotation.clone(a as HealingPriestRotation),\n\t\trotationToJson: (a) => HealingPriestRotation.toJson(a as HealingPriestRotation),\n\t\trotationFromJson: (obj) => HealingPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.rotation || HealingPriestRotation.create()\n\t\t\t: HealingPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => HealingPriestOptions.create(),\n\t\toptionsEquals: (a, b) => HealingPriestOptions.equals(a as HealingPriestOptions, b as HealingPriestOptions),\n\t\toptionsCopy: (a) => HealingPriestOptions.clone(a as HealingPriestOptions),\n\t\toptionsToJson: (a) => HealingPriestOptions.toJson(a as HealingPriestOptions),\n\t\toptionsFromJson: (obj) => HealingPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'healingPriest'\n\t\t\t? player.spec.healingPriest.options || HealingPriestOptions.create()\n\t\t\t: HealingPriestOptions.create(),\n\t},\n\t[Spec.SpecShadowPriest]: {\n\t\trotationCreate: () => ShadowPriestRotation.create(),\n\t\trotationEquals: (a, b) => ShadowPriestRotation.equals(a as ShadowPriestRotation, b as ShadowPriestRotation),\n\t\trotationCopy: (a) => ShadowPriestRotation.clone(a as ShadowPriestRotation),\n\t\trotationToJson: (a) => ShadowPriestRotation.toJson(a as ShadowPriestRotation),\n\t\trotationFromJson: (obj) => ShadowPriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.rotation || ShadowPriestRotation.create()\n\t\t\t: ShadowPriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => ShadowPriestOptions.create(),\n\t\toptionsEquals: (a, b) => ShadowPriestOptions.equals(a as ShadowPriestOptions, b as ShadowPriestOptions),\n\t\toptionsCopy: (a) => ShadowPriestOptions.clone(a as ShadowPriestOptions),\n\t\toptionsToJson: (a) => ShadowPriestOptions.toJson(a as ShadowPriestOptions),\n\t\toptionsFromJson: (obj) => ShadowPriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'shadowPriest'\n\t\t\t? player.spec.shadowPriest.options || ShadowPriestOptions.create()\n\t\t\t: ShadowPriestOptions.create(),\n\t},\n\t[Spec.SpecSmitePriest]: {\n\t\trotationCreate: () => SmitePriestRotation.create(),\n\t\trotationEquals: (a, b) => SmitePriestRotation.equals(a as SmitePriestRotation, b as SmitePriestRotation),\n\t\trotationCopy: (a) => SmitePriestRotation.clone(a as SmitePriestRotation),\n\t\trotationToJson: (a) => SmitePriestRotation.toJson(a as SmitePriestRotation),\n\t\trotationFromJson: (obj) => SmitePriestRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.rotation || SmitePriestRotation.create()\n\t\t\t: SmitePriestRotation.create(),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: (a) => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: (a) => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: (obj) => PriestTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.talents || PriestTalents.create()\n\t\t\t: PriestTalents.create(),\n\n\t\toptionsCreate: () => SmitePriestOptions.create(),\n\t\toptionsEquals: (a, b) => SmitePriestOptions.equals(a as SmitePriestOptions, b as SmitePriestOptions),\n\t\toptionsCopy: (a) => SmitePriestOptions.clone(a as SmitePriestOptions),\n\t\toptionsToJson: (a) => SmitePriestOptions.toJson(a as SmitePriestOptions),\n\t\toptionsFromJson: (obj) => SmitePriestOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'smitePriest'\n\t\t\t? player.spec.smitePriest.options || SmitePriestOptions.create()\n\t\t\t: SmitePriestOptions.create(),\n\t},\n\t[Spec.SpecWarlock]: {\n\t\trotationCreate: () => WarlockRotation.create(),\n\t\trotationEquals: (a, b) => WarlockRotation.equals(a as WarlockRotation, b as WarlockRotation),\n\t\trotationCopy: (a) => WarlockRotation.clone(a as WarlockRotation),\n\t\trotationToJson: (a) => WarlockRotation.toJson(a as WarlockRotation),\n\t\trotationFromJson: (obj) => WarlockRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.rotation || WarlockRotation.create()\n\t\t\t: WarlockRotation.create(),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: (a) => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: (a) => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: (obj) => WarlockTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.talents || WarlockTalents.create()\n\t\t\t: WarlockTalents.create(),\n\n\t\toptionsCreate: () => WarlockOptions.create(),\n\t\toptionsEquals: (a, b) => WarlockOptions.equals(a as WarlockOptions, b as WarlockOptions),\n\t\toptionsCopy: (a) => WarlockOptions.clone(a as WarlockOptions),\n\t\toptionsToJson: (a) => WarlockOptions.toJson(a as WarlockOptions),\n\t\toptionsFromJson: (obj) => WarlockOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warlock'\n\t\t\t? player.spec.warlock.options || WarlockOptions.create()\n\t\t\t: WarlockOptions.create(),\n\t},\n\t[Spec.SpecWarrior]: {\n\t\trotationCreate: () => WarriorRotation.create(),\n\t\trotationEquals: (a, b) => WarriorRotation.equals(a as WarriorRotation, b as WarriorRotation),\n\t\trotationCopy: (a) => WarriorRotation.clone(a as WarriorRotation),\n\t\trotationToJson: (a) => WarriorRotation.toJson(a as WarriorRotation),\n\t\trotationFromJson: (obj) => WarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.rotation || WarriorRotation.create()\n\t\t\t: WarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.talents || WarriorTalents.create()\n\t\t\t: WarriorTalents.create(),\n\n\t\toptionsCreate: () => WarriorOptions.create(),\n\t\toptionsEquals: (a, b) => WarriorOptions.equals(a as WarriorOptions, b as WarriorOptions),\n\t\toptionsCopy: (a) => WarriorOptions.clone(a as WarriorOptions),\n\t\toptionsToJson: (a) => WarriorOptions.toJson(a as WarriorOptions),\n\t\toptionsFromJson: (obj) => WarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'warrior'\n\t\t\t? player.spec.warrior.options || WarriorOptions.create()\n\t\t\t: WarriorOptions.create(),\n\t},\n\t[Spec.SpecProtectionWarrior]: {\n\t\trotationCreate: () => ProtectionWarriorRotation.create(),\n\t\trotationEquals: (a, b) => ProtectionWarriorRotation.equals(a as ProtectionWarriorRotation, b as ProtectionWarriorRotation),\n\t\trotationCopy: (a) => ProtectionWarriorRotation.clone(a as ProtectionWarriorRotation),\n\t\trotationToJson: (a) => ProtectionWarriorRotation.toJson(a as ProtectionWarriorRotation),\n\t\trotationFromJson: (obj) => ProtectionWarriorRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.rotation || ProtectionWarriorRotation.create()\n\t\t\t: ProtectionWarriorRotation.create(),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: (a) => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: (a) => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: (obj) => WarriorTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.talents || WarriorTalents.create()\n\t\t\t: WarriorTalents.create(),\n\n\t\toptionsCreate: () => ProtectionWarriorOptions.create(),\n\t\toptionsEquals: (a, b) => ProtectionWarriorOptions.equals(a as ProtectionWarriorOptions, b as ProtectionWarriorOptions),\n\t\toptionsCopy: (a) => ProtectionWarriorOptions.clone(a as ProtectionWarriorOptions),\n\t\toptionsToJson: (a) => ProtectionWarriorOptions.toJson(a as ProtectionWarriorOptions),\n\t\toptionsFromJson: (obj) => ProtectionWarriorOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'protectionWarrior'\n\t\t\t? player.spec.protectionWarrior.options || ProtectionWarriorOptions.create()\n\t\t\t: ProtectionWarriorOptions.create(),\n\t},\n\t[Spec.SpecDeathknight]: {\n\t\trotationCreate: () => DeathknightRotation.create(),\n\t\trotationEquals: (a, b) => DeathknightRotation.equals(a as DeathknightRotation, b as DeathknightRotation),\n\t\trotationCopy: (a) => DeathknightRotation.clone(a as DeathknightRotation),\n\t\trotationToJson: (a) => DeathknightRotation.toJson(a as DeathknightRotation),\n\t\trotationFromJson: (obj) => DeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.rotation || DeathknightRotation.create()\n\t\t\t: DeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.talents || DeathknightTalents.create()\n\t\t\t: DeathknightTalents.create(),\n\n\t\toptionsCreate: () => DeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => DeathknightOptions.equals(a as DeathknightOptions, b as DeathknightOptions),\n\t\toptionsCopy: (a) => DeathknightOptions.clone(a as DeathknightOptions),\n\t\toptionsToJson: (a) => DeathknightOptions.toJson(a as DeathknightOptions),\n\t\toptionsFromJson: (obj) => DeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'deathknight'\n\t\t\t? player.spec.deathknight.options || DeathknightOptions.create()\n\t\t\t: DeathknightOptions.create(),\n\t},\n\t[Spec.SpecTankDeathknight]: {\n\t\trotationCreate: () => TankDeathknightRotation.create(),\n\t\trotationEquals: (a, b) => TankDeathknightRotation.equals(a as TankDeathknightRotation, b as TankDeathknightRotation),\n\t\trotationCopy: (a) => TankDeathknightRotation.clone(a as TankDeathknightRotation),\n\t\trotationToJson: (a) => TankDeathknightRotation.toJson(a as TankDeathknightRotation),\n\t\trotationFromJson: (obj) => TankDeathknightRotation.fromJson(obj),\n\t\trotationFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.rotation || TankDeathknightRotation.create()\n\t\t\t: TankDeathknightRotation.create(),\n\n\t\ttalentsCreate: () => DeathknightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathknightTalents.equals(a as DeathknightTalents, b as DeathknightTalents),\n\t\ttalentsCopy: (a) => DeathknightTalents.clone(a as DeathknightTalents),\n\t\ttalentsToJson: (a) => DeathknightTalents.toJson(a as DeathknightTalents),\n\t\ttalentsFromJson: (obj) => DeathknightTalents.fromJson(obj),\n\t\ttalentsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.talents || DeathknightTalents.create()\n\t\t\t: DeathknightTalents.create(),\n\n\t\toptionsCreate: () => TankDeathknightOptions.create(),\n\t\toptionsEquals: (a, b) => TankDeathknightOptions.equals(a as TankDeathknightOptions, b as TankDeathknightOptions),\n\t\toptionsCopy: (a) => TankDeathknightOptions.clone(a as TankDeathknightOptions),\n\t\toptionsToJson: (a) => TankDeathknightOptions.toJson(a as TankDeathknightOptions),\n\t\toptionsFromJson: (obj) => TankDeathknightOptions.fromJson(obj),\n\t\toptionsFromPlayer: (player) => player.spec.oneofKind == 'tankDeathknight'\n\t\t\t? player.spec.tankDeathknight.options || TankDeathknightOptions.create()\n\t\t\t: TankDeathknightOptions.create(),\n\t},\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n\t[Race.RaceUnknown]: Faction.Unknown,\n\t[Race.RaceBloodElf]: Faction.Horde,\n\t[Race.RaceDraenei]: Faction.Alliance,\n\t[Race.RaceDwarf]: Faction.Alliance,\n\t[Race.RaceGnome]: Faction.Alliance,\n\t[Race.RaceHuman]: Faction.Alliance,\n\t[Race.RaceNightElf]: Faction.Alliance,\n\t[Race.RaceOrc]: Faction.Horde,\n\t[Race.RaceTauren]: Faction.Horde,\n\t[Race.RaceTroll]: Faction.Horde,\n\t[Race.RaceUndead]: Faction.Horde,\n};\n\nexport const specToClass: Record<Spec, Class> = {\n\t[Spec.SpecBalanceDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralDruid]: Class.ClassDruid,\n\t[Spec.SpecFeralTankDruid]: Class.ClassDruid,\n\t[Spec.SpecHunter]: Class.ClassHunter,\n\t[Spec.SpecMage]: Class.ClassMage,\n\t[Spec.SpecRogue]: Class.ClassRogue,\n\t[Spec.SpecRetributionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecProtectionPaladin]: Class.ClassPaladin,\n\t[Spec.SpecHealingPriest]: Class.ClassPriest,\n\t[Spec.SpecShadowPriest]: Class.ClassPriest,\n\t[Spec.SpecSmitePriest]: Class.ClassPriest,\n\t[Spec.SpecElementalShaman]: Class.ClassShaman,\n\t[Spec.SpecEnhancementShaman]: Class.ClassShaman,\n\t[Spec.SpecWarlock]: Class.ClassWarlock,\n\t[Spec.SpecWarrior]: Class.ClassWarrior,\n\t[Spec.SpecProtectionWarrior]: Class.ClassWarrior,\n\t[Spec.SpecDeathknight]: Class.ClassDeathknight,\n\t[Spec.SpecTankDeathknight]: Class.ClassDeathknight,\n};\n\nconst druidRaces = [\n\tRace.RaceNightElf,\n\tRace.RaceTauren,\n];\nconst hunterRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst mageRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst paladinRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n];\nconst priestRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst rogueRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst shamanRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n];\nconst warlockRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceOrc,\n\tRace.RaceUndead,\n];\nconst warriorRaces = [\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\nconst deathKnightRaces = [\n\tRace.RaceBloodElf,\n\tRace.RaceDraenei,\n\tRace.RaceDwarf,\n\tRace.RaceGnome,\n\tRace.RaceHuman,\n\tRace.RaceNightElf,\n\tRace.RaceOrc,\n\tRace.RaceTauren,\n\tRace.RaceTroll,\n\tRace.RaceUndead,\n];\n\nexport const specToEligibleRaces: Record<Spec, Array<Race>> = {\n\t[Spec.SpecBalanceDruid]: druidRaces,\n\t[Spec.SpecElementalShaman]: shamanRaces,\n\t[Spec.SpecEnhancementShaman]: shamanRaces,\n\t[Spec.SpecFeralDruid]: druidRaces,\n\t[Spec.SpecFeralTankDruid]: druidRaces,\n\t[Spec.SpecHunter]: hunterRaces,\n\t[Spec.SpecMage]: mageRaces,\n\t[Spec.SpecRetributionPaladin]: paladinRaces,\n\t[Spec.SpecProtectionPaladin]: paladinRaces,\n\t[Spec.SpecRogue]: rogueRaces,\n\t[Spec.SpecHealingPriest]: priestRaces,\n\t[Spec.SpecShadowPriest]: priestRaces,\n\t[Spec.SpecSmitePriest]: priestRaces,\n\t[Spec.SpecWarlock]: warlockRaces,\n\t[Spec.SpecWarrior]: warriorRaces,\n\t[Spec.SpecProtectionWarrior]: warriorRaces,\n\t[Spec.SpecDeathknight]: deathKnightRaces,\n\t[Spec.SpecTankDeathknight]: deathKnightRaces,\n};\n\n// Specs that can dual wield. This could be based on class, except that\n// Enhancement Shaman learn dual wield from a talent.\nconst dualWieldSpecs: Array<Spec> = [\n\tSpec.SpecEnhancementShaman,\n\tSpec.SpecHunter,\n\tSpec.SpecRogue,\n\tSpec.SpecWarrior,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecDeathknight,\n\tSpec.SpecTankDeathknight,\n];\nexport function isDualWieldSpec(spec: Spec): boolean {\n\treturn dualWieldSpecs.includes(spec);\n}\n\nconst tankSpecs: Array<Spec> = [\n\tSpec.SpecFeralTankDruid,\n\tSpec.SpecProtectionPaladin,\n\tSpec.SpecProtectionWarrior,\n\tSpec.SpecTankDeathknight,\n];\nexport function isTankSpec(spec: Spec): boolean {\n\treturn tankSpecs.includes(spec);\n}\n\nconst healingSpecs: Array<Spec> = [\n\tSpec.SpecHealingPriest,\n];\nexport function isHealingSpec(spec: Spec): boolean {\n\treturn healingSpecs.includes(spec);\n}\n\n// Prefixes used for storing browser data for each site. Even if a Spec is\n// renamed, DO NOT change these values or people will lose their saved data.\nexport const specToLocalStorageKey: Record<Spec, string> = {\n\t[Spec.SpecBalanceDruid]: '__wotlk_balance_druid',\n\t[Spec.SpecElementalShaman]: '__wotlk_elemental_shaman',\n\t[Spec.SpecEnhancementShaman]: '__wotlk_enhacement_shaman',\n\t[Spec.SpecFeralDruid]: '__wotlk_feral_druid',\n\t[Spec.SpecFeralTankDruid]: '__wotlk_feral_tank_druid',\n\t[Spec.SpecHunter]: '__wotlk_hunter',\n\t[Spec.SpecMage]: '__wotlk_mage',\n\t[Spec.SpecRetributionPaladin]: '__wotlk_retribution_paladin',\n\t[Spec.SpecProtectionPaladin]: '__wotlk_protection_paladin',\n\t[Spec.SpecRogue]: '__wotlk_rogue',\n\t[Spec.SpecHealingPriest]: '__wotlk_healing_priest',\n\t[Spec.SpecShadowPriest]: '__wotlk_shadow_priest',\n\t[Spec.SpecSmitePriest]: '__wotlk_smite_priest',\n\t[Spec.SpecWarlock]: '__wotlk_warlock',\n\t[Spec.SpecWarrior]: '__wotlk_warrior',\n\t[Spec.SpecProtectionWarrior]: '__wotlk_protection_warrior',\n\t[Spec.SpecDeathknight]: '__wotlk_deathknight',\n\t[Spec.SpecTankDeathknight]: '__wotlk_tank_deathknight',\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpecProto<SpecType extends Spec>(\n\tspec: Spec,\n\tplayer: Player,\n\trotation: SpecRotation<SpecType>,\n\ttalents: SpecTalents<SpecType>,\n\tspecOptions: SpecOptions<SpecType>): Player {\n\tconst copy = Player.clone(player);\n\n\tswitch (spec) {\n\t\tcase Spec.SpecBalanceDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'balanceDruid',\n\t\t\t\tbalanceDruid: BalanceDruid.create({\n\t\t\t\t\trotation: rotation as BalanceDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as BalanceDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecElementalShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'elementalShaman',\n\t\t\t\telementalShaman: ElementalShaman.create({\n\t\t\t\t\trotation: rotation as ElementalShamanRotation,\n\t\t\t\t\ttalents: talents as ShamanTalents,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecEnhancementShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'enhancementShaman',\n\t\t\t\tenhancementShaman: EnhancementShaman.create({\n\t\t\t\t\trotation: rotation as EnhancementShamanRotation,\n\t\t\t\t\ttalents: talents as ShamanTalents,\n\t\t\t\t\toptions: specOptions as ElementalShamanOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralDruid',\n\t\t\t\tferalDruid: FeralDruid.create({\n\t\t\t\t\trotation: rotation as FeralDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as FeralDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralTankDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralTankDruid',\n\t\t\t\tferalTankDruid: FeralTankDruid.create({\n\t\t\t\t\trotation: rotation as FeralTankDruidRotation,\n\t\t\t\t\ttalents: talents as DruidTalents,\n\t\t\t\t\toptions: specOptions as FeralTankDruidOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'hunter',\n\t\t\t\thunter: Hunter.create({\n\t\t\t\t\trotation: rotation as HunterRotation,\n\t\t\t\t\ttalents: talents as HunterTalents,\n\t\t\t\t\toptions: specOptions as HunterOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'mage',\n\t\t\t\tmage: Mage.create({\n\t\t\t\t\trotation: rotation as MageRotation,\n\t\t\t\t\ttalents: talents as MageTalents,\n\t\t\t\t\toptions: specOptions as MageOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRetributionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'retributionPaladin',\n\t\t\t\tretributionPaladin: RetributionPaladin.create({\n\t\t\t\t\trotation: rotation as RetributionPaladinRotation,\n\t\t\t\t\ttalents: talents as PaladinTalents,\n\t\t\t\t\toptions: specOptions as RetributionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionPaladin',\n\t\t\t\tprotectionPaladin: ProtectionPaladin.create({\n\t\t\t\t\trotation: rotation as ProtectionPaladinRotation,\n\t\t\t\t\ttalents: talents as PaladinTalents,\n\t\t\t\t\toptions: specOptions as ProtectionPaladinOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'rogue',\n\t\t\t\trogue: Rogue.create({\n\t\t\t\t\trotation: rotation as RogueRotation,\n\t\t\t\t\ttalents: talents as RogueTalents,\n\t\t\t\t\toptions: specOptions as RogueOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHealingPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'healingPriest',\n\t\t\t\thealingPriest: HealingPriest.create({\n\t\t\t\t\trotation: rotation as HealingPriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as HealingPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecShadowPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'shadowPriest',\n\t\t\t\tshadowPriest: ShadowPriest.create({\n\t\t\t\t\trotation: rotation as ShadowPriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as ShadowPriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSmitePriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'smitePriest',\n\t\t\t\tsmitePriest: SmitePriest.create({\n\t\t\t\t\trotation: rotation as SmitePriestRotation,\n\t\t\t\t\ttalents: talents as PriestTalents,\n\t\t\t\t\toptions: specOptions as SmitePriestOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warlock',\n\t\t\t\twarlock: Warlock.create({\n\t\t\t\t\trotation: rotation as WarlockRotation,\n\t\t\t\t\ttalents: talents as WarlockTalents,\n\t\t\t\t\toptions: specOptions as WarlockOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'warrior',\n\t\t\t\twarrior: Warrior.create({\n\t\t\t\t\trotation: rotation as WarriorRotation,\n\t\t\t\t\ttalents: talents as WarriorTalents,\n\t\t\t\t\toptions: specOptions as WarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionWarrior',\n\t\t\t\tprotectionWarrior: ProtectionWarrior.create({\n\t\t\t\t\trotation: rotation as ProtectionWarriorRotation,\n\t\t\t\t\ttalents: talents as WarriorTalents,\n\t\t\t\t\toptions: specOptions as ProtectionWarriorOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'deathknight',\n\t\t\t\tdeathknight: Deathknight.create({\n\t\t\t\t\trotation: rotation as DeathknightRotation,\n\t\t\t\t\ttalents: talents as DeathknightTalents,\n\t\t\t\t\toptions: specOptions as DeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecTankDeathknight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'tankDeathknight',\n\t\t\t\ttankDeathknight: TankDeathknight.create({\n\t\t\t\t\trotation: rotation as TankDeathknightRotation,\n\t\t\t\t\ttalents: talents as DeathknightTalents,\n\t\t\t\t\toptions: specOptions as TankDeathknightOptions,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t}\n}\n\nexport function playerToSpec(player: Player): Spec {\n\tconst specValues = getEnumValues(Spec);\n\tfor (let i = 0; i < specValues.length; i++) {\n\t\tconst spec = specValues[i] as Spec;\n\t\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\t\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\t\tspecString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n\t\tif (player.spec.oneofKind == specString) {\n\t\t\treturn spec;\n\t\t}\n\t}\n\n\tthrow new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nexport const classToMaxArmorType: Record<Class, ArmorType> = {\n\t[Class.ClassUnknown]: ArmorType.ArmorTypeUnknown,\n\t[Class.ClassDruid]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassHunter]: ArmorType.ArmorTypeMail,\n\t[Class.ClassMage]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassPaladin]: ArmorType.ArmorTypePlate,\n\t[Class.ClassPriest]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassRogue]: ArmorType.ArmorTypeLeather,\n\t[Class.ClassShaman]: ArmorType.ArmorTypeMail,\n\t[Class.ClassWarlock]: ArmorType.ArmorTypeCloth,\n\t[Class.ClassWarrior]: ArmorType.ArmorTypePlate,\n\t[Class.ClassDeathknight]: ArmorType.ArmorTypePlate,\n};\n\nconst classToEligibleRangedWeaponTypes: Record<Class, Array<RangedWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [RangedWeaponType.RangedWeaponTypeIdol],\n\t[Class.ClassHunter]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassMage]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassPaladin]: [RangedWeaponType.RangedWeaponTypeLibram],\n\t[Class.ClassPriest]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassRogue]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassShaman]: [RangedWeaponType.RangedWeaponTypeTotem],\n\t[Class.ClassWarlock]: [RangedWeaponType.RangedWeaponTypeWand],\n\t[Class.ClassWarrior]: [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t],\n\t[Class.ClassDeathknight]: [\n\t\tRangedWeaponType.RangedWeaponTypeSigil,\n\t],\n};\n\ninterface EligibleWeaponType {\n\tweaponType: WeaponType,\n\tcanUseTwoHand?: boolean,\n}\n\nexport const classToEligibleWeaponTypes: Record<Class, Array<EligibleWeaponType>> = {\n\t[Class.ClassUnknown]: [],\n\t[Class.ClassDruid]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t],\n\t[Class.ClassHunter]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassMage]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassPaladin]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassPriest]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassRogue]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassShaman]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t],\n\t[Class.ClassWarlock]: [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t],\n\t[Class.ClassWarrior]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t],\n\t[Class.ClassDeathknight]: [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t// TODO: validate proficiencies\n\t],\n};\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeAxe,\n\t\tWeaponType.WeaponTypeDagger,\n\t\tWeaponType.WeaponTypePolearm,\n\t\tWeaponType.WeaponTypeSword,\n\t].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n\treturn [\n\t\tWeaponType.WeaponTypeFist,\n\t\tWeaponType.WeaponTypeMace,\n\t\tWeaponType.WeaponTypeStaff,\n\t].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {\n\t[Spec.SpecBalanceDruid]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\t// TODO: Fix this\n\t\t\treturn (12 * 0.65) + (3 * 45);\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn (21 * 0.65) + (3 * 45);\n\t\t}\n\t\treturn 0;\n\t},\n\t[Spec.SpecElementalShaman]: (gem, playerStats) => {\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn (((playerStats.getStat(Stat.StatSpellPower) * 0.795) + 603) * 2 * (playerStats.getStat(Stat.StatSpellCrit) / 2208) * 0.045) / 0.795;\n\t\t}\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecWarlock]: (gem, playerStats) => {\n\t\t// TODO: make it gear dependant\n\t\tif (gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id) {\n\t\t\treturn 84;\n\t\t}\n\t\tif (gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n\t\t\treturn 80;\n\t\t}\n\n\t\treturn 0;\n\t},\n\t[Spec.SpecFeralDruid]: (gem, _) => {\n\t\t// Unknown actual EP, but this is the only effect that matters\n\t\tif (gem.id == Gems.RELENTLESS_EARTHSIEGE_DIAMOND.id || gem.id == Gems.CHAOTIC_SKYFLARE_DIAMOND.id || gem.id == Gems.CHAOTIC_SKYFIRE_DIAMOND.id) {\n    \t\treturn 80;\n\t\t}\n\t\treturn 0;\n\t}\n};\n\nexport function getMetaGemEffectEP(spec: Spec, gem: Gem, playerStats: Stats) {\n\tif (metaGemEffectEPs[spec]) {\n\t\treturn metaGemEffectEPs[spec]!(gem, playerStats);\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem(item: Item, spec: Spec, slot: ItemSlot | undefined): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\tif ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tconst eligibleWeaponType = classToEligibleWeaponTypes[playerClass].find(wt => wt.weaponType == item.weaponType);\n\t\tif (!eligibleWeaponType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ((item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand))\n\t\t\t&& ![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType)\n\t\t\t&& !dualWieldSpecs.includes(spec)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n\t\t\treturn false;\n\t\t}\n\t\tif (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && spec != Spec.SpecWarrior) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeRanged) {\n\t\treturn classToEligibleRangedWeaponTypes[playerClass].includes(item.rangedWeaponType);\n\t}\n\n\t// At this point, we know the item is an armor piece (feet, chest, legs, etc).\n\treturn classToMaxArmorType[playerClass] >= item.armorType;\n}\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n\t[ItemType.ItemTypeUnknown]: [],\n\t[ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n\t[ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n\t[ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n\t[ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n\t[ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n\t[ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n\t[ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n\t[ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n\t[ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n\t[ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n\t[ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n\t[ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n\t[ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[item.type]) {\n\t\treturn itemTypeToSlotsMap[item.type]!;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n};\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n\tif (mainHand == null || offHand == null) {\n\t\treturn true;\n\t}\n\n\tif (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n// \n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n\treturn [enchant.type].concat(enchant.extraTypes || []).map(type => {\n\t\tif (itemTypeToSlotsMap[type]) {\n\t\t\treturn itemTypeToSlotsMap[type]!;\n\t\t}\n\n\t\tif (type == ItemType.ItemTypeWeapon) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\n\t\t// Should never reach here\n\t\tthrow new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n\t}).flat();\n};\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n\tconst sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n\tif (sharedSlots.length == 0)\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand)\n\t\treturn false;\n\n\tif ((enchant.enchantType == EnchantType.EnchantTypeShield) != (item.weaponType == WeaponType.WeaponTypeShield))\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeStaff && item.weaponType != WeaponType.WeaponTypeStaff)\n\t\treturn false;\n\n\tif (item.weaponType == WeaponType.WeaponTypeOffHand)\n\t\treturn false;\n\n\tif (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n\t\tif (![\n\t\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\t].includes(item.rangedWeaponType))\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nexport function canEquipEnchant(enchant: Enchant, spec: Spec): boolean {\n\tconst playerClass = specToClass[spec];\n\tif (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerClass)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport const NO_TARGET = -1;\n\nexport function newRaidTarget(raidIndex: number): RaidTarget {\n\treturn RaidTarget.create({\n\t\ttargetIndex: raidIndex,\n\t});\n}\n\nexport function emptyRaidTarget(): RaidTarget {\n\treturn newRaidTarget(NO_TARGET);\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = BlessingsAssignments.create();\n\tfor (let i = 0; i < numPaladins; i++) {\n\t\tassignments.paladins.push(BlessingsAssignment.create({\n\t\t\tblessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n\t\t}));\n\t}\n\treturn assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number, data: Array<{ spec: Spec, blessings: Array<Blessings> }>): BlessingsAssignments {\n\tconst assignments = makeBlankBlessingsAssignments(numPaladins);\n\tfor (let i = 0; i < data.length; i++) {\n\t\tconst spec = data[i].spec;\n\t\tconst blessings = data[i].blessings;\n\t\tfor (let j = 0; j < blessings.length; j++) {\n\t\t\tif (j >= assignments.paladins.length) {\n\t\t\t\t// Can't assign more blessings since we ran out of paladins\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tassignments.paladins[j].blessings[spec] = blessings[j];\n\t\t}\n\t}\n\treturn assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n\treturn makeBlessingsAssignments(numPaladins, [\n\t\t{ spec: Spec.SpecBalanceDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecFeralTankDruid, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecHunter, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecMage, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRetributionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecProtectionPaladin, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfSanctuary, Blessings.BlessingOfWisdom, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecHealingPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecShadowPriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecSmitePriest, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecRogue, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecElementalShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecEnhancementShaman, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarlock, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom] },\n\t\t{ spec: Spec.SpecWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t\t{ spec: Spec.SpecProtectionWarrior, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary] },\n\t\t{ spec: Spec.SpecDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSalvation] },\n\t\t{ spec: Spec.SpecTankDeathknight, blessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight] },\n\t]);\n};\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n\tResourceType.ResourceTypeEnergy,\n\tResourceType.ResourceTypeRage,\n\tResourceType.ResourceTypeComboPoints,\n\tResourceType.ResourceTypeFocus,\n\tResourceType.ResourceTypeRunicPower,\n\tResourceType.ResourceTypeBloodRune,\n\tResourceType.ResourceTypeFrostRune,\n\tResourceType.ResourceTypeUnholyRune,\n\tResourceType.ResourceTypeDeathRune,\n];\n","export const wowheadSupportedLanguages: Record<string, string> = {\n\t'en': 'English',\n\t'cn': '简体中文',\n\t'de': 'Deutsch',\n\t'es': 'Español',\n\t'fr': 'Français',\n\t'it': 'Italiano',\n\t'ko': '한국어',\n\t'pt': 'Português Brasileiro',\n\t'ru': 'Русский',\n};\n\n// Returns a 2-letter language code if it is a wowhead-supported language, or '' otherwise.\nexport function getBrowserLanguageCode(): string {\n\tconst browserLang = (navigator.language || '').substring(0, 2);\n\tif (Object.keys(wowheadSupportedLanguages).includes(browserLang)) {\n\t\treturn browserLang;\n\t} else {\n\t\treturn '';\n\t}\n}\n\nexport function getLanguageCode(): string {\n\treturn cachedLanguageCode_;\n}\n\nexport function setLanguageCode(newLang: string) {\n\t// Use '' instead of 'en' because wowhead doesn't like having the en/ prefix.\n\tcachedLanguageCode_ = newLang == 'en' ? '' : newLang;\n}\n\nlet cachedLanguageCode_: string = '';\n","import { getLanguageCode } from '../constants/lang.js';\nimport { ActionID as ActionIdProto } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\nimport { OtherAction } from '../proto/common.js';\nimport { IconData } from '../proto/ui.js';\nimport { NO_TARGET } from '../proto_utils/utils.js';\nimport {\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { Database } from './database.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n\treadonly itemId: number;\n\treadonly spellId: number;\n\treadonly otherId: OtherAction;\n\treadonly tag: number;\n\n\treadonly baseName: string; // The name without any tag additions.\n\treadonly name: string;\n\treadonly iconUrl: string;\n\n\tprivate constructor(itemId: number, spellId: number, otherId: OtherAction, tag: number, baseName: string, name: string, iconUrl: string) {\n\t\tthis.itemId = itemId;\n\t\tthis.spellId = spellId;\n\t\tthis.otherId = otherId;\n\t\tthis.tag = tag;\n\n\t\tswitch (otherId) {\n\t\t\tcase OtherAction.OtherActionNone:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionWait:\n\t\t\t\tbaseName = 'Wait';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaRegen:\n\t\t\t\tname = 'Mana Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Casting)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Not Casting)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionEnergyRegen:\n\t\t\t\tbaseName = 'Energy Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFocusRegen:\n\t\t\t\tbaseName = 'Focus Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaGain:\n\t\t\t\tbaseName = 'Mana Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRageGain:\n\t\t\t\tbaseName = 'Rage Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionAttack:\n\t\t\t\tname = 'Attack';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionShoot:\n\t\t\t\tname = 'Shoot';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPet:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRefund:\n\t\t\t\tbaseName = 'Refund';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDamageTaken:\n\t\t\t\tbaseName = 'Damage Taken';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionHealingModel:\n\t\t\t\tbaseName = 'Incoming HPS';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionBloodRuneGain:\n\t\t\t\tbaseName = 'Blood Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFrostRuneGain:\n\t\t\t\tbaseName = 'Frost Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionUnholyRuneGain:\n\t\t\t\tbaseName = 'Unholy Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDeathRuneGain:\n\t\t\t\tbaseName = 'Death Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.baseName = baseName;\n\t\tthis.name = name || baseName;\n\t\tthis.iconUrl = iconUrl;\n\t}\n\n\tanyId(): number {\n\t\treturn this.itemId || this.spellId || this.otherId;\n\t}\n\n\tequals(other: ActionId): boolean {\n\t\treturn this.equalsIgnoringTag(other) && this.tag == other.tag;\n\t}\n\n\tequalsIgnoringTag(other: ActionId): boolean {\n\t\treturn (\n\t\t\tthis.itemId == other.itemId\n\t\t\t&& this.spellId == other.spellId\n\t\t\t&& this.otherId == other.otherId);\n\t}\n\n\tsetBackground(elem: HTMLElement) {\n\t\tif (this.iconUrl) {\n\t\t\telem.style.backgroundImage = `url('${this.iconUrl}')`;\n\t\t}\n\t}\n\n\tstatic makeItemUrl(id: number): string {\n\t\tconst lang = getLanguageCode();\n\t\tconst langPrefix = lang ? lang + '/' : '';\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?item=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}item=${id}`;\n\t\t}\n\t}\n\tstatic makeSpellUrl(id: number): string {\n\t\tconst lang = getLanguageCode();\n\t\tconst langPrefix = lang ? lang + '/' : '';\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?spell=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/wotlk/${langPrefix}spell=${id}`;\n\t\t}\n\t}\n\n\tsetWowheadHref(elem: HTMLAnchorElement) {\n\t\tif (this.itemId) {\n\t\t\telem.href = ActionId.makeItemUrl(this.itemId);\n\t\t} else if (this.spellId) {\n\t\t\telem.href = ActionId.makeSpellUrl(this.spellId);\n\t\t}\n\t}\n\n\tsetBackgroundAndHref(elem: HTMLAnchorElement) {\n\t\tthis.setBackground(elem);\n\t\tthis.setWowheadHref(elem);\n\t}\n\n\tasync fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n\t\tconst filled = await this.fill();\n\t\tif (setHref) {\n\t\t\tfilled.setWowheadHref(elem);\n\t\t}\n\t\tif (setBackground) {\n\t\t\tfilled.setBackground(elem);\n\t\t}\n\t\treturn filled;\n\t}\n\n\t// Returns an ActionId with the name and iconUrl fields filled.\n\t// playerIndex is the optional index of the player to whom this ID corresponds.\n\tasync fill(playerIndex?: number): Promise<ActionId> {\n\t\tif (this.name || this.iconUrl) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.otherId) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst tooltipData = await ActionId.getTooltipData(this);\n\n\t\tconst baseName = tooltipData['name'];\n\t\tlet name = baseName;\n\t\tswitch (baseName) {\n\t\t\tcase 'Arcane Blast':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (No Stacks)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ` (1 Stack)`;\n\t\t\t\t} else if (this.tag > 2) {\n\t\t\t\t\tname += ` (${this.tag - 1} Stacks)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fireball':\n\t\t\tcase 'Flamestrike':\n\t\t\tcase 'Pyroblast':\n\t\t\t\tif (this.tag) name += ' (DoT)';\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Flay':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Envenom':\n\t\t\tcase 'Eviscerate':\n\t\t\tcase 'Expose Armor':\n\t\t\tcase 'Shattering Throw':\n\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\tname += ` (self)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Rupture':\n\t\t\tcase 'Slice and Dice':\n\t\t\t\tif (this.tag) name += ` (${this.tag} CP)`;\n\t\t\t\tbreak;\n\t\t\tcase 'Instant Poison IX':\n\t\t\tcase 'Wound Poison VII':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Deadly)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shiv)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fan of Knives':\n\t\t\tcase 'Killing Spree':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Tricks of the Trade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Not Self)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Chain Lightning':\n\t\t\tcase 'Lightning Bolt':\n\t\t\t\tif (this.tag == 6) {\n\t\t\t\t\tname += ' (LO)';\n\t\t\t\t} else if (this.tag) {\n\t\t\t\t\tname += ` (${this.tag} MW)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Swing Roll)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Righteous Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)'\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Shield':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Proc)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// For targetted buffs, tag is the source player's raid index or -1 if none.\n\t\t\tcase 'Bloodlust':\n\t\t\tcase 'Ferocious Inspiration':\n\t\t\tcase 'Innervate':\n      \t\t\tcase 'Focus Magic':\n\t\t\tcase 'Mana Tide Totem':\n\t\t\tcase 'Power Infusion':\n\t\t\t\tif (this.tag != NO_TARGET) {\n\t\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\t\tname += ` (self)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname += ` (from #${this.tag + 1})`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Darkmoon Card: Crusade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Melee)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Spell)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Scourge Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shadow)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frost Strike':\n\t\t\tcase 'Plague Strike':\n\t\t\tcase 'Blood Strike':\n\t\t\tcase 'Death Strike':\n\t\t\tcase 'Obliterate':\n\t\t\tcase 'Blood-Caked Strike':\n\t\t\tcase 'Lightning Speed':\n\t\t\tcase 'Windfury Weapon':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Battle Shout':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Snapshot)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Seed of Corruption':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Explosion)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Thunderfury':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (ST)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (MT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.tag) {\n\t\t\t\t\tname += ' (??)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst idString = this.toProtoString();\n\t\tconst iconOverrideId = idOverrides[idString] || null;\n\n\t\tlet iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n\t\tif (iconOverrideId) {\n\t\t\tconst overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n\t\t\ticonUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n\t\t}\n\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl);\n\t}\n\n\ttoString(): string {\n\t\treturn this.toStringIgnoringTag() + (this.tag ? ('-' + this.tag) : '');\n\t}\n\n\ttoStringIgnoringTag(): string {\n\t\tif (this.itemId) {\n\t\t\treturn 'item-' + this.itemId;\n\t\t} else if (this.spellId) {\n\t\t\treturn 'spell-' + this.spellId;\n\t\t} else if (this.otherId) {\n\t\t\treturn 'other-' + this.otherId;\n\t\t} else {\n\t\t\tthrow new Error('Empty action id!');\n\t\t}\n\t}\n\n\ttoProto(): ActionIdProto {\n\t\tconst protoId = ActionIdProto.create({\n\t\t\ttag: this.tag,\n\t\t});\n\n\t\tif (this.itemId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'itemId',\n\t\t\t\titemId: this.itemId,\n\t\t\t};\n\t\t} else if (this.spellId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'spellId',\n\t\t\t\tspellId: this.spellId,\n\t\t\t};\n\t\t} else if (this.otherId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'otherId',\n\t\t\t\totherId: this.otherId,\n\t\t\t};\n\t\t}\n\n\t\treturn protoId;\n\t}\n\n\ttoProtoString(): string {\n\t\treturn ActionIdProto.toJsonString(this.toProto());\n\t}\n\n\twithoutTag(): ActionId {\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl);\n\t}\n\n\tstatic fromEmpty(): ActionId {\n\t\treturn new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n\t}\n\n\tstatic fromItemId(itemId: number, tag?: number): ActionId {\n\t\treturn new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromSpellId(spellId: number, tag?: number): ActionId {\n\t\treturn new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n\t\treturn new ActionId(0, 0, otherId, tag || 0, '', '', '');\n\t}\n\n\tstatic fromPetName(petName: string): ActionId {\n\t\treturn petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n\t}\n\n\tstatic fromItem(item: Item): ActionId {\n\t\treturn ActionId.fromItemId(item.id);\n\t}\n\n\tstatic fromProto(protoId: ActionIdProto): ActionId {\n\t\tif (protoId.rawId.oneofKind == 'spellId') {\n\t\t\treturn ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'itemId') {\n\t\t\treturn ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'otherId') {\n\t\t\treturn ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n\t\t} else {\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tstatic fromLogString(str: string): ActionId {\n\t\tconst match = str.match(/{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/);\n\t\tif (match) {\n\t\t\tconst idType = match[1];\n\t\t\tconst id = parseInt(match[5]);\n\t\t\treturn new ActionId(\n\t\t\t\tidType == 'ItemID' ? id : 0,\n\t\t\t\tidType == 'SpellID' ? id : 0,\n\t\t\t\tidType == 'OtherID' ? id : 0,\n\t\t\t\tmatch[7] ? parseInt(match[7]) : 0,\n\t\t\t\t'', '', '');\n\t\t} else {\n\t\t\tconsole.warn('Failed to parse action id from log: ' + str);\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tprivate static makeIconUrl(iconLabel: string): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t} else {\n\t\t\treturn `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t}\n\t}\n\n\tstatic async getTooltipData(actionId: ActionId): Promise<IconData> {\n\t\tif (actionId.itemId) {\n\t\t\treturn await Database.getItemIconData(actionId.itemId);\n\t\t} else {\n\t\t\treturn await Database.getSpellIconData(actionId.spellId);\n\t\t}\n\t}\n}\n\nconst itemToTooltipDataCache = new Map<number, Promise<any>>();\nconst spellToTooltipDataCache = new Map<number, Promise<any>>();\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t\"Greater Fire Elemental\": ActionId.fromSpellId(2894),\n\t'Shadowfiend': ActionId.fromSpellId(34433),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\t'Bloodworm': ActionId.fromSpellId(50452),\n};\n\n// https://wowhead.com/wotlk/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n\t'Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n\t'Bear': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n\t'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Boar': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n\t'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n\t'Cat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n\t'Chimaera': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n\t'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n\t'Crab': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n\t'Crocolisk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n\t'Devilsaur': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n\t'Dragonhawk': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n\t'Felguard': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\t'Felhunter': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\t'Infernal': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summoninfernal.jpg',\n\t'Gargoyle': 'https://wow.zamimg.com/images/wow/icons/large/ability_hunter_pet_bat.jpg',\n\t'Ghoul': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_raisedead.jpg',\n\t'Army of the Dead': 'https://wow.zamimg.com/images/wow/icons/large/spell_deathknight_armyofthedead.jpg',\n\t'Gorilla': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n\t'Hyena': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n\t'Imp': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\t'Moth': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n\t'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n\t'Owl': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\t'Raptor': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n\t'Ravager': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n\t'Rhino': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n\t'Scorpid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n\t'Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n\t'Silithid': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n\t'Spider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n\t'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n\t'Succubus': 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\t'Tallstrider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n\t'Turtle': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n\t'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n\t'Wasp': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n\t'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n\t'Wolf': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n\t'Worm': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n};\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '',\n\t[ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n\t[ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n\t[ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n\t[ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n\t[ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n\t[ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n\t[ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n\t[ResourceType.ResourceTypeBloodRune]: '/wotlk/assets/img/blood_rune.png',\n\t[ResourceType.ResourceTypeFrostRune]: '/wotlk/assets/img/frost_rune.png',\n\t[ResourceType.ResourceTypeUnholyRune]: '/wotlk/assets/img/unholy_rune.png',\n\t[ResourceType.ResourceTypeDeathRune]: '/wotlk/assets/img/death_rune.png',\n};\n","import { ArmorType } from '../proto/common.js';\nimport { Class } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Race } from '../proto/common.js';\nimport { Stat, PseudoStat } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { ResourceType } from '../proto/api.js';\n\nexport const armorTypeNames: Record<ArmorType, string> = {\n\t[ArmorType.ArmorTypeUnknown]: 'Unknown',\n\t[ArmorType.ArmorTypeCloth]: 'Cloth',\n\t[ArmorType.ArmorTypeLeather]: 'Leather',\n\t[ArmorType.ArmorTypeMail]: 'Mail',\n\t[ArmorType.ArmorTypePlate]: 'Plate',\n};\n\nexport const weaponTypeNames: Record<WeaponType, string> = {\n\t[WeaponType.WeaponTypeUnknown]: 'Unknown',\n\t[WeaponType.WeaponTypeAxe]: 'Axe',\n\t[WeaponType.WeaponTypeDagger]: 'Dagger',\n\t[WeaponType.WeaponTypeFist]: 'Fist',\n\t[WeaponType.WeaponTypeMace]: 'Mace',\n\t[WeaponType.WeaponTypeOffHand]: 'Misc',\n\t[WeaponType.WeaponTypePolearm]: 'Polearm',\n\t[WeaponType.WeaponTypeShield]: 'Shield',\n\t[WeaponType.WeaponTypeStaff]: 'Staff',\n\t[WeaponType.WeaponTypeSword]: 'Sword',\n};\n\nexport const raceNames: Record<Race, string> = {\n\t[Race.RaceUnknown]: 'None',\n\t[Race.RaceBloodElf]: 'Blood Elf',\n\t[Race.RaceDraenei]: 'Draenei',\n\t[Race.RaceDwarf]: 'Dwarf',\n\t[Race.RaceGnome]: 'Gnome',\n\t[Race.RaceHuman]: 'Human',\n\t[Race.RaceNightElf]: 'Night Elf',\n\t[Race.RaceOrc]: 'Orc',\n\t[Race.RaceTauren]: 'Tauren',\n\t[Race.RaceTroll]: 'Troll',\n\t[Race.RaceUndead]: 'Undead',\n};\n\nexport function nameToRace(name: string): Race {\n\tconst normalized = name.toLowerCase().replaceAll(' ', '');\n\tfor (const key in raceNames) {\n\t\tconst race = parseInt(key) as Race;\n\t\tif (raceNames[race].toLowerCase().replaceAll(' ', '') == normalized) {\n\t\t\treturn race;\n\t\t}\n\t}\n\n\treturn Race.RaceUnknown;\n}\n\nexport const classNames: Record<Class, string> = {\n\t[Class.ClassUnknown]: 'None',\n\t[Class.ClassDruid]: 'Druid',\n\t[Class.ClassHunter]: 'Hunter',\n\t[Class.ClassMage]: 'Mage',\n\t[Class.ClassPaladin]: 'Paladin',\n\t[Class.ClassPriest]: 'Priest',\n\t[Class.ClassRogue]: 'Rogue',\n\t[Class.ClassShaman]: 'Shaman',\n\t[Class.ClassWarlock]: 'Warlock',\n\t[Class.ClassWarrior]: 'Warrior',\n\t[Class.ClassDeathknight]: 'Death Knight',\n}\n\nexport function nameToClass(name: string): Class {\n\tconst lower = name.toLowerCase();\n\tfor (const key in classNames) {\n\t\tconst charClass = parseInt(key) as Class;\n\t\tif (classNames[charClass].toLowerCase().replace(/\\s+/g, '') == lower) {\n\t\t\treturn charClass;\n\t\t}\n\t}\n\n\treturn Class.ClassUnknown;\n}\n\nexport const professionNames: Record<Profession, string> = {\n\t[Profession.ProfessionUnknown]: 'None',\n\t[Profession.Alchemy]: 'Alchemy',\n\t[Profession.Blacksmithing]: 'Blacksmithing',\n\t[Profession.Enchanting]: 'Enchanting',\n\t[Profession.Engineering]: 'Engineering',\n\t[Profession.Herbalism]: 'Herbalism',\n\t[Profession.Inscription]: 'Inscription',\n\t[Profession.Jewelcrafting]: 'Jewelcrafting',\n\t[Profession.Leatherworking]: 'Leatherworking',\n\t[Profession.Mining]: 'Mining',\n\t[Profession.Skinning]: 'Skinning',\n\t[Profession.Tailoring]: 'Tailoring',\n};\n\nexport function nameToProfession(name: string): Profession {\n\tconst lower = name.toLowerCase();\n\tfor (const key in professionNames) {\n\t\tconst prof = parseInt(key) as Profession;\n\t\tif (professionNames[prof].toLowerCase() == lower) {\n\t\t\treturn prof;\n\t\t}\n\t}\n\n\treturn Profession.ProfessionUnknown;\n}\n\nexport const statOrder: Array<Stat> = [\n\tStat.StatHealth,\n\tStat.StatArmor,\n\tStat.StatStamina,\n\tStat.StatStrength,\n\tStat.StatAgility,\n\tStat.StatIntellect,\n\tStat.StatSpirit,\n\tStat.StatSpellPower,\n\tStat.StatSpellHit,\n\tStat.StatSpellCrit,\n\tStat.StatSpellHaste,\n\tStat.StatSpellPenetration,\n\tStat.StatMP5,\n\tStat.StatAttackPower,\n\tStat.StatRangedAttackPower,\n\tStat.StatMeleeHit,\n\tStat.StatMeleeCrit,\n\tStat.StatMeleeHaste,\n\tStat.StatArmorPenetration,\n\tStat.StatExpertise,\n\tStat.StatMana,\n\tStat.StatEnergy,\n\tStat.StatRage,\n\tStat.StatDefense,\n\tStat.StatBlock,\n\tStat.StatBlockValue,\n\tStat.StatDodge,\n\tStat.StatParry,\n\tStat.StatResilience,\n\tStat.StatArcaneResistance,\n\tStat.StatFireResistance,\n\tStat.StatFrostResistance,\n\tStat.StatNatureResistance,\n\tStat.StatShadowResistance,\n];\n\nexport const statNames: Record<Stat, string> = {\n\t[Stat.StatStrength]: 'Strength',\n\t[Stat.StatAgility]: 'Agility',\n\t[Stat.StatStamina]: 'Stamina',\n\t[Stat.StatIntellect]: 'Intellect',\n\t[Stat.StatSpirit]: 'Spirit',\n\t[Stat.StatSpellPower]: 'Spell Dmg',\n\t[Stat.StatMP5]: 'MP5',\n\t[Stat.StatSpellHit]: 'Spell Hit',\n\t[Stat.StatSpellCrit]: 'Spell Crit',\n\t[Stat.StatSpellHaste]: 'Spell Haste',\n\t[Stat.StatSpellPenetration]: 'Spell Pen',\n\t[Stat.StatAttackPower]: 'Attack Power',\n\t[Stat.StatMeleeHit]: 'Melee Hit',\n\t[Stat.StatMeleeCrit]: 'Melee Crit',\n\t[Stat.StatMeleeHaste]: 'Melee Haste',\n\t[Stat.StatArmorPenetration]: 'Armor Pen',\n\t[Stat.StatExpertise]: 'Expertise',\n\t[Stat.StatMana]: 'Mana',\n\t[Stat.StatEnergy]: 'Energy',\n\t[Stat.StatRage]: 'Rage',\n\t[Stat.StatArmor]: 'Armor',\n\t[Stat.StatRangedAttackPower]: 'Ranged AP',\n\t[Stat.StatDefense]: 'Defense',\n\t[Stat.StatBlock]: 'Block',\n\t[Stat.StatBlockValue]: 'Block Value',\n\t[Stat.StatDodge]: 'Dodge',\n\t[Stat.StatParry]: 'Parry',\n\t[Stat.StatResilience]: 'Resilience',\n\t[Stat.StatHealth]: 'Health',\n\t[Stat.StatArcaneResistance]: 'Arcane Resistance',\n\t[Stat.StatFireResistance]: 'Fire Resistance',\n\t[Stat.StatFrostResistance]: 'Frost Resistance',\n\t[Stat.StatNatureResistance]: 'Nature Resistance',\n\t[Stat.StatShadowResistance]: 'Shadow Resistance',\n\t[Stat.StatBonusArmor]: 'Bonus Armor',\n};\n\nexport const pseudoStatOrder: Array<PseudoStat> = [\n\tPseudoStat.PseudoStatMainHandDps,\n\tPseudoStat.PseudoStatOffHandDps,\n\tPseudoStat.PseudoStatRangedDps,\n\tPseudoStat.PseudoStatBlockValueMultiplier,\n];\nexport const pseudoStatNames: Record<PseudoStat, string> = {\n\t[PseudoStat.PseudoStatMainHandDps]: 'Main Hand DPS',\n\t[PseudoStat.PseudoStatOffHandDps]: 'Off Hand DPS',\n\t[PseudoStat.PseudoStatRangedDps]: 'Ranged DPS',\n\t[PseudoStat.PseudoStatBlockValueMultiplier]: 'Block Value Multiplier',\n};\n\nexport function getClassStatName(stat: Stat, playerClass: Class): string {\n\tconst statName = statNames[stat];\n\tif (playerClass == Class.ClassHunter) {\n\t\treturn statName.replace('Melee', 'Ranged');\n\t} else {\n\t\treturn statName;\n\t}\n}\n\nexport const slotNames: Record<ItemSlot, string> = {\n\t[ItemSlot.ItemSlotHead]: 'Head',\n\t[ItemSlot.ItemSlotNeck]: 'Neck',\n\t[ItemSlot.ItemSlotShoulder]: 'Shoulders',\n\t[ItemSlot.ItemSlotBack]: 'Back',\n\t[ItemSlot.ItemSlotChest]: 'Chest',\n\t[ItemSlot.ItemSlotWrist]: 'Wrist',\n\t[ItemSlot.ItemSlotHands]: 'Hands',\n\t[ItemSlot.ItemSlotWaist]: 'Waist',\n\t[ItemSlot.ItemSlotLegs]: 'Legs',\n\t[ItemSlot.ItemSlotFeet]: 'Feet',\n\t[ItemSlot.ItemSlotFinger1]: 'Finger 1',\n\t[ItemSlot.ItemSlotFinger2]: 'Finger 2',\n\t[ItemSlot.ItemSlotTrinket1]: 'Trinket 1',\n\t[ItemSlot.ItemSlotTrinket2]: 'Trinket 2',\n\t[ItemSlot.ItemSlotMainHand]: 'Main Hand',\n\t[ItemSlot.ItemSlotOffHand]: 'Off Hand',\n\t[ItemSlot.ItemSlotRanged]: 'Ranged',\n};\n\nexport const resourceNames: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: 'None',\n\t[ResourceType.ResourceTypeHealth]: 'Health',\n\t[ResourceType.ResourceTypeMana]: 'Mana',\n\t[ResourceType.ResourceTypeEnergy]: 'Energy',\n\t[ResourceType.ResourceTypeRage]: 'Rage',\n\t[ResourceType.ResourceTypeComboPoints]: 'Combo Points',\n\t[ResourceType.ResourceTypeFocus]: 'Focus',\n\t[ResourceType.ResourceTypeRunicPower]: 'Runic Power',\n\t[ResourceType.ResourceTypeBloodRune]: 'Blood Rune',\n\t[ResourceType.ResourceTypeFrostRune]: 'Frost Rune',\n\t[ResourceType.ResourceTypeUnholyRune]: 'Unholy Rune',\n\t[ResourceType.ResourceTypeDeathRune]: 'Death Rune',\n};\n\nexport const resourceColors: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '#ffffff',\n\t[ResourceType.ResourceTypeHealth]: '#22ba00',\n\t[ResourceType.ResourceTypeMana]: '#2e93fa',\n\t[ResourceType.ResourceTypeEnergy]: '#ffd700',\n\t[ResourceType.ResourceTypeRage]: '#ff0000',\n\t[ResourceType.ResourceTypeComboPoints]: '#ffa07a',\n\t[ResourceType.ResourceTypeFocus]: '#cd853f',\n\t[ResourceType.ResourceTypeRunicPower]: '#5b99ee',\n\t[ResourceType.ResourceTypeBloodRune]: '#ff0000',\n\t[ResourceType.ResourceTypeFrostRune]: '#0000ff',\n\t[ResourceType.ResourceTypeUnholyRune]: '#00ff00',\n\t[ResourceType.ResourceTypeDeathRune]: '#8b008b',\n};\n\nexport function stringToResourceType(str: string): ResourceType {\n\tfor (const [key, val] of Object.entries(resourceNames)) {\n\t\tif (val.toLowerCase() == str.toLowerCase()) {\n\t\t\treturn Number(key) as ResourceType;\n\t\t}\n\t}\n\treturn ResourceType.ResourceTypeNone;\n}\n","import { Class, Stat, PseudoStat, UnitStats } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport { getClassStatName, pseudoStatNames } from './names.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\nconst PSEUDOSTATS_LEN = getEnumValues(PseudoStat).length;\n\nexport class UnitStat {\n\tprivate readonly stat: Stat|null;\n\tprivate readonly pseudoStat: PseudoStat|null;\n\n\tprivate constructor(stat: Stat|null, pseudoStat: PseudoStat|null) {\n\t\tthis.stat = stat;\n\t\tthis.pseudoStat = pseudoStat;\n\t}\n\n\tisStat(): boolean {\n\t\treturn this.stat != null;\n\t}\n\tisPseudoStat(): boolean {\n\t\treturn this.pseudoStat != null;\n\t}\n\n\tgetStat(): Stat {\n\t\tif (!this.isStat()) {\n\t\t\tthrow new Error('Not a stat!');\n\t\t}\n\t\treturn this.stat!;\n\t}\n\tgetPseudoStat(): PseudoStat {\n\t\tif (!this.isPseudoStat()) {\n\t\t\tthrow new Error('Not a pseudo stat!');\n\t\t}\n\t\treturn this.pseudoStat!;\n\t}\n\n\tequals(other: UnitStat): boolean {\n\t\treturn this.stat == other.stat && this.pseudoStat == other.pseudoStat;\n\t}\n\n\tgetName(clazz: Class): string {\n\t\tif (this.isStat()) {\n\t\t\treturn getClassStatName(this.stat!, clazz);\n\t\t} else {\n\t\t\treturn pseudoStatNames[this.pseudoStat!];\n\t\t}\n\t}\n\n\tgetProtoValue(proto: UnitStats): number {\n\t\tif (this.isStat()) {\n\t\t\treturn proto.stats[this.stat!];\n\t\t} else {\n\t\t\treturn proto.pseudoStats[this.pseudoStat!];\n\t\t}\n\t}\n\n\tstatic fromStat(stat: Stat): UnitStat {\n\t\treturn new UnitStat(stat, null);\n\t}\n\tstatic fromPseudoStat(pseudoStat: PseudoStat): UnitStat {\n\t\treturn new UnitStat(null, pseudoStat);\n\t}\n\n\tstatic getAll(): Array<UnitStat> {\n\t\tconst allStats = (getEnumValues(Stat) as Array<Stat>).filter(stat => ![Stat.StatEnergy, Stat.StatRage].includes(stat));\n\t\tconst allPseudoStats = getEnumValues(PseudoStat) as Array<PseudoStat>;\n\t\treturn [\n\t\t\tallStats.map(stat => UnitStat.fromStat(stat)),\n\t\t\tallPseudoStats.map(stat => UnitStat.fromPseudoStat(stat)),\n\t\t].flat();\n\t}\n}\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n\tprivate readonly stats: Array<number>;\n\tprivate readonly pseudoStats: Array<number>;\n\n\tconstructor(stats?: Array<number>, pseudoStats?: Array<number>) {\n\t\tthis.stats = Stats.initStatsArray(STATS_LEN, stats);\n\t\tthis.pseudoStats = Stats.initStatsArray(PSEUDOSTATS_LEN, pseudoStats);\n\t}\n\n\tprivate static initStatsArray(expectedLen: number, newStats?: Array<number>): Array<number> {\n\t\tlet stats = newStats?.slice(0, expectedLen) || [];\n\n\t\tif (stats.length < expectedLen) {\n\t\t\tstats = stats.concat(new Array(expectedLen - (newStats?.length || 0)).fill(0));\n\t\t}\n\n\t\tfor (let i = 0; i < expectedLen; i++) {\n\t\t\tif (stats[i] == null)\n\t\t\t\tstats[i] = 0;\n\t\t}\n\t\treturn stats;\n\t}\n\n\tequals(other: Stats): boolean {\n\t\treturn this.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx)) &&\n\t\t\t\tthis.pseudoStats.every((newStat, statIdx) => newStat == other.getPseudoStat(statIdx))\n\t}\n\n\tgetStat(stat: Stat): number {\n\t\treturn this.stats[stat];\n\t}\n\tgetPseudoStat(stat: PseudoStat): number {\n\t\treturn this.pseudoStats[stat];\n\t}\n\tgetUnitStat(stat: UnitStat): number {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.stats[stat.getStat()];\n\t\t} else {\n\t\t\treturn this.pseudoStats[stat.getPseudoStat()];\n\t\t}\n\t}\n\n\twithStat(stat: Stat, value: number): Stats {\n\t\tconst newStats = this.stats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(newStats, this.pseudoStats);\n\t}\n\twithPseudoStat(stat: PseudoStat, value: number): Stats {\n\t\tconst newStats = this.pseudoStats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(this.stats, newStats);\n\t}\n\twithUnitStat(stat: UnitStat, value: number): Stats {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.withStat(stat.getStat(), value);\n\t\t} else {\n\t\t\treturn this.withPseudoStat(stat.getPseudoStat(), value);\n\t\t}\n\t}\n\n\taddStat(stat: Stat, value: number): Stats {\n\t\treturn this.withStat(stat, this.getStat(stat) + value);\n\t}\n\n\tadd(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value + other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value + other.pseudoStats[stat]));\n\t}\n\n\tsubtract(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value - other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value - other.pseudoStats[stat]));\n\t}\n\n\tcomputeEP(epWeights: Stats): number {\n\t\tlet total = 0;\n\t\tthis.stats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.stats[idx];\n\t\t});\n\t\tthis.pseudoStats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.pseudoStats[idx];\n\t\t});\n\t\treturn total;\n\t}\n\n\tasArray(): Array<number> {\n\t\treturn this.stats.slice();\n\t}\n\n\ttoJson(): Object {\n\t\treturn UnitStats.toJson(this.toProto()) as Object;\n\t}\n\n\ttoProto(): UnitStats {\n\t\treturn UnitStats.create({\n\t\t\tstats: this.stats.slice(),\n\t\t\tpseudoStats: this.pseudoStats.slice(),\n\t\t});\n\t}\n\n\tstatic fromJson(obj: any): Stats {\n\t\treturn Stats.fromProto(UnitStats.fromJson(obj));\n\t}\n\n\tstatic fromMap(statsMap: Partial<Record<Stat, number>>, pseudoStatsMap?: Partial<Record<PseudoStat, number>>): Stats {\n\t\tconst statsArr = new Array(STATS_LEN).fill(0);\n\t\tObject.entries(statsMap).forEach(entry => {\n\t\t\tconst [statStr, value] = entry;\n\t\t\tstatsArr[Number(statStr)] = value;\n\t\t});\n\n\t\tconst pseudoStatsArr = new Array(PSEUDOSTATS_LEN).fill(0);\n\t\tif (pseudoStatsMap) {\n\t\t\tObject.entries(pseudoStatsMap).forEach(entry => {\n\t\t\t\tconst [pseudoStatstr, value] = entry;\n\t\t\t\tpseudoStatsArr[Number(pseudoStatstr)] = value;\n\t\t\t});\n\t\t}\n\n\t\treturn new Stats(statsArr, pseudoStatsArr);\n\t}\n\n\tstatic fromProto(unitStats?: UnitStats): Stats {\n\t\tif (unitStats) {\n\t\t\treturn new Stats(unitStats.stats, unitStats.pseudoStats);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n}\n","import { GemColor } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { ItemType } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { Stat } from '../proto/common.js';\nimport {\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { ActionId } from './action_id.js';\nimport { enchantAppliesToItem } from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\n\nexport function getWeaponDPS(item: Item): number {\n\treturn ((item.weaponDamageMin + item.weaponDamageMax) / 2) / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n\treadonly _item: Item;\n\treadonly _enchant: Enchant | null;\n\treadonly _gems: Array<Gem | null>;\n\n\treadonly numPossibleSockets: number;\n\n\tconstructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>) {\n\t\tthis._item = item;\n\t\tthis._enchant = enchant || null;\n\t\tthis._gems = gems || [];\n\n\t\tthis.numPossibleSockets = this.numSockets(true);\n\n\t\t// Fill gems with null so we always have the same number of gems as gem slots.\n\t\tif (this._gems.length < this.numPossibleSockets) {\n\t\t\tthis._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n\t\t}\n\t}\n\n\tget item(): Item {\n\t\t// Make a defensive copy\n\t\treturn Item.clone(this._item);\n\t}\n\n\tget enchant(): Enchant | null {\n\t\t// Make a defensive copy\n\t\treturn this._enchant ? Enchant.clone(this._enchant) : null;\n\t}\n\n\tget gems(): Array<Gem | null> {\n\t\t// Make a defensive copy\n\t\treturn this._gems.map(gem => gem == null ? null : Gem.clone(gem));\n\t}\n\n\tequals(other: EquippedItem) {\n\t\tif (!Item.equals(this._item, other.item))\n\t\t\treturn false;\n\n\t\tif ((this._enchant == null) != (other.enchant == null))\n\t\t\treturn false;\n\n\t\tif (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant))\n\t\t\treturn false;\n\n\t\tif (this._gems.length != other.gems.length)\n\t\t\treturn false;\n\n\t\tfor (let i = 0; i < this._gems.length; i++) {\n\t\t\tif ((this._gems[i] == null) != (other.gems[i] == null))\n\t\t\t\treturn false;\n\n\t\t\tif (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!))\n\t\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Replaces the item and tries to keep the existing enchants/gems if possible.\n\t */\n\twithItem(item: Item): EquippedItem {\n\t\tlet newEnchant = null;\n\t\tif (this._enchant && enchantAppliesToItem(this._enchant, item))\n\t\t\tnewEnchant = this._enchant;\n\n\t\t// Reorganize gems to match as many colors in the new item as possible.\n\t\tconst newGems = new Array(item.gemSockets.length).fill(null);\n\t\tthis._gems.slice(0, this._item.gemSockets.length).filter(gem => gem != null).forEach(gem => {\n\t\t\tconst firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n\t\t\tconst firstEligibleIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor));\n\t\t\tif (firstMatchingIndex != -1) {\n\t\t\t\tnewGems[firstMatchingIndex] = gem;\n\t\t\t} else if (firstEligibleIndex != -1) {\n\t\t\t\tnewGems[firstEligibleIndex] = gem;\n\t\t\t}\n\t\t});\n\n\t\t// Copy the extra socket gem directly.\n\t\tif (this.couldHaveExtraSocket()) {\n\t\t\tnewGems.push(this._gems[this._gems.length - 1]);\n\t\t}\n\n\t\treturn new EquippedItem(item, newEnchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithEnchant(enchant: Enchant | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, enchant, this._gems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t */\n\tprivate withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tif (this._gems.length <= socketIdx) {\n\t\t\tthrow new Error('No gem socket with index ' + socketIdx);\n\t\t}\n\n\t\tconst newGems = this._gems.slice();\n\t\tnewGems[socketIdx] = gem;\n\n\t\treturn new EquippedItem(this._item, this._enchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t *\n\t * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n\t */\n\twithGem(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tif (gem && gem.unique) {\n\t\t\tcurItem = curItem.removeGemsWithId(gem.id);\n\t\t}\n\n\t\treturn curItem.withGemHelper(gem, socketIdx);\n\t}\n\n\tremoveGemsWithId(gemId: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\t\t// Remove any currently socketed identical gems.\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tif (curItem._gems[i]?.id == gemId) {\n\t\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t\t}\n\t\t}\n\t\treturn curItem;\n\t}\n\n\tasActionId(): ActionId {\n\t\treturn ActionId.fromItemId(this._item.id);\n\t}\n\n\tasSpec(): ItemSpec {\n\t\treturn ItemSpec.create({\n\t\t\tid: this._item.id,\n\t\t\tenchant: this._enchant?.effectId,\n\t\t\tgems: this._gems.map(gem => gem?.id || 0),\n\t\t});\n\t}\n\n\tmeetsSocketBonus(): boolean {\n\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t}\n\n\tsocketBonusStats(): Stats {\n\t\tif (this.meetsSocketBonus()) {\n\t\t\treturn new Stats(this._item.socketBonus);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n\n\t// Whether this item could have an extra socket, assuming Blacksmithing.\n\tcouldHaveExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n\t}\n\n\thasExtraSocket(isBlacksmithing: boolean): boolean {\n\t\treturn this.item.type == ItemType.ItemTypeWaist ||\n\t\t\t(isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n\t}\n\n\tnumSockets(isBlacksmithing: boolean): number {\n\t\treturn this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n\t}\n\n\thasExtraGem(): boolean {\n\t\treturn this._gems.length > this.item.gemSockets.length;\n\t}\n\n\tallSocketColors(): Array<GemColor> {\n\t\treturn this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\tcurSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n\t\treturn this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\n\tcurGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn (this._gems.filter(g => g != null) as Array<Gem>).slice(0, this.numSockets(isBlacksmithing));\n\t}\n\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\tlet failed: Array<Item | Gem | Enchant> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n\t\t\tfailed.push(this._item);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._enchant.requiredProfession)) {\n\t\t\tfailed.push(this._enchant);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n\t\t\t\tfailed.push(gem);\n\t\t\t}\n\t\t});\n\t\treturn failed;\n\t}\n};\n","import { EquipmentSpec } from '../proto/common.js';\nimport { GemColor } from '../proto/common.js';\nimport { ItemSlot } from '../proto/common.js';\nimport { ItemSpec } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { SimDatabase } from '../proto/common.js';\nimport { SimItem } from '../proto/common.js';\nimport { SimEnchant } from '../proto/common.js';\nimport { SimGem } from '../proto/common.js';\nimport { WeaponType } from '../proto/common.js';\nimport { equalsOrBothNull } from '../utils.js';\nimport { distinct, getEnumValues } from '../utils.js';\nimport { isBluntWeaponType, isSharpWeaponType } from '../proto_utils/utils.js';\nimport {\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport { isMetaGemActive } from './gems.js';\nimport { gemMatchesSocket } from './gems.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { validWeaponCombo } from './utils.js';\nimport { Stats } from './stats.js';\n\ntype InternalGear = Record<ItemSlot, EquippedItem | null>;\n\n/**\n * Represents a full gear set, including items/enchants/gems for every slot.\n *\n * This is an immutable type.\n */\nexport class Gear {\n\tprivate readonly gear: InternalGear;\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tgetEnumValues(ItemSlot).forEach(slot => {\n\t\t\tif (!gear[slot as ItemSlot])\n\t\t\t\tgear[slot as ItemSlot] = null;\n\t\t});\n\t\tthis.gear = gear as InternalGear;\n\t}\n\n\tequals(other: Gear): boolean {\n\t\treturn this.asArray().every((thisItem, slot) => equalsOrBothNull(thisItem, other.getEquippedItem(slot), (a, b) => a.equals(b)));\n\t}\n\n\t/**\n\t * Returns a new Gear set with the item equipped.\n\t *\n\t * Checks for validity and removes/exchanges items/gems as needed.\n\t */\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Gear {\n\t\t// Create a new identical set of gear\n\t\tconst newInternalGear = this.asMap();\n\n\t\tif (newItem) {\n\t\t\t// If the new item has unique gems, remove matching.\n\t\t\tnewItem.gems\n\t\t\t\t.filter(gem => gem?.unique)\n\t\t\t\t.forEach(gem => {\n\t\t\t\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\t\t\tnewInternalGear[slot] = newInternalGear[slot]?.removeGemsWithId(gem!.id) || null;\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t// If the new item is unique, remove matching items.\n\t\t\tif (newItem.item.unique) {\n\t\t\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\t\t\tif (newInternalGear[slot]?.item.id == newItem.item.id) {\n\t\t\t\t\t\tnewInternalGear[slot] = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Actually assign the new item.\n\t\tnewInternalGear[newSlot] = newItem;\n\n\t\t// Check for valid weapon combos.\n\t\tif (!validWeaponCombo(newInternalGear[ItemSlot.ItemSlotMainHand]?.item, newInternalGear[ItemSlot.ItemSlotOffHand]?.item, canDualWield2H)) {\n\t\t\tif (newSlot == ItemSlot.ItemSlotOffHand) {\n\t\t\t\tnewInternalGear[ItemSlot.ItemSlotMainHand] = null;\n\t\t\t} else {\n\t\t\t\tnewInternalGear[ItemSlot.ItemSlotOffHand] = null;\n\t\t\t}\n\t\t}\n\n\t\treturn new Gear(newInternalGear);\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear[slot];\n\t}\n\n\tgetTrinkets(): Array<EquippedItem | null> {\n\t\treturn [\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket1),\n\t\t\tthis.getEquippedItem(ItemSlot.ItemSlotTrinket2),\n\t\t];\n\t}\n\n\thasTrinket(itemId: number): boolean {\n\t\treturn this.getTrinkets().map(t => t?.item.id).includes(itemId);\n\t}\n\n\tasMap(): InternalGear {\n\t\tconst newInternalGear: Partial<InternalGear> = {};\n\t\tgetEnumValues(ItemSlot).map(slot => Number(slot) as ItemSlot).forEach(slot => {\n\t\t\tnewInternalGear[slot] = this.getEquippedItem(slot);\n\t\t});\n\t\treturn newInternalGear as InternalGear;\n\t}\n\n\tasArray(): Array<EquippedItem | null> {\n\t\treturn Object.values(this.gear);\n\t}\n\n\tasSpec(): EquipmentSpec {\n\t\treturn EquipmentSpec.create({\n\t\t\titems: this.asArray().map(ei => ei ? ei.asSpec() : ItemSpec.create()),\n\t\t});\n\t}\n\n\tgetAllGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.asArray()\n\t\t\t.map(ei => ei == null ? [] : ei.curGems(isBlacksmithing))\n\t\t\t.flat();\n\t}\n\n\tgetNonMetaGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color != GemColor.GemColorMeta);\n\t}\n\n\tstatsFromGems(isBlacksmithing: boolean): Stats {\n\t\tlet stats = new Stats();\n\n\t\t// Stats from just the gems.\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\tfor (let i = 0; i < gems.length; i++) {\n\t\t\tstats = stats.add(new Stats(gems[i].stats));\n\t\t}\n\n\t\t// Stats from socket bonuses.\n\t\tconst items = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tstats = stats.add(items[i].socketBonusStats());\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tgetGemsOfColor(color: GemColor, isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color == color);\n\t}\n\n\tgetJCGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.requiredProfession == Profession.Jewelcrafting);\n\t}\n\n\tgetMetaGem(): Gem | null {\n\t\treturn this.getGemsOfColor(GemColor.GemColorMeta, true)[0] || null;\n\t}\n\n\tgemColorCounts(isBlacksmithing: boolean): ({ red: number, yellow: number, blue: number }) {\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn {\n\t\t\tred: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorRed)).length,\n\t\t\tyellow: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorYellow)).length,\n\t\t\tblue: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorBlue)).length,\n\t\t};\n\t}\n\n\t// Returns true if this gear set has a meta gem AND the other gems meet the meta's conditions.\n\thasActiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (!metaGem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst gemColorCounts = this.gemColorCounts(isBlacksmithing);\n\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn isMetaGemActive(\n\t\t\tmetaGem,\n\t\t\tgemColorCounts.red, gemColorCounts.yellow, gemColorCounts.blue);\n\t}\n\n\thasInactiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\treturn this.getMetaGem() != null && !this.hasActiveMetaGem(isBlacksmithing);\n\t}\n\n\twithoutMetaGem(): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (headItem && metaGem) {\n\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.removeGemsWithId(metaGem.id), true);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\t// Removes bonus gems from blacksmith profession bonus.\n\twithoutBlacksmithSockets(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tconst wristItem = this.getEquippedItem(ItemSlot.ItemSlotWrist);\n\t\tif (wristItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotWrist, wristItem.withGem(null, wristItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\tconst handsItem = this.getEquippedItem(ItemSlot.ItemSlotHands);\n\t\tif (handsItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotHands, handsItem.withGem(null, handsItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\thasBluntMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\thasBluntOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\treturn (this.asArray().filter(ei => ei != null) as Array<EquippedItem>)\n\t\t\t.map(ei => ei.getFailedProfessionRequirements(professions))\n\t\t\t.flat();\n\t}\n\n\ttoDatabase(): SimDatabase {\n\t\tconst equippedItems = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(equippedItems.map(ei => Gear.itemToDB(ei.item))),\n\t\t\tenchants: distinct(equippedItems.filter(ei => ei.enchant).map(ei => Gear.enchantToDB(ei.enchant!))),\n\t\t\tgems: distinct(equippedItems.map(ei => ei.curGems(true).map(gem => Gear.gemToDB(gem))).flat()),\n\t\t});\n\t}\n\n\tprivate static itemToDB(item: Item): SimItem {\n\t\treturn SimItem.fromJson(Item.toJson(item), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static enchantToDB(enchant: Enchant): SimEnchant {\n\t\treturn SimEnchant.fromJson(Enchant.toJson(enchant), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static gemToDB(gem: Gem): SimGem {\n\t\treturn SimGem.fromJson(Gem.toJson(gem), { ignoreUnknownFields: true });\n\t}\n}\n","import {\n\tEquipmentSpec,\n\tGemColor,\n\tItemSlot,\n\tItemSpec,\n\tPresetEncounter,\n\tPresetTarget,\n} from '../proto/common.js';\nimport {\n\tIconData,\n\tUIDatabase,\n\tUIEnchant as Enchant,\n\tUIGem as Gem,\n\tUIItem as Item,\n} from '../proto/ui.js';\n\nimport {\n\tgetEligibleEnchantSlots,\n\tgetEligibleItemSlots,\n} from './utils.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { Gear } from './gear.js';\n\nconst dbUrlJson = '/wotlk/assets/database/db.json';\nconst dbUrlBin = '/wotlk/assets/database/db.bin';\nconst leftoversUrlJson = '/wotlk/assets/database/leftover_db.json';\nconst leftoversUrlBin = '/wotlk/assets/database/leftover_db.bin';\n// When changing this value, don't forget to change the html <link> for preloading!\nconst READ_JSON = false;\n\nexport class Database {\n\tprivate static loadPromise: Promise<Database>|null = null;\n\tstatic get(): Promise<Database> {\n\t\tif (Database.loadPromise == null) {\n\t\t\tif (READ_JSON) {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlJson)\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(json => new Database(UIDatabase.fromJson(json)));\n\t\t\t} else {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlBin)\n\t\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t\t.then(buffer => new Database(UIDatabase.fromBinary(new Uint8Array(buffer))));\n\t\t\t}\n\t\t}\n\t\treturn Database.loadPromise;\n\t}\n\n\tstatic getLeftovers(): Promise<UIDatabase> {\n\t\tif (READ_JSON) {\n\t\t\treturn fetch(leftoversUrlJson)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => UIDatabase.fromJson(json));\n\t\t} else {\n\t\t\treturn fetch(leftoversUrlBin)\n\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t.then(buffer => UIDatabase.fromBinary(new Uint8Array(buffer)));\n\t\t}\n\t}\n\n\t// Checks if any items in the equipment are missing from the current DB. If so, loads the leftover DB.\n\tstatic async loadLeftoversIfNecessary(equipment: EquipmentSpec): Promise<void> {\n\t\tconst db = await Database.get();\n\t\tif (db.loadedLeftovers) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst shouldLoadLeftovers = equipment.items.some(item => item.id != 0 && !db.items[item.id]);\n\t\tif (shouldLoadLeftovers) {\n\t\t\tconst leftoverDb = await Database.getLeftovers();\n\t\t\tdb.loadProto(leftoverDb);\n\t\t\tdb.loadedLeftovers = true;\n\t\t}\n\t}\n\n\tprivate readonly items: Record<number, Item> = {};\n\tprivate readonly enchantsBySlot: Partial<Record<ItemSlot, Enchant[]>> = {};\n\tprivate readonly gems: Record<number, Gem> = {};\n\tprivate readonly presetEncounters: Record<string, PresetEncounter> = {};\n\tprivate readonly presetTargets: Record<string, PresetTarget> = {};\n\tprivate readonly itemIcons: Record<number, Promise<IconData>>;\n\tprivate readonly spellIcons: Record<number, Promise<IconData>>;\n\tprivate loadedLeftovers: boolean = false;\n\n\tprivate constructor(db: UIDatabase) {\n\t\tthis.itemIcons = {};\n\t\tthis.spellIcons = {};\n\t\tthis.loadProto(db);\n\t}\n\n\t// Add all data from the db proto into this database.\n\tprivate loadProto(db: UIDatabase) {\n\t\tdb.items.forEach(item => this.items[item.id] = item);\n\t\tdb.enchants.forEach(enchant => {\n\t\t\tconst slots = getEligibleEnchantSlots(enchant);\n\t\t\tslots.forEach(slot => {\n\t\t\t\tif (!this.enchantsBySlot[slot]) {\n\t\t\t\t\tthis.enchantsBySlot[slot] = [];\n\t\t\t\t}\n\t\t\t\tthis.enchantsBySlot[slot]!.push(enchant);\n\t\t\t});\n\t\t});\n\t\tdb.gems.forEach(gem => this.gems[gem.id] = gem);\n\n\t\tdb.encounters.forEach(encounter => this.presetEncounters[encounter.path] = encounter);\n\t\tdb.encounters.map(e => e.targets).flat().forEach(target => this.presetTargets[target.path] = target);\n\n\t\tdb.items.forEach(item => this.itemIcons[item.id] = new Promise((resolve, _) => resolve(IconData.create({\n\t\t\tid: item.id,\n\t\t\tname: item.name,\n\t\t\ticon: item.icon,\n\t\t}))));\n\t\tdb.gems.forEach(gem => this.itemIcons[gem.id] = new Promise((resolve, _) => resolve(IconData.create({\n\t\t\tid: gem.id,\n\t\t\tname: gem.name,\n\t\t\ticon: gem.icon,\n\t\t}))));\n\t\tdb.itemIcons.forEach(data => this.itemIcons[data.id] = new Promise((resolve, _) => resolve(data)));\n\t\tdb.spellIcons.forEach(data => this.spellIcons[data.id] = new Promise((resolve, _) => resolve(data)));\n\t}\n\n\tgetItems(slot: ItemSlot): Array<Item> {\n\t\tlet items = Object.values(this.items);\n\t\titems = items.filter(item => getEligibleItemSlots(item).includes(slot));\n\t\treturn items;\n\t}\n\n\tgetEnchants(slot: ItemSlot): Array<Enchant> {\n\t\treturn this.enchantsBySlot[slot] || [];\n\t}\n\n\tgetGems(socketColor?: GemColor): Array<Gem> {\n\t\tlet gems = Object.values(this.gems);\n\t\tif (socketColor) {\n\t\t\tgems = gems.filter(gem => gemEligibleForSocket(gem, socketColor));\n\t\t}\n\t\treturn gems;\n\t}\n\n\tgetMatchingGems(socketColor: GemColor): Array<Gem> {\n\t\treturn Object.values(this.gems).filter(gem => gemMatchesSocket(gem, socketColor));\n\t}\n\n\tlookupItemSpec(itemSpec: ItemSpec): EquippedItem | null {\n\t\tconst item = this.items[itemSpec.id];\n\t\tif (!item)\n\t\t\treturn null;\n\n\t\tlet enchant: Enchant | null = null;\n\t\tif (itemSpec.enchant) {\n\t\t\tconst slots = getEligibleItemSlots(item);\n\t\t\tfor (let i = 0; i < slots.length; i++) {\n\t\t\t\tenchant = (this.enchantsBySlot[slots[i]] || [])\n\t\t\t\t\t\t.find(enchant => [enchant.effectId, enchant.itemId, enchant.spellId].includes(itemSpec.enchant)) || null;\n\t\t\t\tif (enchant) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst gems = itemSpec.gems.map(gemId => this.gems[gemId] || null);\n\n\t\treturn new EquippedItem(item, enchant, gems);\n\t}\n\n\tlookupEquipmentSpec(equipSpec: EquipmentSpec): Gear {\n\t\t// EquipmentSpec is supposed to be indexed by slot, but here we assume\n\t\t// it isn't just in case.\n\t\tconst gearMap: Partial<Record<ItemSlot, EquippedItem | null>> = {};\n\n\t\tequipSpec.items.forEach(itemSpec => {\n\t\t\tconst item = this.lookupItemSpec(itemSpec);\n\t\t\tif (!item)\n\t\t\t\treturn;\n\n\t\t\tconst itemSlots = getEligibleItemSlots(item.item);\n\n\t\t\tconst assignedSlot = itemSlots.find(slot => !gearMap[slot]);\n\t\t\tif (assignedSlot == null)\n\t\t\t\tthrow new Error('No slots left to equip ' + Item.toJsonString(item.item));\n\n\t\t\tgearMap[assignedSlot] = item;\n\t\t});\n\n\t\treturn new Gear(gearMap);\n\t}\n\n\tgetPresetEncounter(path: string): PresetEncounter | null {\n\t\treturn this.presetEncounters[path] || null;\n\t}\n\tgetPresetTarget(path: string): PresetTarget | null {\n\t\treturn this.presetTargets[path] || null;\n\t}\n\tgetAllPresetEncounters(): Array<PresetEncounter> {\n\t\treturn Object.values(this.presetEncounters);\n\t}\n\tgetAllPresetTargets(): Array<PresetTarget> {\n\t\treturn Object.values(this.presetTargets);\n\t}\n\n\tstatic async getItemIconData(itemId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.itemIcons[itemId]) {\n\t\t\tdb.itemIcons[itemId] = Database.getWowheadItemTooltipData(itemId);\n\t\t}\n\t\treturn await db.itemIcons[itemId];\n\t}\n\n\tstatic async getSpellIconData(spellId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.spellIcons[spellId]) {\n\t\t\tdb.spellIcons[spellId] = Database.getWowheadSpellTooltipData(spellId);\n\t\t}\n\t\treturn await db.spellIcons[spellId];\n\t}\n\n\tprivate static async getWowheadItemTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'item');\n\t}\n\tprivate static async getWowheadSpellTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'spell');\n\t}\n\tprivate static async getWowheadTooltipData(id: number, tooltipPostfix: string): Promise<IconData> {\n\t\tconst url = `https://nether.wowhead.com/wotlk/tooltip/${tooltipPostfix}/${id}`;\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst json = await response.json();\n\t\t\treturn IconData.create({\n\t\t\t\tid: id,\n\t\t\t\tname: json['name'],\n\t\t\t\ticon: json['icon'],\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\treturn IconData.create();\n\t\t}\n\t}\n}\n","import { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { resourceNames, stringToResourceType } from '../proto_utils/names.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\n\nexport class Entity {\n\treadonly name: string;\n\treadonly ownerName: string; // Blank if not a pet.\n\n\t// Either target index, player index, or owner index depending on what kind\n\t// of entity this is.\n\treadonly index: number;\n\n\treadonly isTarget: boolean;\n\treadonly isPet: boolean;\n\n\tconstructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n\t\tthis.name = name;\n\t\tthis.ownerName = ownerName;\n\t\tthis.index = index;\n\t\tthis.isTarget = isTarget;\n\t\tthis.isPet = isPet;\n\t}\n\n\tequals(other: Entity) {\n\t\treturn this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn 'Target ' + (this.index + 1);\n\t\t} else if (this.isPet) {\n\t\t\treturn `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n\t\t} else {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t}\n\t}\n\n\t// Parses one or more Entities from a string.\n\t// Each entity label should be one of:\n\t//   'Target 1' if a target,\n\t//   'PlayerName (#1)' if a player, or\n\t//   'PlayerName (#1) - PetName' if a pet.\n\tstatic parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9\\s]+) \\(#(\\d+)\\))\\]/g;\n\tstatic parseAll(str: string): Array<Entity> {\n\t\treturn Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n\t\t\tif (match[1]) {\n\t\t\t\treturn new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n\t\t\t} else if (match[3]) {\n\t\t\t\treturn new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n\t\t\t} else if (match[7]) {\n\t\t\t\treturn new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Entity match');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SimLogParams {\n\traw: string,\n\tlogIndex: number,\n\ttimestamp: number,\n\tsource: Entity | null,\n\ttarget: Entity | null,\n\tactionId: ActionId | null,\n\tthreat: number,\n}\n\nexport class SimLog {\n\treadonly raw: string;\n\n\t// Index of this log within the full log output.\n\t// When comparing timestamps this should be used instead of timestamp, because\n\t// timestamp is scraped from log text and doesn't have enough precision.\n\treadonly logIndex: number;\n\n\t// Time in seconds from the encounter start.\n\treadonly timestamp: number;\n\n\treadonly source: Entity | null;\n\treadonly target: Entity | null;\n\treadonly actionId: ActionId | null;\n\n\t// Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n\treadonly threat: number;\n\n\t// Logs for auras that were active at this timestamp.\n\t// This is only filled if populateActiveAuras() is called.\n\tactiveAuras: Array<AuraUptimeLog>;\n\n\tconstructor(params: SimLogParams) {\n\t\tthis.raw = params.raw;\n\t\tthis.logIndex = params.logIndex;\n\t\tthis.timestamp = params.timestamp;\n\t\tthis.source = params.source;\n\t\tthis.target = params.target;\n\t\tthis.actionId = params.actionId;\n\t\tthis.threat = params.threat;\n\t\tthis.activeAuras = [];\n\t}\n\n\ttoString(): string {\n\t\treturn this.raw;\n\t}\n\n\ttoStringPrefix(): string {\n\t\tconst timestampStr = `[${this.timestamp.toFixed(2)}]`;\n\t\tif (this.source) {\n\t\t\treturn `${timestampStr} [${this.source}]`;\n\t\t} else {\n\t\t\treturn timestampStr;\n\t\t}\n\t}\n\n\tstatic async parseAll(result: RaidSimResult): Promise<Array<SimLog>> {\n\t\tconst lines = result.logs.split('\\n');\n\n\t\treturn Promise.all(lines.map((line, lineIndex) => {\n\t\t\tconst params: SimLogParams = {\n\t\t\t\traw: line,\n\t\t\t\tlogIndex: lineIndex,\n\t\t\t\ttimestamp: 0,\n\t\t\t\tsource: null,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t};\n\n\t\t\tconst threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n\t\t\tif (threatMatch) {\n\t\t\t\tparams.threat = parseFloat(threatMatch[1]);\n\t\t\t\tline = line.substring(0, threatMatch.index);\n\t\t\t}\n\n\t\t\tlet match = line.match(/\\[([0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n\t\t\tif (!match || !match[1]) {\n\t\t\t\treturn new SimLog(params);\n\t\t\t}\n\n\t\t\tparams.timestamp = parseFloat(match[1]);\n\t\t\tlet remainder = match[2];\n\n\t\t\tconst entities = Entity.parseAll(remainder);\n\t\t\tparams.source = entities[0] || null;\n\t\t\tparams.target = entities[1] || null;\n\n\t\t\t// Order from most to least common to reduce number of checks.\n\t\t\treturn DamageDealtLog.parse(params)\n\t\t\t\t|| ResourceChangedLog.parse(params)\n\t\t\t\t|| AuraEventLog.parse(params)\n\t\t\t\t|| AuraStacksChangeLog.parse(params)\n\t\t\t\t|| MajorCooldownUsedLog.parse(params)\n\t\t\t\t|| CastBeganLog.parse(params)\n\t\t\t\t|| CastCompletedLog.parse(params)\n\t\t\t\t|| StatChangeLog.parse(params)\n\t\t\t\t|| Promise.resolve(new SimLog(params));\n\t\t}));\n\t}\n\n\tisDamageDealt(): this is DamageDealtLog {\n\t\treturn this instanceof DamageDealtLog;\n\t}\n\n\tisResourceChanged(): this is ResourceChangedLog {\n\t\treturn this instanceof ResourceChangedLog;\n\t}\n\n\tisAuraEvent(): this is AuraEventLog {\n\t\treturn this instanceof AuraEventLog;\n\t}\n\n\tisAuraStacksChange(): this is AuraStacksChangeLog {\n\t\treturn this instanceof AuraStacksChangeLog;\n\t}\n\n\tisMajorCooldownUsed(): this is MajorCooldownUsedLog {\n\t\treturn this instanceof MajorCooldownUsedLog;\n\t}\n\n\tisCastBegan(): this is CastBeganLog {\n\t\treturn this instanceof CastBeganLog;\n\t}\n\n\tisCastCompleted(): this is CastCompletedLog {\n\t\treturn this instanceof CastCompletedLog;\n\t}\n\n\tisStatChange(): this is StatChangeLog {\n\t\treturn this instanceof StatChangeLog;\n\t}\n\n\t// Group events that happen at the same time.\n\tstatic groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n\t\tconst grouped: Array<Array<LogType>> = [];\n\t\tlet curGroup: Array<LogType> = [];\n\n\t\tlogs.forEach(log => {\n\t\t\tif (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n\t\t\t\tcurGroup.push(log);\n\t\t\t} else {\n\t\t\t\tgrouped.push(curGroup);\n\t\t\t\tcurGroup = [log];\n\t\t\t}\n\t\t});\n\t\tif (curGroup.length > 0) {\n\t\t\tgrouped.push(curGroup);\n\t\t}\n\n\t\treturn grouped;\n\t}\n}\n\nexport class DamageDealtLog extends SimLog {\n\treadonly amount: number;\n\treadonly type: string;\n\treadonly miss: boolean;\n\treadonly hit: boolean;\n\treadonly crit: boolean;\n\treadonly crush: boolean;\n\treadonly glance: boolean;\n\treadonly dodge: boolean;\n\treadonly parry: boolean;\n\treadonly block: boolean;\n\treadonly tick: boolean;\n\treadonly partialResist1_4: boolean;\n\treadonly partialResist2_4: boolean;\n\treadonly partialResist3_4: boolean;\n\n\tconstructor(params: SimLogParams, amount: number, type: string, miss: boolean, crit: boolean, crush: boolean, glance: boolean, dodge: boolean, parry: boolean, block: boolean, tick: boolean, partialResist1_4: boolean, partialResist2_4: boolean, partialResist3_4: boolean) {\n\t\tsuper(params);\n\t\tthis.amount = amount;\n\t\tthis.type = type;\n\t\tthis.miss = miss;\n\t\tthis.glance = glance;\n\t\tthis.dodge = dodge;\n\t\tthis.parry = parry;\n\t\tthis.block = block;\n\t\tthis.hit = !miss && !crit;\n\t\tthis.crit = crit;\n\t\tthis.crush = crush;\n\t\tthis.tick = tick;\n\t\tthis.partialResist1_4 = partialResist1_4;\n\t\tthis.partialResist2_4 = partialResist2_4;\n\t\tthis.partialResist3_4 = partialResist3_4;\n\t}\n\n\tisDamage(): boolean {\n\t\treturn this.type == 'damage';\n\t}\n\n\tisHealing(): boolean {\n\t\treturn this.type == 'healing';\n\t}\n\n\tisShielding(): boolean {\n\t\treturn this.type == 'shielding';\n\t}\n\n\tresultString(): string {\n\t\tlet result = '';\n\n\t\tif (this.isHealing()) {\n\t\t\tresult += 'Heal ';\n\t\t} else if (this.isShielding()) {\n\t\t\tresult += 'Shield ';\n\t\t}\n\n\t\tresult += this.miss ? 'Miss'\n\t\t\t: this.dodge ? 'Dodge'\n\t\t\t\t: this.parry ? 'Parry'\n\t\t\t\t\t: this.glance ? 'Glance'\n\t\t\t\t\t\t: this.block ? (this.crit ? 'Critical Block' : 'Block')\n\t\t\t\t\t\t\t: this.crit ? 'Crit'\n\t\t\t\t\t\t\t\t: this.crush ? 'Crush'\n\t\t\t\t\t\t\t\t\t: this.tick ? 'Tick'\n\t\t\t\t\t\t\t\t\t\t: 'Hit';\n\n\t\tresult += ' ' + this.target;\n\t\tif (!this.miss && !this.dodge && !this.parry) {\n\t\t\tresult += ` for ${this.amount.toFixed(2)}`;\n\t\t\tif (this.partialResist1_4) {\n\t\t\t\tresult += ' (25% Resist)';\n\t\t\t} else if (this.partialResist2_4) {\n\t\t\t\tresult += ' (50% Resist)';\n\t\t\t} else if (this.partialResist3_4) {\n\t\t\t\tresult += ' (75% Resist)';\n\t\t\t}\n\t\t\tresult += '.'\n\t\t}\n\t\treturn result;\n\t}\n\n\ttoString(): string {\n\t\tconst threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} ${this.resultString()}${threatPostfix}`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n\t\tconst match = params.raw.match(/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) ((damage)|(healing)|(shielding)))?/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\n\t\t\t\tconst amount = match[16] ? parseFloat(match[16]) : 0;\n\t\t\t\tconst type = match[17] || '';\n\n\t\t\t\treturn new DamageDealtLog(\n\t\t\t\t\tparams,\n\t\t\t\t\tamount,\n\t\t\t\t\ttype,\n\t\t\t\t\tmatch[3] == 'Miss',\n\t\t\t\t\tmatch[3] == 'Crit' || match[3] == 'CriticalBlock',\n\t\t\t\t\tmatch[3] == 'Crush',\n\t\t\t\t\tmatch[3] == 'Glance',\n\t\t\t\t\tmatch[3] == 'Dodge',\n\t\t\t\t\tmatch[3] == 'Parry',\n\t\t\t\t\tmatch[3] == 'Block' || match[3] == 'CriticalBlock',\n\t\t\t\t\tBoolean(match[2]) && match[2].includes('tick'),\n\t\t\t\t\tmatch[14] == '25',\n\t\t\t\t\tmatch[14] == '50',\n\t\t\t\t\tmatch[14] == '75');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class DpsLog extends SimLog {\n\treadonly dps: number;\n\n\t// Damage events that occurred at the same time as this log.\n\treadonly damageLogs: Array<DamageDealtLog>;\n\n\tconstructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n\t\tsuper(params);\n\t\tthis.dps = dps;\n\t\tthis.damageLogs = damageLogs;\n\t}\n\n\tstatic DPS_WINDOW = 15; // Window over which to calculate DPS.\n\tstatic fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n\t\tconst groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n\t\tlet curDamageLogs: Array<DamageDealtLog> = [];\n\t\tlet curDamageTotal = 0;\n\n\t\treturn groupedDamageLogs.map(ddLogGroup => {\n\t\t\tddLogGroup.forEach(ddLog => {\n\t\t\t\tcurDamageLogs.push(ddLog);\n\t\t\t\tcurDamageTotal += ddLog.amount;\n\t\t\t});\n\n\t\t\tconst newStartIdx = curDamageLogs.findIndex(curLog => {\n\t\t\t\tconst inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n\t\t\t\tif (!inWindow) {\n\t\t\t\t\tcurDamageTotal -= curLog.amount;\n\t\t\t\t}\n\t\t\t\treturn inWindow;\n\t\t\t});\n\t\t\tif (newStartIdx == -1) {\n\t\t\t\tcurDamageLogs = [];\n\t\t\t} else {\n\t\t\t\tcurDamageLogs = curDamageLogs.slice(newStartIdx);\n\t\t\t}\n\n\t\t\tconst dps = curDamageTotal / DpsLog.DPS_WINDOW;\n\t\t\tif (isNaN(dps)) {\n\t\t\t\tconsole.warn('NaN dps!');\n\t\t\t}\n\n\t\t\treturn new DpsLog({\n\t\t\t\traw: '',\n\t\t\t\tlogIndex: ddLogGroup[0].logIndex,\n\t\t\t\ttimestamp: ddLogGroup[0].timestamp,\n\t\t\t\tsource: ddLogGroup[0].source,\n\t\t\t\ttarget: null,\n\t\t\t\tactionId: null,\n\t\t\t\tthreat: 0,\n\t\t\t}, dps, ddLogGroup);\n\t\t});\n\t}\n}\n\nexport class ThreatLogGroup extends SimLog {\n\treadonly threatBefore: number;\n\treadonly threatAfter: number;\n\treadonly logs: Array<SimLog>;\n\n\tconstructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n\t\tsuper(params);\n\t\tthis.threatBefore = threatBefore;\n\t\tthis.threatAfter = threatAfter;\n\t\tthis.logs = logs;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n\t\tlet curThreat = 0;\n\t\treturn groupedLogs.map(logGroup => {\n\t\t\tconst newThreat = sum(logGroup.map(log => log.threat));\n\t\t\tconst threatLog = new ThreatLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: newThreat,\n\t\t\t\t},\n\t\t\t\tcurThreat,\n\t\t\t\tcurThreat + newThreat,\n\t\t\t\tlogGroup);\n\n\t\t\tcurThreat += newThreat;\n\t\t\treturn threatLog;\n\t\t});\n\t}\n}\n\nexport class AuraEventLog extends SimLog {\n\treadonly isGained: boolean;\n\treadonly isFaded: boolean;\n\treadonly isRefreshed: boolean;\n\n\tconstructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n\t\tsuper(params);\n\t\tthis.isGained = isGained;\n\t\tthis.isFaded = isFaded;\n\t\tthis.isRefreshed = isRefreshed;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Aura ${this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraEventLog> | null {\n\t\tconst match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n\t\tif (match && match[5]) {\n\t\t\treturn ActionId.fromLogString(match[5]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\tconst event = match[1];\n\t\t\t\treturn new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n\treadonly oldStacks: number;\n\treadonly newStacks: number;\n\n\tconstructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n\t\tsuper(params);\n\t\tthis.oldStacks = oldStacks;\n\t\tthis.newStacks = newStacks;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${this.actionId!.name} stacks: ${this.oldStacks} --> ${this.newStacks}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n\t\tconst match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n\t\tif (match && match[1]) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(aura => {\n\t\t\t\tparams.actionId = aura;\n\t\t\t\treturn new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraUptimeLog extends SimLog {\n\treadonly gainedAt: number;\n\treadonly fadedAt: number;\n\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n\tconstructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n\t\tsuper(params);\n\t\tthis.gainedAt = params.timestamp;\n\t\tthis.fadedAt = fadedAt;\n\t\tthis.stacksChange = stacksChange;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n\t\tlet unmatchedGainedLogs: Array<{ gained: AuraEventLog, stacks: Array<AuraStacksChangeLog> }> = [];\n\t\tconst uptimeLogs: Array<AuraUptimeLog> = [];\n\n\t\tlogs.forEach((log: SimLog) => {\n\t\t\tif (!log.source || !log.source.equals(entity)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isGained) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\tconsole.warn('Unmatched aura faded log: ' + log.actionId!.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: log.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: log.source,\n\t\t\t\ttarget: log.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, log.timestamp, stacksChangeLogs));\n\n\t\t\tif (log.isRefreshed) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t}\n\t\t});\n\n\t\t// Auras active at the end won't have a faded log, so need to add them separately.\n\t\tunmatchedGainedLogs.forEach(unmatchedLog => {\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n\t\t\tuptimeLogs.push(new AuraUptimeLog({\n\t\t\t\traw: gainedLog.raw,\n\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\tsource: gainedLog.source,\n\t\t\t\ttarget: gainedLog.target,\n\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\tthreat: gainedLog.threat,\n\t\t\t}, encounterDuration, stacksChangeLogs));\n\t\t});\n\n\t\tuptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n\t\treturn uptimeLogs;\n\t}\n\n\t// Populates the activeAuras field for all logs using the provided auras.\n\tstatic populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n\t\tlet curAuras: Array<AuraUptimeLog> = [];\n\t\tlet auraLogsIndex = 0;\n\n\t\tlogs.forEach(log => {\n\t\t\twhile (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n\t\t\t\tcurAuras.push(auraLogs[auraLogsIndex]);\n\t\t\t\tauraLogsIndex++;\n\t\t\t}\n\t\t\tcurAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n\t\t\tconst activeAuras = curAuras.slice();\n\t\t\tactiveAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\t\tlog.activeAuras = activeAuras;\n\t\t});\n\t}\n}\n\nexport class ResourceChangedLog extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly isSpend: boolean;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.isSpend = isSpend;\n\t}\n\n\ttoString(): string {\n\t\tconst signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\n\t\tconst isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n\t\tconst verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : (this.isSpend ? 'Spent' : 'Gained');\n\n\t\treturn `${this.toStringPrefix()} ${verb} ${signedDiff.toFixed(1)} ${resourceNames[this.resourceType]} from ${this.actionId!.name}. (${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)})`;\n\t}\n\n\tresultString(): string {\n\t\tconst delta = this.valueAfter - this.valueBefore;\n\t\tif (delta < 0) {\n\t\t\treturn delta.toFixed(1);\n\t\t} else {\n\t\t\treturn '+' + delta.toFixed(1);\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)/);\n\t\tif (match) {\n\t\t\tconst resourceType = stringToResourceType(match[4]);\n\t\t\treturn ActionId.fromLogString(match[16]).fill(params.source?.index).then(cause => {\n\t\t\t\tparams.actionId = cause;\n\t\t\t\treturn new ResourceChangedLog(params, resourceType, parseFloat(match[17]), parseFloat(match[18]), match[1] == 'Spent');\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly logs: Array<ResourceChangedLog>;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, logs: Array<ResourceChangedLog>) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.logs = logs;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} ${resourceNames[this.resourceType]}: ${this.valueBefore.toFixed(1)} --> ${this.valueAfter.toFixed(1)}`;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n\t\tconst allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n\t\tconst results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n\t\tconst resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n\t\tresourceTypes.forEach(resourceType => {\n\t\t\tconst resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n\t\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n\t\t\tresults[resourceType] = groupedLogs.map(logGroup => new ResourceChangedLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t},\n\t\t\t\tresourceType,\n\t\t\t\tlogGroup[0].valueBefore,\n\t\t\t\tlogGroup[logGroup.length - 1].valueAfter,\n\t\t\t\tlogGroup));\n\t\t});\n\n\t\treturn results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\t}\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Major cooldown used: ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n\t\tconst match = params.raw.match(/Major cooldown used: (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(cooldownId => {\n\t\t\t\tparams.actionId = cooldownId;\n\t\t\t\treturn new MajorCooldownUsedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastBeganLog extends SimLog {\n\treadonly manaCost: number;\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\n\tconstructor(params: SimLogParams, manaCost: number, castTime: number, effectiveTime: number) {\n\t\tsuper(params);\n\t\tthis.manaCost = manaCost;\n\t\tthis.castTime = castTime;\n\t\tthis.effectiveTime = effectiveTime;\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s, Cost = ${this.manaCost.toFixed(1)}).`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastBeganLog> | null {\n\t\tconst match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s), Effective Time = (\\d+\\.?\\d*)(m?s)\\)/);\n\t\tif (match) {\n\t\t\tlet castTime = parseFloat(match[3]);\n\t\t\tif (match[4] == 'ms') {\n\t\t\t\tcastTime /= 1000;\n\t\t\t}\n\t\t\tlet effectiveTime = parseFloat(match[5]);\n\t\t\tif (match[6] == 'ms') {\n\t\t\t\teffectiveTime /= 1000;\n\t\t\t}\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastBeganLog(params, parseFloat(match[2]), castTime, effectiveTime);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastCompletedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Completed cast ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n\t\tconst match = params.raw.match(/Completed cast (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1]).fill(params.source?.index).then(castId => {\n\t\t\t\tparams.actionId = castId;\n\t\t\t\treturn new CastCompletedLog(params);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastLog extends SimLog {\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\treadonly travelTime: number;\n\n\treadonly castBeganLog: CastBeganLog;\n\treadonly castCompletedLog: CastCompletedLog | null;\n\n\t// All instances of damage dealt from the completion of this cast until the completion of the next cast.\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\n\tconstructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n\t\tsuper({\n\t\t\traw: castBeganLog.raw,\n\t\t\tlogIndex: castBeganLog.logIndex,\n\t\t\ttimestamp: castBeganLog.timestamp,\n\t\t\tsource: castBeganLog.source,\n\t\t\ttarget: castBeganLog.target,\n\t\t\tactionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n\t\t\tthreat: castCompletedLog?.threat || castBeganLog.threat,\n\t\t});\n\t\tthis.castTime = castBeganLog.castTime;\n\t\tthis.effectiveTime = castBeganLog.effectiveTime;\n\t\tthis.castBeganLog = castBeganLog;\n\t\tthis.castCompletedLog = castCompletedLog;\n\t\tthis.damageDealtLogs = damageDealtLogs;\n\n\t\tif (this.castCompletedLog && this.damageDealtLogs.length == 1 &&\n\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t!this.damageDealtLogs[0].tick) {\n\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t} else {\n\t\t\tthis.travelTime = 0;\n\t\t}\n\t}\n\n\ttoString(): string {\n\t\treturn `${this.toStringPrefix()} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s).`;\n\t}\n\n\ttotalDamage(): number {\n\t\treturn sum(this.damageDealtLogs.map(ddl => ddl.amount));\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<CastLog> {\n\t\tconst castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n\t\tconst castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n\t\tconst damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n\t\tconst toBucketKey = (actionId: ActionId) => {\n\t\t\tif (actionId.spellId == 30451) {\n\t\t\t\t// Arcane Blast is unique because it can finish its cast as a different\n\t\t\t\t// spell than it started (if stacks drop).\n\t\t\t\treturn actionId.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn actionId.toString();\n\t\t\t}\n\t\t};\n\t\tconst castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n\t\tconst castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n\t\tconst damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n\t\tconst castLogs: Array<CastLog> = [];\n\t\tObject.keys(castBeganLogsByAbility).forEach(bucketKey => {\n\t\t\tconst abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n\t\t\tconst abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n\t\t\tconst abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n\t\t\tconst actionId = abilityCastsBegan[0].actionId!;\n\n\t\t\tlet ddIdx = 0;\n\t\t\tfor (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n\t\t\t\tconst cbLog = abilityCastsBegan[cbIdx];\n\n\t\t\t\t// Assume cast completed log is the same index because they always come in pairs.\n\t\t\t\t// Only exception is final pair, where there might be a cast began without a cast completed.\n\t\t\t\tconst ccLog = abilityCastsCompleted[cbIdx] || null;\n\t\t\t\tconst nextCcLog = abilityCastsCompleted[cbIdx + 1] || null;\n\n\t\t\t\t// Find all damage dealt logs between the cur and next cast completed logs.\n\t\t\t\tlet ddLogs = [];\n\t\t\t\twhile (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n\t\t\t\t\tddLogs.push(abilityDamageDealt[ddIdx]);\n\t\t\t\t\tddIdx++\n\t\t\t\t}\n\t\t\t\tcastLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n\t\t\t}\n\t\t});\n\n\t\tcastLogs.sort((a, b) => a.timestamp - b.timestamp);\n\t\treturn castLogs;\n\t}\n}\n\nexport class StatChangeLog extends SimLog {\n\treadonly isGain: boolean;\n\treadonly stats: string;\n\n\tconstructor(params: SimLogParams, isGain: boolean, stats: string) {\n\t\tsuper(params);\n\t\tthis.isGain = isGain;\n\t\tthis.stats = stats;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isGain) {\n\t\t\treturn `${this.toStringPrefix()} Gained ${this.stats} from ${this.actionId!.name}.`;\n\t\t} else {\n\t\t\treturn `${this.toStringPrefix()} Lost ${this.stats} from fading ${this.actionId!.name}.`;\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<StatChangeLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[6]).fill(params.source?.index).then(effectId => {\n\t\t\t\tparams.actionId = effectId;\n\t\t\t\tconst sign = match[1] == 'Lost' ? -1 : 1;\n\t\t\t\treturn new StatChangeLog(params, sign == 1, match[4]);\n\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { ActionMetrics as ActionMetricsProto } from '../proto/api.js';\nimport { AuraMetrics as AuraMetricsProto } from '../proto/api.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Encounter as EncounterProto } from '../proto/common.js';\nimport { EncounterMetrics as EncounterMetricsProto } from '../proto/api.js';\nimport { Party as PartyProto } from '../proto/api.js';\nimport { PartyMetrics as PartyMetricsProto } from '../proto/api.js';\nimport { Player as PlayerProto } from '../proto/api.js';\nimport { UnitMetrics as UnitMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidMetrics as RaidMetricsProto } from '../proto/api.js';\nimport { ResourceMetrics as ResourceMetricsProto, ResourceType } from '../proto/api.js';\nimport { Target as TargetProto } from '../proto/common.js';\nimport { TargetedActionMetrics as TargetedActionMetricsProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult } from '../proto/api.js';\nimport { Class } from '../proto/common.js';\nimport { Spec } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { classColors } from '../proto_utils/utils.js';\nimport { getTalentTreeIcon } from '../proto_utils/utils.js';\nimport { playerToSpec } from '../proto_utils/utils.js';\nimport { specToClass } from '../proto_utils/utils.js';\nimport { bucket } from '../utils.js';\nimport { sum } from '../utils.js';\n\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tDpsLog,\n\tEntity,\n\tMajorCooldownUsedLog,\n\tResourceChangedLogGroup,\n\tSimLog,\n\tThreatLogGroup,\n} from './logs_parser.js';\nimport { MAX_PARTY_SIZE } from '../party.js';\n\nexport interface SimResultFilter {\n\t// Raid index of the player to display, or null for all players.\n\tplayer?: number | null;\n\n\t// Target index of the target to display, or null for all targets.\n\ttarget?: number | null;\n}\n\nclass SimResultData {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\tconstructor(request: RaidSimRequest, result: RaidSimResult) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\treadonly raidMetrics: RaidMetrics;\n\treadonly encounterMetrics: EncounterMetrics;\n\treadonly logs: Array<SimLog>;\n\n\tprivate players: Array<UnitMetrics>;\n\tprivate units: Array<UnitMetrics>;\n\n\tprivate constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t\tthis.raidMetrics = raidMetrics;\n\t\tthis.encounterMetrics = encounterMetrics;\n\t\tthis.logs = logs;\n\n\t\tthis.players = raidMetrics.parties.map(party => party.players).flat();\n\t\tthis.units = this.players.concat(encounterMetrics.targets);\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n\n\tgetPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getUnitWithIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\t// Returns the first player, regardless of which party / raid slot its in.\n\tgetFirstPlayer(): UnitMetrics | null {\n\t\treturn this.getPlayers()[0] || null;\n\t}\n\n\tgetPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.unitIndex == unitIndex) || null;\n\t}\n\tgetPlayerWithRaidIndex(raidIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.index == raidIndex) || null;\n\t}\n\n\tgetTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.target || filter?.target === 0) {\n\t\t\tconst target = this.getUnitWithIndex(filter.target);\n\t\t\treturn target ? [target] : [];\n\t\t} else {\n\t\t\treturn this.encounterMetrics.targets.slice();\n\t\t}\n\t}\n\n\tgetTargetWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n\t}\n\tgetUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.units.find(unit => unit.unitIndex == unitIndex) || null;\n\t}\n\n\tgetDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n\t\tif (filter.player || filter.player === 0) {\n\t\t\treturn this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n\t\t}\n\n\t\treturn this.raidMetrics.dps;\n\t}\n\n\tgetActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(this.getPlayers(filter).map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter))).flat());\n\t}\n\n\tgetSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n\t}\n\n\tgetMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.joinById(this.getPlayers(filter).map(player => player.resources.filter(resource => resource.type == resourceType)).flat());\n\t}\n\n\tgetBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getPlayers(filter).map(player => player.auras).flat());\n\t}\n\n\tgetDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(this.getTargets(filter).map(target => target.auras).flat()).filter(aura => aura.uptimePercent != 0);\n\t}\n\n\ttoProto(): SimRun {\n\t\treturn SimRun.create({\n\t\t\trequest: this.request,\n\t\t\tresult: this.result,\n\t\t});\n\t}\n\n\tstatic async fromProto(proto: SimRun): Promise<SimResult> {\n\t\treturn SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n\t}\n\n\tstatic async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n\t\tconst resultData = new SimResultData(request, result);\n\t\tconst logs = await SimLog.parseAll(result);\n\n\t\tconst raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n\t\tconst encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n\t\tconst raidMetrics = await raidPromise;\n\t\tconst encounterMetrics = await encounterPromise;\n\n\t\treturn new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n\t}\n}\n\nexport class RaidMetrics {\n\tprivate readonly raid: RaidProto;\n\tprivate readonly metrics: RaidMetricsProto;\n\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly parties: Array<PartyMetrics>;\n\n\tprivate constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n\t\tthis.raid = raid;\n\t\tthis.metrics = metrics;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.parties = parties;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n\t\tconst numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n\t\tconst parties = await Promise.all(\n\t\t\t[...new Array(numParties).keys()]\n\t\t\t\t.map(i => PartyMetrics.makeNew(\n\t\t\t\t\tresultData,\n\t\t\t\t\traid.parties[i],\n\t\t\t\t\tmetrics.parties[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new RaidMetrics(raid, metrics, parties);\n\t}\n}\n\nexport class PartyMetrics {\n\tprivate readonly party: PartyProto;\n\tprivate readonly metrics: PartyMetricsProto;\n\n\treadonly partyIndex: number;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly players: Array<UnitMetrics>;\n\n\tprivate constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n\t\tthis.party = party;\n\t\tthis.metrics = metrics;\n\t\tthis.partyIndex = partyIndex;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.players = players;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, logs: Array<SimLog>): Promise<PartyMetrics> {\n\t\tconst numPlayers = Math.min(party.players.length, metrics.players.length);\n\t\tconst players = await Promise.all(\n\t\t\t[...new Array(numPlayers).keys()]\n\t\t\t\t.filter(i => party.players[i].class != Class.ClassUnknown)\n\t\t\t\t.map(i => UnitMetrics.makeNewPlayer(\n\t\t\t\t\tresultData,\n\t\t\t\t\tparty.players[i],\n\t\t\t\t\tmetrics.players[i],\n\t\t\t\t\tpartyIndex * 5 + i,\n\t\t\t\t\tfalse,\n\t\t\t\t\tlogs)));\n\n\t\treturn new PartyMetrics(party, metrics, partyIndex, players);\n\t}\n}\n\nexport class UnitMetrics {\n\t// If this Unit is a pet, player is the owner. If it's a target, player is null.\n\tprivate readonly player: PlayerProto | null;\n\tprivate readonly target: TargetProto | null;\n\tprivate readonly metrics: UnitMetricsProto;\n\n\treadonly index: number;\n\treadonly unitIndex: number;\n\treadonly name: string;\n\treadonly spec: Spec;\n\treadonly petActionId: ActionId | null;\n\treadonly iconUrl: string;\n\treadonly classColor: string;\n\treadonly dps: DistributionMetricsProto;\n\treadonly dpasp: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly tps: DistributionMetricsProto;\n\treadonly dtps: DistributionMetricsProto;\n\treadonly tto: DistributionMetricsProto;\n\treadonly actions: Array<ActionMetrics>;\n\treadonly auras: Array<AuraMetrics>;\n\treadonly resources: Array<ResourceMetrics>;\n\treadonly pets: Array<UnitMetrics>;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\n\treadonly logs: Array<SimLog>;\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\treadonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\treadonly dpsLogs: Array<DpsLog>;\n\treadonly auraUptimeLogs: Array<AuraUptimeLog>;\n\treadonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n\treadonly castLogs: Array<CastLog>;\n\treadonly threatLogs: Array<ThreatLogGroup>;\n\n\t// Aura uptime logs, filtered to include only auras that correspond to a\n\t// major cooldown.\n\treadonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n\tprivate constructor(\n\t\tplayer: PlayerProto | null,\n\t\ttarget: TargetProto | null,\n\t\tpetActionId: ActionId | null,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tactions: Array<ActionMetrics>,\n\t\tauras: Array<AuraMetrics>,\n\t\tresources: Array<ResourceMetrics>,\n\t\tpets: Array<UnitMetrics>,\n\t\tlogs: Array<SimLog>,\n\t\tresultData: SimResultData) {\n\t\tthis.player = player;\n\t\tthis.target = target;\n\t\tthis.metrics = metrics;\n\n\t\tthis.index = index;\n\t\tthis.unitIndex = metrics.unitIndex;\n\t\tthis.name = metrics.name;\n\t\tthis.spec = player ? playerToSpec(player) : 0;\n\t\tthis.petActionId = petActionId;\n\t\tthis.iconUrl = this.isPlayer ? getTalentTreeIcon(this.spec, player!.talentsString) :\n\t\t\t(this.isTarget ? defaultTargetIcon : '');\n\t\tthis.classColor = this.isTarget ? 'black' : classColors[specToClass[this.spec]];\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.dpasp = this.metrics.dpasp!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.tps = this.metrics.threat!;\n\t\tthis.dtps = this.metrics.dtps!;\n\t\tthis.tto = this.metrics.tto!;\n\t\tthis.actions = actions;\n\t\tthis.auras = auras;\n\t\tthis.resources = resources;\n\t\tthis.pets = pets;\n\t\tthis.logs = logs;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\n\t\tthis.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\t\tthis.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n\t\tthis.castLogs = CastLog.fromLogs(this.logs);\n\t\tthis.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n\t\tthis.auraUptimeLogs = AuraUptimeLog.fromLogs(this.logs, new Entity(this.name, '', this.index, this.target != null, this.isPet), resultData.firstIterationDuration);\n\t\tthis.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n\t\tthis.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n\t\tAuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n\t\tAuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n\t\tthis.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog => this.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)));\n\t}\n\n\tget label() {\n\t\tif (this.target == null) {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tget isPlayer() {\n\t\treturn this.player != null;\n\t}\n\n\tget isTarget() {\n\t\treturn this.target != null;\n\t}\n\n\tget isPet() {\n\t\treturn this.petActionId != null;\n\t}\n\n\t// Returns the unit index of the target of this unit, as selected by the filter.\n\tgetTargetIndex(filter?: SimResultFilter): number | null {\n\t\tif (!filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst index = this.isPlayer ? filter.target : filter.player;\n\t\tif (index == null || index == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tget inFrontOfTarget(): boolean {\n\t\tif (this.isTarget) {\n\t\t\treturn true;\n\t\t} else if (this.isPlayer) {\n\t\t\treturn this.player!.inFrontOfTarget;\n\t\t} else {\n\t\t\treturn false; // TODO pets\n\t\t}\n\t}\n\n\tget chanceOfDeath(): number {\n\t\treturn this.metrics.chanceOfDeath * 100;\n\t}\n\n\tget maxThreat() {\n\t\treturn this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n\t}\n\n\tget secondsOomAvg() {\n\t\treturn this.metrics.secondsOomAvg\n\t}\n\n\tget totalDamage() {\n\t\treturn this.dps.avg * this.duration;\n\t}\n\n\tgetPlayerAndPetActions(): Array<ActionMetrics> {\n\t\treturn this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n\t}\n\n\tprivate getActionsForDisplay(): Array<ActionMetrics> {\n\t\treturn this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n\t}\n\n\tgetMeleeActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => e.isMeleeAction);\n\t}\n\n\tgetSpellActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n\t}\n\n\tgetHealingActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay();\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n\t\treturn this.resources.filter(resource => resource.type == resourceType);\n\t}\n\n\tstatic async makeNewPlayer(resultData: SimResultData, player: PlayerProto, metrics: UnitMetricsProto, raidIndex: number, isPet: boolean, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst playerLogs = logs.filter(log => log.source && (!log.source.isTarget && (isPet == log.source.isPet) && log.source.index == raidIndex));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n\t\tconst resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n\t\tconst petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, playerLogs)));\n\n\t\tlet petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n\t\tif (isPet) {\n\t\t\tpetIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n\t\t}\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\t\tconst resources = await resourcesPromise;\n\t\tconst pets = await petsPromise;\n\t\tconst petActionId = await petIdPromise;\n\n\t\tconst playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n\t\tactions.forEach(action => {\n\t\t\taction.unit = playerMetrics;\n\t\t\taction.resources = resources.filter(resourceMetrics => resourceMetrics.actionId.equals(action.actionId));\n\t\t});\n\t\tauras.forEach(aura => aura.unit = playerMetrics);\n\t\tresources.forEach(resource => resource.unit = playerMetrics);\n\t\treturn playerMetrics;\n\t}\n\n\tstatic async makeNewTarget(resultData: SimResultData, target: TargetProto, metrics: UnitMetricsProto, index: number, logs: Array<SimLog>): Promise<UnitMetrics> {\n\t\tconst targetLogs = logs.filter(log => log.source && (log.source.isTarget && log.source.index == index));\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\n\t\tconst targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n\t\tactions.forEach(action => action.unit = targetMetrics);\n\t\tauras.forEach(aura => aura.unit = targetMetrics);\n\t\treturn targetMetrics;\n\t}\n}\n\nexport class EncounterMetrics {\n\tprivate readonly encounter: EncounterProto;\n\tprivate readonly metrics: EncounterMetricsProto;\n\n\treadonly targets: Array<UnitMetrics>;\n\n\tprivate constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n\t\tthis.encounter = encounter;\n\t\tthis.metrics = metrics;\n\t\tthis.targets = targets;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n\t\tconst numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n\t\tconst targets = await Promise.all(\n\t\t\t[...new Array(numTargets).keys()]\n\t\t\t\t.map(i => UnitMetrics.makeNewTarget(\n\t\t\t\t\tresultData,\n\t\t\t\t\tencounter.targets[i],\n\t\t\t\t\tmetrics.targets[i],\n\t\t\t\t\ti,\n\t\t\t\t\tlogs)));\n\n\t\treturn new EncounterMetrics(encounter, metrics, targets);\n\t}\n\n\tget durationSeconds() {\n\t\treturn this.encounter.duration;\n\t}\n}\n\nexport class AuraMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: AuraMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.data = data;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t}\n\n\tget uptimePercent() {\n\t\treturn this.data.uptimeSecondsAvg / this.duration * 100;\n\t}\n\n\tget averageProcs() {\n\t\treturn this.data.procsAvg\n\t}\n\n\tget ppm() {\n\t\treturn this.data.procsAvg / (this.duration / 60);\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n\t\tconst actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n\t\treturn new AuraMetrics(unit, actionId, auraMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n\t\tconst firstAura = auras[0];\n\t\tconst unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n\t\tlet actionId = actionIdOverride || firstAura.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new AuraMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tAuraMetricsProto.create({\n\t\t\t\tuptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n\t\t\t}),\n\t\t\tfirstAura.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges aura metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n\t\treturn AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n\t}\n};\n\nexport class ResourceMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly type: ResourceType;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ResourceMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.type = data.type;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t}\n\n\tget events() {\n\t\treturn this.data.events / this.iterations;\n\t}\n\n\tget gain() {\n\t\treturn this.data.gain / this.iterations;\n\t}\n\n\tget gainPerSecond() {\n\t\treturn this.data.gain / this.iterations / this.duration;\n\t}\n\n\tget avgGain() {\n\t\treturn this.data.gain / this.data.events;\n\t}\n\n\tget wastedGain() {\n\t\treturn (this.data.gain - this.data.actualGain) / this.iterations;\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, resourceMetrics: ResourceMetricsProto, playerIndex?: number): Promise<ResourceMetrics> {\n\t\tconst actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n\t\treturn new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n\t\tconst firstResource = resources[0];\n\t\tconst unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n\t\tlet actionId = actionIdOverride || firstResource.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new ResourceMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tResourceMetricsProto.create({\n\t\t\t\tevents: sum(resources.map(a => a.data.events)),\n\t\t\t\tgain: sum(resources.map(a => a.data.gain)),\n\t\t\t\tactualGain: sum(resources.map(a => a.data.actualGain)),\n\t\t\t}),\n\t\t\tfirstResource.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges resource metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n\t}\n};\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly targets: Array<TargetedActionMetrics>;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ActionMetricsProto;\n\tprivate readonly combinedMetrics: TargetedActionMetrics;\n\tresources: Array<ResourceMetrics>;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t\tthis.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n\t\tthis.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n\t\tthis.resources = [];\n\t}\n\n\tget isMeleeAction() {\n\t\treturn this.data.isMelee;\n\t}\n\n\tget damage() {\n\t\treturn this.combinedMetrics.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.combinedMetrics.dps;\n\t}\n\n\tget hps() {\n\t\treturn this.combinedMetrics.hps;\n\t}\n\n\tget tps() {\n\t\treturn this.combinedMetrics.tps;\n\t}\n\n\tget casts() {\n\t\treturn this.combinedMetrics.casts;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.combinedMetrics.castsPerMinute;\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.combinedMetrics.avgCastTimeMs;\n\t}\n\n\tget hpm() {\n\t\tconst totalHealing = this.combinedMetrics.hps * this.duration;\n\t\tconst manaMetrics = this.resources.find(r => r.type == ResourceType.ResourceTypeMana);\n\t\tif (manaMetrics) {\n\t\t\treturn totalHealing / -manaMetrics.gain;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tget healingThroughput() {\n\t\treturn this.combinedMetrics.healingThroughput;\n\t}\n\n\tget avgCast() {\n\t\treturn this.combinedMetrics.avgCast;\n\t}\n\n\tget avgCastHealing() {\n\t\treturn this.combinedMetrics.avgCastHealing;\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.combinedMetrics.avgCastThreat;\n\t}\n\n\tget landedHits() {\n\t\treturn this.combinedMetrics.landedHits;\n\t}\n\n\tget hitAttempts() {\n\t\treturn this.combinedMetrics.hitAttempts;\n\t}\n\n\tget avgHit() {\n\t\treturn this.combinedMetrics.avgHit;\n\t}\n\n\tget avgHitThreat() {\n\t\treturn this.combinedMetrics.avgHitThreat;\n\t}\n\n\tget critPercent() {\n\t\treturn this.combinedMetrics.critPercent;\n\t}\n\n\tget misses() {\n\t\treturn this.combinedMetrics.misses;\n\t}\n\n\tget missPercent() {\n\t\treturn this.combinedMetrics.missPercent;\n\t}\n\n\tget dodges() {\n\t\treturn this.combinedMetrics.dodges;\n\t}\n\n\tget dodgePercent() {\n\t\treturn this.combinedMetrics.dodgePercent;\n\t}\n\n\tget parries() {\n\t\treturn this.combinedMetrics.parries;\n\t}\n\n\tget parryPercent() {\n\t\treturn this.combinedMetrics.parryPercent;\n\t}\n\n\tget blocks() {\n\t\treturn this.combinedMetrics.blocks;\n\t}\n\n\tget blockPercent() {\n\t\treturn this.combinedMetrics.blockPercent;\n\t}\n\n\tget glances() {\n\t\treturn this.combinedMetrics.glances;\n\t}\n\n\tget glancePercent() {\n\t\treturn this.combinedMetrics.glancePercent;\n\t}\n\n\tforTarget(filter?: SimResultFilter): ActionMetrics {\n\t\tconst unitIndex = this.unit!.getTargetIndex(filter);\n\t\tif (unitIndex == null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconst target = this.targets.find(target => target.data.unitIndex == unitIndex);\n\t\t\tif (target) {\n\t\t\t\tconst targetData = ActionMetricsProto.clone(this.data);\n\t\t\t\ttargetData.targets = [target.data];\n\t\t\t\treturn new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Could not find target with unitIndex ' + unitIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n\t\tconst actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n\t\treturn new ActionMetrics(unit, actionId, actionMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n\t\tconst firstAction = actions[0];\n\t\tconst unit = firstAction.unit\n\t\tlet actionId = actionIdOverride || firstAction.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\n\t\tconst maxTargets = Math.max(...actions.map(action => action.targets.length));\n\t\tconst mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n\t\treturn new ActionMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tActionMetricsProto.create({\n\t\t\t\tisMelee: firstAction.isMeleeAction,\n\t\t\t\ttargets: mergedTargets.map(t => t.data),\n\t\t\t}),\n\t\t\tfirstAction.resultData);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges action metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n\t\treturn ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n\t}\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\treadonly data: TargetedActionMetricsProto;\n\n\treadonly landedHitsRaw: number;\n\treadonly hitAttempts: number;\n\n\tconstructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n\t\tthis.iterations = iterations;\n\t\tthis.duration = duration;\n\t\tthis.data = data;\n\n\t\tthis.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n\t\tthis.hitAttempts = this.data.misses\n\t\t\t+ this.data.dodges\n\t\t\t+ this.data.parries\n\t\t\t+ this.data.blocks\n\t\t\t+ this.data.glances\n\t\t\t+ this.data.crits\n\t\t\t+ this.data.hits;\n\t}\n\n\tget damage() {\n\t\treturn this.data.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.data.damage / this.iterations / this.duration;\n\t}\n\n\tget hps() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / this.duration;\n\t}\n\n\tget tps() {\n\t\treturn this.data.threat / this.iterations / this.duration;\n\t}\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.casts / (this.duration / 60);\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.data.castTimeMs / this.iterations / this.casts;\n\t}\n\n\tget healingThroughput() {\n\t\tif (this.avgCastTimeMs) {\n\t\t\treturn this.hps / (this.avgCastTimeMs / 1000);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget timeSpentCastingMs() {\n\t\treturn this.data.castTimeMs / this.iterations;\n\t}\n\n\tget avgCast() {\n\t\treturn (this.data.damage / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastHealing() {\n\t\treturn ((this.data.healing + this.data.shielding) / this.iterations) / (this.casts || 1);\n\t}\n\n\tget avgCastThreat() {\n\t\treturn (this.data.threat / this.iterations) / (this.casts || 1);\n\t}\n\n\tget landedHits() {\n\t\treturn this.landedHitsRaw / this.iterations;\n\t}\n\n\tget avgHit() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.damage / lhr;\n\t}\n\n\tget avgHitThreat() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.threat / lhr;\n\t}\n\n\tget critPercent() {\n\t\treturn (this.data.crits / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget misses() {\n\t\treturn this.data.misses / this.iterations;\n\t}\n\n\tget missPercent() {\n\t\treturn (this.data.misses / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget dodges() {\n\t\treturn this.data.dodges / this.iterations;\n\t}\n\n\tget dodgePercent() {\n\t\treturn (this.data.dodges / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget parries() {\n\t\treturn this.data.parries / this.iterations;\n\t}\n\n\tget parryPercent() {\n\t\treturn (this.data.parries / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget blocks() {\n\t\treturn this.data.blocks / this.iterations;\n\t}\n\n\tget blockPercent() {\n\t\treturn (this.data.blocks / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget glances() {\n\t\treturn this.data.glances / this.iterations;\n\t}\n\n\tget glancePercent() {\n\t\treturn (this.data.glances / (this.hitAttempts || 1)) * 100;\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n\t\treturn new TargetedActionMetrics(\n\t\t\tactions[0]?.iterations || 1,\n\t\t\tactions[0]?.duration || 1,\n\t\t\tTargetedActionMetricsProto.create({\n\t\t\t\tcasts: sum(actions.map(a => a.data.casts)),\n\t\t\t\thits: sum(actions.map(a => a.data.hits)),\n\t\t\t\tcrits: sum(actions.map(a => a.data.crits)),\n\t\t\t\tmisses: sum(actions.map(a => a.data.misses)),\n\t\t\t\tdodges: sum(actions.map(a => a.data.dodges)),\n\t\t\t\tparries: sum(actions.map(a => a.data.parries)),\n\t\t\t\tblocks: sum(actions.map(a => a.data.blocks)),\n\t\t\t\tglances: sum(actions.map(a => a.data.glances)),\n\t\t\t\tdamage: sum(actions.map(a => a.data.damage)),\n\t\t\t\tthreat: sum(actions.map(a => a.data.threat)),\n\t\t\t\thealing: sum(actions.map(a => a.data.healing)),\n\t\t\t\tshielding: sum(actions.map(a => a.data.shielding)),\n\t\t\t\tcastTimeMs: sum(actions.map(a => a.data.castTimeMs)),\n\t\t\t}));\n\t}\n}\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","export abstract class Component {\n\tprotected customRootElement?(): HTMLElement;\n\n\tprivate disposeCallbacks: Array<() => void> = [];\n\tprivate disposed: boolean = false;\n\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || this.customRootElement?.() || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n\n\taddOnDisposeCallback(callback: () => void) {\n\t\tthis.disposeCallbacks.push(callback);\n\t}\n\n\tdispose() {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.disposed = true;\n\n\t\tthis.disposeCallbacks.forEach(callback => callback());\n\t\tthis.disposeCallbacks = [];\n\t}\n}\n","import { Tooltip } from 'bootstrap';\nimport { Sim } from '../sim.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { Component } from './component.js';\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T> {\n\tlabel?: string,\n\tlabelTooltip?: string,\n\tinline?: boolean,\n\textraCssClasses?: Array<string>,\n\n\tdefaultValue?: T,\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>,\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T,\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void,\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean,\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean,\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement,\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T>;\n\treadonly modObject: ModObject;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\n\t\tif (config.inline) this.rootElem.classList.add('input-inline');\n\t\tif (config.extraCssClasses) this.rootElem.classList.add(...config.extraCssClasses);\n\t\tif (config.label) this.rootElem.appendChild(this.buildLabel(config));\n\n\t\tconfig.changedEvent(this.modObject).on(eventID => {\n\t\t\tthis.setInputValue(config.getValue(this.modObject));\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate buildLabel(config: InputConfig<ModObject, T>): HTMLElement {\n\t\tlet fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<label\n\t\t\t\tclass=\"form-label\"\n\t\t\t\t${config.labelTooltip ? 'data-bs-toggle=\"tooltip\"' : ''}\n\t\t\t\t${config.labelTooltip ? `data-bs-title=\"${config.labelTooltip}\"` : ''}\n\t\t\t\t${config.labelTooltip ? 'data-bs-html=\"true\"' : ''}\n\t\t\t>\n\t\t\t${config.label}\n\t\t\t</label>\n\t\t`\n\n\t\tlet label = fragment.children[0] as HTMLElement;\n\n\t\tif (config.labelTooltip)\n\t\t\tnew Tooltip(label);\n\t\t\n\t\treturn label;\n\t}\n\n\tprivate update() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem().removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem().setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tif (this.inputConfig.defaultValue) {\n\t\t\tthis.setInputValue(this.inputConfig.defaultValue);\n\t\t} else {\n\t\t\tthis.setInputValue(this.inputConfig.getValue(this.modObject));\n\t\t}\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tstatic newGroupContainer(): HTMLElement {\n\t\tlet group = document.createElement('div');\n\t\tgroup.classList.add('picker-group');\n\t\treturn group;\n\t}\n}\n","import { Encounter as EncounterProto } from '../proto/common.js';\nimport { DistributionMetrics as DistributionMetricsProto } from '../proto/api.js';\nimport { Raid as RaidProto } from '../proto/api.js';\nimport { RaidSimRequest, RaidSimResult, ProgressMetrics } from '../proto/api.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem } from '../utils.js';\nimport { Tooltip } from 'bootstrap';\n\ndeclare var tippy: any;\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('Simulate', 'dps-action', async () => simUI.runSim((progress: ProgressMetrics) => {\n\t\tresultsManager.setSimProgress(progress);\n\t}));\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult,\n\tsettings: any,\n\traidProto: RaidProto,\n\tencounterProto: EncounterProto,\n};\n\nexport interface ResultMetrics {\n\tcod:   string,\n\tdps:   string,\n\tdpasp: string,\n\tdtps:  string,\n\tdur:   string,\n\thps:   string,\n\ttps:   string,\n\ttto:   string,\n}\n\nexport interface ResultMetricCategories {\n\tdamage:  string,\n\tdemo: string,\n\thealing: string,\n\tthreat:  string,\n}\n\nexport interface ResultsLineArgs {\n\taverage: Number,\n\tstdev?: Number,\n\tclasses?: string\n}\n\nexport class RaidSimResultsManager {\n\tstatic resultMetricCategories: {[ResultMetrics: string]: keyof ResultMetricCategories} = {\n\t\tdps:   'damage',\n\t\tdpasp: 'demo',\n\t\ttps:   'threat',\n\t\tdtps:  'threat',\n\t\tcod:   'threat',\n\t\ttto:   'healing',\n\t\thps:   'healing',\n\t}\n\n\tstatic resultMetricClasses: {[ResultMetrics: string]: string} = {\n\t\tcod:    'results-sim-cod',\n\t\tdps:    'results-sim-dps',\n\t\tdpasp:  'results-sim-dpasp',\n\t\tdtps:   'results-sim-dtps',\n\t\tdur:    'results-sim-dur',\n\t\thps:    'results-sim-hps',\n\t\ttps:    'results-sim-tps',\n\t\ttto:    'results-sim-tto',\n\t}\n\n\tstatic metricsClasses: {[ResultMetricCategories: string]: string} = {\n\t\tdamage:  'damage-metrics',\n\t\tdemo: 'demo-metrics',\n\t\thealing: 'healing-metrics',\n\t\tthreat:  'threat-metrics',\n\t}\n\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[\n\t\t\tthis.currentChangeEmitter,\n\t\t\tthis.referenceChangeEmitter,\n\t\t].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tif (progress.presimRunning) {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\tpresimulations running\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t} else {\n\t\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t\t<div class=\"results-sim\">\n\t\t\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"\">\n\t\t\t\t\t\t\t${progress.completedIterations} / ${progress.totalIterations}<br>iterations complete\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t`);\n\t\t}\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\t'raid': RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\t'encounter': EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\tthis.simUI.resultsViewer.setContent(`\n      <div class=\"results-sim\">\n\t\t\t\t${RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div class=\"results-sim-reference\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"results-sim-set-reference\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-bs-toggle=\"tooltip\"\n\t\t\t\t\t\tdata-bs-title=\"Use as reference\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-map-pin fa-lg text-primary me-2\"></i>Save as Reference\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-swap me-3\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fas fa-arrows-rotate me-1\"></i>Swap\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-delete\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-times fa-lg me-1\"></i>Cancel\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </div>\n    `);\n\n\t\tconst setResultTooltip = (cssClass: string, tooltip: string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.getElementsByClassName(cssClass)[0] as HTMLElement | undefined;\n\t\t\tif (resultDivElem) {\n\t\t\t\tresultDivElem.setAttribute('data-bs-toggle', 'tooltip');\n\t\t\t\tresultDivElem.setAttribute('data-bs-title', tooltip);\n\t\t\t\tresultDivElem.setAttribute('data-bs-html', 'true');\n\t\t\t\tresultDivElem.setAttribute('data-bs-placement', 'right');\n\t\t\t\tTooltip.getOrCreateInstance(resultDivElem);\n\t\t\t}\n\t\t};\n\t\tsetResultTooltip('results-sim-dps', 'Damage Per Second');\n\t\tsetResultTooltip('results-sim-dpasp', 'Demonic Pact Average Spell Power');\n\t\tsetResultTooltip('results-sim-tto', 'Time To OOM');\n\t\tsetResultTooltip('results-sim-hps', 'Healing+Shielding Per Second, including overhealing.');\n\t\tsetResultTooltip('results-sim-tps', 'Threat Per Second');\n\t\tsetResultTooltip('results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTooltip('results-sim-cod', `\n\t\t\t<p>Chance of Death</p>\n\t\t\t<p>The percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the <b>Incoming HPS</b> and <b>Healing Cadence</b> options).</p>\n\t\t\t<p>DTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to capture overall tankiness.</p>\n\t\t`);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff-separator')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dpasp-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-tps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-dtps-diff')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-cod-diff')).forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff')[0] as HTMLSpanElement;\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-set-reference')[0] as HTMLSpanElement;\n\t\tsimReferenceSetButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = this.currentData;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\tTooltip.getOrCreateInstance(simReferenceSetButton);\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-swap')[0] as HTMLSpanElement;\n\t\tsimReferenceSwapButton.addEventListener('click', event => {\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\tthis.updateReference();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttippy(simReferenceSwapButton, {\n\t\t\t'content': 'Swap reference with current',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-delete')[0] as HTMLSpanElement;\n\t\tsimReferenceDeleteButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = null;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceDeleteButton, {\n\t\t\t'content': 'Remove reference',\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\t// Remove references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.remove('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach((e) => e.classList.add('hide'));\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Add references references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.add('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach((e) => e.classList.remove('hide'));\n\t\t}\n\n\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dps']} .results-reference-diff`, res => res.raidMetrics.dps, 2);\n\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['hps']} .results-reference-diff`, res => res.raidMetrics.hps, 2);\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dpasp']} .results-reference-diff`, res => res.getPlayers()[0]!.dpasp, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tto']} .results-reference-diff`, res => res.getPlayers()[0]!.tto, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tps']} .results-reference-diff`, res => res.getPlayers()[0]!.tps, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dtps']} .results-reference-diff`, res => res.getPlayers()[0]!.dtps, 2, true);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['cod']} .results-reference-diff`, res => res.getPlayers()[0]!.chanceOfDeath, 1, true);\n\t\t}\n\t}\n\n\tprivate formatToplineResult(querySelector: string, getMetrics: (result: SimResult) => DistributionMetricsProto|number, precision: number, lowerIsBetter?: boolean) {\n\t\tconst elem = this.simUI.resultsViewer.contentElem.querySelector(querySelector) as HTMLSpanElement;\n\t\tconst cur = this.currentData!.simResult;\n\t\tconst ref = this.referenceData!.simResult;\n\t\tconst curMetricsTemp = getMetrics(cur);\n\t\tconst refMetricsTemp = getMetrics(ref);\n\t\tif (typeof curMetricsTemp === 'number') {\n\t\t\tconst curMetrics = curMetricsTemp as number;\n\t\t\tconst refMetrics = refMetricsTemp as number;\n\t\t\tformatDeltaTextElem(elem, refMetrics, curMetrics, precision, lowerIsBetter);\n\t\t} else {\n\t\t\tconst curMetrics = curMetricsTemp as DistributionMetricsProto;\n\t\t\tconst refMetrics = refMetricsTemp as DistributionMetricsProto;\n\t\t\tconst isDiff = this.applyZTestTooltip(elem, ref.iterations, refMetrics.avg, refMetrics.stdev, cur.iterations, curMetrics.avg, curMetrics.stdev);\n\t\t\tformatDeltaTextElem(elem, refMetrics.avg, curMetrics.avg, precision, lowerIsBetter, !isDiff);\n\t\t}\n\t}\n\n\tprivate applyZTestTooltip(elem: HTMLElement, n1: number, avg1: number, stdev1: number, n2: number, avg2: number, stdev2: number): boolean {\n\t\tconst delta = avg1 - avg2;\n\t\tconst err1 = stdev1/Math.sqrt(n1);\n\t\tconst err2 = stdev2/Math.sqrt(n2);\n\t\tconst denom = Math.sqrt(Math.pow(err1, 2) + Math.pow(err2, 2));\n\t\tconst z = Math.abs(delta/denom);\n\t\tconst isDiff = z > 1.96;\n\n\t\tlet significance_str = '';\n\t\tif (isDiff) { \n\t\t\tsignificance_str = `Difference is significantly different (Z = ${z.toFixed(3)}).`;\n\t\t} else { \n\t\t\tsignificance_str = `Difference is not significantly different (Z = ${z.toFixed(3)}).`;\n\t\t}\n\t\ttippy(elem, {\n\t\t\t'content': significance_str,\n\t\t\t'allowHTML': true,\n\t\t});\n\n\t\treturn isDiff;\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.referenceData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): string {\n\t\tconst players = simResult.getPlayers(filter);\n\t\tlet content = '';\n\n\t\tif (players.length == 1) {\n\t\t\tconst playerMetrics = players[0];\n\t\t\tif (playerMetrics.getTargetIndex(filter) == null) {\n\t\t\t\tconst dpsMetrics = playerMetrics.dps;\n\t\t\t\tconst dpaspMetrics = playerMetrics.dpasp;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t}).outerHTML;\n\n\t\t\t\t// Hide dpasp if it's zero.\n\t\t\t\tlet dpaspContent = this.buildResultsLine({\n\t\t\t\t\taverage: dpaspMetrics.avg,\n\t\t\t\t\tstdev: dpaspMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dpasp'),\n\t\t\t\t});\n\t\t\t\tif (dpaspMetrics.avg == 0) {\n\t\t\t\t\tdpaspContent.classList.add('hide');\n\t\t\t\t}\n\t\t\t\tcontent += dpaspContent.outerHTML;\n\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: tpsMetrics.avg,\n\t\t\t\t\tstdev: tpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dtpsMetrics.avg,\n\t\t\t\t\tstdev: dtpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: playerMetrics.chanceOfDeath,\n\t\t\t\t\tclasses: this.getResultsLineClasses('cod'),\n\t\t\t\t}).outerHTML;\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getActionMetrics(filter);\n\t\t\t\tif (actions.length > 0) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.tps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\n\t\t\t\tconst targetActions = simResult.getTargets(filter)[0].actions.map(action => action.forTarget(filter));\n\t\t\t\tif (targetActions.length > 0) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedTargetActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.tto.avg,\n\t\t\t\tstdev: playerMetrics.tto.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('tto'),\n\t\t\t}).outerHTML;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t}).outerHTML;\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\tclasses:  this.getResultsLineClasses('dps'),\n\t\t\t}).outerHTML;\n\t\t\t//const hpsMetrics = simResult.raidMetrics.hps;\n\t\t\t//content += this.buildResultsLine({\n\t\t\t//\taverage: hpsMetrics.avg,\n\t\t\t//\tstdev: hpsMetrics.stdev,\n\t\t\t//\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t//}).outerHTML;\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: simResult.result.avgIterationDuration,\n\t\t\t\tclasses: this.getResultsLineClasses('dur'),\n\t\t\t});\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tprivate static getResultsLineClasses(metric: keyof ResultMetrics): string {\n\t\tlet classes = [this.resultMetricClasses[metric]];\n\t\tif (this.resultMetricCategories[metric])\n\t\t\tclasses.push(this.metricsClasses[this.resultMetricCategories[metric]]);\n\n\t\treturn classes.join(' ');\n\t}\n\n\tprivate static buildResultsLine(args: ResultsLineArgs): HTMLElement {\n\t\tlet resultsFragment = document.createElement('fragment');\n\t\tresultsFragment.innerHTML = `\n\t\t\t<div class=\"results-metric ${args.classes}\">\n\t\t\t\t<span class=\"topline-result-avg\">${args.average.toFixed(2)}</span>\n\t\t\t\t${args.stdev ? `\n\t\t\t\t\t<span class=\"topline-result-stdev\">\n\t\t\t\t\t\t(<i class=\"fas fa-plus-minus fa-xs\"></i>${args.stdev.toFixed()})\n\t\t\t\t\t</span>` : ''\n\t\t\t\t}\n\t\t\t\t<div class=\"results-reference hide\">\n\t\t\t\t\t<span class=\"results-reference-diff\"></span> vs reference\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\treturn resultsFragment.children[0] as HTMLElement;\n\t}\n}\n"],"names":["typeofJsonValue","value","t","Array","isArray","encTable","split","decTable","i","length","charCodeAt","indexOf","fromCharCodes","chunk","String","fromCharCode","apply","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","int64fromString","dec","minus","slice","base","add1e6digit","begin","end","digit1e6","Number","TWO_PWR_32_DBL","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","Math","floor","varint32write","varint32read","result","readBytes","BI","dv","DataView","ArrayBuffer","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","assertBi","bi","RE_DECIMAL_STR","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","static","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","BinaryReader","varint64","uint32","len","view","buffer","byteOffset","byteLength","tag","fieldNo","wireType","skip","start","WireType","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","parts","join","utf8read","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","prev","pop","raw","type","encode","setFloat32","setFloat64","setUint32","long","from","sign","UnknownFieldHandler","symbol","Symbol","onRead","typeName","message","data","is","no","onWrite","writer","list","all","filter","uf","last","defaultsRead","readUnknownField","readerFactory","defaultsWrite","writeUnknownFields","writerFactory","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","name","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","Object","keys","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","includes","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","substring","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","es","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","assign","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","Spec","Race","Faction","Class","Profession","Stat","PseudoStat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TristateEffect","Explosive","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","PetFood","MobType","EnchantType","OtherAction","UnitStats","super","stats","pseudoStats","RaidBuffs","giftOfTheWild","powerWordFortitude","commandingShout","bloodPact","hornOfWinter","strengthOfEarthTotem","arcaneBrilliance","felIntelligence","divineSpirit","battleShout","trueshotAura","unleashedRage","abominationsMight","leaderOfThePack","rampage","icyTalons","windfuryTotem","totemOfWrath","flametongueTotem","demonicPact","swiftRetribution","moonkinAura","elementalOath","wrathOfAirTotem","ferociousInspiration","sanctifiedRetribution","arcaneEmpowerment","manaSpringTotem","bloodlust","thorns","devotionAura","stoneskinTotem","retributionAura","shadowProtection","drumsOfForgottenKings","drumsOfTheWild","scrollOfProtection","scrollOfStamina","scrollOfStrength","scrollOfAgility","scrollOfIntellect","scrollOfSpirit","PartyBuffs","atieshMage","atieshWarlock","braidedEterniumChain","eyeOfTheNight","chainOfTheTwilightOwl","manaTideTotems","heroicPresence","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","blessingOfSanctuary","vigilance","renewedHope","hymnOfHope","handOfSalvation","rapture","innervates","powerInfusions","unholyFrenzy","revitalizeRejuvination","revitalizeWildGrowth","tricksOfTheTrades","shatteringThrows","vampiricTouch","huntingParty","judgementsOfTheWise","improvedSoulLeech","enduringWinter","focusMagic","Consumes","flask","battleElixir","guardianElixir","food","petFood","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","startingConjured","numStartingConjured","thermalSapper","explosiveDecoy","fillerExplosive","Debuffs","judgementOfWisdom","judgementOfLight","misery","faerieFire","curseOfElements","ebonPlaguebringer","earthAndMoon","heartOfTheCrusader","masterPoisoner","shadowMastery","improvedScorch","wintersChill","bloodFrenzy","savageCombat","giftOfArthas","mangle","trauma","stampede","exposeArmor","sunderArmor","acidSpit","curseOfWeakness","sting","sporeCloud","demoralizingRoar","demoralizingShout","vindication","demoralizingScreech","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","insectSwarm","scorpidSting","shadowEmbrace","huntersMark","Target","id","level","mobType","minBaseDamage","swingSpeed","dualWield","dualWieldPenalty","parryHaste","tightEnemyDamage","suppressDodge","spellSchool","tankIndex","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","useHealth","targets","PresetTarget","path","PresetEncounter","ItemSpec","enchant","gems","EquipmentSpec","items","SimDatabase","SimItem","SimEnchant","SimGem","enchants","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","setName","effectId","color","RaidTarget","targetIndex","ActionID","rawId","spellId","itemId","otherId","Glyphs","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","inspirationUptime","CustomRotation","CustomSpell","spells","spell","castsPerMinute","Deathknight_Rotation_ArmyOfTheDead","Deathknight_Rotation_BloodTap","Deathknight_Rotation_DeathAndDecayPrio","Deathknight_Rotation_FirstDisease","Deathknight_Rotation_BloodRuneFiller","Deathknight_Rotation_Presence","Deathknight_Rotation_FrostRotationType","Deathknight_Rotation_CustomSpellOption","TankDeathknight_Rotation_Opener","TankDeathknight_Rotation_OptimizationSetting","TankDeathknight_Rotation_BloodSpell","TankDeathknight_Rotation_Presence","DeathknightMajorGlyph","DeathknightMinorGlyph","DeathknightTalents","butchery","subversion","bladeBarrier","bladedArmor","scentOfBlood","twoHandedWeaponSpecialization","runeTap","darkConviction","deathRuneMastery","improvedRuneTap","spellDeflection","vendetta","bloodyStrikes","veteranOfTheThirdWar","markOfBlood","bloodyVengeance","bloodworms","hysteria","improvedBloodPresence","improvedDeathStrike","suddenDoom","vampiricBlood","willOfTheNecropolis","heartStrike","mightOfMograine","bloodGorged","dancingRuneWeapon","improvedIcyTouch","runicPowerMastery","toughness","icyReach","blackIce","nervesOfColdSteel","lichborne","annihilation","killingMachine","chillOfTheGrave","endlessWinter","frigidDreadplate","glacierRot","deathchill","improvedIcyTalons","mercilessCombat","rime","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","bloodOfTheNorth","unbreakableArmor","acclimation","frostStrike","guileOfGorefiend","tundraStalker","howlingBlast","viciousStrikes","virulence","anticipation","epidemic","morbidity","unholyCommand","ravenousDead","outbreak","necrosis","corpseExplosion","onAPaleHorse","bloodCakedBlade","nightOfTheDead","unholyBlight","impurity","dirge","desecration","magicSuppression","reaping","masterOfGhouls","desolation","antiMagicZone","improvedUnholyPresence","ghoulFrenzy","cryptFever","boneShield","wanderingPlague","scourgeStrike","rageOfRivendare","summonGargoyle","Deathknight","Deathknight_Rotation","Deathknight_Options","rotation","talents","frostRotationType","armyOfTheDead","useDeathAndDecay","btGhoulFrenzy","diseaseRefreshDuration","refreshHornOfWinter","firstDisease","deathAndDecayPrio","useEmpowerRuneWeapon","bloodRuneFiller","startingPresence","bloodTap","oblitDelayDuration","useAms","avgAmsSuccessRate","avgAmsHit","autoRotation","desyncRotation","blPresence","presence","holdErwArmy","useGargoyle","frostCustomRotation","startingRunicPower","petUptime","precastGhoulFrenzy","precastHornOfWinter","unholyFrenzyTarget","TankDeathknight","TankDeathknight_Rotation","TankDeathknight_Options","opener","optimizationSetting","bloodSpell","Warrior_Rotation_SunderArmor","Warrior_Rotation_StanceOption","ProtectionWarrior_Rotation_DemoShoutChoice","ProtectionWarrior_Rotation_ThunderClapChoice","ProtectionWarrior_Rotation_SpellOption","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","improvedHeroicStrike","deflection","improvedRend","improvedCharge","ironWill","tacticalMastery","improvedOverpower","angerManagement","impale","deepWounds","tasteForBlood","poleaxeSpecialization","sweepingStrikes","maceSpecialization","swordSpecialization","weaponMastery","improvedHamstring","secondWind","mortalStrike","strengthOfArms","improvedSlam","juggernaut","improvedMortalStrike","unrelentingAssault","suddenDeath","endlessRage","wreckingCrew","bladestorm","armoredToTheTeeth","boomingVoice","cruelty","improvedDemoralizingShout","unbridledWrath","improvedCleave","piercingHowl","bloodCraze","commandingPresence","dualWieldSpecialization","improvedExecute","enrage","precision","deathWish","improvedIntercept","improvedBerserkerRage","flurry","intensifyRage","bloodthirst","improvedWhirlwind","furiousAttacks","improvedBerserkerStance","heroicFury","bloodsurge","unendingFury","titansGrip","improvedBloodrage","shieldSpecialization","improvedThunderClap","incite","lastStand","improvedRevenge","shieldMastery","improvedSpellReflection","improvedDisarm","puncture","improvedDisciplines","concussionBlow","gagOrder","oneHandedWeaponSpecialization","improvedDefensiveStance","focusedRage","vitality","safeguard","warbringer","devastate","criticalBlock","swordAndBoard","damageShield","shockwave","Warrior","Warrior_Rotation","Warrior_Options","useCleave","useRend","useMs","useSlam","prioritizeWw","maintainDemoShout","maintainThunderClap","hsRageThreshold","msRageThreshold","rendRageThresholdBelow","slamRageThreshold","rendCdThreshold","useHsDuringExecute","useBtDuringExecute","spamExecute","useWwDuringExecute","useSlamOverExecute","stanceOption","rendHealthThresholdAbove","startingRage","useRecklessness","useShatteringThrow","shout","munch","ProtectionWarrior","ProtectionWarrior_Rotation","ProtectionWarrior_Options","demoShoutChoice","thunderClapChoice","prioSslamOnShieldBlock","customRotation","precastShout","precastShoutT2","precastShoutSapphire","Warlock_Rotation_Preset","Warlock_Rotation_Type","Warlock_Rotation_PrimarySpell","Warlock_Rotation_Curse","Warlock_Rotation_SecondaryDot","Warlock_Rotation_SpecSpell","Warlock_Options_Summon","Warlock_Options_Armor","Warlock_Options_WeaponImbue","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","improvedCurseOfAgony","suppression","improvedCorruption","improvedCurseOfWeakness","improvedDrainSoul","improvedLifeTap","soulSiphon","improvedFear","felConcentration","amplifyCurse","grimReach","nightfall","empoweredCorruption","siphonLife","curseOfExhaustion","improvedFelhunter","eradication","contagion","darkPact","improvedHowlOfTerror","malediction","deathsEmbrace","unstableAffliction","pandemic","everlastingAffliction","haunt","improvedHealthstone","improvedImp","demonicEmbrace","felSynergy","improvedHealthFunnel","demonicBrutality","felVitality","improvedSayaad","soulLink","felDomination","demonicAegis","unholyPower","masterSummoner","manaFeed","masterConjuror","masterDemonologist","moltenCore","demonicResilience","demonicEmpowerment","demonicKnowledge","demonicTactics","decimation","improvedDemonicTactics","summonFelguard","nemesis","metamorphosis","improvedShadowBolt","bane","aftermath","moltenSkin","cataclysm","demonicPower","shadowburn","ruin","intensity","destructiveReach","improvedSearingPain","backlash","improvedImmolate","devastation","netherProtection","emberstorm","conflagrate","soulLeech","pyroclasm","shadowAndFlame","backdraft","shadowfury","empoweredImp","fireAndBrimstone","chaosBolt","Warlock","Warlock_Rotation","Warlock_Options","preset","curse","primarySpell","secondaryDot","corruption","detonateSeed","specSpell","useInfernal","armor","summon","weaponImbue","ElementalShaman_Rotation_RotationType","EnhancementShaman_Rotation_RotationType","EnhancementShaman_Rotation_CustomRotationSpell","EnhancementShaman_Rotation_PrimaryShock","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanTalents","convection","concussion","callOfFlame","elementalWarding","elementalDevastation","reverberation","elementalFocus","elementalFury","improvedFireNova","eyeOfTheStorm","elementalReach","callOfThunder","unrelentingStorm","elementalPrecision","lightningMastery","elementalMastery","stormEarthAndFire","boomingEchoes","lightningOverload","astralShift","lavaFlows","shamanism","thunderstorm","enhancingTotems","earthsGrasp","ancestralKnowledge","guardianTotems","thunderingStrikes","improvedGhostWolf","improvedShields","elementalWeapons","shamanisticFocus","improvedWindfuryTotem","spiritWeapons","mentalDexterity","frozenPower","stormstrike","staticShock","lavaLash","improvedStormstrike","mentalQuickness","shamanisticRage","earthenPower","maelstromWeapon","feralSpirit","improvedHealingWave","totemicFocus","improvedReincarnation","healingGrace","tidalFocus","improvedWaterShield","healingFocus","tidalForce","ancestralHealing","restorativeTotems","tidalMastery","healingWay","naturesSwiftness","focusedMind","purification","naturesGuardian","manaTideTotem","cleanseSpirit","blessingOfTheEternals","improvedChainHeal","naturesBlessing","ancestralAwakening","earthShield","improvedEarthShield","tidalWaves","riptide","ShamanTotems","earth","air","fire","water","useManaTide","useFireElemental","recallFireElementalOnOom","recallTotems","useFireMcd","ElementalShaman","ElementalShaman_Rotation","ElementalShaman_Options","inThunderstormRange","useFireNova","fnMinManaPer","useChainLightning","useClOnlyGap","clMinManaPer","overwriteFlameshock","alwaysCritLvb","useThunderstorm","lvbFsWaitMs","totems","shield","EnhancementShaman","EnhancementShaman_Rotation","EnhancementShaman_Options","rotationType","lavaburstWeave","lightningboltWeave","maelstromweaponMinStack","autoWeaveDelay","firenovaManaThreshold","shamanisticRageManaThreshold","weaveFlameShock","primaryShock","flameShockClipTicks","delayGcdWeave","syncType","imbueMh","imbueOh","Rogue_Rotation_Frequency","Rogue_Rotation_CombatPriority","Rogue_Rotation_AssassinationPriority","Rogue_Options_PoisonImbue","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","improvedEviscerate","remorselessAttacks","malice","ruthlessness","bloodSpatter","puncturingWounds","vigor","improvedExposeArmor","lethality","vilePoisons","improvedPoisons","fleetFooted","coldBlood","improvedKidneyShot","quickRecovery","sealFate","murder","deadlyBrew","overkill","deadenedNerves","focusedAttacks","findWeakness","mutilate","turnTheTables","cutToTheChase","hungerForBlood","improvedGouge","improvedSinisterStrike","improvedSliceAndDice","endurance","riposte","closeQuartersCombat","improvedKick","improvedSprint","lightningReflexes","aggression","bladeFlurry","hackAndSlash","weaponExpertise","bladeTwisting","adrenalineRush","nervesOfSteel","throwingSpecialization","combatPotency","unfairAdvantage","surpriseAttacks","preyOnTheWeak","killingSpree","relentlessStrikes","masterOfDeception","opportunity","sleightOfHand","dirtyTricks","camouflage","elusiveness","ghostlyStrike","serratedBlades","setup","initiative","improvedAmbush","heightenedSenses","preparation","dirtyDeeds","hemorrhage","masterOfSubtlety","deadliness","envelopingShadows","premeditation","cheatDeath","sinisterCalling","waylay","honorAmongThieves","shadowstep","filthyTricks","slaughterFromTheShadows","shadowDance","Rogue","Rogue_Rotation","Rogue_Options","exposeArmorFrequency","minimumComboPointsExposeArmor","tricksOfTheTradeFrequency","combatFinisherPriority","assassinationFinisherPriority","minimumComboPointsPrimaryFinisher","minimumComboPointsSecondaryFinisher","multiTargetSliceFrequency","minimumComboPointsMultiTargetSlice","envenomPoolAmount","useFeint","allowCpOvercap","allowCpUndercap","openWithGarrote","ruptureForBleed","envenomEnergyThreshold","mhImbue","ohImbue","startingOverkillDuration","applyPoisonsManually","tricksOfTheTradeTarget","ShadowPriest_Rotation_RotationType","ShadowPriest_Options_Armor","HealingPriest_Rotation_RotationType","HealingPriest_Rotation_SpellOption","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","unbreakableWill","twinDisciplines","silentResolve","improvedInnerFire","improvedPowerWordFortitude","martyrdom","meditation","innerFocus","improvedPowerWordShield","absolution","mentalAgility","improvedManaBurn","reflectiveShield","mentalStrength","soulWarding","focusedPower","enlightenment","focusedWill","powerInfusion","improvedFlashHeal","aspiration","divineAegis","painSuppression","grace","borrowedTime","penance","improvedRenew","holySpecialization","spellWarding","divineFury","desperatePrayer","blessedRecovery","inspiration","holyReach","improvedHealing","searingLight","healingPrayers","spiritOfRedemption","spiritualGuidance","surgeOfLight","spiritualHealing","holyConcentration","lightwell","blessedResilience","bodyAndSoul","empoweredHealing","serendipity","empoweredRenew","circleOfHealing","testOfFaith","divineProvidence","guardianSpirit","spiritTap","improvedSpiritTap","darkness","shadowAffinity","improvedShadowWordPain","shadowFocus","improvedPsychicScream","improvedMindBlast","mindFlay","veiledShadows","shadowReach","shadowWeaving","silence","vampiricEmbrace","improvedVampiricEmbrace","mindMelt","improvedDevouringPlague","shadowform","shadowPower","improvedShadowform","psychicHorror","painAndSuffering","twistedFaith","dispersion","ShadowPriest","ShadowPriest_Rotation","ShadowPriest_Options","precastVt","latency","useShadowfiend","useMindBlast","useShadowWordDeath","SmitePriest","SmitePriest_Rotation","SmitePriest_Options","useDevouringPlague","memeDream","allowedHolyFireDelayMs","useInnerFire","powerInfusionTarget","HealingPriest","HealingPriest_Rotation","HealingPriest_Options","rapturesPerMinute","RetributionPaladin_Rotation_SpellOption","RetributionPaladin_Rotation_RotationType","ProtectionPaladin_Rotation_SpellOption","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","spiritualFocus","sealsOfThePure","healingLight","divineIntellect","unyieldingFaith","auraMastery","illumination","improvedLayOnHands","improvedConcentrationAura","improvedBlessingOfWisdom","blessedHands","pureOfHeart","divineFavor","sanctifiedLight","purifyingPower","holyPower","lightsGrace","holyShock","blessedLife","sacredCleansing","holyGuidance","divineIllumination","judgementsOfThePure","infusionOfLight","enlightenedJudgements","beaconOfLight","divinity","divineStrength","stoicism","guardiansFavor","divineSacrifice","improvedRighteousFury","divineGuardian","improvedHammerOfJustice","improvedDevotionAura","reckoning","sacredDuty","spiritualAttunement","holyShield","ardentDefender","redoubt","combatExpertise","touchedByTheLight","avengersShield","guardedByTheLight","shieldOfTheTemplar","hammerOfTheRighteous","benediction","improvedJudgements","improvedBlessingOfMight","conviction","sealOfCommand","pursuitOfJustice","eyeForAnEye","sanctityOfBattle","crusade","vengeance","divinePurpose","theArtOfWar","repentance","fanaticism","sanctifiedWrath","crusaderStrike","sheathOfLight","righteousVengeance","divineStorm","RetributionPaladin","RetributionPaladin_Rotation","RetributionPaladin_Options","exoSlack","consSlack","divinePleaPercentage","holyWrathThreshold","sovTargets","useDivinePlea","avoidClippingConsecration","holdLastAvengingWrathUntilExecution","customCastSequence","judgement","seal","aura","damageTakenPerSecond","useAvengingWrath","ProtectionPaladin","ProtectionPaladin_Rotation","ProtectionPaladin_Options","hammerFirst","useCustomPrio","squeezeHolyWrath","waitSlack","Mage_Rotation_Type","Mage_Rotation_PrimaryFireSpell","Mage_Rotation_AoeRotation","Mage_Options_ArmorType","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneSubtlety","arcaneFocus","arcaneStability","arcaneFortitude","magicAbsorption","arcaneConcentration","magicAttunement","spellImpact","studentOfTheMind","arcaneShielding","improvedCounterspell","arcaneMeditation","tormentTheWeak","improvedBlink","presenceOfMind","arcaneMind","prismaticCloak","arcaneInstability","arcanePotency","arcanePower","incantersAbsorption","arcaneFlows","mindMastery","slow","missileBarrage","netherwindPresence","spellPower","arcaneBarrage","improvedFireBlast","incineration","improvedFireball","ignite","burningDetermination","worldInFlames","flameThrowing","impact","pyroblast","burningSoul","moltenShields","masterOfElements","playingWithFire","criticalMass","blastWave","blazingSpeed","firePower","pyromaniac","combustion","moltenFury","fieryPayback","empoweredFire","firestarter","dragonsBreath","hotStreak","burnout","livingBomb","frostbite","improvedFrostbolt","iceFloes","iceShards","frostWarding","permafrost","piercingIce","icyVeins","improvedBlizzard","arcticReach","frostChanneling","shatter","coldSnap","improvedConeOfCold","frozenCore","coldAsIce","shatteredBarrier","iceBarrier","arcticWinds","empoweredFrostbolt","fingersOfFrost","brainFreeze","summonWaterElemental","chilledToTheBone","deepFreeze","Mage","Mage_Rotation","Mage_Options","minBlastBeforeMissiles","num4StackBlastsToMissilesGamble","num4StackBlastsToEarlyMissiles","extraBlastsDuringFirstAp","primaryFireSpell","maintainImprovedScorch","numExtraTargets","optimizeCdsForExecute","cqsLatency","lbBeforeHotstreak","waterElementalDisobeyChance","aoe","evocationTicks","focusMagicPercentUptime","Hunter_Rotation_RotationType","Hunter_Rotation_StingType","Hunter_Rotation_SpellOption","Hunter_Options_Ammo","Hunter_Options_PetType","HunterMajorGlyph","HunterMinorGlyph","HunterTalents","improvedAspectOfTheHawk","enduranceTraining","focusedFire","improvedAspectOfTheMonkey","thickHide","improvedRevivePet","pathfinding","aspectMastery","unleashedFury","improvedMendPet","ferocity","spiritBond","intimidation","bestialDiscipline","animalHandler","frenzy","bestialWrath","catlikeReflexes","invigoration","serpentsSwiftness","longevity","theBeastWithin","cobraStrikes","kindredSpirits","beastMastery","improvedConcussiveShot","focusedAim","lethalShots","carefulAim","improvedHuntersMark","mortalShots","goForTheThroat","improvedArcaneShot","aimedShot","rapidKilling","improvedStings","efficiency","concussiveBarrage","readiness","barrage","combatExperience","rangedWeaponSpecialization","piercingShots","improvedBarrage","masterMarksman","rapidRecuperation","wildQuiver","silencingShot","improvedSteadyShot","markedForDeath","chimeraShot","improvedTracking","hawkEye","savageStrikes","surefooted","entrapment","trapMastery","survivalInstincts","survivalist","scatterShot","survivalTactics","tNT","lockAndLoad","hunterVsWild","killerInstinct","counterattack","resourcefulness","exposeWeakness","wyvernSting","thrillOfTheHunt","masterTactician","noxiousStings","pointOfNoEscape","blackArrow","sniperTraining","explosiveShot","HunterPetTalents","cobraReflexes","dive","greatStamina","naturalArmor","boarsSpeed","mobility","owlsFocus","spikedCollar","cullingTheHerd","lionhearted","carrionFeeder","greatResistance","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","graceOfTheMantis","wildHunt","roarOfSacrifice","improvedCower","bloodthirsty","heartOfThePheonix","spidersBite","rabid","lickYourWounds","callOfTheWild","sharkAttack","charge","bloodOfTheRhino","petBarding","guardDog","thunderstomp","taunt","intervene","silverback","Hunter","Hunter_Rotation","Hunter_Options","trapWeave","timeToTrapWeaveMs","viperStartManaPercent","viperStopManaPercent","allowExplosiveShotDownrank","ammo","petType","sniperTrainingUptime","useHuntersMark","petTalents","BalanceDruid_Rotation_Type","BalanceDruid_Rotation_MfUsage","BalanceDruid_Rotation_IsUsage","FeralDruid_Rotation_BearweaveType","FeralDruid_Rotation_BiteModeType","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","starlightWrath","genesis","moonglow","naturesMajesty","improvedMoonfire","brambles","naturesGrace","naturesSplendor","naturesReach","celestialFocus","lunarGuidance","improvedInsectSwarm","dreamstate","moonfury","balanceOfPower","moonkinForm","improvedMoonkinForm","improvedFaerieFire","owlkinFrenzy","wrathOfCenarius","eclipse","typhoon","forceOfNature","galeWinds","starfall","feralAggression","feralInstinct","savageFury","feralSwiftness","sharpenedClaws","shreddingAttacks","predatoryStrikes","primalFury","primalPrecision","brutalImpact","feralCharge","nurturingInstinct","naturalReaction","heartOfTheWild","survivalOfTheFittest","improvedLeaderOfThePack","primalTenacity","protectorOfThePack","predatoryInstincts","kingOfTheJungle","improvedMangle","rendAndTear","primalGore","berserk","improvedMarkOfTheWild","naturesFocus","furor","naturalist","subtlety","naturalShapeshifter","omenOfClarity","masterShapeshifter","tranquilSpirit","improvedRejuvenation","giftOfNature","improvedTranquility","empoweredTouch","naturesBounty","livingSpirit","swiftmend","naturalPerfection","empoweredRejuvenation","livingSeed","revitalize","treeOfLife","improvedTreeOfLife","improvedBarkskin","giftOfTheEarthmother","wildGrowth","BalanceDruid","BalanceDruid_Rotation","BalanceDruid_Options","mfUsage","isUsage","useBattleRes","useWrath","useStarfire","useTyphoon","useHurricane","useSmartCooldowns","maintainFaerieFire","playerLatency","innervateTarget","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","bearWeaveType","minCombosForRip","useRake","useBite","mangleSpam","biteTime","minCombosForBite","berserkBiteThresh","powerbear","maxRoarOffset","biteModeType","hotUptime","snekWeave","flowerWeave","raidTargets","latencyMs","prepopOoc","assumeBleedActive","prePopBerserk","FeralTankDruid","FeralTankDruid_Rotation","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","lacerateTime","ResourceType","Player","race","class","spec","talentsString","profession1","profession2","inFrontOfTarget","distanceFromTarget","equipment","consumes","bonusStats","buffs","balanceDruid","feralDruid","feralTankDruid","hunter","mage","retributionPaladin","protectionPaladin","healingPriest","shadowPriest","smitePriest","rogue","elementalShaman","enhancementShaman","warlock","warrior","protectionWarrior","deathknight","tankDeathknight","glyphs","healingModel","database","Party","players","Raid","parties","tanks","staggerStormstrikes","targetDummies","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","saveAllValues","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","healing","shielding","castTimeMs","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","max","maxSeed","min","minSeed","hist","allValues","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","actions","auras","resources","pets","dps","dpasp","dtps","tto","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","ComputeStatsRequest","PlayerStats","sets","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","PartyStats","RaidStats","ComputeStatsResult","raidStats","StatWeightsRequest","statsToWeigh","pseudoStatsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","UIDatabase","UIItem","UIEnchant","UIGem","IconData","encounters","itemIcons","spellIcons","icon","ilvl","phase","quality","unique","heroic","classAllowlist","requiredProfession","extraTypes","enchantType","DatabaseFilters","armorTypes","weaponTypes","minMhWeaponSpeed","maxMhWeaponSpeed","minOhWeaponSpeed","maxOhWeaponSpeed","oneHandedWeapons","twoHandedWeapons","matchingGemsOnly","favoriteItems","favoriteGems","favoriteEnchants","SimSettings","fixedRngSeed","showDamageMetrics","showThreatMetrics","showHealingMetrics","showExperimental","language","faction","filters","IndividualSimSettings","epWeights","settings","epWeightsStats","SavedGearSet","gear","bonusStatsStats","SavedSettings","rotationJson","playerBuffs","SavedTalents","BuffBot","raidIndex","innervateAssignment","powerInfusionAssignment","tricksOfTheTradeAssignment","unholyFrenzyAssignment","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","buffBots","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","stringComparator","sum","reduce","total","cur","maxIndex","v","swap","j","arrayEquals","comparator","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","hexToRgba","hex","alpha","c","downloadString","fileName","dataStr","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","lowerIsBetter","noColor","delta","deltaStr","toFixed","textContent","classList","Boolean","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","has","gemMatchesSocket","gem","gemEligibleForSocket","GemColorMeta","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","getMetaGemCondition","getMetaGemConditionDescription","metaGem","CHAOTIC_SKYFLARE_DIAMOND","fromMinColors","RELENTLESS_EARTHSIEGE_DIAMOND","CHAOTIC_SKYFIRE_DIAMOND","fromCompareColors","gemSocketCssClasses","setGemSocketCssClass","cssClass","emptyGemSocketIcons","getEmptyGemSocketIconUrl","NUM_SPECS","naturalSpecOrder","SpecBalanceDruid","SpecFeralDruid","SpecFeralTankDruid","SpecHunter","SpecMage","SpecRetributionPaladin","SpecProtectionPaladin","SpecHealingPriest","SpecShadowPriest","SpecSmitePriest","SpecRogue","SpecElementalShaman","SpecEnhancementShaman","SpecWarlock","SpecWarrior","SpecProtectionWarrior","SpecDeathknight","SpecTankDeathknight","naturalClassOrder","ClassDeathknight","ClassDruid","ClassHunter","ClassMage","ClassPaladin","ClassPriest","ClassRogue","ClassShaman","ClassWarlock","ClassWarrior","specNames","classNames","ClassUnknown","classColors","specIconsLarge","talentTreeIcons","titleIcons","raidSimIcon","raidSimLabel","getTalentTreePoints","tree","char","getTalentPoints","getTalentTree","getTalentTreeIcon","talentTreeIdx","specToClass","specSiteUrlTemplate","URL","protocol","host","getSpecSiteUrl","specString","str","replace","letter","startsWith","camelToSnakeCase","raidSimSiteUrl","specTypeFunctions","rotationCreate","BalanceDruidRotation","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","obj","rotationFromPlayer","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","talentsFromPlayer","optionsCreate","BalanceDruidOptions","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","ElementalShamanRotation","ElementalShamanOptions","EnhancementShamanRotation","EnhancementShamanOptions","FeralDruidRotation","FeralDruidOptions","FeralTankDruidRotation","FeralTankDruidOptions","HunterRotation","HunterOptions","MageRotation","MageOptions","RetributionPaladinRotation","RetributionPaladinOptions","ProtectionPaladinRotation","ProtectionPaladinOptions","RogueRotation","RogueOptions","HealingPriestRotation","HealingPriestOptions","ShadowPriestRotation","ShadowPriestOptions","SmitePriestRotation","SmitePriestOptions","WarlockRotation","WarlockOptions","WarriorRotation","WarriorOptions","ProtectionWarriorRotation","ProtectionWarriorOptions","DeathknightRotation","DeathknightOptions","TankDeathknightRotation","TankDeathknightOptions","raceToFaction","RaceUnknown","Unknown","RaceBloodElf","Horde","RaceDraenei","Alliance","RaceDwarf","RaceGnome","RaceHuman","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","druidRaces","hunterRaces","mageRaces","paladinRaces","priestRaces","rogueRaces","shamanRaces","warlockRaces","warriorRaces","deathKnightRaces","specToEligibleRaces","dualWieldSpecs","isDualWieldSpec","tankSpecs","isTankSpec","healingSpecs","isHealingSpec","specToLocalStorageKey","withSpecProto","specOptions","playerToSpec","specValues","classToMaxArmorType","ArmorTypeUnknown","ArmorTypeLeather","ArmorTypeMail","ArmorTypeCloth","ArmorTypePlate","classToEligibleRangedWeaponTypes","RangedWeaponTypeIdol","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","RangedWeaponTypeThrown","RangedWeaponTypeWand","RangedWeaponTypeLibram","RangedWeaponTypeTotem","RangedWeaponTypeSigil","classToEligibleWeaponTypes","WeaponTypeDagger","WeaponTypeFist","WeaponTypeMace","canUseTwoHand","WeaponTypeOffHand","WeaponTypeStaff","WeaponTypePolearm","WeaponTypeAxe","WeaponTypeSword","WeaponTypeShield","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","playerStats","Gems.CHAOTIC_SKYFIRE_DIAMOND","Gems.CHAOTIC_SKYFLARE_DIAMOND","getStat","StatSpellPower","StatSpellCrit","_","Gems.RELENTLESS_EARTHSIEGE_DIAMOND","getMetaGemEffectEP","canEquipItem","slot","playerClass","ItemTypeFinger","ItemTypeTrinket","ItemTypeWeapon","eligibleWeaponType","wt","HandTypeOffHand","HandTypeOneHand","ItemSlotOffHand","HandTypeTwoHand","ItemTypeRanged","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemSlotFinger1","ItemSlotFinger2","ItemSlotTrinket1","ItemSlotTrinket2","ItemSlotRanged","getEligibleItemSlots","HandTypeMainHand","ItemSlotMainHand","Item","getEligibleEnchantSlots","Enchant","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","EnchantTypeShield","EnchantTypeStaff","canEquipEnchant","NO_TARGET","newRaidTarget","emptyRaidTarget","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","makeDefaultBlessings","BlessingOfKings","BlessingOfWisdom","BlessingOfMight","BlessingOfSanctuary","BlessingOfSalvation","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","wowheadSupportedLanguages","en","cn","de","fr","it","ko","pt","ru","getBrowserLanguageCode","browserLang","navigator","getLanguageCode","cachedLanguageCode_","setLanguageCode","newLang","ActionId","baseName","iconUrl","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","anyId","other","equalsIgnoringTag","setBackground","style","backgroundImage","lang","setWowheadHref","href","makeItemUrl","makeSpellUrl","setBackgroundAndHref","async","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","toProto","protoId","ActionIdProto","withoutTag","petName","petNameToActionId","petNameToIcon","fromItemId","fromSpellId","fromOtherId","fromEmpty","match","idType","console","warn","iconLabel","actionId","Database","getItemIconData","getSpellIconData","Shadowfiend","Bloodworm","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Infernal","Gargoyle","Ghoul","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","ResourceTypeNone","armorTypeNames","weaponTypeNames","WeaponTypeUnknown","raceNames","nameToRace","normalized","replaceAll","nameToClass","lower","charClass","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Jewelcrafting","Leatherworking","Mining","Skinning","Tailoring","nameToProfession","prof","statOrder","StatHealth","StatArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatSpellHit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatMana","StatEnergy","StatRage","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","StatBonusArmor","PseudoStatMainHandDps","PseudoStatOffHandDps","PseudoStatRangedDps","PseudoStatBlockValueMultiplier","pseudoStatNames","getClassStatName","stat","statName","slotNames","resourceNames","STATS_LEN","PSEUDOSTATS_LEN","UnitStat","pseudoStat","isStat","isPseudoStat","getPseudoStat","getName","clazz","getProtoValue","proto","allStats","allPseudoStats","fromStat","fromPseudoStat","Stats","initStatsArray","expectedLen","newStats","newStat","statIdx","getUnitStat","withStat","withPseudoStat","withUnitStat","addStat","subtract","computeEP","idx","asArray","fromProto","statsMap","pseudoStatsMap","statsArr","entry","statStr","pseudoStatsArr","pseudoStatstr","unitStats","getWeaponDPS","EquippedItem","_item","_enchant","_gems","numPossibleSockets","numSockets","Gem","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withGemHelper","withGem","curItem","removeGemsWithId","gemId","asActionId","asSpec","meetsSocketBonus","socketBonusStats","hasExtraSocket","isBlacksmithing","hasExtraGem","allSocketColors","curSocketColors","curGems","g","getFailedProfessionRequirements","professions","failed","Gear","thisItem","equalsOrBothNull","getEquippedItem","withEquippedItem","newSlot","newItem","canDualWield2H","newInternalGear","asMap","mainHand","offHand","canDW2h","getTrinkets","hasTrinket","ei","getAllGems","getNonMetaGems","statsFromGems","getGemsOfColor","getJCGems","getMetaGem","gemColorCounts","red","yellow","blue","hasActiveMetaGem","isMetaGemActive","hasInactiveMetaGem","withoutMetaGem","headItem","withoutBlacksmithSockets","curGear","wristItem","handsItem","hasBluntMHWeapon","weapon","hasSharpMHWeapon","hasBluntOHWeapon","hasSharpOHWeapon","toDatabase","equippedItems","itemToDB","enchantToDB","gemToDB","_Database","db","enchantsBySlot","presetEncounters","presetTargets","loadedLeftovers","loadProto","loadPromise","fetch","then","response","arrayBuffer","leftoverDb","getLeftovers","Promise","resolve","getItems","getEnchants","getGems","getMatchingGems","lookupItemSpec","itemSpec","slots","lookupEquipmentSpec","equipSpec","gearMap","assignedSlot","getPresetEncounter","getPresetTarget","getAllPresetEncounters","getAllPresetTargets","getWowheadItemTooltipData","getWowheadSpellTooltipData","getWowheadTooltipData","tooltipPostfix","url","_Entity","ownerName","index","isTarget","isPet","matchAll","parseRegex","Entity","SimLog","params","logIndex","timestamp","activeAuras","toStringPrefix","timestampStr","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","parseAll","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","grouped","curGroup","log","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","isDamage","isHealing","isShielding","resultString","threatPostfix","fromLogString","cause","_DpsLog","damageLogs","damageDealtLogs","groupedDamageLogs","groupDuplicateTimestamps","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","stringToResourceType","ResourceChangedLogGroup","allResourceChangedLogs","results","resourceChangedLogs","cooldownId","manaCost","castTime","effectiveTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","totalDamage","ddl","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","SimResultData","SimResult","party","units","getPlayers","getUnitWithIndex","getFirstPlayer","getPlayerWithIndex","getPlayerWithRaidIndex","getTargets","getTargetWithIndex","unit","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","action","forTarget","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","fromLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","populateActiveAuras","majorCooldownAuraUptimeLogs","mcdLog","auraLog","label","getTargetIndex","maxThreat","pet","getActionsForDisplay","getMeleeActions","getSpellActions","getHealingActions","playerLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","fromPetName","playerMetrics","targetLogs","targetMetrics","numTargets","makeNewTarget","durationSeconds","averageProcs","ppm","removeTag","actionIdOverride","firstAura","AuraMetricsProto","useTag","groupById","aurasToJoin","merge","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","avgCastTimeMs","hpm","totalHealing","manaMetrics","r","healingThroughput","avgCast","avgCastHealing","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","timeSpentCastingMs","lhr","TargetedActionMetricsProto","TypedEvent","listeners","firedEvents","frozenEvents","on","listener","dispose","off","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","func","typedEvents","typedEvent","frozenEvent","nextEventID","newEvent","emitter","Component","parentElem","rootCssClass","rootElem","disposeCallbacks","disposed","customRootElement","addOnDisposeCallback","callback","Input","parent","modObject","config","changeEmitter","inputConfig","inline","extraCssClasses","buildLabel","changedEvent","setInputValue","getValue","update","fragment","innerHTML","labelTooltip","children","Tooltip","enableWhen","getInputElem","removeAttribute","showWhen","init","defaultValue","inputChanged","setValue","getInputValue","newValue","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","sim","simResultEmitter","simResult","setSimResult","_RaidSimResultsManager","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","setContent","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","setResultTooltip","tooltip","resultDivElem","contentElem","getElementsByClassName","getOrCreateInstance","isIndividualSim","simReferenceSetButton","addEventListener","updateReference","simReferenceSwapButton","freezeAllAndDo","swapEventID","tmpData","tippy","content","allowHTML","simReferenceDeleteButton","querySelector","querySelectorAll","formatToplineResult","resultMetricClasses","res","getMetrics","ref","curMetricsTemp","refMetricsTemp","curMetrics","refMetrics","isDiff","applyZTestTooltip","n1","avg1","stdev1","n2","avg2","stdev2","err1","err2","denom","pow","z","abs","significance_str","getRunData","getCurrentData","getReferenceData","dpsMetrics","dpaspMetrics","tpsMetrics","dtpsMetrics","buildResultsLine","average","classes","getResultsLineClasses","outerHTML","dpaspContent","mergedActions","targetActions","mergedTargetActions","metric","resultMetricCategories","metricsClasses","args","resultsFragment","cod","dur","demo"],"mappings":"8CAIO,SAASA,EAAgBC,GAC5B,IAAIC,SAAWD,EACf,GAAS,UAALC,EAAe,CACX,GAAAC,MAAMC,QAAQH,GACP,MAAA,QACX,GAAc,OAAVA,EACO,MAAA,MACd,CACM,OAAAC,CACX,CCZA,IAAIG,EAAW,mEAAmEC,MAAM,IAEpFC,EAAW,GACf,IAAA,IAASC,GAAI,EAAGA,GAAIH,EAASI,OAAQD,KACjCD,EAASF,EAASG,IAAGE,WAAW,IAAMF,GAE1CD,EAAS,IAAIG,WAAW,IAAML,EAASM,QAAQ,KAC/CJ,EAAS,IAAIG,WAAW,IAAML,EAASM,QAAQ,KCkB/C,MAAMC,EAAiBC,GAAUC,OAAOC,aAAaC,MAAMF,OAAQD,GCiB5D,SAASI,IACZ,IAAIC,EAAU,EACVC,EAAW,EACf,IAAA,IAASC,EAAQ,EAAGA,EAAQ,GAAIA,GAAS,EAAG,CACpC,IAAAC,EAAIC,KAAKC,IAAID,KAAKE,OAEjB,GADLN,IAAgB,IAAJG,IAAaD,EACP,IAAT,IAAJC,GAEM,OADPC,KAAKG,eACE,CAACP,EAASC,EAExB,CACG,IAAAO,EAAaJ,KAAKC,IAAID,KAAKE,OAK1B,GAHLN,IAAyB,GAAbQ,IAAsB,GAElCP,GAAyB,IAAbO,IAAsB,EACP,IAAT,IAAbA,GAEM,OADPJ,KAAKG,eACE,CAACP,EAASC,GAErB,IAAA,IAASC,EAAQ,EAAGA,GAAS,GAAIA,GAAS,EAAG,CACrC,IAAAC,EAAIC,KAAKC,IAAID,KAAKE,OAEjB,GADLL,IAAiB,IAAJE,IAAaD,EACR,IAAT,IAAJC,GAEM,OADPC,KAAKG,eACE,CAACP,EAASC,EAExB,CACK,MAAA,IAAIQ,MAAM,iBACpB,CAQO,SAASC,EAAcC,EAAIC,EAAIC,GAClC,IAAA,IAASvB,EAAI,EAAGA,EAAI,GAAIA,GAAQ,EAAG,CAC/B,MAAMY,EAAQS,IAAOrB,EACfwB,IAAaZ,IAAU,GAAM,GAAW,GAANU,GAClCG,EAA0C,KAAlCD,EAAkB,IAARZ,EAAeA,GAEvC,GADAW,EAAMG,KAAKD,IACND,EACD,MAEP,CACD,MAAMG,EAAcN,IAAO,GAAM,IAAe,EAALC,IAAc,EACnDM,IAAiBN,GAAM,GAAM,GAEnC,GADAC,EAAMG,KAAoD,KAA9CE,EAA0B,IAAZD,EAAmBA,IACxCC,EAAL,CAGA,IAAA,IAAS5B,EAAI,EAAGA,EAAI,GAAIA,GAAQ,EAAG,CAC/B,MAAMY,EAAQU,IAAOtB,EACfwB,IAAaZ,IAAU,GAAM,GAC7Ba,EAA0C,KAAlCD,EAAkB,IAARZ,EAAeA,GAEvC,GADAW,EAAMG,KAAKD,IACND,EACD,MAEP,CACKD,EAAAG,KAAMJ,IAAO,GAAM,EAVxB,CAWL,CAaO,SAASO,EAAgBC,GAExB,IAAAC,EAAkB,KAAVD,EAAI,GACZC,IACMD,EAAAA,EAAIE,MAAM,IAIpB,MAAMC,EAAO,IACb,IAAIvB,EAAU,EACVC,EAAW,EACN,SAAAuB,EAAYC,EAAOC,GAExB,MAAMC,EAAWC,OAAOR,EAAIE,MAAMG,EAAOC,IAC7BzB,GAAAsB,EACZvB,EAAUA,EAAUuB,EAAOI,EAEvB3B,GA5BN6B,aA6BiB5B,GAAaD,EA7B9B6B,WA6B0D,EACpD7B,GA9BN6B,WAgCD,CAKM,OAJPL,OAAoB,IACpBA,OAAoB,IACpBA,OAAmB,GACnBA,GAAc,GACP,CAACH,EAAOrB,EAASC,EAC5B,CAMO,SAAS6B,EAAcC,EAASC,GAGnC,GAAIA,GAAY,QACL,MAAA,IAhDTH,WAgDgCG,EAAWD,GAW7C,IACIE,GAASF,IAAY,GAAOC,GAAY,KAAQ,EAAK,SACrDE,EAAQF,GAAY,GAAM,MAI1BG,GANgB,SAAVJ,GAMgB,QAANE,EAAyB,QAAPC,EAClCE,EAASH,EAAc,QAAPC,EAChBG,EAAiB,EAAPH,EAEVX,EAAO,IAUF,SAAAe,EAAeC,EAAUC,GAC9B,IAAIC,EAAUF,EAAW3C,OAAO2C,GAAY,GAC5C,OAAIC,EACO,UAAUlB,MAAMmB,EAAQlD,QAAUkD,EAEtCA,CACV,CACM,OAhBHN,GAAUZ,IACAa,GAAAM,KAAKC,MAAMR,EAASZ,GACpBY,GAAAZ,GAEVa,GAAUb,IACAc,GAAAK,KAAKC,MAAMP,EAASb,GACpBa,GAAAb,GAUPe,EAAeD,EAA8B,GAChDC,EAAeF,EAA8BC,GAG7CC,EAAeH,EAA8B,EACrD,CAQO,SAASS,EAAc7D,EAAO8B,GACjC,GAAI9B,GAAS,EAAG,CAEZ,KAAOA,EAAQ,KACL8B,EAAAG,KAAc,IAARjC,EAAgB,KAC5BA,KAAkB,EAEtB8B,EAAMG,KAAKjC,EACd,KACI,CACD,IAAA,IAASO,EAAI,EAAGA,EAAI,EAAGA,IACbuB,EAAAG,KAAa,IAARjC,EAAc,KACzBA,IAAiB,EAErB8B,EAAMG,KAAK,EACd,CACL,CAMO,SAAS6B,IACR,IAAA1C,EAAIC,KAAKC,IAAID,KAAKE,OAClBwC,EAAa,IAAJ3C,EACR,GAAa,IAAT,IAAJA,GAEM,OADPC,KAAKG,eACEuC,EAIN,GAFD3C,EAAAC,KAAKC,IAAID,KAAKE,OAClBwC,IAAe,IAAJ3C,IAAa,EACN,IAAT,IAAJA,GAEM,OADPC,KAAKG,eACEuC,EAIN,GAFD3C,EAAAC,KAAKC,IAAID,KAAKE,OAClBwC,IAAe,IAAJ3C,IAAa,GACN,IAAT,IAAJA,GAEM,OADPC,KAAKG,eACEuC,EAIN,GAFD3C,EAAAC,KAAKC,IAAID,KAAKE,OAClBwC,IAAe,IAAJ3C,IAAa,GACN,IAAT,IAAJA,GAEM,OADPC,KAAKG,eACEuC,EAGP3C,EAAAC,KAAKC,IAAID,KAAKE,OAClBwC,IAAe,GAAJ3C,IAAa,GACxB,IAAA,IAAS4C,EAAY,EAAmB,IAAV,IAAJ5C,IAAoB4C,EAAY,GAAIA,IACtD5C,EAAAC,KAAKC,IAAID,KAAKE,OACtB,GAAkB,IAAT,IAAJH,GACK,MAAA,IAAIM,MAAM,kBAGpB,OAFAL,KAAKG,eAEEuC,IAAW,CACtB,CCvPA,MAAME,EAhBN,WACI,MAAMC,EAAK,IAAIC,SAAS,IAAIC,YAAY,IAMxC,YALiC,IAAtBC,WAAWC,QACW,mBAAnBJ,EAAGK,aACiB,mBAApBL,EAAGM,cACgB,mBAAnBN,EAAGO,aACiB,mBAApBP,EAAGQ,aACL,CACRC,IAAKL,OAAO,wBACZM,IAAKN,OAAO,uBACZO,KAAMP,OAAO,KACbQ,KAAMR,OAAO,wBACbS,EAAGT,OACHU,EAAGd,QACH,CACR,CACWe,GACX,SAASC,EAASC,GACd,IAAKA,EACK,MAAA,IAAIzD,MAAM,wGACxB,CAEA,MAAM0D,EAAiB,aAIvB,MAAMC,EAIFC,YAAY1D,EAAIC,GACZR,KAAKO,GAAU,EAALA,EACVP,KAAKQ,GAAU,EAALA,CACb,CAID0D,SACI,OAAkB,GAAXlE,KAAKO,IAAsB,GAAXP,KAAKQ,EAC/B,CAID2D,WACI,IAAIzB,EApBN,WAoBe1C,KAAKQ,IAAuBR,KAAKO,KAAO,GACjD,IAACiB,OAAO4C,cAAc1B,GAChB,MAAA,IAAIrC,MAAM,iCACb,OAAAqC,CACV,EAME,MAAM2B,UAAgBL,EAIzBM,YAAY3F,GACJ,GAAAiE,EAEA,cAAejE,GACN,IAAA,SACD,GAAa,KAATA,EACA,OAAOqB,KAAKuE,KAChB,GAAa,IAAT5F,EACM,MAAA,IAAI0B,MAAM,wBACZ1B,EAAAiE,EAAGc,EAAE/E,GACZ,IAAA,SACD,GAAc,IAAVA,EACA,OAAOqB,KAAKuE,KACR5F,EAAAiE,EAAGc,EAAE/E,GACZ,IAAA,SACD,IAAKA,EACD,OAAOqB,KAAKuE,KAChB,GAAI5F,EAAQiE,EAAGY,KACL,MAAA,IAAInD,MAAM,0BACpB,GAAI1B,EAAQiE,EAAGa,KACL,MAAA,IAAIpD,MAAM,mBAEpB,OADAuC,EAAGe,EAAEN,aAAa,EAAG1E,GAAO,GACrB,IAAI0F,EAAQzB,EAAGe,EAAEa,SAAS,GAAG,GAAO5B,EAAGe,EAAEa,SAAS,GAAG,SAGpE,cAAe7F,GACN,IAAA,SACD,GAAa,KAATA,EACA,OAAOqB,KAAKuE,KAEZ,GADJ5F,EAAQA,EAAM8F,QACTV,EAAeW,KAAK/F,GACf,MAAA,IAAI0B,MAAM,wBACpB,IAAKY,EAAOV,EAAIC,GAAMO,EAAgBpC,GAClC,GAAAsC,EACM,MAAA,IAAIZ,MAAM,gBACb,OAAA,IAAIgE,EAAQ9D,EAAIC,GACtB,IAAA,SACD,GAAa,GAAT7B,EACA,OAAOqB,KAAKuE,KACZ,IAAC/C,OAAO4C,cAAczF,GAChB,MAAA,IAAI0B,MAAM,wBACpB,GAAI1B,EAAQ,EACF,MAAA,IAAI0B,MAAM,0BACpB,OAAO,IAAIgE,EAAQ1F,EAAOA,EA7ExC,YA+EE,MAAM,IAAI0B,MAAM,wBAA0B1B,EAC7C,CAIDgG,WACW,OAAA/B,EAAK5C,KAAK4E,WAAWD,WAAajD,EAAc1B,KAAKO,GAAIP,KAAKQ,GACxE,CAIDoE,WAII,OAHAf,EAASjB,GACTA,EAAGe,EAAEkB,SAAS,EAAG7E,KAAKO,IAAI,GAC1BqC,EAAGe,EAAEkB,SAAS,EAAG7E,KAAKQ,IAAI,GACnBoC,EAAGe,EAAER,aAAa,GAAG,EAC/B,EAKLkB,EAAQE,KAAO,IAAIF,EAAQ,EAAG,GAKvB,MAAMS,UAAed,EAIxBM,YAAY3F,GACJ,GAAAiE,EAEA,cAAejE,GACN,IAAA,SACD,GAAa,KAATA,EACA,OAAOqB,KAAKuE,KAChB,GAAa,IAAT5F,EACM,MAAA,IAAI0B,MAAM,wBACZ1B,EAAAiE,EAAGc,EAAE/E,GACZ,IAAA,SACD,GAAc,IAAVA,EACA,OAAOqB,KAAKuE,KACR5F,EAAAiE,EAAGc,EAAE/E,GACZ,IAAA,SACD,IAAKA,EACD,OAAOqB,KAAKuE,KAChB,GAAI5F,EAAQiE,EAAGU,IACL,MAAA,IAAIjD,MAAM,mBACpB,GAAI1B,EAAQiE,EAAGW,IACL,MAAA,IAAIlD,MAAM,mBAEpB,OADAuC,EAAGe,EAAEP,YAAY,EAAGzE,GAAO,GACpB,IAAImG,EAAOlC,EAAGe,EAAEa,SAAS,GAAG,GAAO5B,EAAGe,EAAEa,SAAS,GAAG,SAGnE,cAAe7F,GACN,IAAA,SACD,GAAa,KAATA,EACA,OAAOqB,KAAKuE,KAEZ,GADJ5F,EAAQA,EAAM8F,QACTV,EAAeW,KAAK/F,GACf,MAAA,IAAI0B,MAAM,wBACpB,IAAKY,EAAOV,EAAIC,GAAMO,EAAgBpC,GAClCoG,EAAM,IAAID,EAAOvE,EAAIC,GAClB,OAAAS,EAAQ8D,EAAIC,SAAWD,EAC7B,IAAA,SACD,GAAa,GAATpG,EACA,OAAOqB,KAAKuE,KACZ,IAAC/C,OAAO4C,cAAczF,GAChB,MAAA,IAAI0B,MAAM,wBACpB,OAAO1B,EAAQ,EACT,IAAImG,EAAOnG,EAAOA,EAtJtC,YAuJoB,IAAImG,GAAQnG,GAAQA,EAvJxC,YAuJgEqG,SAE9D,MAAM,IAAI3E,MAAM,wBAA0B1B,EAC7C,CAIDsG,aACY,OAA0B,IAAhB,WAAVjF,KAAKQ,GAChB,CAKDwE,SACI,IAAIxE,GAAMR,KAAKQ,GAAID,EAAKP,KAAKO,GAKtB,OAJHA,EACAA,EAAW,GAALA,EAEAC,GAAA,EACH,IAAIsE,EAAOvE,EAAIC,EACzB,CAIDmE,WACQ,GAAA/B,EACO,OAAA5C,KAAK4E,WAAWD,WACvB,GAAA3E,KAAKiF,aAAc,CACf,IAAAC,EAAIlF,KAAKgF,SACb,MAAO,IAAMtD,EAAcwD,EAAE3E,GAAI2E,EAAE1E,GACtC,CACD,OAAOkB,EAAc1B,KAAKO,GAAIP,KAAKQ,GACtC,CAIDoE,WAII,OAHAf,EAASjB,GACTA,EAAGe,EAAEkB,SAAS,EAAG7E,KAAKO,IAAI,GAC1BqC,EAAGe,EAAEkB,SAAS,EAAG7E,KAAKQ,IAAI,GACnBoC,EAAGe,EAAET,YAAY,GAAG,EAC9B,EAKL4B,EAAOP,KAAO,IAAIO,EAAO,EAAG,GC3NrB,MAAMK,EACTlB,YAAYhE,GACRD,KAAKoF,SAAWzF,EAIhBK,KAAKqF,OAAS5C,EACdzC,KAAKC,IAAMA,EACXD,KAAKsF,IAAMrF,EAAId,OACfa,KAAKE,IAAM,EACNF,KAAAuF,KAAO,IAAIzC,SAAS7C,EAAIuF,OAAQvF,EAAIwF,WAAYxF,EAAIyF,WAC5D,CAIDC,MACQ,IAAAA,EAAM3F,KAAKqF,SAAUO,EAAUD,IAAQ,EAAGE,EAAiB,EAANF,EACzD,GAAIC,GAAW,GAAKC,EAAW,GAAKA,EAAW,EAC3C,MAAM,IAAIxF,MAAM,yBAA2BuF,EAAU,cAAgBC,GAClE,MAAA,CAACD,EAASC,EACpB,CAKDC,KAAKD,GACD,IAAIE,EAAQ/F,KAAKE,IAET,OAAA2F,GAAA,KACCG,EAASC,OACV,KAA8B,IAAvBjG,KAAKC,IAAID,KAAKE,SAGrB,MAAA,KACC8F,EAASE,MACVlG,KAAKE,KAAO,EAAA,KACX8F,EAASG,MACVnG,KAAKE,KAAO,EACZ,MAAA,KACC8F,EAASI,gBACN,IAAAd,EAAMtF,KAAKqF,SACfrF,KAAKE,KAAOoF,EACZ,MAAA,KACCU,EAASK,WAGN,IAAAzH,EACJ,MAAQA,EAAIoB,KAAK2F,MAAM,MAAQK,EAASM,UACpCtG,KAAK8F,KAAKlH,GAEd,MAAA,QAEM,MAAA,IAAIyB,MAAM,uBAAyBwF,GAGjD,OADA7F,KAAKG,eACEH,KAAKC,IAAIsG,SAASR,EAAO/F,KAAKE,IACxC,CAIDC,eACQ,GAAAH,KAAKE,IAAMF,KAAKsF,IACV,MAAA,IAAIkB,WAAW,gBAC5B,CAIDC,QACW,OAAgB,EAAhBzG,KAAKqF,QACf,CAIDqB,SACQ,IAAAC,EAAM3G,KAAKqF,SAEP,OAAAsB,IAAQ,IAAa,EAANA,EAC1B,CAIDC,QACI,OAAO,IAAI9B,KAAU9E,KAAKoF,WAC7B,CAIDyB,SACI,OAAO,IAAIxC,KAAWrE,KAAKoF,WAC9B,CAID0B,SACI,IAAKvG,EAAIC,GAAMR,KAAKoF,WAEhB2B,IAAW,EAALxG,GAGH,OAFPA,GAAOA,IAAO,GAAU,EAALC,IAAW,IAAMuG,EACpCvG,EAAMA,IAAO,EAAIuG,EACV,IAAIjC,EAAOvE,EAAIC,EACzB,CAIDwG,OACI,IAAKzG,EAAIC,GAAMR,KAAKoF,WACb,OAAO,IAAP7E,GAAmB,IAAPC,CACtB,CAIDyG,UACI,OAAOjH,KAAKuF,KAAK2B,WAAWlH,KAAKE,KAAO,GAAK,GAAG,EACnD,CAIDiH,WACI,OAAOnH,KAAKuF,KAAKf,UAAUxE,KAAKE,KAAO,GAAK,GAAG,EAClD,CAIDkH,UACI,OAAO,IAAI/C,EAAQrE,KAAKmH,WAAYnH,KAAKmH,WAC5C,CAIDE,WACI,OAAO,IAAIvC,EAAO9E,KAAKmH,WAAYnH,KAAKmH,WAC3C,CAIDG,QACI,OAAOtH,KAAKuF,KAAKgC,YAAYvH,KAAKE,KAAO,GAAK,GAAG,EACpD,CAIDsH,SACI,OAAOxH,KAAKuF,KAAKkC,YAAYzH,KAAKE,KAAO,GAAK,GAAG,EACpD,CAIDO,QACQ,IAAA6E,EAAMtF,KAAKqF,SACXU,EAAQ/F,KAAKE,IAGjB,OAFAF,KAAKE,KAAOoF,EACZtF,KAAKG,eACEH,KAAKC,IAAIsG,SAASR,EAAOA,EAAQT,EAC3C,CAIDoC,SACW,OHhIR,SAAkBjH,GACrB,GAAIA,EAAMtB,OAAS,EACR,MAAA,GACP,IAEJP,EAFIsB,EAAM,EACVyH,EAAQ,GAAIpI,EAAQ,GAAIL,EAAI,EAExBoG,EAAM7E,EAAMtB,OAChB,KAAOe,EAAMoF,GACT1G,EAAI6B,EAAMP,KACNtB,EAAI,IACJW,EAAML,KAAON,EACRA,EAAI,KAAOA,EAAI,IACpBW,EAAML,MAAY,GAAJN,IAAW,EAAmB,GAAf6B,EAAMP,KAC9BtB,EAAI,KAAOA,EAAI,KACpBA,IAAU,EAAJA,IAAU,IAAqB,GAAf6B,EAAMP,OAAgB,IAAqB,GAAfO,EAAMP,OAAgB,EAAmB,GAAfO,EAAMP,MAAe,MAC3FX,EAAAL,KAAO,OAAUN,GAAK,IACtBW,EAAAL,KAAO,OAAc,KAAJN,IAGjBW,EAAAL,MAAY,GAAJN,IAAW,IAAqB,GAAf6B,EAAMP,OAAgB,EAAmB,GAAfO,EAAMP,KAC/DhB,EAAI,OACEyI,EAAA/G,KAAKtB,EAAcC,IACrBL,EAAA,GAGZ,OAAIyI,EAAMxI,QACFD,GACAyI,EAAM/G,KAAKtB,EAAcC,EAAM2B,MAAM,EAAGhC,KACrCyI,EAAMC,KAAK,KAEftI,EAAcC,EAAM2B,MAAM,EAAGhC,GACxC,CGiGe2I,CAAS7H,KAAKS,QACxB,EChKE,SAASqH,EAAOC,EAAWC,GAC9B,IAAKD,EACK,MAAA,IAAI1H,MAAM2H,EAExB,CAQO,SAASC,EAAYC,GACxB,GAAmB,iBAARA,EACP,MAAM,IAAI7H,MAAM,0BAA4B6H,GAChD,IAAK1G,OAAO2G,UAAUD,IAAQA,EAJsF,YAInEA,GAJ2F,WAKlI,MAAA,IAAI7H,MAAM,mBAAqB6H,EAC7C,CACO,SAASE,EAAaF,GACzB,GAAmB,iBAARA,EACP,MAAM,IAAI7H,MAAM,2BAA6B6H,GACjD,IAAK1G,OAAO2G,UAAUD,IAAQA,EAV8D,YAU1CA,EAAM,EAC9C,MAAA,IAAI7H,MAAM,oBAAsB6H,EAC9C,CACO,SAASG,EAAcH,GAC1B,GAAmB,iBAARA,EACP,MAAM,IAAI7H,MAAM,4BAA8B6H,GAC9C,GAAC1G,OAAO8G,SAASJ,KAEjBA,EAlBY,sBAkBSA,GAlB6B,sBAmB5C,MAAA,IAAI7H,MAAM,qBAAuB6H,EAC/C,CC/BO,MAAMK,EACTtE,YAAYuE,GAIRxI,KAAKyI,MAAQ,GACbzI,KAAKwI,YAAcA,QAAiDA,EAAc,IAAIE,YACtF1I,KAAK2I,OAAS,GACd3I,KAAKC,IAAM,EACd,CAID2I,SACI5I,KAAK2I,OAAO/H,KAAK,IAAIiI,WAAW7I,KAAKC,MACrC,IAAIqF,EAAM,EACV,IAAA,IAASpG,EAAI,EAAGA,EAAIc,KAAK2I,OAAOxJ,OAAQD,IAC7BoG,GAAAtF,KAAK2I,OAAOzJ,GAAGC,OACtB,IAAAsB,EAAQ,IAAIoI,WAAWvD,GACvBwD,EAAS,EACb,IAAA,IAAS5J,EAAI,EAAGA,EAAIc,KAAK2I,OAAOxJ,OAAQD,IACpCuB,EAAMsI,IAAI/I,KAAK2I,OAAOzJ,GAAI4J,GAChBA,GAAA9I,KAAK2I,OAAOzJ,GAAGC,OAGtB,OADPa,KAAK2I,OAAS,GACPlI,CACV,CAODuI,OAIW,OAHFhJ,KAAAyI,MAAM7H,KAAK,CAAE+H,OAAQ3I,KAAK2I,OAAQ1I,IAAKD,KAAKC,MACjDD,KAAK2I,OAAS,GACd3I,KAAKC,IAAM,GACJD,IACV,CAKD4H,OAEQ,IAAArI,EAAQS,KAAK4I,SAEbK,EAAOjJ,KAAKyI,MAAMS,MACtB,IAAKD,EACK,MAAA,IAAI5I,MAAM,mCAKb,OAJPL,KAAK2I,OAASM,EAAKN,OACnB3I,KAAKC,IAAMgJ,EAAKhJ,IAEXD,KAAAqF,OAAO9F,EAAMmG,YACX1F,KAAKmJ,IAAI5J,EACnB,CAQDoG,IAAIC,EAASwD,GACT,OAAOpJ,KAAKqF,QAAQO,GAAW,EAAIwD,KAAU,EAChD,CAIDD,IAAI5J,GAMO,OALHS,KAAKC,IAAId,SACTa,KAAK2I,OAAO/H,KAAK,IAAIiI,WAAW7I,KAAKC,MACrCD,KAAKC,IAAM,IAEVD,KAAA2I,OAAO/H,KAAKrB,GACVS,IACV,CAIDqF,OAAO1G,GAGH,IAFAyJ,EAAazJ,GAENA,EAAQ,KACXqB,KAAKC,IAAIW,KAAc,IAARjC,EAAgB,KAC/BA,KAAkB,EAGf,OADFqB,KAAAC,IAAIW,KAAKjC,GACPqB,IACV,CAIDyG,MAAM9H,GAGK,OAFPsJ,EAAYtJ,GACE6D,EAAA7D,EAAOqB,KAAKC,KACnBD,IACV,CAIDgH,KAAKrI,GAEM,OADPqB,KAAKC,IAAIW,KAAKjC,EAAQ,EAAI,GACnBqB,IACV,CAIDS,MAAM9B,GAEK,OADFqB,KAAAqF,OAAO1G,EAAM+G,YACX1F,KAAKmJ,IAAIxK,EACnB,CAID+I,OAAO/I,GACH,IAAIY,EAAQS,KAAKwI,YAAYa,OAAO1K,GAE7B,OADFqB,KAAAqF,OAAO9F,EAAMmG,YACX1F,KAAKmJ,IAAI5J,EACnB,CAID+H,MAAM3I,GACF0J,EAAc1J,GACV,IAAAY,EAAQ,IAAIsJ,WAAW,GAEpB,OADP,IAAI/F,SAASvD,EAAMiG,QAAQ8D,WAAW,EAAG3K,GAAO,GACzCqB,KAAKmJ,IAAI5J,EACnB,CAIDiI,OAAO7I,GACC,IAAAY,EAAQ,IAAIsJ,WAAW,GAEpB,OADP,IAAI/F,SAASvD,EAAMiG,QAAQ+D,WAAW,EAAG5K,GAAO,GACzCqB,KAAKmJ,IAAI5J,EACnB,CAID0H,QAAQtI,GACJyJ,EAAazJ,GACT,IAAAY,EAAQ,IAAIsJ,WAAW,GAEpB,OADP,IAAI/F,SAASvD,EAAMiG,QAAQgE,UAAU,EAAG7K,GAAO,GACxCqB,KAAKmJ,IAAI5J,EACnB,CAID4H,SAASxI,GACLsJ,EAAYtJ,GACR,IAAAY,EAAQ,IAAIsJ,WAAW,GAEpB,OADP,IAAI/F,SAASvD,EAAMiG,QAAQX,SAAS,EAAGlG,GAAO,GACvCqB,KAAKmJ,IAAI5J,EACnB,CAIDmH,OAAO/H,GAKI,OAJPsJ,EAAYtJ,GAGE6D,EADJ7D,GAAAA,GAAS,EAAMA,GAAS,MAAS,EACtBqB,KAAKC,KACnBD,IACV,CAIDqH,SAAS1I,GACD,IAAAY,EAAQ,IAAIsJ,WAAW,GACvBtD,EAAO,IAAIzC,SAASvD,EAAMiG,QAC1BiE,EAAO3E,EAAO4E,KAAK/K,GAGhB,OAFP4G,EAAKV,SAAS,EAAG4E,EAAKlJ,IAAI,GAC1BgF,EAAKV,SAAS,EAAG4E,EAAKjJ,IAAI,GACnBR,KAAKmJ,IAAI5J,EACnB,CAID6H,QAAQzI,GACA,IAAAY,EAAQ,IAAIsJ,WAAW,GACvBtD,EAAO,IAAIzC,SAASvD,EAAMiG,QAC1BiE,EAAOpF,EAAQqF,KAAK/K,GAGjB,OAFP4G,EAAKV,SAAS,EAAG4E,EAAKlJ,IAAI,GAC1BgF,EAAKV,SAAS,EAAG4E,EAAKjJ,IAAI,GACnBR,KAAKmJ,IAAI5J,EACnB,CAIDqH,MAAMjI,GACE,IAAA8K,EAAO3E,EAAO4E,KAAK/K,GAEhB,OADP2B,EAAcmJ,EAAKlJ,GAAIkJ,EAAKjJ,GAAIR,KAAKC,KAC9BD,IACV,CAID8G,OAAOnI,GACC,IAAA8K,EAAO3E,EAAO4E,KAAK/K,GAEvBgL,EAAOF,EAAKjJ,IAAM,GAEX,OADOF,EADcmJ,EAAKlJ,IAAM,EAAKoJ,GAAaF,EAAKjJ,IAAM,EAAMiJ,EAAKlJ,KAAO,IAAOoJ,EACvE3J,KAAKC,KACpBD,IACV,CAID6G,OAAOlI,GACC,IAAA8K,EAAOpF,EAAQqF,KAAK/K,GAEjB,OADP2B,EAAcmJ,EAAKlJ,GAAIkJ,EAAKjJ,GAAIR,KAAKC,KAC9BD,IACV,EC9ME,IAAI4J,GAAA,SACAA,GAKPA,EAAoBC,OAASC,OAAO,uBAKpCF,EAAoBG,OAAS,CAACC,EAAUC,EAASrE,EAASC,EAAUqE,MAChDC,EAAGF,GAAWA,EAAQL,EAAoBC,QAAUI,EAAQL,EAAoBC,QAAU,IAChGjJ,KAAK,CAAEwJ,GAAIxE,EAASC,WAAUqE,QAAM,EAMlDN,EAAoBS,QAAU,CAACL,EAAUC,EAASK,KAC9C,IAAA,IAASF,GAAEA,EAAIvE,SAAAA,EAAAqE,KAAUA,KAAUN,EAAoBW,KAAKN,GACxDK,EAAO3E,IAAIyE,EAAIvE,GAAUsD,IAAIe,EAAI,EAMzCN,EAAoBW,KAAO,CAACN,EAASrE,KAC7B,GAAAuE,EAAGF,GAAU,CACT,IAAAO,EAAMP,EAAQL,EAAoBC,QACtC,OAAOjE,EAAU4E,EAAIC,WAAaC,EAAGN,IAAMxE,IAAW4E,CACzD,CACD,MAAO,IAKXZ,EAAoBe,KAAO,CAACV,EAASrE,IAAYgE,EAAoBW,KAAKN,EAASrE,GAAS1E,OAAM,GAAI,GAChG,MAAAiJ,EAAMF,GAAYA,GAAWpL,MAAMC,QAAQmL,EAAQL,EAAoBC,QAC9E,CAvCQ,CAuCRD,IAAwBA,EAAsB,CAAE,IAanD,MAAMgB,EAAe,CACjBC,kBAAkB,EAClBC,cAAerK,GAAS,IAAI0E,EAAa1E,IAC1CsK,EAAgB,CACfC,oBAAoB,EACpBC,cAAe,IAAM,IAAI1C,GAgBtB,IAAIvC,EACAA,KAiCRA,IAAaA,EAAW,CAAA,IA7BdA,EAAS,OAAY,GAAK,SAKnCA,EAASA,EAAS,MAAW,GAAK,QAQlCA,EAASA,EAAS,gBAAqB,GAAK,kBAK5CA,EAASA,EAAS,WAAgB,GAAK,aAKvCA,EAASA,EAAS,SAAc,GAAK,WAKrCA,EAASA,EAAS,MAAW,GAAK,QCnHtC,MAAM+E,EAAgB,CAClBG,mBAAmB,EACnBC,eAAe,EACfC,mBAAmB,EACnBC,aAAc,GACfT,EAAe,CACdU,qBAAqB,GCAlB,MAAMC,EAAezB,OAAO,4BCA5B,SAAS0B,EAAeC,GAC3B,IAAIC,GAAU,EACd,MAAMC,EAAK,GACX,IAAA,IAASzM,EAAI,EAAGA,EAAIuM,EAAUtM,OAAQD,IAAK,CACnC,IAAA0M,EAAOH,EAAUI,OAAO3M,GAChB,KAAR0M,EACUF,GAAA,EAEL,KAAKhH,KAAKkH,IACfD,EAAG/K,KAAKgL,GACEF,GAAA,GAELA,GACFC,EAAA/K,KAAKgL,EAAKE,eACHJ,GAAA,GAEA,GAALxM,EACFyM,EAAA/K,KAAKgL,EAAKG,eAGbJ,EAAG/K,KAAKgL,EAEf,CACM,OAAAD,EAAG/D,KAAK,GACnB,CCxBO,IAAIoE,EACAA,EAgDAC,EACAA,EAqCAC,EACAA,EAmBJ,SAASC,EAAmBC,GAC3B,IAAAC,EAAIC,EAAIC,EAAIC,EAKT,OAJDJ,EAAAK,UAAuC,QAA1BJ,EAAKD,EAAMK,iBAA8B,IAAPJ,EAAgBA,EAAKb,EAAeY,EAAMM,MACzFN,EAAAO,SAAqC,QAAzBL,EAAKF,EAAMO,gBAA6B,IAAPL,EAAgBA,EAAKd,EAAeY,EAAMM,MACvFN,EAAAQ,OAAiC,QAAvBL,EAAKH,EAAMQ,cAA2B,IAAPL,EAAgBA,EAAKL,EAAWW,GAC/ET,EAAMU,IAA2B,QAApBN,EAAKJ,EAAMU,WAAwB,IAAPN,EAAgBA,GAAMJ,EAAMQ,UAAiBR,EAAMW,OAA8B,WAAdX,EAAMY,MAC3GZ,CACX,CC7FO,SAASa,EAAaC,GACrB,GAAc,iBAAPA,GAA2B,OAARA,IAAiBA,EAAIC,eAAe,aACvD,OAAA,EAEX,cAAeD,EAAIE,WACV,IAAA,SACG,YAAuB,IAAvBF,EAAIA,EAAIE,YAEsB,GAA3BC,OAAOC,KAAKJ,GAAK/N,OACvB,IAAA,YACD,OAAkC,GAA3BkO,OAAOC,KAAKJ,GAAK/N,OAAU,QAE3B,OAAA,EAEnB,EDlCW6M,EA8BRA,IAAeA,EAAa,CAAE,IA3BlBA,EAAW,OAAY,GAAK,SACvCA,EAAWA,EAAW,MAAW,GAAK,QAGtCA,EAAWA,EAAW,MAAW,GAAK,QACtCA,EAAWA,EAAW,OAAY,GAAK,SAGvCA,EAAWA,EAAW,MAAW,GAAK,QACtCA,EAAWA,EAAW,QAAa,GAAK,UACxCA,EAAWA,EAAW,QAAa,GAAK,UACxCA,EAAWA,EAAW,KAAU,GAAK,OACrCA,EAAWA,EAAW,OAAY,GAAK,SAQvCA,EAAWA,EAAW,MAAW,IAAM,QACvCA,EAAWA,EAAW,OAAY,IAAM,SAExCA,EAAWA,EAAW,SAAc,IAAM,WAC1CA,EAAWA,EAAW,SAAc,IAAM,WAC1CA,EAAWA,EAAW,OAAY,IAAM,SACxCA,EAAWA,EAAW,OAAY,IAAM,UAoBjCC,EAqBRA,IAAaA,EAAW,CAAE,IAfhBA,EAAS,OAAY,GAAK,SAMnCA,EAASA,EAAS,OAAY,GAAK,SAQnCA,EAASA,EAAS,OAAY,GAAK,UAkB5BC,EAeRA,IAAeA,EAAa,CAAE,IAXlBA,EAAW,GAAQ,GAAK,KAKnCA,EAAWA,EAAW,OAAY,GAAK,SAKvCA,EAAWA,EAAW,SAAc,GAAK,WEzGtC,MAAMqB,EACTtJ,YAAYuJ,GACJ,IAAAnB,EACCrM,KAAAyN,OAAgC,QAAtBpB,EAAKmB,EAAKC,cAA2B,IAAPpB,EAAgBA,EAAK,EACrE,CACDqB,UACI,GAAI1N,KAAKkK,KACL,OACJ,MAAMyD,EAAM,GAAIC,EAAQ,GAAIC,EAAS,GAC5B,IAAA,IAAAzB,KAASpM,KAAKyN,OACnB,GAAIrB,EAAMW,MACDc,EAAOC,SAAS1B,EAAMW,SAChBc,EAAAjN,KAAKwL,EAAMW,OACdY,EAAA/M,KAAKwL,EAAMW,OACTa,EAAAhN,KAAKwL,EAAMW,aAKrB,OADMa,EAAAhN,KAAKwL,EAAMK,WACTL,EAAMY,MACL,IAAA,SACA,IAAA,OACIZ,EAAMU,MAAOV,EAAMQ,QAChBe,EAAA/M,KAAKwL,EAAMK,WACnB,MACC,IAAA,UACGL,EAAMQ,QACFe,EAAA/M,KAAKwL,EAAMK,WACnB,MACC,IAAA,MACGkB,EAAA/M,KAAKwL,EAAMK,WAK1BzM,KAAAkK,KAAO,CAAEyD,MAAKC,QAAOC,OAAQR,OAAOU,OAAOF,GACnD,CAqBD1D,GAAGF,EAAS+D,EAAOC,GAAwB,GACvC,GAAID,EAAQ,EACD,OAAA,EACX,GAAI/D,SAA+D,iBAAXA,EAC7C,OAAA,EACXjK,KAAK0N,UACL,IAAIJ,EAAOD,OAAOC,KAAKrD,GAAUC,EAAOlK,KAAKkK,KAE7C,GAAIoD,EAAKnO,OAAS+K,EAAKyD,IAAIxO,QAAU+K,EAAKyD,IAAIO,MAAUhJ,IAACoI,EAAKQ,SAAS5I,KAC5D,OAAA,EACX,IAAK+I,GAEGX,EAAKY,MAAUC,IAACjE,EAAK0D,MAAME,SAASK,KAC7B,OAAA,EAIf,GAAIH,EAAQ,EACD,OAAA,EAGA,IAAA,MAAAtB,KAAQxC,EAAK2D,OAAQ,CAC5B,MAAMO,EAAQnE,EAAQyC,GAClB,IAACO,EAAamB,GACP,OAAA,EACX,QAAwB,IAApBA,EAAMhB,UACN,SACE,MAAAhB,EAAQpM,KAAKyN,OAAOY,SAAUC,EAAE7B,YAAc2B,EAAMhB,YAC1D,IAAKhB,EACM,OAAA,EACP,IAACpM,KAAKoM,MAAMgC,EAAMA,EAAMhB,WAAYhB,EAAO6B,EAAuBD,GAC3D,OAAA,CACd,CAEU,IAAA,MAAA5B,KAASpM,KAAKyN,OACrB,QAAoB,IAAhBrB,EAAMW,QAEL/M,KAAKoM,MAAMnC,EAAQmC,EAAMK,WAAYL,EAAO6B,EAAuBD,GAC7D,OAAA,EAER,OAAA,CACV,CACD5B,MAAMlE,EAAKkE,EAAO6B,EAAuBD,GACrC,IAAIO,EAAWnC,EAAMQ,OACrB,OAAQR,EAAMY,MACL,IAAA,SACD,YAAY,IAAR9E,EACOkE,EAAMU,IACbyB,EACOvO,KAAKwO,QAAQtG,EAAKkE,EAAMqC,EAAGT,EAAO5B,EAAMsC,GAC5C1O,KAAK2O,OAAOzG,EAAKkE,EAAMqC,EAAGrC,EAAMsC,GACtC,IAAA,OACD,YAAY,IAARxG,EACOkE,EAAMU,IACbyB,EACOvO,KAAKwO,QAAQtG,EAAK8D,EAAW4C,MAAOZ,GACxChO,KAAK2O,OAAOzG,EAAK8D,EAAW4C,OAClC,IAAA,UACD,YAAY,IAAR1G,IAEAqG,EACOvO,KAAK6O,SAAS3G,EAAKkE,EAAMqC,IAAKR,EAAuBD,GACzDhO,KAAKiK,QAAQ/B,EAAKkE,EAAMqC,IAAKR,EAAuBD,IAC1D,IAAA,MACG,GAAc,iBAAP9F,GAA2B,OAARA,EACnB,OAAA,EACX,GAAI8F,EAAQ,EACD,OAAA,EACX,IAAKhO,KAAK8O,QAAQ5G,EAAKkE,EAAM2C,EAAGf,GACrB,OAAA,EACX,OAAQ5B,EAAMzI,EAAEqJ,MACP,IAAA,SACD,OAAOhN,KAAKwO,QAAQnB,OAAOU,OAAO7F,GAAMkE,EAAMzI,EAAE8K,EAAGT,EAAO5B,EAAMzI,EAAE+K,GACjE,IAAA,OACM,OAAA1O,KAAKwO,QAAQnB,OAAOU,OAAO7F,GAAM8D,EAAW4C,MAAOZ,GACzD,IAAA,UACM,OAAAhO,KAAK6O,SAASxB,OAAOU,OAAO7F,GAAMkE,EAAMzI,EAAE8K,IAAKR,EAAuBD,IAItF,OAAA,CACV,CACD/D,QAAQ/B,EAAKkB,EAAM6E,EAAuBD,GACtC,OAAIC,EACO7E,EAAK4F,aAAa9G,EAAK8F,GAE3B5E,EAAKe,GAAGjC,EAAK8F,EACvB,CACDa,SAAS3G,EAAKkB,EAAM6E,EAAuBD,GACnC,IAACnP,MAAMC,QAAQoJ,GACR,OAAA,EACX,GAAI8F,EAAQ,EACD,OAAA,EACX,GAAIC,GACA,IAAA,IAAS/O,EAAI,EAAGA,EAAIgJ,EAAI/I,QAAUD,EAAI8O,EAAO9O,IACzC,IAAKkK,EAAK4F,aAAa9G,EAAIhJ,GAAI8O,EAAQ,GAC5B,OAAA,OAGf,IAAA,IAAS9O,EAAI,EAAGA,EAAIgJ,EAAI/I,QAAUD,EAAI8O,EAAO9O,IACzC,IAAKkK,EAAKe,GAAGjC,EAAIhJ,GAAI8O,EAAQ,GAClB,OAAA,EAEZ,OAAA,CACV,CACDW,OAAOzG,EAAKkB,EAAM6F,GACd,IAAIC,SAAiBhH,EACb,OAAAkB,GAAA,KACC4C,EAAWmD,OAAA,KACXnD,EAAWoD,QAAA,KACXpD,EAAWqD,MAAA,KACXrD,EAAWsD,SAAA,KACXtD,EAAWuD,OACJ,OAAAN,GAAA,KACChD,EAASuD,OACV,MAAkB,UAAXN,EAAW,KACjBjD,EAASwD,OACV,MAAkB,UAAXP,IAAwBQ,MAAMxH,GAAG,QAExC,MAAkB,UAAXgH,EAAW,KAEzBlD,EAAW2D,KACZ,MAAkB,WAAXT,EAAW,KACjBlD,EAAW4D,OACZ,MAAkB,UAAXV,EAAW,KACjBlD,EAAW6D,MACZ,OAAO3H,aAAeW,WAAA,KACrBmD,EAAW8D,OAAA,KACX9D,EAAW+D,MACZ,MAAkB,UAAXb,IAAwBQ,MAAMxH,GAAG,QAOxC,MAAkB,UAAXgH,GAAuB1N,OAAO2G,UAAUD,GAE1D,CACDsG,QAAQtG,EAAKkB,EAAM4E,EAAOiB,GAClB,IAACpQ,MAAMC,QAAQoJ,GACR,OAAA,EACX,GAAI8F,EAAQ,EACD,OAAA,EACP,GAAAnP,MAAMC,QAAQoJ,GACd,IAAA,IAAShJ,EAAI,EAAGA,EAAIgJ,EAAI/I,QAAUD,EAAI8O,EAAO9O,IACzC,IAAKc,KAAK2O,OAAOzG,EAAIhJ,GAAIkK,EAAM6F,GACpB,OAAA,EACZ,OAAA,CACV,CACDH,QAAQkB,EAAK5G,EAAM4E,GACX,IAAAV,EAAOD,OAAOC,KAAK0C,GACf,OAAA5G,GAAA,KACC4C,EAAW4C,MAAA,KACX5C,EAAWiE,QAAA,KACXjE,EAAWkE,SAAA,KACXlE,EAAWmE,OAAA,KACXnE,EAAWoE,OACZ,OAAOpQ,KAAKwO,QAAQlB,EAAKpM,MAAM,EAAG8M,GAAOgC,KAAI7B,GAAKkC,SAASlC,KAAK/E,EAAM4E,GAAK,KAC1EhC,EAAW2D,KACZ,OAAO3P,KAAKwO,QAAQlB,EAAKpM,MAAM,EAAG8M,GAAOgC,KAAI7B,GAAU,QAALA,GAA0B,SAALA,GAAuBA,IAAI/E,EAAM4E,GAAK,QAE7G,OAAOhO,KAAKwO,QAAQlB,EAAMlE,EAAM4E,EAAO/B,EAAS2D,QAE3D,ECxNE,SAASU,EAAsB7G,EAAML,GAChC,OAAAA,GAAA,KACC6C,EAASuD,OACV,OAAO/F,EAAK7E,gBACXqH,EAASwD,OACV,OAAOhG,EAAKtF,mBAIZ,OAAOsF,EAAK9E,WAExB,CCRO,MAAM4L,EACTtM,YAAYuJ,GACRxN,KAAKwN,KAAOA,CACf,CACDE,UACQ,IAAArB,EACA,QAAc,IAAdrM,KAAKwQ,KAAoB,CACzBxQ,KAAKwQ,KAAO,GACN,MAAAC,EAA0C,QAA3BpE,EAAKrM,KAAKwN,KAAKC,cAA2B,IAAPpB,EAAgBA,EAAK,GAC7E,IAAA,MAAWD,KAASqE,EACXzQ,KAAAwQ,KAAKpE,EAAMM,MAAQN,EACnBpM,KAAAwQ,KAAKpE,EAAMO,UAAYP,EACvBpM,KAAAwQ,KAAKpE,EAAMK,WAAaL,CAEpC,CACJ,CAEDtE,OAAOC,EAAW2I,EAAWC,GACzB,IAAK5I,EAAW,CACR,IAAA6I,EAAOlS,EAAgBiS,GAG3B,KAFY,UAARC,GAA4B,WAARA,IACpBA,EAAOD,EAAUhM,YACf,IAAItE,MAAM,qBAAqBuQ,SAAY5Q,KAAKwN,KAAKxD,YAAY0G,IAC1E,CACJ,CAUDG,KAAKC,EAAO7G,EAAS8G,GACjB/Q,KAAK0N,UACL,MAAMsD,EAAgB,GACtB,IAAA,MAAYC,EAASN,KAActD,OAAO6D,QAAQJ,GAAQ,CAChD,MAAA1E,EAAQpM,KAAKwQ,KAAKS,GACxB,IAAK7E,EAAO,CACR,IAAK2E,EAAQzF,oBACT,MAAM,IAAIjL,MAAM,qCAAqCL,KAAKwN,KAAKxD,wCAAwCiH,KAC3G,QACH,CACD,MAAMxE,EAAYL,EAAMK,UAEpB,IAAA0E,EACJ,GAAI/E,EAAMW,MAAO,CAET,GAAAiE,EAAclD,SAAS1B,EAAMW,OAC7B,MAAM,IAAI1M,MAAM,wCAAwC+L,EAAMW,aAAa/M,KAAKwN,KAAKxD,iCAC3EgH,EAAApQ,KAAKwL,EAAMW,OAChBoE,EAAAlH,EAAQmC,EAAMW,OAAS,CAC5BK,UAAWX,EAElB,MAEY0E,EAAAlH,EAGT,GAAc,OAAdmC,EAAMY,KAAe,CACrB,GAAkB,OAAd2D,EACA,SAGJ3Q,KAAK8H,OhB1DA,QADQnJ,EgB2DYgS,IhB1DI,iBAAThS,IAAsBE,MAAMC,QAAQH,GgB0DnByN,EAAMM,KAAMiE,GAEjD,MAAMS,EAAWD,EAAO1E,GAExB,IAAA,MAAY4E,EAAYC,KAAiBjE,OAAO6D,QAAQP,GAAY,CAG5D,IAAAY,EACJ,OAHAvR,KAAK8H,OAAwB,OAAjBwJ,EAAuBlF,EAAMM,KAAO,aAAc,MAGtDN,EAAMzI,EAAEqJ,MACP,IAAA,UACDuE,EAAMnF,EAAMzI,EAAE8K,IAAI+C,iBAAiBF,EAAcP,GACjD,MACC,IAAA,OACKQ,EAAAvR,KAAKyR,KAAKrF,EAAMzI,EAAE8K,IAAK6C,EAAclF,EAAMM,MACjD,MACC,IAAA,SACK6E,EAAAvR,KAAK2O,OAAO2C,EAAclF,EAAMzI,EAAE8K,EAAGrC,EAAMzI,EAAE+K,EAAGtC,EAAMM,MAGpE1M,KAAK8H,YAAe,IAARyJ,EAAmBnF,EAAMM,KAAO,aAAc4E,GAE1D,IAAII,EAAML,EACNjF,EAAM2C,GAAK/C,EAAW2D,OACtB+B,EAAa,QAAPA,GAA8B,SAAPA,GAAyBA,GACpDA,EAAA1R,KAAK2O,OAAO+C,EAAKtF,EAAM2C,EAAG9C,EAAS2D,OAAQxD,EAAMM,MAAM/H,WAC7DyM,EAASM,GAAOH,CACnB,CACJ,MAAA,GACQnF,EAAMQ,OAAQ,CACnB,GAAkB,OAAd+D,EACA,SAEJ3Q,KAAK8H,OAAOjJ,MAAMC,QAAQ6R,GAAYvE,EAAMM,KAAMiE,GAElD,MAAMgB,EAAWR,EAAO1E,GAExB,IAAA,MAAWmF,KAAYjB,EAAW,CAE1B,IAAAY,EACJ,OAFAvR,KAAK8H,OAAoB,OAAb8J,EAAmBxF,EAAMM,KAAM,MAEnCN,EAAMY,MACL,IAAA,UACDuE,EAAMnF,EAAMqC,IAAI+C,iBAAiBI,EAAUb,GAC3C,MACC,IAAA,OACDQ,EAAMvR,KAAKyR,KAAKrF,EAAMqC,IAAKmD,EAAUxF,EAAMM,MAC3C,MACC,IAAA,SACK6E,EAAAvR,KAAK2O,OAAOiD,EAAUxF,EAAMqC,EAAGrC,EAAMsC,EAAGtC,EAAMM,MAG5D1M,KAAK8H,YAAe,IAARyJ,EAAmBnF,EAAMM,KAAMiE,GAC3CgB,EAAS/Q,KAAK2Q,EACjB,CACJ,MAEG,OAAQnF,EAAMY,MACL,IAAA,UACD,GAAkB,OAAd2D,GAA4C,yBAAtBvE,EAAMqC,IAAIzE,SAAqC,CACrEhK,KAAK8H,YAAuB,IAAhBsE,EAAMW,MAAqBX,EAAMM,KAAO,kBAAmB,MACvE,QACH,CACMyE,EAAA1E,GAAaL,EAAMqC,IAAI+C,iBAAiBb,EAAWI,EAASI,EAAO1E,IAC1E,MACC,IAAA,OACM0E,EAAA1E,GAAazM,KAAKyR,KAAKrF,EAAMqC,IAAKkC,EAAWvE,EAAMM,MAC1D,MACC,IAAA,SACMyE,EAAA1E,GAAazM,KAAK2O,OAAOgC,EAAWvE,EAAMqC,EAAGrC,EAAMsC,EAAGtC,EAAMM,MAIlF,ChBlIF,IAAsB/N,CgBmIxB,CAID8S,KAAKrI,EAAMyI,EAAMnB,GAGb,GAFe,6BAAXtH,EAAK,IACEtB,EAAS,OAAT+J,EAAe,yBAAyB7R,KAAKwN,KAAKxD,YAAY0G,WAAmBtH,EAAK,yBACpF,OAATyI,EAEO,OAAA,EACX,cAAeA,GACN,IAAA,SAEM,OADA/J,EAAAtG,OAAO2G,UAAU0J,GAAO,yBAAyB7R,KAAKwN,KAAKxD,YAAY0G,4CAAoDmB,MAC3HA,EACN,IAAA,SACD,IAAIC,EAAgBD,EAChBzI,EAAK,IAAMyI,EAAKE,UAAU,EAAG3I,EAAK,GAAGjK,UAAYiK,EAAK,KAEtD0I,EAAgBD,EAAKE,UAAU3I,EAAK,GAAGjK,SACvC,IAAA6S,EAAa5I,EAAK,GAAG0I,GAElB,OADAhK,EAAqB,iBAAdkK,EAAwB,yBAAyBhS,KAAKwN,KAAKxD,YAAY0G,WAAmBtH,EAAK,wBAAwByI,OAC9HG,EAEflK,GAAO,EAAO,yBAAyB9H,KAAKwN,KAAKxD,YAAY0G,0CAAkDmB,MAClH,CACDlD,OAAOkD,EAAMzI,EAAM6F,EAAUyB,GACrB,IAAAuB,EACA,IACQ,OAAA7I,GAAA,KAGC4C,EAAW8D,OAAA,KACX9D,EAAW+D,MACZ,GAAa,OAAT8B,EACO,OAAA,EACX,GAAa,QAATA,EACA,OAAOrQ,OAAO0Q,IAClB,GAAa,aAATL,EACA,OAAOrQ,OAAO2Q,kBAClB,GAAa,cAATN,EACA,OAAOrQ,OAAO4Q,kBAClB,GAAa,KAATP,EAAa,CACTI,EAAA,eACJ,KACH,CACG,GAAe,iBAARJ,GAAoBA,EAAKpN,OAAOtF,SAAW0S,EAAK1S,OAAQ,CAC3D8S,EAAA,mBACJ,KACH,CACD,GAAmB,iBAARJ,GAAmC,iBAARA,EAClC,MAEA,IAAAvK,EAAQ9F,OAAOqQ,GACf,GAAArQ,OAAOkO,MAAMpI,GAAQ,CACjB2K,EAAA,eACJ,KACH,CACD,IAAKzQ,OAAO8G,SAAShB,GAAQ,CAErB2K,EAAA,qBACJ,KACH,CAGM,OAFH7I,GAAQ4C,EAAW+D,OACnB1H,EAAcf,GACXA,EAAA,KAEN0E,EAAW4C,MAAA,KACX5C,EAAWiE,QAAA,KACXjE,EAAWkE,SAAA,KACXlE,EAAWmE,OAAA,KACXnE,EAAWoE,OACZ,GAAa,OAATyB,EACO,OAAA,EACP,IAAApL,EAWJ,GAVmB,iBAARoL,EACCpL,EAAAoL,EACM,KAATA,EACDI,EAAA,eACgB,iBAARJ,IACRA,EAAKpN,OAAOtF,SAAW0S,EAAK1S,OACxB8S,EAAA,mBAEJxL,EAAQjF,OAAOqQ,SAET,IAAVpL,EACA,MAKG,OAJH2C,GAAQ4C,EAAWoE,OACnBhI,EAAa3B,GAEbwB,EAAYxB,GACTA,EAAA,KAENuF,EAAWqD,MAAA,KACXrD,EAAWsD,SAAA,KACXtD,EAAWuD,OACZ,GAAa,OAATsC,EACO,OAAAvB,EAAsBxL,EAAOP,KAAM0K,GAC9C,GAAmB,iBAAR4C,GAAmC,iBAARA,EAClC,MACJ,OAAOvB,EAAsBxL,EAAO4E,KAAKmI,GAAO5C,GAAQ,KACvDjD,EAAWoD,QAAA,KACXpD,EAAWmD,OACZ,GAAa,OAAT0C,EACO,OAAAvB,EAAsBjM,EAAQE,KAAM0K,GAC/C,GAAmB,iBAAR4C,GAAmC,iBAARA,EAClC,MACJ,OAAOvB,EAAsBjM,EAAQqF,KAAKmI,GAAO5C,GAAQ,KAExDjD,EAAW2D,KACZ,GAAa,OAATkC,EACO,OAAA,EACX,GAAoB,kBAATA,EACP,MACG,OAAAA,EAAA,KAEN7F,EAAW4D,OACZ,GAAa,OAATiC,EACO,MAAA,GACP,GAAgB,iBAATA,EAAmB,CACtBI,EAAA,mBACJ,KACH,CACG,IACAI,mBAAmBR,EAKtB,OAHMI,GACHA,EAAI,eACJ,KACH,CACM,OAAAJ,EAAA,KAGN7F,EAAW6D,MACR,GAAS,OAATgC,GAA0B,KAATA,EACV,OAAA,IAAIhJ,WAAW,GAC1B,GAAoB,iBAATgJ,EACP,MACJ,OfzQb,SAAsBS,GAErB,IAAAC,EAAwB,EAAnBD,EAAUnT,OAAa,EAGO,KAAnCmT,EAAUA,EAAUnT,OAAS,GACvBoT,GAAA,EACkC,KAAnCD,EAAUA,EAAUnT,OAAS,KAC5BoT,GAAA,GACN,IAEJxS,EAFIU,EAAQ,IAAIoI,WAAW0J,GAAKC,EAAU,EAC1CC,EAAW,EAEXC,EAAI,EAEJ,IAAA,IAASxT,EAAI,EAAGA,EAAIoT,EAAUnT,OAAQD,IAAK,CAEvC,GADIa,EAAAd,EAASqT,EAAUlT,WAAWF,SACxB,IAANa,EAEA,OAAQuS,EAAUpT,IACT,IAAA,IACUuT,EAAA,EACV,IAAA,KACA,IAAA,KACA,IAAA,KACA,IAAA,IACD,SAAA,QAEA,MAAMpS,MAAM,0BAGhB,OAAAoS,GACC,KAAA,EACGC,EAAA3S,EACO0S,EAAA,EACX,MACC,KAAA,EACDhS,EAAM+R,KAAaE,GAAK,GAAS,GAAJ3S,IAAW,EACpC2S,EAAA3S,EACO0S,EAAA,EACX,MACC,KAAA,EACDhS,EAAM+R,MAAkB,GAAJE,IAAW,GAAS,GAAJ3S,IAAW,EAC3C2S,EAAA3S,EACO0S,EAAA,EACX,MACC,KAAA,EACKhS,EAAA+R,MAAkB,EAAJE,IAAU,EAAI3S,EACvB0S,EAAA,EAGtB,CACD,GAAgB,GAAZA,EACA,MAAMpS,MAAM,0BACT,OAAAI,EAAM8F,SAAS,EAAGiM,EAC7B,CemN2BG,CAAad,GAK/B,OAFMe,GACHX,EAAIW,EAAM3I,OACb,CACDjK,KAAK8H,QAAO,EAAO4I,GAAauB,EAAI,MAAQA,EAAI,IAAKJ,EACxD,EC1RE,MAAMgB,EACT5O,YAAYuJ,GACJ,IAAAnB,EACCrM,KAAAyN,OAAgC,QAAtBpB,EAAKmB,EAAKC,cAA2B,IAAPpB,EAAgBA,EAAK,EACrE,CAIDyG,MAAM7I,EAAS8G,GACL,MAAAc,EAAO,CAAA,EAAIkB,EAAS9I,EACf,IAAA,MAAAmC,KAASpM,KAAKyN,OAAOhD,YAAa6D,EAAEvB,QAAQ,CACnD,IAAI4D,EAAY3Q,KAAKoM,MAAMA,EAAO2G,EAAO3G,EAAMK,WAAYsE,QACzC,IAAdJ,IACAkB,EAAKd,EAAQ3F,kBAAoBgB,EAAMM,KAAON,EAAMO,UAAYgE,EACvE,CAEU,IAAA,MAAAvE,KAASpM,KAAKyN,OAAQ,CAC7B,IAAKrB,EAAMW,MACP,SACE,MAAAqB,EAAQ2E,EAAO3G,EAAMW,OACvB,GAAAqB,EAAMhB,YAAchB,EAAMK,UAE1B,SACJ,IAAIkE,EAGAA,EAFc,UAAdvE,EAAMY,MAAkC,QAAdZ,EAAMY,KAEpBhN,KAAKoM,MAAMA,EAAOgC,EAAMhC,EAAMK,WAAY,CAClDtB,cAAe4F,EAAQ5F,cACvBC,kBAAmB2F,EAAQ3F,kBAC3BF,mBAAmB,IAGXlL,KAAKoM,MAAMA,EAAOgC,EAAMhC,EAAMK,WAAYsE,GAC1DjJ,OAAqB,IAAd6I,GACPkB,EAAKd,EAAQ3F,kBAAoBgB,EAAMM,KAAON,EAAMO,UAAYgE,CACnE,CACM,OAAAkB,CACV,CACDzF,MAAMA,EAAOzN,EAAOoS,GAChB,IAAIJ,EACA,GAAc,OAAdvE,EAAMY,KAAe,CACrBlF,EAAuB,iBAATnJ,GAA+B,OAAVA,GACnC,MAAMqU,EAAU,CAAA,EAChB,OAAQ5G,EAAMzI,EAAEqJ,MACP,IAAA,SACD,IAAA,MAAYiG,EAAUC,KAAe7F,OAAO6D,QAAQvS,GAAQ,CAClD,MAAA4S,EAAMvR,KAAK2O,OAAOvC,EAAMzI,EAAE8K,EAAGyE,EAAY9G,EAAMM,MAAM,GAAO,GAClE5E,OAAe,IAARyJ,GACCyB,EAAAC,EAAStO,YAAc4M,CAClC,CACD,MACC,IAAA,UACK,MAAA4B,EAAc/G,EAAMzI,EAAE8K,IAC5B,IAAA,MAAYwE,EAAUC,KAAe7F,OAAO6D,QAAQvS,GAAQ,CACxD,MAAM4S,EAAMvR,KAAKiK,QAAQkJ,EAAaD,EAAY9G,EAAMM,KAAMqE,GAC9DjJ,OAAe,IAARyJ,GACCyB,EAAAC,EAAStO,YAAc4M,CAClC,CACD,MACC,IAAA,OACK,MAAA6B,EAAWhH,EAAMzI,EAAE8K,IACzB,IAAA,MAAYwE,EAAUC,KAAe7F,OAAO6D,QAAQvS,GAAQ,CACxDmJ,OAAsB,IAAfoL,GAAiD,iBAAdA,GACpC,MAAA3B,EAAMvR,KAAKyR,KAAK2B,EAAUF,EAAY9G,EAAMM,MAAM,GAAO,EAAMqE,EAAQ5F,eAC7ErD,OAAe,IAARyJ,GACCyB,EAAAC,EAAStO,YAAc4M,CAClC,GAGLR,EAAQ7F,mBAAqBmC,OAAOC,KAAK0F,GAAS7T,OAAS,KAC/CwR,EAAAqC,EACnB,MAAA,GACQ5G,EAAMQ,OAAQ,CACZ9E,EAAAjJ,MAAMC,QAAQH,IACrB,MAAM0U,EAAU,GAChB,OAAQjH,EAAMY,MACL,IAAA,SACD,IAAA,IAAS9N,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CAC7B,MAAAqS,EAAMvR,KAAK2O,OAAOvC,EAAMqC,EAAG9P,EAAMO,GAAIkN,EAAMM,KAAMN,EAAMU,KAAK,GAClEhF,OAAe,IAARyJ,GACP8B,EAAQzS,KAAK2Q,EAChB,CACD,MACC,IAAA,OACK,MAAA6B,EAAWhH,EAAMqC,IACvB,IAAA,IAASvP,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACnC4I,OAAoB,IAAbnJ,EAAMO,IAAuC,iBAAZP,EAAMO,IAC9C,MAAMqS,EAAMvR,KAAKyR,KAAK2B,EAAUzU,EAAMO,GAAIkN,EAAMM,KAAMN,EAAMU,KAAK,EAAMiE,EAAQ5F,eAC/ErD,OAAe,IAARyJ,GACP8B,EAAQzS,KAAK2Q,EAChB,CACD,MACC,IAAA,UACK,MAAA4B,EAAc/G,EAAMqC,IAC1B,IAAA,IAASvP,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CAC7B,MAAAqS,EAAMvR,KAAKiK,QAAQkJ,EAAaxU,EAAMO,GAAIkN,EAAMM,KAAMqE,GAC5DjJ,OAAe,IAARyJ,GACP8B,EAAQzS,KAAK2Q,EAChB,GAILR,EAAQ7F,mBAAqBmI,EAAQlU,OAAS,GAAK4R,EAAQ7F,qBAC/CyF,EAAA0C,EACnB,MAEG,OAAQjH,EAAMY,MACL,IAAA,SACW2D,EAAA3Q,KAAK2O,OAAOvC,EAAMqC,EAAG9P,EAAOyN,EAAMM,KAAMN,EAAMU,IAAKiE,EAAQ7F,mBACvE,MACC,IAAA,OACDyF,EAAY3Q,KAAKyR,KAAKrF,EAAMqC,IAAK9P,EAAOyN,EAAMM,KAAMN,EAAMU,IAAKiE,EAAQ7F,kBAAmB6F,EAAQ5F,eAClG,MACC,IAAA,UACWwF,EAAA3Q,KAAKiK,QAAQmC,EAAMqC,IAAK9P,EAAOyN,EAAMM,KAAMqE,GAI5D,OAAAJ,CACV,CAIDc,KAAKrI,EAAMzK,EAAO+R,EAAW4C,EAAUpI,EAAmBC,GACtD,GAAe,6BAAX/B,EAAK,GACE,OAAA,KACX,QAAc,IAAVzK,GAIJ,GAAc,IAAVA,GAAgBuM,GAAsBoI,EAK1C,OAFOxL,EAAgB,iBAATnJ,GACPmJ,EAAAtG,OAAO2G,UAAUxJ,IACpBwM,IAAkB/B,EAAK,GAAG+D,eAAexO,GAElCA,EACPyK,EAAK,GAEEA,EAAK,GAAKA,EAAK,GAAGzK,GACtByK,EAAK,GAAGzK,QAdXmJ,EAAOwL,EAed,CACDrJ,QAAQb,EAAMzK,EAAO+R,EAAWK,GAC5B,YAAc,IAAVpS,EACOoS,EAAQ7F,kBAAoB,UAAO,EACvC9B,EAAKmK,kBAAkB5U,EAAOoS,EACxC,CACDpC,OAAOvF,EAAMzK,EAAO+R,EAAW4C,EAAUpI,GACrC,QAAc,IAAVvM,EAEO,YADPmJ,EAAOwL,GAGX,MAAME,EAAKtI,GAAqBoI,EAExB,OAAAlK,GAAA,KAEC4C,EAAW4C,MAAA,KACX5C,EAAWkE,SAAA,KACXlE,EAAWmE,OACZ,OAAc,IAAVxR,EACO6U,EAAK,OAAI,GACpBvL,EAAYtJ,GACLA,GAAA,KACNqN,EAAWiE,QAAA,KACXjE,EAAWoE,OACZ,OAAc,IAAVzR,EACO6U,EAAK,OAAI,GACpBpL,EAAazJ,GACNA,GAAA,KAGNqN,EAAW+D,MACZ1H,EAAc1J,GAAK,KAClBqN,EAAW8D,OACZ,OAAc,IAAVnR,EACO6U,EAAK,OAAI,GACb1L,EAAgB,iBAATnJ,GACV6C,OAAOkO,MAAM/Q,GACN,MACPA,IAAU6C,OAAO2Q,kBACV,WACPxT,IAAU6C,OAAO4Q,kBACV,YACJzT,GAAA,KAENqN,EAAW4D,OACZ,MAAc,KAAVjR,EACO6U,EAAK,QAAK,GACd1L,EAAgB,iBAATnJ,GACPA,GAAA,KAENqN,EAAW2D,KACZ,OAAc,IAAVhR,GACO6U,QAAa,GACjB1L,EAAgB,kBAATnJ,GACPA,GAAA,KAENqN,EAAWmD,OAAA,KACXnD,EAAWoD,QACLtH,EAAgB,iBAATnJ,GAAqC,iBAATA,GAAqC,iBAATA,GAClE,IAAA8U,EAAQpP,EAAQqF,KAAK/K,GACrB,GAAA8U,EAAMvP,WAAasP,EACZ,OACX,OAAOC,EAAM9O,gBAEZqH,EAAWqD,MAAA,KACXrD,EAAWsD,SAAA,KACXtD,EAAWuD,OACLzH,EAAgB,iBAATnJ,GAAqC,iBAATA,GAAqC,iBAATA,GAClE,IAAA8K,EAAO3E,EAAO4E,KAAK/K,GACnB,GAAA8K,EAAKvF,WAAasP,EACX,OACX,OAAO/J,EAAK9E,gBAGXqH,EAAW6D,MAEZ,OADA/H,EAAOnJ,aAAiBkK,YACnBlK,EAAM+G,WhBpJpB,SAAsBjF,GACzB,IACAV,EADI2T,EAAS,GAAIjB,EAAW,EAE5BC,EAAI,EACJ,IAAA,IAASxT,EAAI,EAAGA,EAAIuB,EAAMtB,OAAQD,IAEtB,OADRa,EAAIU,EAAMvB,GACFuT,GACC,KAAA,EACDiB,GAAU3U,EAASgB,GAAK,GACxB2S,GAAS,EAAJ3S,IAAU,EACJ0S,EAAA,EACX,MACC,KAAA,EACSiB,GAAA3U,EAAS2T,EAAI3S,GAAK,GAC5B2S,GAAS,GAAJ3S,IAAW,EACL0S,EAAA,EACX,MACC,KAAA,EACSiB,GAAA3U,EAAS2T,EAAI3S,GAAK,GAC5B2T,GAAU3U,EAAa,GAAJgB,GACR0S,EAAA,EAWhB,OANHA,IACAiB,GAAU3U,EAAS2T,GACTgB,GAAA,IACM,GAAZjB,IACUiB,GAAA,MAEXA,CACX,CgBsHuBC,CAAahV,GADT6U,EAAK,QAAK,EAGhC,EClOE,SAASI,EAAwBxK,EAAM6F,EAAWhD,EAAS2D,QACtD,OAAAxG,GAAA,KACC4C,EAAW2D,KACL,OAAA,EAAA,KACN3D,EAAWmD,OAAA,KACXnD,EAAWoD,QACL,OAAAkB,EAAsBjM,EAAQE,KAAM0K,GAAQ,KAClDjD,EAAWqD,MAAA,KACXrD,EAAWsD,SAAA,KACXtD,EAAWuD,OACL,OAAAe,EAAsBxL,EAAOP,KAAM0K,GAAQ,KACjDjD,EAAW8D,OAAA,KACX9D,EAAW+D,MACL,OAAA,EAAA,KACN/D,EAAW6D,MACL,OAAA,IAAIhH,WAAW,GAAC,KACtBmD,EAAW4D,OACL,MAAA,GAAA,QAOA,OAAA,EAEnB,CCvBO,MAAMiE,EACT5P,YAAYuJ,GACRxN,KAAKwN,KAAOA,CACf,CACDE,UACQ,IAAArB,EACA,IAACrM,KAAK8T,eAAgB,CAChB,MAAArD,EAA0C,QAA3BpE,EAAKrM,KAAKwN,KAAKC,cAA2B,IAAPpB,EAAgBA,EAAK,GACxErM,KAAA8T,eAAiB,IAAIC,IAAItD,EAAYT,KAAa5D,GAAA,CAACA,EAAMhC,GAAIgC,KACrE,CACJ,CAUDyE,KAAKmD,EAAQ/J,EAAS8G,EAAS5R,GAC3Ba,KAAK0N,UACL,MAAMpM,OAAiB,IAAXnC,EAAuB6U,EAAO1O,IAAM0O,EAAO9T,IAAMf,EACtD,KAAA6U,EAAO9T,IAAMoB,GAAK,CAEf,MAACsE,EAASC,GAAYmO,EAAOrO,MAAOyG,EAAQpM,KAAK8T,eAAeG,IAAIrO,GAC1E,IAAKwG,EAAO,CACR,IAAI8H,EAAInD,EAAQlG,iBAChB,GAAS,SAALqJ,EACA,MAAM,IAAI7T,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKwN,KAAKxD,YAClF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKwN,KAAKxD,SAAUC,EAASrE,EAASC,EAAUsO,GAClG,QACH,CAED,IAAIhD,EAASlH,EAASsE,EAAWnC,EAAMQ,OAAQH,EAAYL,EAAMK,UAWjE,OATIL,EAAMW,QACNoE,EAASA,EAAO/E,EAAMW,OAElBoE,EAAO/D,YAAcX,IACZ0E,EAAAlH,EAAQmC,EAAMW,OAAS,CAC5BK,UAAWX,KAIfL,EAAMY,MACL,IAAA,SACA,IAAA,OACD,IAAIyB,EAAkB,QAAdrC,EAAMY,KAAiBhB,EAAW4C,MAAQxC,EAAMqC,EACpDC,EAAkB,UAAdtC,EAAMY,KAAmBZ,EAAMsC,OAAI,EAC3C,GAAIH,EAAU,CACV,IAAI6F,EAAMjD,EAAO1E,GACb,GAAA5G,GAAYG,EAASI,iBAAmBqI,GAAKzC,EAAW4D,QAAUnB,GAAKzC,EAAW6D,MAAO,CACzF,IAAIoC,EAAI+B,EAAO3O,SAAW2O,EAAO9T,IACjC,KAAO8T,EAAO9T,IAAM+R,GAChBmC,EAAIxT,KAAKZ,KAAK2O,OAAOqF,EAAQvF,EAAGC,GACvC,MAEG0F,EAAIxT,KAAKZ,KAAK2O,OAAOqF,EAAQvF,EAAGC,GACvC,MAEGyC,EAAO1E,GAAazM,KAAK2O,OAAOqF,EAAQvF,EAAGC,GAC/C,MACC,IAAA,UACD,GAAIH,EAAU,CACV,IAAI6F,EAAMjD,EAAO1E,GACbzE,EAAMoE,EAAMqC,IAAI4F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,GAChEqD,EAAIxT,KAAKoH,EACZ,MAEUmJ,EAAA1E,GAAaL,EAAMqC,IAAI4F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAASI,EAAO1E,IAC9F,MACC,IAAA,MACG,IAAC6H,EAAQC,GAAUvU,KAAKwU,SAASpI,EAAO4H,EAAQjD,GAEpDI,EAAO1E,GAAW6H,GAAUC,EAGvC,CACJ,CAIDC,SAASpI,EAAO4H,EAAQjD,GAChB,IAEAW,EACAH,EAHApS,EAAS6U,EAAO3O,SAChB/D,EAAM0S,EAAO9T,IAAMf,EAGhB,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACC,KAAA,EAES8L,EADNtF,EAAM2C,GAAK/C,EAAW2D,KAChBqE,EAAOhN,OAAOrC,WAGd3E,KAAK2O,OAAOqF,EAAQ5H,EAAM2C,EAAG9C,EAAS2D,QAChD,MACC,KAAA,EACD,OAAQxD,EAAMzI,EAAEqJ,MACP,IAAA,SACKuE,EAAAvR,KAAK2O,OAAOqF,EAAQ5H,EAAMzI,EAAE8K,EAAGrC,EAAMzI,EAAE+K,GAC7C,MACC,IAAA,OACD6C,EAAMyC,EAAOvN,QACb,MACC,IAAA,UACK8K,EAAAnF,EAAMzI,EAAE8K,IAAI4F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,GAGtE,MAAA,QAEM,MAAA,IAAI1Q,MAAM,iBAAiBuF,gBAAsBC,uBAA8B7F,KAAKwN,KAAKxD,YAAYoC,EAAMM,QAE5H,CACD,QAAY,IAARgF,EAAmB,CACf,IAAA+C,EAASb,EAAwBxH,EAAM2C,GAC3C2C,EAAMtF,EAAM2C,GAAK/C,EAAW2D,KAAO8E,EAAO9P,WAAa8P,CAC1D,CACD,QAAY,IAARlD,EACA,OAAQnF,EAAMzI,EAAEqJ,MACP,IAAA,SACDuE,EAAMqC,EAAwBxH,EAAMzI,EAAE8K,EAAGrC,EAAMzI,EAAE+K,GACjD,MACC,IAAA,OACK6C,EAAA,EACN,MACC,IAAA,UACDA,EAAMnF,EAAMzI,EAAE8K,IAAIiG,SAGvB,MAAA,CAAChD,EAAKH,EAChB,CACD5C,OAAOqF,EAAQ5K,EAAM6F,GACT,OAAA7F,GAAA,KACC4C,EAAW4C,MACZ,OAAOoF,EAAOvN,aACbuF,EAAW4D,OACZ,OAAOoE,EAAOtM,cACbsE,EAAW2D,KACZ,OAAOqE,EAAOhN,YACbgF,EAAW8D,OACZ,OAAOkE,EAAOxM,cACbwE,EAAW+D,MACZ,OAAOiE,EAAO1M,aACb0E,EAAWqD,MACZ,OAAOiB,EAAsB0D,EAAOpN,QAASqI,GAAQ,KACpDjD,EAAWmD,OACZ,OAAOmB,EAAsB0D,EAAOnN,SAAUoI,GAAQ,KACrDjD,EAAWoD,QACZ,OAAOkB,EAAsB0D,EAAO5M,UAAW6H,GAAQ,KACtDjD,EAAWiE,QACZ,OAAO+D,EAAO/M,eACb+E,EAAW6D,MACZ,OAAOmE,EAAOvT,aACbuL,EAAWoE,OACZ,OAAO4D,EAAO3O,cACb2G,EAAWkE,SACZ,OAAO8D,EAAO7M,gBACb6E,EAAWsD,SACZ,OAAOgB,EAAsB0D,EAAO3M,WAAY4H,GAAQ,KACvDjD,EAAWmE,OACZ,OAAO6D,EAAOtN,cACbsF,EAAWuD,OACZ,OAAOe,EAAsB0D,EAAOlN,SAAUmI,GAEzD,ECxKE,MAAM0F,EACT1Q,YAAYuJ,GACRxN,KAAKwN,KAAOA,CACf,CACDE,UACQ,IAAC1N,KAAKyN,OAAQ,CACR,MAAAgD,EAAczQ,KAAKwN,KAAKC,OAASzN,KAAKwN,KAAKC,OAAOmH,SAAW,GAC9D5U,KAAAyN,OAASgD,EAAYoE,MAAK,CAACC,EAAG/U,IAAM+U,EAAE1K,GAAKrK,EAAEqK,IACrD,CACJ,CAID0I,MAAM7I,EAASK,EAAQyG,GACnB/Q,KAAK0N,UACM,IAAA,MAAAtB,KAASpM,KAAKyN,OAAQ,CAC7B,IAAI9O,EACJoW,EACAxG,EAAWnC,EAAMQ,OAAQH,EAAYL,EAAMK,UAE3C,GAAIL,EAAMW,MAAO,CACP,MAAAqB,EAAQnE,EAAQmC,EAAMW,OAC5B,GAAIqB,EAAMhB,YAAcX,EACpB,SACJ9N,EAAQyP,EAAM3B,GACAsI,GAAA,CACjB,MAEGpW,EAAQsL,EAAQwC,GACFsI,GAAA,EAGlB,OAAQ3I,EAAMY,MACL,IAAA,SACA,IAAA,OACD,IAAIyB,EAAkB,QAAdrC,EAAMY,KAAiBhB,EAAW4C,MAAQxC,EAAMqC,EACxD,GAAIF,EAEA,GADOzG,EAAAjJ,MAAMC,QAAQH,IACjB4P,GAAYrC,EAAW8I,OACvBhV,KAAKiV,OAAO3K,EAAQmE,EAAGrC,EAAMhC,GAAIzL,QAEjC,IAAA,MAAWuW,KAAQvW,EACfqB,KAAK2O,OAAOrE,EAAQmE,EAAGrC,EAAMhC,GAAI8K,GAAM,aAEhC,IAAVvW,EACLmJ,EAAOsE,EAAMU,KAER9M,KAAA2O,OAAOrE,EAAQmE,EAAGrC,EAAMhC,GAAIzL,EAAOoW,GAAe3I,EAAMU,KACjE,MACC,IAAA,UACD,GAAIyB,EAAU,CACHzG,EAAAjJ,MAAMC,QAAQH,IACrB,IAAA,MAAWuW,KAAQvW,EACVqB,KAAAiK,QAAQK,EAAQyG,EAAS3E,EAAMqC,IAAKrC,EAAMhC,GAAI8K,EAC1D,MAEQlV,KAAAiK,QAAQK,EAAQyG,EAAS3E,EAAMqC,IAAKrC,EAAMhC,GAAIzL,GAEvD,MACC,IAAA,MACDmJ,EAAuB,iBAATnJ,GAA+B,OAAVA,GACnC,IAAA,MAAY+S,EAAKH,KAAQlE,OAAO6D,QAAQvS,GACpCqB,KAAKwU,SAASlK,EAAQyG,EAAS3E,EAAOsF,EAAKH,GAG1D,CACD,IAAI2C,EAAInD,EAAQ/F,oBACN,IAANkJ,KACO,IAANA,EAAatK,EAAoBS,QAAU6J,GAAGlU,KAAKwN,KAAKxD,SAAUC,EAASK,EACnF,CACDkK,SAASlK,EAAQyG,EAAS3E,EAAOsF,EAAK/S,GAClC2L,EAAO3E,IAAIyG,EAAMhC,GAAIpE,EAASI,iBAC9BkE,EAAOtB,OAGP,IAAImM,EAAWzD,EACf,OAAQtF,EAAM2C,GAAA,KACL/C,EAAW4C,MAAA,KACX5C,EAAWiE,QAAA,KACXjE,EAAWoE,OAAA,KACXpE,EAAWkE,SAAA,KACXlE,EAAWmE,OACDgF,EAAA3T,OAAO6O,SAASqB,GAC3B,MAAA,KACC1F,EAAW2D,KACL7H,EAAO,QAAP4J,GAAwB,SAAPA,GACxByD,EAAkB,QAAPzD,EAMnB,OAFA1R,KAAK2O,OAAOrE,EAAQ8B,EAAM2C,EAAG,EAAGoG,GAAU,GAElC/I,EAAMzI,EAAEqJ,MACP,IAAA,SACDhN,KAAK2O,OAAOrE,EAAQ8B,EAAMzI,EAAE8K,EAAG,EAAG9P,GAAO,GACzC,MACC,IAAA,OACDqB,KAAK2O,OAAOrE,EAAQ0B,EAAW4C,MAAO,EAAGjQ,GAAO,GAChD,MACC,IAAA,UACIqB,KAAAiK,QAAQK,EAAQyG,EAAS3E,EAAMzI,EAAE8K,IAAK,EAAG9P,GAGtD2L,EAAO1C,MACV,CACDqC,QAAQK,EAAQyG,EAASqE,EAASxP,EAASjH,QACzB,IAAVA,IAEIyW,EAAAC,oBAAoB1W,EAAO2L,EAAO3E,IAAIC,EAASI,EAASI,iBAAiB4C,OAAQ+H,GACzFzG,EAAO1C,OACV,CAID+G,OAAOrE,EAAQlB,EAAMxD,EAASjH,EAAOoW,GAC7B,IAAClP,EAAUyP,EAAQC,GAAavV,KAAKwV,WAAWpM,EAAMzK,GACrD4W,IAAaR,IACPzK,EAAA3E,IAAIC,EAASC,GACpByE,EAAOgL,GAAQ3W,GAEtB,CAIDsW,OAAO3K,EAAQlB,EAAMxD,EAASjH,GAC1B,IAAKA,EAAMQ,OACP,OACJ2I,EAAOsB,IAAS4C,EAAW6D,OAASzG,IAAS4C,EAAW4D,QAEjDtF,EAAA3E,IAAIC,EAASI,EAASI,iBAE7BkE,EAAOtB,OAEP,IAAO,CAAAsM,GAAWtV,KAAKwV,WAAWpM,GAClC,IAAA,IAASlK,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IACvBoL,EAAAgL,GAAQ3W,EAAMO,IAEzBoL,EAAO1C,MACV,CAWD4N,WAAWpM,EAAMzK,GACb,IACI8W,EADA7W,EAAIoH,EAASC,OAEb/G,OAAc,IAAVP,EACJwV,EAAc,IAAVxV,EACA,OAAAyK,GAAA,KACC4C,EAAW4C,MACR6G,EAAA,QACJ,MAAA,KACCzJ,EAAW4D,OACRuE,EAAAjV,IAAMP,EAAMQ,OAChBP,EAAIoH,EAASI,gBACTqP,EAAA,SACJ,MAAA,KACCzJ,EAAW2D,KACZwE,GAAc,IAAVxV,EACA8W,EAAA,OACJ,MAAA,KACCzJ,EAAWoE,OACRqF,EAAA,SACJ,MAAA,KACCzJ,EAAW8D,OACZlR,EAAIoH,EAASE,MACTuP,EAAA,SACJ,MAAA,KACCzJ,EAAW+D,MACZnR,EAAIoH,EAASG,MACTsP,EAAA,QACJ,MAAA,KACCzJ,EAAWqD,MACZ8E,EAAIjV,GAAK4F,EAAO4E,KAAK/K,GAAOuF,SACxBuR,EAAA,QACJ,MAAA,KACCzJ,EAAWmD,OACZgF,EAAIjV,GAAKmF,EAAQqF,KAAK/K,GAAOuF,SACzBuR,EAAA,SACJ,MAAA,KACCzJ,EAAWoD,QACZ+E,EAAIjV,GAAKmF,EAAQqF,KAAK/K,GAAOuF,SAC7BtF,EAAIoH,EAASE,MACTuP,EAAA,UACJ,MAAA,KACCzJ,EAAW6D,MACRsE,EAAAjV,IAAMP,EAAM+G,WAChB9G,EAAIoH,EAASI,gBACTqP,EAAA,QACJ,MAAA,KACCzJ,EAAWiE,QACZrR,EAAIoH,EAASG,MACTsP,EAAA,UACJ,MAAA,KACCzJ,EAAWkE,SACZtR,EAAIoH,EAASG,MACTsP,EAAA,WACJ,MAAA,KACCzJ,EAAWsD,SACZ6E,EAAIjV,GAAK4F,EAAO4E,KAAK/K,GAAOuF,SAC5BtF,EAAIoH,EAASE,MACTuP,EAAA,WACJ,MAAA,KACCzJ,EAAWmE,OACRsF,EAAA,SACJ,MAAA,KACCzJ,EAAWuD,OACZ4E,EAAIjV,GAAK4F,EAAO4E,KAAK/K,GAAOuF,SACxBuR,EAAA,SAGZ,MAAO,CAAC7W,EAAG6W,EAAGvW,GAAKiV,EACtB,ECrNE,SAASuB,EAAuBlI,EAAM2D,EAAQ4B,GAC7C,IAAA4C,EACYC,EAAhB9E,EAAQiC,EACC,IAAA,IAAA3G,KAASoB,EAAKC,OAAQ,CAC3B,IAAIf,EAAON,EAAMK,UACjB,GAAIL,EAAMW,MAAO,CACP,MAAAqB,EAAQ0C,EAAM1E,EAAMW,OAC1B,QAAc,IAAVqB,EACA,SAKJ,GAHAuH,EAAavH,EAAM1B,GACnBkJ,EAASzE,EAAO/E,EAAMW,OACtB6I,EAAOxI,UAAYgB,EAAMhB,eACN,IAAfuI,EAA0B,QACnBC,EAAOlJ,GACd,QACH,CACJ,MAIG,GAFAiJ,EAAa7E,EAAMpE,GACVkJ,EAAAzE,OACU,IAAfwE,EACA,SAIR,OAAQvJ,EAAMY,MACL,IAAA,SACA,IAAA,OACGZ,EAAMQ,OACCgJ,EAAAlJ,GAAQiJ,EAAWf,SAE1BgB,EAAOlJ,GAAQiJ,EACnB,MACC,IAAA,UACG,IAAAlH,EAAIrC,EAAMqC,IACd,GAAIrC,EAAMQ,OACN,IAAA,IAAS1N,EAAI,EAAGA,EAAIyW,EAAWxW,OAAQD,IACnC0W,EAAOlJ,GAAMxN,GAAKuP,EAAEiG,OAAOiB,EAAWzW,cACpB,IAAjB0W,EAAOlJ,GACLkJ,EAAAlJ,GAAQ+B,EAAEiG,OAAOiB,GAEtBlH,EAAAoH,aAAaD,EAAOlJ,GAAOiJ,GACjC,MACC,IAAA,MAED,OAAQvJ,EAAMzI,EAAEqJ,MACP,IAAA,SACA,IAAA,OACMK,OAAAyI,OAAOF,EAAOlJ,GAAOiJ,GAC5B,MACC,IAAA,UACGlH,IAAAA,EAAIrC,EAAMzI,EAAE8K,IACP,IAAA,IAAAN,KAAKd,OAAOC,KAAKqI,GACtBC,EAAOlJ,GAAMyB,GAAKM,EAAEiG,OAAOiB,EAAWxH,KAK7D,CACL,CChCA,MAAM4H,EAAe1I,OAAOU,OAC5B,SAASiI,EAAY5M,EAAM0L,EAAG/U,GAC1B,GAAI+U,IAAM/U,EACC,OAAA,EACX,GAAIqJ,IAAS4C,EAAW6D,MACb,OAAA,EACX,IAAIoG,EAAKnB,EACLoB,EAAKnW,EACL,GAAAkW,EAAG9W,SAAW+W,EAAG/W,OACV,OAAA,EACX,IAAA,IAASD,EAAI,EAAGA,EAAI+W,EAAG9W,OAAQD,IACvB,GAAA+W,EAAG/W,IAAMgX,EAAGhX,GACL,OAAA,EACR,OAAA,CACX,CACA,SAASiX,EAAoB/M,EAAM0L,EAAG/U,GAC9B,GAAA+U,EAAE3V,SAAWY,EAAEZ,OACR,OAAA,EACX,IAAA,IAASD,EAAI,EAAGA,EAAI4V,EAAE3V,OAAQD,IAC1B,IAAK8W,EAAY5M,EAAM0L,EAAE5V,GAAIa,EAAEb,IACpB,OAAA,EACR,OAAA,CACX,CACA,SAASkX,EAAchN,EAAM0L,EAAG/U,GACxB,GAAA+U,EAAE3V,SAAWY,EAAEZ,OACR,OAAA,EACX,IAAA,IAASD,EAAI,EAAGA,EAAI4V,EAAE3V,OAAQD,IAC1B,IAAKkK,EAAKiN,OAAOvB,EAAE5V,GAAIa,EAAEb,IACd,OAAA,EACR,OAAA,CACX,CCxDO,MAAMoX,EACTrS,YAAYyI,EAAMe,EAAQsD,GACtB/Q,KAAKuW,kBAAoB,GACzBvW,KAAKgK,SAAW0C,EACX1M,KAAAyN,OAASA,EAAOuC,IAAI7D,GACzBnM,KAAK+Q,QAAUA,QAAyCA,EAAU,GAC7D/Q,KAAAwW,aAAe,IAAIjJ,EAAoBvN,MACvCA,KAAAyW,cAAgB,IAAIlG,EAAqBvQ,MACzCA,KAAA0W,cAAgB,IAAI7D,EAAqB7S,MACzCA,KAAA2W,aAAe,IAAI9C,EAAuB7T,MAC1CA,KAAA4W,aAAe,IAAIjC,EAAuB3U,KAClD,CACD0U,OAAO/V,GACC,IAAAsL,ECvBL,SAA0Bb,GAC7B,MAAMpB,EAAM,CAAA,EACLqF,OAAAwJ,eAAe7O,EAAKuD,EAAc,CAAEuL,YAAY,EAAOnY,MAAOyK,IAC5D,IAAA,IAAAgD,KAAShD,EAAKqE,OAAQ,CAC3B,IAAIf,EAAON,EAAMK,UACjB,IAAIL,EAAMU,IAEV,GAAIV,EAAMW,MACN/E,EAAIoE,EAAMW,OAAS,CAAEK,eAAW,QAAS,GACpChB,EAAMQ,OACX5E,EAAI0E,GAAQ,QAEZ,OAAQN,EAAMY,MACL,IAAA,SACDhF,EAAI0E,GAAQkH,EAAwBxH,EAAMqC,EAAGrC,EAAMsC,GACnD,MACC,IAAA,OAED1G,EAAI0E,GAAQ,EACZ,MACC,IAAA,MACD1E,EAAI0E,GAAQ,GAG3B,CACM,OAAA1E,CACX,CDHsB+O,CAAiB/W,MAIxB,YAHO,IAAVrB,GACuB+W,EAAA1V,KAAMiK,EAAStL,GAEnCsL,CACV,CAMD+M,MAAM/M,GACE,IAAAgN,EAAOjX,KAAK0U,SAET,OADgBgB,EAAA1V,KAAMiX,EAAMhN,GAC5BgN,CACV,CAODZ,OAAOvB,EAAG/U,GACC,OD7CR,SAA0ByN,EAAMsH,EAAG/U,GACtC,GAAI+U,IAAM/U,EACC,OAAA,EACP,IAAC+U,IAAM/U,EACA,OAAA,EACF,IAAA,IAAAqM,KAASoB,EAAKC,OAAQ,CAC3B,IAAIhB,EAAYL,EAAMK,UAClByK,EAAQ9K,EAAMW,MAAQ+H,EAAE1I,EAAMW,OAAON,GAAaqI,EAAErI,GACpD0K,EAAQ/K,EAAMW,MAAQhN,EAAEqM,EAAMW,OAAON,GAAa1M,EAAE0M,GACxD,OAAQL,EAAMY,MACL,IAAA,OACA,IAAA,SACD,IAAIpO,EAAkB,QAAdwN,EAAMY,KAAiBhB,EAAW4C,MAAQxC,EAAMqC,EACpD,KAAErC,EAAMQ,OACNuJ,EAAoBvX,EAAGsY,EAAOC,GAC9BnB,EAAYpX,EAAGsY,EAAOC,IACjB,OAAA,EACX,MACC,IAAA,MACD,KAAsB,WAAhB/K,EAAMzI,EAAEqJ,KACRoJ,EAAchK,EAAMzI,EAAE8K,IAAKsH,EAAamB,GAAQnB,EAAaoB,IAC7DhB,EAAoC,QAAhB/J,EAAMzI,EAAEqJ,KAAiBhB,EAAW4C,MAAQxC,EAAMzI,EAAE8K,EAAGsH,EAAamB,GAAQnB,EAAaoB,KACxG,OAAA,EACX,MACC,IAAA,UACG,IAAA1I,EAAIrC,EAAMqC,IACV,KAAErC,EAAMQ,OACNwJ,EAAc3H,EAAGyI,EAAOC,GACxB1I,EAAE4H,OAAOa,EAAOC,IACX,OAAA,EAGtB,CACM,OAAA,CACX,CCWeC,CAAiBpX,KAAM8U,EAAG/U,EACpC,CAKDoK,GAAGjC,EAAK8F,EAAQhO,KAAKuW,mBACjB,OAAOvW,KAAKwW,aAAarM,GAAGjC,EAAK8F,GAAO,EAC3C,CAKDgB,aAAa9G,EAAK8F,EAAQhO,KAAKuW,mBAC3B,OAAOvW,KAAKwW,aAAarM,GAAGjC,EAAK8F,GAAO,EAC3C,CAMD6H,aAAa1E,EAAQ4B,GACM2C,EAAA1V,KAAMmR,EAAQ4B,EACxC,CAIDsE,WAAWnN,EAAM6G,GACT,IAAAjE,EftBL,SAA2BiE,GACvB,OAAAA,EAAU1D,OAAOyI,OAAOzI,OAAOyI,OAAO,CAAE,EAAElL,GAAemG,GAAWnG,CAC/E,CeoBkB0M,CAAkBvG,GACrB,OAAA/Q,KAAKqU,mBAAmBvH,EAAIhC,cAAcZ,GAAOA,EAAKxE,WAAYoH,EAC5E,CAIDyK,SAAS1F,EAAMd,GACX,OAAO/Q,KAAKwR,iBAAiBK,Ed5E9B,SAAyBd,GACrB,OAAAA,EAAU1D,OAAOyI,OAAOzI,OAAOyI,OAAO,CAAE,EAAElL,GAAemG,GAAWnG,CAC/E,Cc0E2C4M,CAAgBzG,GACtD,CAKD0G,eAAe5F,EAAMd,GACb,IAAApS,EAAQ+Y,KAAKC,MAAM9F,GAChB,OAAA7R,KAAKuX,SAAS5Y,EAAOoS,EAC/B,CAID6G,OAAO3N,EAAS8G,GACZ,OAAO/Q,KAAKuT,kBAAkBtJ,EdpF/B,SAA0B8G,GACtB,OAAAA,EAAU1D,OAAOyI,OAAOzI,OAAOyI,OAAO,CAAE,EAAE/K,GAAgBgG,GAAWhG,CAChF,CckF+C8M,CAAiB9G,GAC3D,CAKD+G,aAAa7N,EAAS8G,GACd,IAAA1E,EACJ,IAAI1N,EAAQqB,KAAK4X,OAAO3N,EAAS8G,GACjC,OAAO2G,KAAKK,UAAUpZ,EAAO,KAAwF,QAAjF0N,EAAK0E,aAAyC,EAASA,EAAQ1F,oBAAiC,IAAPgB,EAAgBA,EAAK,EACrJ,CAID2L,SAAS/N,EAAS8G,GACV,IAAAjE,EfhEL,SAA4BiE,GACxB,OAAAA,EAAU1D,OAAOyI,OAAOzI,OAAOyI,OAAO,CAAE,EAAE/K,GAAgBgG,GAAWhG,CAChF,Ce8DkBkN,CAAmBlH,GACtB,OAAA/Q,KAAKqV,oBAAoBpL,EAAS6C,EAAI7B,gBAAiB6B,GAAKlE,QACtE,CASD4I,iBAAiBK,EAAMd,EAASI,GACxB,GAAS,OAATU,GAAgC,iBAARA,IAAqBhT,MAAMC,QAAQ+S,GAAO,CAClE,IAAI5H,EAAUkH,QAAuCA,EAASnR,KAAK0U,SAE5D,OADP1U,KAAKyW,cAAc5F,KAAKgB,EAAM5H,EAAS8G,GAChC9G,CACV,CACD,MAAM,IAAI5J,MAAM,2BAA2BL,KAAKgK,sBAAsBtL,EAAgBmT,MACzF,CAOD0B,kBAAkBtJ,EAAS8G,GACvB,OAAO/Q,KAAK0W,cAAc5D,MAAM7I,EAAS8G,EAC5C,CAQDsE,oBAAoBpL,EAASK,EAAQyG,GAE1B,OADP/Q,KAAK4W,aAAa9D,MAAM7I,EAASK,EAAQyG,GAClCzG,CACV,CASD+J,mBAAmBL,EAAQ7U,EAAQ4R,EAASI,GACxC,IAAIlH,EAAUkH,QAAuCA,EAASnR,KAAK0U,SAE5D,OADP1U,KAAK2W,aAAa9F,KAAKmD,EAAQ/J,EAAS8G,EAAS5R,GAC1C8K,CACV,EE03BO,IAAAiO,GAAAA,IAIRA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,qBAAqB,IAArB,qBAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,oBAAoB,IAApB,oBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,sBAAsB,IAAtB,sBAxEQA,IAAAA,GAAA,CAAA,GA6EAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,aAAa,IAAb,aA5CQA,IAAAA,IAAA,CAAA,GAiDAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,QAAQ,GAAR,QAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,mBAAmB,IAAnB,mBA5CQA,IAAAA,IAAA,CAAA,GAiDAC,IAAAA,IAIRA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,YAAY,IAAZ,YAhDQA,IAAAA,IAAA,CAAA,GAqDAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,eAAe,IAAf,eAIAA,EAAAA,gBAAgB,IAAhB,gBAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,gBAAgB,IAAhB,gBAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,aAAa,IAAb,aAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,cAAc,IAAd,cAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,aAAa,IAAb,aAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,qBAAqB,IAArB,qBAIAA,EAAAA,sBAAsB,IAAtB,sBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,uBAAuB,IAAvB,uBAOAA,EAAAA,iBAAiB,IAAjB,iBA/IQA,IAAAA,IAAA,CAAA,GAyJAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,iCAAiC,GAAjC,iCAhBQA,IAAAA,IAAA,CAAA,GAqBAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,IAAf,eAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,iBAAiB,IAAjB,iBA5DQA,IAAAA,IAAA,CAAA,GAiEAC,IAAAA,IAIRA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBApBQA,IAAAA,IAAA,CAAA,GAyBAC,IAAAA,IAIRA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAxCQA,IAAAA,IAAA,CAAA,GA6CAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBApBQA,IAAAA,IAAA,CAAA,GAyBAC,IAAAA,IAIRA,EAAAA,0BAA0B,GAA1B,0BAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,2BAA2B,GAA3B,2BAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,wBAAwB,GAAxB,wBAxCQA,IAAAA,IAAA,CAAA,GA+CAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,mBAAmB,IAAnB,mBAIAA,EAAAA,mBAAmB,IAAnB,mBAMAA,EAAAA,mBAAmB,IAAnB,mBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,iBAAiB,IAAjB,iBAtEQA,IAAAA,IAAA,CAAA,GA2EAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,uBAAuB,GAAvB,uBAxBQA,IAAAA,IAAA,CAAA,GA6BAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,oBAAoB,GAApB,oBApCQA,IAAAA,IAAA,CAAA,GAyCAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,oBAAoB,GAApB,oBA5BQA,IAAAA,IAAA,CAAA,GAiCAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,yBAAyB,GAAzB,yBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,0BAA0B,GAA1B,0BAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,gBAAgB,IAAhB,gBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,mBAAmB,IAAnB,mBAIAA,EAAAA,eAAe,IAAf,eAIAA,EAAAA,oBAAoB,IAApB,oBAIAA,EAAAA,uBAAuB,IAAvB,uBAhEQA,IAAAA,IAAA,CAAA,GAqEAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,0BAA0B,GAA1B,0BApBQA,IAAAA,IAAA,CAAA,GAyBAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,0BAA0B,GAA1B,0BAMAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,2BAA2B,GAA3B,2BAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,2BAA2B,IAA3B,2BAIAA,EAAAA,sBAAsB,IAAtB,sBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,yBAAyB,IAAzB,yBA1DQA,IAAAA,IAAA,CAAA,GA+DAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,cAAc,IAAd,cAMAA,EAAAA,eAAe,IAAf,eAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,yBAAyB,IAAzB,yBAIAA,EAAAA,0BAA0B,IAA1B,0BAIAA,EAAAA,2BAA2B,IAA3B,2BAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,sBAAsB,IAAtB,sBAIAA,EAAAA,oBAAoB,IAApB,oBAIAA,EAAAA,sBAAsB,IAAtB,sBA1FQA,IAAAA,IAAA,CAAA,GA+FAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,0BAA0B,GAA1B,0BAIAA,EAAAA,0BAA0B,GAA1B,0BAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,iBAAiB,GAAjB,iBAMAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,yBAAyB,IAAzB,yBAIAA,EAAAA,yBAAyB,IAAzB,yBAtDQA,IAAAA,IAAA,CAAA,GA2DAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,sBAAsB,IAAtB,sBAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,kBAAkB,IAAlB,kBAIAA,EAAAA,qBAAqB,IAArB,qBAMAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,qBAAqB,IAArB,qBAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,uBAAuB,IAAvB,uBAIAA,EAAAA,oBAAoB,IAApB,oBAIAA,EAAAA,qBAAqB,IAArB,qBAIAA,EAAAA,sBAAsB,IAAtB,sBAtFQA,IAAAA,IAAA,CAAA,GA2FAC,IAAAA,IAIRA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,6BAA6B,GAA7B,6BAMAA,EAAAA,qBAAqB,GAArB,qBAdQA,IAAAA,IAAA,CAAA,GAmBAC,IAAAA,IAIRA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,gBAAgB,GAAhB,gBApCQA,IAAAA,IAAA,CAAA,GA4CAC,IAAAA,IAIRA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,mBAAmB,GAAnB,mBApBQA,IAAAA,IAAA,CAAA,GA2BAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,wBAAwB,GAAxB,wBAMAA,EAAAA,sBAAsB,IAAtB,sBAMAA,EAAAA,sBAAsB,IAAtB,sBAMAA,EAAAA,oBAAoB,GAApB,oBAMAA,EAAAA,mBAAmB,GAAnB,mBAMAA,EAAAA,iBAAiB,GAAjB,iBAMAA,EAAAA,oBAAoB,GAApB,oBAMAA,EAAAA,yBAAyB,GAAzB,yBAMAA,EAAAA,0BAA0B,IAA1B,0BAMAA,EAAAA,2BAA2B,IAA3B,2BAMAA,EAAAA,2BAA2B,IAA3B,2BAMAA,EAAAA,4BAA4B,IAA5B,4BAMAA,EAAAA,2BAA2B,IAA3B,2BA5FQA,IAAAA,IAAA,CAAA,GAmKC,MAAAC,GAAY,IApEzB,cAA6BxD,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAE3F,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE+P,MAAO,GAAIC,YAAa,IAInC,OAHA5M,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6B,KAAA,EAC7B,GAAIC,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MACoC,KAAA,EACpC,GAAI3B,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQgQ,YAAYrZ,KAAKoT,EAAOxM,eAEpCyC,EAAQgQ,YAAYrZ,KAAKoT,EAAOxM,UACpC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAEvD,GAAA9G,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQgQ,YAAY9a,OAAQ,CAC5BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQgQ,YAAY9a,OAAQD,IACrCoL,EAAA9C,OAAOyC,EAAQgQ,YAAY/a,IACtCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAmVS,MAAA4P,GAAY,IA5UzB,cAA6B5D,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACnF,CAAE9O,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACvF,CAAE9O,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACnF,CAAE9O,GAAI,EAAGsC,KAAM,aAAcM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAC7E,CAAE9O,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAC1F,CAAE9O,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACnF,CAAE9O,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAChF,CAAE9O,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACtF,CAAE9O,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAClF,CAAE9O,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAChF,CAAE9O,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACrF,CAAE9O,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAC1E,CAAE9O,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACjF,CAAE9O,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACnF,CAAE9O,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,IAE/D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEkQ,cAAe,EAAGC,mBAAoB,EAAGC,gBAAiB,EAAGC,UAAW,EAAGC,cAAc,EAAOC,qBAAsB,EAAGC,kBAAkB,EAAOC,gBAAiB,EAAGC,cAAc,EAAOC,YAAa,EAAGC,cAAc,EAAOC,eAAe,EAAOC,mBAAmB,EAAOC,gBAAiB,EAAGC,SAAS,EAAOC,WAAW,EAAOC,cAAe,EAAGC,cAAc,EAAOC,kBAAkB,EAAOC,YAAa,EAAGC,kBAAkB,EAAOC,YAAa,EAAGC,eAAe,EAAOC,iBAAiB,EAAOC,sBAAsB,EAAOC,uBAAuB,EAAOC,mBAAmB,EAAOC,gBAAiB,EAAGC,WAAW,EAAOC,OAAQ,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,iBAAiB,EAAOC,kBAAkB,EAAOC,uBAAuB,EAAOC,gBAAgB,EAAOC,oBAAoB,EAAOC,iBAAiB,EAAOC,kBAAkB,EAAOC,iBAAiB,EAAOC,mBAAmB,EAAOC,gBAAgB,GAIt5B,OAHAvP,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6C,KAAA,EACrCqE,EAAAkQ,cAAgBnG,EAAOvN,QAC/B,MACiD,KAAA,EACzCwD,EAAAmQ,mBAAqBpG,EAAOvN,QACpC,MAC6C,KAAA,EACrCwD,EAAAoQ,gBAAkBrG,EAAOvN,QACjC,MACuC,KAAA,EAC/BwD,EAAAqQ,UAAYtG,EAAOvN,QAC3B,MAC2B,KAAA,EACnBwD,EAAAsQ,aAAevG,EAAOhN,OAC9B,MACoD,KAAA,EAC5CiD,EAAAuQ,qBAAuBxG,EAAOvN,QACtC,MAC8B,KAAA,EACtBwD,EAAAwQ,iBAAmBzG,EAAOhN,OAClC,MAC6C,KAAA,EACrCiD,EAAAyQ,gBAAkB1G,EAAOvN,QACjC,MAC0B,KAAA,EAClBwD,EAAA0Q,aAAe3G,EAAOhN,OAC9B,MACyC,KAAA,GACjCiD,EAAA2Q,YAAc5G,EAAOvN,QAC7B,MAC0B,KAAA,GAClBwD,EAAA4Q,aAAe7G,EAAOhN,OAC9B,MAC2B,KAAA,GACnBiD,EAAA6Q,cAAgB9G,EAAOhN,OAC/B,MAC+B,KAAA,GACvBiD,EAAA8Q,kBAAoB/G,EAAOhN,OACnC,MAC+C,KAAA,GACvCiD,EAAA+Q,gBAAkBhH,EAAOvN,QACjC,MACoB,KAAA,GACZwD,EAAAgR,QAAUjH,EAAOhN,OACzB,MACuB,KAAA,GACfiD,EAAAiR,UAAYlH,EAAOhN,OAC3B,MAC2C,KAAA,GACnCiD,EAAAkR,cAAgBnH,EAAOvN,QAC/B,MAC2B,KAAA,GACnBwD,EAAAmR,aAAepH,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAAoR,iBAAmBrH,EAAOhN,OAClC,MAC0B,KAAA,GAClBiD,EAAAqR,YAActH,EAAOvN,QAC7B,MAC8B,KAAA,GACtBwD,EAAAsR,iBAAmBvH,EAAOhN,OAClC,MACyC,KAAA,GACjCiD,EAAAuR,YAAcxH,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAwR,cAAgBzH,EAAOhN,OAC/B,MAC+B,KAAA,GACvBiD,EAAAyR,gBAAkB1H,EAAOhN,OACjC,MACkC,KAAA,GAC1BiD,EAAA0R,qBAAuB3H,EAAOhN,OACtC,MACmC,KAAA,GAC3BiD,EAAA2R,sBAAwB5H,EAAOhN,OACvC,MAC+B,KAAA,GACvBiD,EAAA4R,kBAAoB7H,EAAOhN,OACnC,MAC8C,KAAA,GACtCiD,EAAA6R,gBAAkB9H,EAAOvN,QACjC,MACsB,KAAA,GACdwD,EAAA8R,UAAY/H,EAAOhN,OAC3B,MACmC,KAAA,GAC3BiD,EAAA+R,OAAShI,EAAOvN,QACxB,MAC0C,KAAA,GAClCwD,EAAAgS,aAAejI,EAAOvN,QAC9B,MAC4C,KAAA,GACpCwD,EAAAiS,eAAiBlI,EAAOvN,QAChC,MAC6B,KAAA,GACrBwD,EAAAkS,gBAAkBnI,EAAOhN,OACjC,MAC8B,KAAA,GACtBiD,EAAAmS,iBAAmBpI,EAAOhN,OAClC,MACqC,KAAA,GAC7BiD,EAAAoS,sBAAwBrI,EAAOhN,OACvC,MAC8B,KAAA,GACtBiD,EAAAqS,eAAiBtI,EAAOhN,OAChC,MACiC,KAAA,GACzBiD,EAAAsS,mBAAqBvI,EAAOhN,OACpC,MAC8B,KAAA,GACtBiD,EAAAuS,gBAAkBxI,EAAOhN,OACjC,MAC+B,KAAA,GACvBiD,EAAAwS,iBAAmBzI,EAAOhN,OAClC,MAC8B,KAAA,GACtBiD,EAAAyS,gBAAkB1I,EAAOhN,OACjC,MACgC,KAAA,GACxBiD,EAAA0S,kBAAoB3I,EAAOhN,OACnC,MAC6B,KAAA,GACrBiD,EAAA2S,eAAiB5I,EAAOhN,OAChC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAE7B,IAA1B9G,EAAQkQ,eACR7P,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkQ,eAEd,IAA/BlQ,EAAQmQ,oBACR9P,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmQ,oBAEjB,IAA5BnQ,EAAQoQ,iBACR/P,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQoQ,iBAEvB,IAAtBpQ,EAAQqQ,WACRhQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqQ,YAEpB,IAAzBrQ,EAAQsQ,cACRjQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsQ,cAEX,IAAjCtQ,EAAQuQ,sBACRlQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQuQ,uBAEhB,IAA7BvQ,EAAQwQ,kBACRnQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwQ,kBAEhB,IAA5BxQ,EAAQyQ,iBACRpQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyQ,kBAEpB,IAAzBzQ,EAAQ0Q,cACRrQ,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0Q,cAEpB,IAAxB1Q,EAAQ2Q,aACRtQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2Q,cAErB,IAAzB3Q,EAAQ4Q,cACRvQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4Q,eAEnB,IAA1B5Q,EAAQ6Q,eACRxQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6Q,gBAEf,IAA9B7Q,EAAQ8Q,mBACRzQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8Q,mBAEjB,IAA5B9Q,EAAQ+Q,iBACR1Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+Q,kBAE1B,IAApB/Q,EAAQgR,SACR3Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgR,UAEvB,IAAtBhR,EAAQiR,WACR5Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQiR,WAEnB,IAA1BjR,EAAQkR,eACR7Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkR,gBAErB,IAAzBlR,EAAQmR,cACR9Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmR,eAEhB,IAA7BnR,EAAQoR,kBACR/Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQoR,kBAErB,IAAxBpR,EAAQqR,aACRhR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqR,cAEjB,IAA7BrR,EAAQsR,kBACRjR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsR,kBAErB,IAAxBtR,EAAQuR,aACRlR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuR,cAEpB,IAA1BvR,EAAQwR,eACRnR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwR,gBAEjB,IAA5BxR,EAAQyR,iBACRpR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyR,kBAEZ,IAAjCzR,EAAQ0R,sBACRrR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0R,uBAEX,IAAlC1R,EAAQ2R,uBACRtR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2R,wBAEf,IAA9B3R,EAAQ4R,mBACRvR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4R,mBAEjB,IAA5B5R,EAAQ6R,iBACRxR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6R,kBAExB,IAAtB7R,EAAQ8R,WACRzR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8R,WAE1B,IAAnB9R,EAAQ+R,QACR1R,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+R,QAErB,IAAzB/R,EAAQgS,cACR3R,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgS,cAEnB,IAA3BhS,EAAQiS,gBACR5R,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiS,iBAElB,IAA5BjS,EAAQkS,iBACR7R,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkS,kBAEhB,IAA7BlS,EAAQmS,kBACR9R,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmS,mBAEX,IAAlCnS,EAAQoS,uBACR/R,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQoS,wBAElB,IAA3BpS,EAAQqS,gBACRhS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqS,iBAEd,IAA/BrS,EAAQsS,oBACRjS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsS,qBAEjB,IAA5BtS,EAAQuS,iBACRlS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuS,kBAEhB,IAA7BvS,EAAQwS,kBACRnS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwS,mBAEjB,IAA5BxS,EAAQyS,iBACRpS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyS,kBAEf,IAA9BzS,EAAQ0S,mBACRrS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0S,oBAElB,IAA3B1S,EAAQ2S,gBACRtS,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2S,gBACjD,IAAI1I,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA8FS,MAAAuS,GAAa,IAvF1B,cAA8BvG,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE6S,WAAY,EAAGC,cAAe,EAAGC,sBAAsB,EAAOC,eAAe,EAAOC,uBAAuB,EAAOC,eAAgB,EAAGC,gBAAgB,GAIhK,OAHA/P,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAA6S,WAAa9I,EAAOvN,QAC5B,MAC4B,KAAA,EACpBwD,EAAA8S,cAAgB/I,EAAOvN,QAC/B,MACmC,KAAA,EAC3BwD,EAAA+S,qBAAuBhJ,EAAOhN,OACtC,MAC6B,KAAA,EACrBiD,EAAAgT,cAAgBjJ,EAAOhN,OAC/B,MACsC,KAAA,EAC9BiD,EAAAiT,sBAAwBlJ,EAAOhN,OACvC,MAC8B,KAAA,EACtBiD,EAAAkT,eAAiBnJ,EAAOvN,QAChC,MAC4B,KAAA,EACpBwD,EAAAmT,eAAiBpJ,EAAOhN,OAChC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAEjC,IAAvB9G,EAAQ6S,YACRxS,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6S,YAEnB,IAA1B7S,EAAQ8S,eACRzS,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8S,gBAEZ,IAAjC9S,EAAQ+S,sBACR1S,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+S,uBAElB,IAA1B/S,EAAQgT,eACR3S,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgT,gBAEV,IAAlChT,EAAQiT,uBACR5S,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQiT,uBAEjB,IAA3BjT,EAAQkT,gBACR7S,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkT,iBAElB,IAA3BlT,EAAQmT,gBACR9S,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmT,gBAChD,IAAIlJ,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuMS,MAAA+S,GAAkB,IAhM/B,cAAmC/G,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACrF,CAAE9O,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACpF,CAAE9O,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEqT,iBAAiB,EAAOC,iBAAkB,EAAGC,gBAAiB,EAAGC,qBAAqB,EAAOC,WAAW,EAAOC,aAAa,EAAOC,WAAY,EAAGC,gBAAiB,EAAGC,QAAS,EAAGC,WAAY,EAAGC,eAAgB,EAAGC,aAAc,EAAGC,uBAAwB,EAAGC,qBAAsB,EAAGC,kBAAmB,EAAGC,iBAAkB,EAAGC,eAAe,EAAOC,cAAc,EAAOC,qBAAqB,EAAOC,mBAAmB,EAAOC,gBAAgB,EAAOC,YAAY,GAInd,OAHAtR,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC8B,KAAA,EACtBqE,EAAAqT,gBAAkBtJ,EAAOhN,OACjC,MAC+C,KAAA,EACvCiD,EAAAsT,iBAAmBvJ,EAAOvN,QAClC,MAC8C,KAAA,EACtCwD,EAAAuT,gBAAkBxJ,EAAOvN,QACjC,MACkC,KAAA,EAC1BwD,EAAAwT,oBAAsBzJ,EAAOhN,OACrC,MACsB,KAAA,EACdiD,EAAAyT,UAAY1J,EAAOhN,OAC3B,MACyB,KAAA,EACjBiD,EAAA0T,YAAc3J,EAAOhN,OAC7B,MAC0B,KAAA,EAClBiD,EAAA2T,WAAa5J,EAAOvN,QAC5B,MAC+B,KAAA,EACvBwD,EAAA4T,gBAAkB7J,EAAOvN,QACjC,MACqB,KAAA,EACbwD,EAAA6T,QAAU9J,EAAOvN,QACzB,MACwB,KAAA,GAChBwD,EAAA8T,WAAa/J,EAAOvN,QAC5B,MAC6B,KAAA,GACrBwD,EAAA+T,eAAiBhK,EAAOvN,QAChC,MAC2B,KAAA,GACnBwD,EAAAgU,aAAejK,EAAOvN,QAC9B,MACqC,KAAA,GAC7BwD,EAAAiU,uBAAyBlK,EAAOvN,QACxC,MACoC,KAAA,GAC5BwD,EAAAkU,qBAAuBnK,EAAOvN,QACtC,MACkC,KAAA,GAC1BwD,EAAAmU,kBAAoBpK,EAAOvN,QACnC,MAC+B,KAAA,GACvBwD,EAAAoU,iBAAmBrK,EAAOvN,QAClC,MAC2B,KAAA,GACnBwD,EAAAqU,cAAgBtK,EAAOhN,OAC/B,MAC0B,KAAA,GAClBiD,EAAAsU,aAAevK,EAAOhN,OAC9B,MACmC,KAAA,GAC3BiD,EAAAuU,oBAAsBxK,EAAOhN,OACrC,MACgC,KAAA,GACxBiD,EAAAwU,kBAAoBzK,EAAOhN,OACnC,MAC4B,KAAA,GACpBiD,EAAAyU,eAAiB1K,EAAOhN,OAChC,MACwB,KAAA,GAChBiD,EAAA0U,WAAa3K,EAAOhN,OAC5B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,IAEjC,IAA5B9G,EAAQqT,iBACRhT,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqT,iBAEf,IAA7BrT,EAAQsT,kBACRjT,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQsT,kBAEjB,IAA5BtT,EAAQuT,iBACRlT,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQuT,kBAEb,IAAhCvT,EAAQwT,qBACRnT,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwT,sBAEtB,IAAtBxT,EAAQyT,WACRpT,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQyT,YAEpB,IAAxBzT,EAAQ0T,aACRrT,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0T,aAErB,IAAvB1T,EAAQ2T,YACRtT,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2T,YAEjB,IAA5B3T,EAAQ4T,iBACRvT,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4T,iBAEzB,IAApB5T,EAAQ6T,SACRxT,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6T,SAEtB,IAAvB7T,EAAQ8T,YACRzT,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8T,YAEnB,IAA3B9T,EAAQ+T,gBACR1T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+T,gBAErB,IAAzB/T,EAAQgU,cACR3T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgU,cAEX,IAAnChU,EAAQiU,wBACR5T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiU,wBAEb,IAAjCjU,EAAQkU,sBACR7T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkU,sBAEhB,IAA9BlU,EAAQmU,mBACR9T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmU,mBAEjB,IAA7BnU,EAAQoU,kBACR/T,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoU,mBAEpB,IAA1BpU,EAAQqU,eACRhU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqU,gBAEpB,IAAzBrU,EAAQsU,cACRjU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsU,eAEb,IAAhCtU,EAAQuU,qBACRlU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuU,sBAEf,IAA9BvU,EAAQwU,mBACRnU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwU,oBAElB,IAA3BxU,EAAQyU,gBACRpU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyU,iBAEtB,IAAvBzU,EAAQ0U,YACRrU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0U,YACjD,IAAIzK,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAsJS,MAAAsU,GAAW,IA/IxB,cAA4BtI,EACxBrS,cACI8V,MAAM,iBAAkB,CACpB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,cAAe6K,KAC/D,CAAElP,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsB8K,KAC9E,CAAEnP,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwB+K,KAClF,CAAEpP,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,aAAcgL,KAC7D,CAAErP,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiBiL,KACpE,CAAEtP,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiB2K,KAC3E,CAAEhP,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiB2K,KAC1E,CAAEhP,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkB4K,KAC9E,CAAEjP,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkB4K,KAC/E,CAAEjP,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kBAAmB0K,MAEvF,CACAzE,OAAO/V,GACH,MAAMsL,EAAU,CAAE4U,MAAO,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,KAAM,EAAGC,QAAS,EAAGC,mBAAoB,EAAGC,oBAAqB,EAAGC,cAAe,EAAGC,aAAc,EAAGC,gBAAiB,EAAGC,iBAAkB,EAAGC,oBAAqB,EAAGC,eAAe,EAAOC,gBAAgB,EAAOC,gBAAiB,GAI/R,OAHAtS,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiC+W,EAAA1V,KAAMiK,EAAStL,GAC7CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAA4U,MAAQ7K,EAAOvN,QACvB,MACwC,KAAA,EAChCwD,EAAA6U,aAAe9K,EAAOvN,QAC9B,MAC4C,KAAA,EACpCwD,EAAA8U,eAAiB/K,EAAOvN,QAChC,MACuB,KAAA,EACfwD,EAAA+U,KAAOhL,EAAOvN,QACtB,MAC8B,KAAA,EACtBwD,EAAAgV,QAAUjL,EAAOvN,QACzB,MACmC,KAAA,EAC3BwD,EAAAiV,mBAAqBlL,EAAOvN,QACpC,MACoC,KAAA,EAC5BwD,EAAAkV,oBAAsBnL,EAAOvN,QACrC,MACoC,KAAA,GAC5BwD,EAAAmV,cAAgBpL,EAAOvN,QAC/B,MACmC,KAAA,GAC3BwD,EAAAoV,aAAerL,EAAOvN,QAC9B,MACuC,KAAA,GAC/BwD,EAAAqV,gBAAkBtL,EAAOvN,QACjC,MACwC,KAAA,GAChCwD,EAAAsV,iBAAmBvL,EAAOvN,QAClC,MACmC,KAAA,GAC3BwD,EAAAuV,oBAAsBxL,EAAOvN,QACrC,MAC2B,KAAA,GACnBwD,EAAAwV,cAAgBzL,EAAOhN,OAC/B,MAC4B,KAAA,GACpBiD,EAAAyV,eAAiB1L,EAAOhN,OAChC,MACwC,KAAA,GAChCiD,EAAA0V,gBAAkB3L,EAAOvN,QACjC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmBK,EAAuByG,GAEpC,IAAlB9G,EAAQ4U,OACRvU,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4U,OAEpB,IAAzB5U,EAAQ6U,cACRxU,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6U,cAElB,IAA3B7U,EAAQ8U,gBACRzU,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8U,gBAE5B,IAAjB9U,EAAQ+U,MACR1U,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+U,MAEzB,IAApB/U,EAAQgV,SACR3U,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgV,SAEd,IAA/BhV,EAAQiV,oBACR5U,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiV,oBAEb,IAAhCjV,EAAQkV,qBACR7U,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkV,qBAEnB,IAA1BlV,EAAQmV,eACR9U,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmV,eAErB,IAAzBnV,EAAQoV,cACR/U,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoV,cAElB,IAA5BpV,EAAQqV,iBACRhV,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqV,iBAEjB,IAA7BrV,EAAQsV,kBACRjV,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsV,kBAEd,IAAhCtV,EAAQuV,qBACRlV,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuV,sBAEpB,IAA1BvV,EAAQwV,eACRnV,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwV,gBAElB,IAA3BxV,EAAQyV,gBACRpV,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyV,gBAEjB,IAA5BzV,EAAQ0V,iBACRrV,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0V,iBAClD,IAAIzL,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgTS,MAAAsV,GAAU,IAzSvB,cAA2BtJ,EACvBrS,cACI8V,MAAM,gBAAiB,CACnB,CAAE3P,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAC9E,CAAE9O,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACrF,CAAE9O,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACrF,CAAE9O,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KACtF,CAAE9O,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAChF,CAAE9O,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwByK,KAC/E,CAAE9O,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE4V,mBAAmB,EAAOC,kBAAkB,EAAOC,QAAQ,EAAOC,WAAY,EAAGC,iBAAiB,EAAOC,mBAAmB,EAAOC,cAAc,EAAOC,oBAAoB,EAAOC,gBAAgB,EAAOjF,cAAc,EAAOkF,eAAe,EAAOC,gBAAgB,EAAOC,cAAc,EAAOC,aAAa,EAAOC,cAAc,EAAOC,cAAc,EAAOC,QAAQ,EAAOC,QAAQ,EAAOC,UAAU,EAAOC,aAAa,EAAOC,aAAa,EAAOC,UAAU,EAAOC,gBAAiB,EAAGC,OAAO,EAAOC,YAAY,EAAOC,iBAAkB,EAAGC,kBAAmB,EAAGC,aAAa,EAAOC,qBAAqB,EAAOC,YAAa,EAAGC,WAAY,EAAGC,gBAAgB,EAAOC,qBAAqB,EAAOC,aAAa,EAAOC,cAAc,EAAOC,eAAe,EAAOC,YAAa,GAIhwB,OAHA3U,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgC+W,EAAA1V,KAAMiK,EAAStL,GAC5CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgC,KAAA,EACxBqE,EAAA4V,kBAAoB7L,EAAOhN,OACnC,MAC+B,KAAA,EACvBiD,EAAA6V,iBAAmB9L,EAAOhN,OAClC,MACmB,KAAA,EACXiD,EAAA8V,OAAS/L,EAAOhN,OACxB,MACwC,KAAA,EAChCiD,EAAA+V,WAAahM,EAAOvN,QAC5B,MAC8B,KAAA,EACtBwD,EAAAgW,gBAAkBjM,EAAOhN,OACjC,MAC+B,KAAA,EACvBiD,EAAAiW,kBAAoBlM,EAAOhN,OACnC,MAC2B,KAAA,EACnBiD,EAAAkW,aAAenM,EAAOhN,OAC9B,MACkC,KAAA,EAC1BiD,EAAAmW,mBAAqBpM,EAAOhN,OACpC,MAC4B,KAAA,EACpBiD,EAAAoW,eAAiBrM,EAAOhN,OAChC,MAC2B,KAAA,GACnBiD,EAAAmR,aAAepH,EAAOhN,OAC9B,MAC2B,KAAA,GACnBiD,EAAAqW,cAAgBtM,EAAOhN,OAC/B,MAC4B,KAAA,GACpBiD,EAAAsW,eAAiBvM,EAAOhN,OAChC,MAC0B,KAAA,GAClBiD,EAAAuW,aAAexM,EAAOhN,OAC9B,MACyB,KAAA,GACjBiD,EAAAwW,YAAczM,EAAOhN,OAC7B,MAC0B,KAAA,GAClBiD,EAAAyW,aAAe1M,EAAOhN,OAC9B,MAC2B,KAAA,GACnBiD,EAAA0W,aAAe3M,EAAOhN,OAC9B,MACmB,KAAA,GACXiD,EAAA2W,OAAS5M,EAAOhN,OACxB,MACmB,KAAA,GACXiD,EAAA4W,OAAS7M,EAAOhN,OACxB,MACqB,KAAA,GACbiD,EAAA6W,SAAW9M,EAAOhN,OAC1B,MACyB,KAAA,GACjBiD,EAAA8W,YAAc/M,EAAOhN,OAC7B,MACyB,KAAA,GACjBiD,EAAA+W,YAAchN,EAAOhN,OAC7B,MACsB,KAAA,GACdiD,EAAAgX,SAAWjN,EAAOhN,OAC1B,MAC8C,KAAA,GACtCiD,EAAAiX,gBAAkBlN,EAAOvN,QACjC,MACkB,KAAA,GACVwD,EAAAkX,MAAQnN,EAAOhN,OACvB,MACwB,KAAA,GAChBiD,EAAAmX,WAAapN,EAAOhN,OAC5B,MAC8C,KAAA,GACtCiD,EAAAoX,iBAAmBrN,EAAOvN,QAClC,MAC+C,KAAA,GACvCwD,EAAAqX,kBAAoBtN,EAAOvN,QACnC,MACwB,KAAA,GAChBwD,EAAAsX,YAAcvN,EAAOhN,OAC7B,MACiC,KAAA,GACzBiD,EAAAuX,oBAAsBxN,EAAOhN,OACrC,MACyC,KAAA,GACjCiD,EAAAwX,YAAczN,EAAOvN,QAC7B,MACwC,KAAA,GAChCwD,EAAAyX,WAAa1N,EAAOvN,QAC5B,MAC4B,KAAA,GACpBwD,EAAA0X,eAAiB3N,EAAOhN,OAChC,MACmC,KAAA,GAC3BiD,EAAA2X,oBAAsB5N,EAAOhN,OACrC,MACyB,KAAA,GACjBiD,EAAA4X,YAAc7N,EAAOhN,OAC7B,MAC0B,KAAA,GAClBiD,EAAA6X,aAAe9N,EAAOhN,OAC9B,MAC2B,KAAA,GACnBiD,EAAA8X,cAAgB/N,EAAOhN,OAC/B,MAC0B,KAAA,GAClBiD,EAAA+X,YAAchO,EAAOvN,QAC7B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkBK,EAAuByG,IAEvB,IAA9B9G,EAAQ4V,mBACRvV,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4V,oBAEf,IAA7B5V,EAAQ6V,kBACRxV,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ6V,mBAEzB,IAAnB7V,EAAQ8V,QACRzV,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ8V,QAErB,IAAvB9V,EAAQ+V,YACR1V,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+V,aAEjB,IAA5B/V,EAAQgW,iBACR3V,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgW,kBAEd,IAA9BhW,EAAQiW,mBACR5V,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQiW,oBAEnB,IAAzBjW,EAAQkW,cACR7V,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkW,eAEb,IAA/BlW,EAAQmW,oBACR9V,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmW,qBAEjB,IAA3BnW,EAAQoW,gBACR/V,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQoW,iBAEnB,IAAzBpW,EAAQmR,cACR9Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmR,eAEnB,IAA1BnR,EAAQqW,eACRhW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqW,gBAElB,IAA3BrW,EAAQsW,gBACRjW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsW,iBAEpB,IAAzBtW,EAAQuW,cACRlW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuW,eAErB,IAAxBvW,EAAQwW,aACRnW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwW,cAEpB,IAAzBxW,EAAQyW,cACRpW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyW,eAEpB,IAAzBzW,EAAQ0W,cACRrW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0W,eAE1B,IAAnB1W,EAAQ2W,QACRtW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2W,SAE1B,IAAnB3W,EAAQ4W,QACRvW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4W,SAExB,IAArB5W,EAAQ6W,UACRxW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6W,WAErB,IAAxB7W,EAAQ8W,aACRzW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8W,cAErB,IAAxB9W,EAAQ+W,aACR1W,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+W,cAExB,IAArB/W,EAAQgX,UACR3W,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgX,UAEjB,IAA5BhX,EAAQiX,iBACR5W,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiX,kBAE5B,IAAlBjX,EAAQkX,OACR7W,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkX,QAEtB,IAAvBlX,EAAQmX,YACR9W,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmX,YAEhB,IAA7BnX,EAAQoX,kBACR/W,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoX,kBAEhB,IAA9BpX,EAAQqX,mBACRhX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqX,oBAEtB,IAAxBrX,EAAQsX,aACRjX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsX,cAEb,IAAhCtX,EAAQuX,qBACRlX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuX,qBAErB,IAAxBvX,EAAQwX,aACRnX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwX,aAEvB,IAAvBxX,EAAQyX,YACRpX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyX,aAEnB,IAA3BzX,EAAQ0X,gBACRrX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0X,iBAEb,IAAhC1X,EAAQ2X,qBACRtX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2X,sBAErB,IAAxB3X,EAAQ4X,aACRvX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4X,cAEpB,IAAzB5X,EAAQ6X,cACRxX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6X,eAEnB,IAA1B7X,EAAQ8X,eACRzX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8X,eAErB,IAAxB9X,EAAQ+X,aACR1X,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+X,aAClD,IAAI9N,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuJS,MAAA2X,GAAS,IAhJtB,cAA0B3L,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,GAAIsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiBkL,KACpE,CAAEvP,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBwK,KAC7E,CAAE7O,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,IAExD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAIyV,MAAO,EAAGC,QAAS,EAAGpI,MAAO,GAAIqI,cAAe,EAAGC,WAAY,EAAGC,WAAW,EAAOC,kBAAkB,EAAOC,YAAY,EAAOC,kBAAkB,EAAOC,eAAe,EAAOC,YAAa,EAAGC,UAAW,GAItO,OAHAxV,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,GACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,GACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MACmB,KAAA,EACXuC,EAAAkY,MAAQnO,EAAOvN,QACvB,MAC8B,KAAA,EACtBwD,EAAAmY,QAAUpO,EAAOvN,QACzB,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MAC8B,KAAA,EACtByC,EAAAoY,cAAgBrO,EAAOxM,SAC/B,MAC0B,KAAA,EAClByC,EAAAqY,WAAatO,EAAOxM,SAC5B,MACuB,KAAA,EACfyC,EAAAsY,UAAYvO,EAAOhN,OAC3B,MAC+B,KAAA,GACvBiD,EAAAuY,iBAAmBxO,EAAOhN,OAClC,MACwB,KAAA,GAChBiD,EAAAwY,WAAazO,EAAOhN,OAC5B,MAC+B,KAAA,GACvBiD,EAAAyY,iBAAmB1O,EAAOhN,OAClC,MAC2B,KAAA,GACnBiD,EAAA0Y,cAAgB3O,EAAOhN,OAC/B,MACsC,KAAA,GAC9BiD,EAAA2Y,YAAc5O,EAAOvN,QAC7B,MACwB,KAAA,EAChBwD,EAAA4Y,UAAY7O,EAAOvN,QAC3B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAcpD,GAZe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE7B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,IAAlBzC,EAAQkY,OACR7X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkY,OAEzB,IAApBlY,EAAQmY,SACR9X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmY,SAE7CnY,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAE8B,IAA1BqC,EAAQoY,eACR/X,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQoY,eAEtB,IAAvBpY,EAAQqY,YACRhY,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQqY,aAEvB,IAAtBrY,EAAQsY,WACRjY,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsY,YAEf,IAA7BtY,EAAQuY,kBACRlY,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuY,mBAEtB,IAAvBvY,EAAQwY,YACRnY,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwY,aAEhB,IAA7BxY,EAAQyY,kBACRpY,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyY,mBAEnB,IAA1BzY,EAAQ0Y,eACRrY,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0Y,eAErB,IAAxB1Y,EAAQ2Y,aACRtY,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2Y,aAExB,IAAtB3Y,EAAQ4Y,WACRvY,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4Y,WACjD,IAAI3O,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA8FS,MAAAwY,GAAY,IAvFzB,cAA6BxM,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMwT,KAE7F,CACAvN,OAAO/V,GACH,MAAMsL,EAAU,CAAE8Y,SAAU,EAAGC,kBAAmB,EAAGC,oBAAqB,EAAGC,oBAAqB,EAAGC,oBAAqB,EAAGC,WAAW,EAAOC,QAAS,IAIjJ,OAHAhW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA8Y,SAAW/O,EAAOxM,SAC1B,MACiC,KAAA,EACzByC,EAAA+Y,kBAAoBhP,EAAOxM,SACnC,MACoC,KAAA,EAC5ByC,EAAAgZ,oBAAsBjP,EAAOxM,SACrC,MACoC,KAAA,EAC5ByC,EAAAiZ,oBAAsBlP,EAAOxM,SACrC,MACoC,KAAA,EAC5ByC,EAAAkZ,oBAAsBnP,EAAOxM,SACrC,MACuB,KAAA,EACfyC,EAAAmZ,UAAYpP,EAAOhN,OAC3B,MACqC,KAAA,EAC7BiD,EAAAoZ,QAAQziB,KAAKqhB,GAAO5N,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACxE,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAElC,IAArB9G,EAAQ8Y,UACRzY,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ8Y,UAEf,IAA9B9Y,EAAQ+Y,mBACR1Y,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ+Y,mBAEb,IAAhC/Y,EAAQgZ,qBACR3Y,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQgZ,qBAEb,IAAhChZ,EAAQiZ,qBACR5Y,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQiZ,qBAEb,IAAhCjZ,EAAQkZ,qBACR7Y,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQkZ,sBAEvB,IAAtBlZ,EAAQmZ,WACR9Y,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmZ,WAEhD,IAAA,IAASlkB,EAAI,EAAGA,EAAI+K,EAAQoZ,QAAQlkB,OAAQD,IACxC+iB,GAAO5M,oBAAoBpL,EAAQoZ,QAAQnkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAgZ,GAAe,IApD5B,cAAgChN,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMwT,KAE3D,CACAvN,OAAO/V,GACG,MAAAsL,EAAU,CAAEsZ,KAAM,IAIjB,OAHAlW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmB,KAAA,EACXqE,EAAAsZ,KAAOvP,EAAOtM,SACtB,MAC2B,KAAA,EACnBuC,EAAAkH,OAAS8Q,GAAO5N,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkH,QACrF,MAAA,QAEA,IAAI+C,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAEzC,KAAjB9G,EAAQsZ,MACRjZ,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQsZ,MAEvDtZ,EAAQkH,QACR8Q,GAAO5M,oBAAoBpL,EAAQkH,OAAQ7G,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxG,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAkZ,GAAkB,IApD/B,cAAmClN,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM6U,KAE7F,CACA5O,OAAO/V,GACH,MAAMsL,EAAU,CAAEsZ,KAAM,GAAIF,QAAS,IAI9B,OAHAhW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmB,KAAA,EACXqE,EAAAsZ,KAAOvP,EAAOtM,SACtB,MAC2C,KAAA,EACnCuC,EAAAoZ,QAAQziB,KAAK0iB,GAAajP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC9E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE5C,KAAjB9G,EAAQsZ,MACRjZ,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQsZ,MAE3D,IAAA,IAASrkB,EAAI,EAAGA,EAAI+K,EAAQoZ,QAAQlkB,OAAQD,IACxCokB,GAAajO,oBAAoBpL,EAAQoZ,QAAQnkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAClH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA0ES,MAAAmZ,GAAW,IAnExB,cAA4BnN,EACxBrS,cACI8V,MAAM,iBAAkB,CACpB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAEnF,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEiY,GAAI,EAAGwB,QAAS,EAAGC,KAAM,IAIpC,OAHAtW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiC+W,EAAA1V,KAAMiK,EAAStL,GAC7CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACqB,KAAA,EACbwD,EAAAyZ,QAAU1P,EAAOvN,QACzB,MAC2B,KAAA,EAC3B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ0Z,KAAK/iB,KAAKoT,EAAOvN,cAE7BwD,EAAQ0Z,KAAK/iB,KAAKoT,EAAOvN,SAC7B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmBK,EAAuByG,GAQtD,GANe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAEzB,IAApBjY,EAAQyZ,SACRpZ,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyZ,SAE7CzZ,EAAQ0Z,KAAKxkB,OAAQ,CACrBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ0Z,KAAKxkB,OAAQD,IAC9BoL,EAAA7D,MAAMwD,EAAQ0Z,KAAKzkB,IAC9BoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAsZ,GAAgB,IA7C7B,cAAiCtN,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMgV,KAE3F,CACA/O,OAAO/V,GACH,MAAMsL,EAAU,CAAE4Z,MAAO,IAIlB,OAHAxW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACqC,IADrCC,EAEQqE,EAAA4Z,MAAMjjB,KAAK6iB,GAASpP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QACxE,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE/D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ4Z,MAAM1kB,OAAQD,IACtCukB,GAASpO,oBAAoBpL,EAAQ4Z,MAAM3kB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAwZ,GAAc,IA3D3B,cAA+BxN,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMsV,IACnF,CAAE3Z,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMuV,IACtF,CAAE5Z,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMwV,KAE1F,CACAvP,OAAO/V,GACG,MAAAsL,EAAU,CAAE4Z,MAAO,GAAIK,SAAU,GAAIP,KAAM,IAI1C,OAHAtW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoC,KAAA,EAC5BqE,EAAA4Z,MAAMjjB,KAAKmjB,GAAQ1P,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACvE,MAC0C,KAAA,EAClC9G,EAAAia,SAAStjB,KAAKojB,GAAW3P,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC7E,MACkC,KAAA,EAC1B9G,EAAA0Z,KAAK/iB,KAAKqjB,GAAO5P,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACrE,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAE7D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ4Z,MAAM1kB,OAAQD,IACtC6kB,GAAQ1O,oBAAoBpL,EAAQ4Z,MAAM3kB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQia,SAAS/kB,OAAQD,IACzC8kB,GAAW3O,oBAAoBpL,EAAQia,SAAShlB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ0Z,KAAKxkB,OAAQD,IACrC+kB,GAAO5O,oBAAoBpL,EAAQ0Z,KAAKzkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACzG,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuKS,MAAAyZ,GAAU,IAhKvB,cAA2BzN,EACvBrS,cACI8V,MAAM,gBAAiB,CACnB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBgK,KACjE,CAAErO,GAAI,EAAGsC,KAAM,aAAcM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kBAAmBiK,KACxE,CAAEtO,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoBkK,KAC1E,CAAEvO,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBmK,KACtE,CAAExO,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,yBAA0BoK,KACvF,CAAEzO,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,iBAAkBuK,KACzG,CAAE5O,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GACnF,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,IAEvD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAItD,KAAM,EAAG+a,UAAW,EAAGC,WAAY,EAAGC,SAAU,EAAGC,iBAAkB,EAAGtK,MAAO,GAAIuK,WAAY,GAAIC,YAAa,GAAIC,gBAAiB,EAAGC,gBAAiB,EAAGC,YAAa,EAAGC,QAAS,IAIjN,OAHAvX,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgC+W,EAAA1V,KAAMiK,EAAStL,GAC5CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MAC2B,KAAA,EACnBuC,EAAAb,KAAO4K,EAAOvN,QACtB,MACkC,KAAA,EAC1BwD,EAAAka,UAAYnQ,EAAOvN,QAC3B,MACoC,KAAA,EAC5BwD,EAAAma,WAAapQ,EAAOvN,QAC5B,MACgC,KAAA,EACxBwD,EAAAoa,SAAWrQ,EAAOvN,QAC1B,MACiD,KAAA,EACzCwD,EAAAqa,iBAAmBtQ,EAAOvN,QAClC,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MAC2C,KAAA,EAC3C,GAAI3B,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQsa,WAAW3jB,KAAKoT,EAAOvN,cAEnCwD,EAAQsa,WAAW3jB,KAAKoT,EAAOvN,SACnC,MACmC,KAAA,GACnC,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQua,YAAY5jB,KAAKoT,EAAOxM,eAEpCyC,EAAQua,YAAY5jB,KAAKoT,EAAOxM,UACpC,MACgC,KAAA,GACxByC,EAAAwa,gBAAkBzQ,EAAOxM,SACjC,MACgC,KAAA,GACxByC,EAAAya,gBAAkB1Q,EAAOxM,SACjC,MAC2B,KAAA,GACnByC,EAAA0a,YAAc3Q,EAAOxM,SAC7B,MACuB,KAAA,GACfyC,EAAA2a,QAAU5Q,EAAOtM,SACzB,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkBK,EAAuByG,GAuBrD,GArBe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE5B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,IAAjBzC,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAEvB,IAAtBa,EAAQka,WACR7Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQka,WAEtB,IAAvBla,EAAQma,YACR9Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQma,YAExB,IAArBna,EAAQoa,UACR/Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQoa,UAEhB,IAA7Bpa,EAAQqa,kBACRha,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqa,kBAE7Cra,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQsa,WAAWplB,OAAQ,CAC3BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQsa,WAAWplB,OAAQD,IACpCoL,EAAA7D,MAAMwD,EAAQsa,WAAWrlB,IACpCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQua,YAAYrlB,OAAQ,CAC5BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQua,YAAYrlB,OAAQD,IACrCoL,EAAA9C,OAAOyC,EAAQua,YAAYtlB,IACtCoL,EAAO1C,MACX,CAEgC,IAA5BqC,EAAQwa,iBACRna,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQwa,iBAElB,IAA5Bxa,EAAQya,iBACRpa,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQya,iBAEtB,IAAxBza,EAAQ0a,aACRra,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ0a,aAE1B,KAApB1a,EAAQ2a,SACRta,EAAO3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQ2a,SAC5D,IAAI1Q,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAmES,MAAA0Z,GAAa,IA5D1B,cAA8B1N,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAEpF,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE4a,SAAU,EAAG7K,MAAO,IAI/B,OAHA3M,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA4a,SAAW7Q,EAAOvN,QAC1B,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAKxD,GAHqB,IAArB9G,EAAQ4a,UACRva,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4a,UAE7C5a,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAiFS,MAAA2Z,GAAS,IA1EtB,cAA0B3N,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBuK,KAClE,CAAE5O,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAEpF,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAIoY,MAAO,EAAG9K,MAAO,IAI7C,OAHA3M,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MAC4B,KAAA,EACpBuC,EAAA6a,MAAQ9Q,EAAOvN,QACvB,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAWpD,GATe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE5B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAErC,IAAlBzC,EAAQ6a,OACRxa,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6a,OAE7C7a,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAya,GAAa,IA7C1B,cAA8BzO,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE+a,YAAa,GAIxB,OAHA3X,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GAC0B,IAD1BC,EAEQqE,EAAA+a,YAAchR,EAAOvN,YAC7B,CAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAEhC,IAAxB9G,EAAQ+a,aACR1a,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+a,aACjD,IAAI9Q,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkFS,MAAA2a,GAAW,IA3ExB,cAA4B3O,EACxBrS,cACI8V,MAAM,iBAAkB,CACpB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUD,MAAO,QAAS0B,EAAG,GAC9D,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUD,MAAO,QAAS0B,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQD,MAAO,QAAS0B,EAAG,IAAM,CAAC,oBAAqBoL,KACxF,CAAEzP,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,IAEjD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEib,MAAO,CAAE9X,eAAW,GAAazH,IAAK,GAIjD,OAHA0H,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiC+W,EAAA1V,KAAMiK,EAAStL,GAC7CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsB,KAAA,EACtBqE,EAAQib,MAAQ,CACZ9X,UAAW,UACX+X,QAASnR,EAAOvN,SAEpB,MACqB,KAAA,EACrBwD,EAAQib,MAAQ,CACZ9X,UAAW,SACXgY,OAAQpR,EAAOvN,SAEnB,MACkC,KAAA,EAClCwD,EAAQib,MAAQ,CACZ9X,UAAW,UACXiY,QAASrR,EAAOvN,SAEpB,MACiB,KAAA,EACTwD,EAAAtE,IAAMqO,EAAOvN,QACrB,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmBK,EAAuByG,GAE1B,YAA5B9G,EAAQib,MAAM9X,WACP9C,EAAA3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQib,MAAMC,SAEvB,WAA5Blb,EAAQib,MAAM9X,WACP9C,EAAA3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQib,MAAME,QAEvB,YAA5Bnb,EAAQib,MAAM9X,WACP9C,EAAA3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQib,MAAMG,SAEnC,IAAhBpb,EAAQtE,KACR2E,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQtE,KACjD,IAAIuO,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAAgb,GAAS,IAhFtB,cAA0BhP,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,IAEpD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEsb,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,GAI1E,OAHAvY,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoB,KAAA,EACZqE,EAAAsb,OAASvR,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAAub,OAASxR,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAAwb,OAASzR,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAAyb,OAAS1R,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAA0b,OAAS3R,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAA2b,OAAS5R,EAAOvN,QACxB,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAEjC,IAAnB9G,EAAQsb,QACRjb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQsb,QAE1B,IAAnBtb,EAAQub,QACRlb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQub,QAE1B,IAAnBvb,EAAQwb,QACRnb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQwb,QAE1B,IAAnBxb,EAAQyb,QACRpb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyb,QAE1B,IAAnBzb,EAAQ0b,QACRrb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0b,QAE1B,IAAnB1b,EAAQ2b,QACRtb,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2b,QACjD,IAAI1R,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAmES,MAAAub,GAAW,IA5DxB,cAA4BvP,EACxBrS,cACI8V,MAAM,iBAAkB,CACpB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,UAAWyB,EAAG,IAAMwW,IAC/C,CAAE7a,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAEtF,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE6b,QAAS,IAIpB,OAHAzY,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiC+W,EAAA1V,KAAMiK,EAAStL,GAC7CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAAiY,GAAK+C,GAAS5Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiY,IACnF,MAC+B,KAAA,EAC/B,GAAIrc,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ6b,QAAQllB,KAAKoT,EAAOxM,eAEhCyC,EAAQ6b,QAAQllB,KAAKoT,EAAOxM,UAChC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmBK,EAAuByG,GAKtD,GAHA9G,EAAQiY,IACR+C,GAAS5P,oBAAoBpL,EAAQiY,GAAI5X,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElGqC,EAAQ6b,QAAQ3mB,OAAQ,CACxBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ6b,QAAQ3mB,OAAQD,IACjCoL,EAAA9C,OAAOyC,EAAQ6b,QAAQ5mB,IAClCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAyb,GAAY,IApDzB,cAA6BzP,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMoX,IACvF,CAAEzb,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,IAEvE,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE+b,UAAW,GAAIC,uBAAwB,GAIlD,OAHA5Y,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyC,KAAA,EACjCqE,EAAA+b,UAAUplB,KAAKilB,GAASxR,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC5E,MACwC,KAAA,EAChC9G,EAAAgc,uBAAyBjS,EAAOxM,SACxC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAE3D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ+b,UAAU7mB,OAAQD,IAC1C2mB,GAASxQ,oBAAoBpL,EAAQ+b,UAAU9mB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzE,IAAnCqC,EAAQgc,wBACR3b,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQgc,wBACjD,IAAI/R,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA4b,GAAe,IA3D5B,cAAgC5P,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,IAEhE,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEkc,IAAK,EAAGC,eAAgB,EAAGC,kBAAmB,GAIzD,OAHAhZ,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkB,KAAA,EACVqE,EAAAkc,IAAMnS,EAAOxM,SACrB,MAC8B,KAAA,EACtByC,EAAAmc,eAAiBpS,EAAOxM,SAChC,MACiC,KAAA,EACzByC,EAAAoc,kBAAoBrS,EAAOxM,SACnC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE1C,IAAhB9G,EAAQkc,KACR7b,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQkc,KAElB,IAA3Blc,EAAQmc,gBACR9b,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQmc,gBAEf,IAA9Bnc,EAAQoc,mBACR/b,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQoc,mBACjD,IAAInS,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAgc,GAAiB,IA7C9B,cAAkChQ,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM8X,KAE5F,CACA7R,OAAO/V,GACH,MAAMsL,EAAU,CAAEuc,OAAQ,IAInB,OAHAnZ,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACyC,IADzCC,EAEQqE,EAAAuc,OAAO5lB,KAAK2lB,GAAYlS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QAC5E,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAEhE,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQuc,OAAOrnB,OAAQD,IACvCqnB,GAAYlR,oBAAoBpL,EAAQuc,OAAOtnB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAic,GAAc,IApD3B,cAA+BjQ,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,IAE9D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEwc,MAAO,EAAGC,eAAgB,GAIrC,OAHArZ,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmB,KAAA,EACXqE,EAAAwc,MAAQzS,EAAOvN,QACvB,MAC+B,KAAA,EACvBwD,EAAAyc,eAAiB1S,EAAOxM,SAChC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEvC,IAAlB9G,EAAQwc,OACRnc,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQwc,OAElB,IAA3Bxc,EAAQyc,gBACRpc,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQyc,gBACjD,IAAIxS,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GC/zIQ,IAAAqc,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,YAAY,GAAZ,YAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,cAAc,GAAd,cAhBQA,IAAAA,IAAA,CAAA,GAqBAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,eAAe,GAAf,eARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,QAAQ,GAAR,QAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,qBAAqB,IAArB,qBAIAA,EAAAA,yBAAyB,IAAzB,yBAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,4BAA4B,IAA5B,4BAIAA,EAAAA,oBAAoB,IAApB,oBA5DQA,IAAAA,IAAA,CAAA,GAgIAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,SAAS,GAAT,SARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,MAAM,GAAN,MAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,cAAc,GAAd,cAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GA8BAC,IAAAA,IAIRA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,uBAAuB,OAAvB,uBAhHQA,IAAAA,IAAA,CAAA,GAqHAC,IAAAA,IAIRA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBA5BQA,IAAAA,IAAA,CAAA,GA6qBC,MAAAC,GAAqB,IA9oBlC,cAAsCnR,EAClCrS,cACI8V,MAAM,2BAA4B,CAC9B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,mCAAoCM,KAAM,SAAUyB,EAAG,GACtE,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,IAE9D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEyd,SAAU,EAAGC,WAAY,EAAGC,aAAc,EAAGC,YAAa,EAAGC,aAAc,EAAGC,8BAA+B,EAAGC,SAAS,EAAOC,eAAgB,EAAGC,iBAAkB,EAAGC,gBAAiB,EAAGC,gBAAiB,EAAGC,SAAU,EAAGC,cAAe,EAAGC,qBAAsB,EAAGC,aAAa,EAAOC,gBAAiB,EAAG1N,kBAAmB,EAAG2N,WAAY,EAAGC,UAAU,EAAOC,sBAAuB,EAAGC,oBAAqB,EAAGC,WAAY,EAAGC,eAAe,EAAOC,oBAAqB,EAAGC,aAAa,EAAOC,gBAAiB,EAAGC,YAAa,EAAGC,mBAAmB,EAAOC,iBAAkB,EAAGC,kBAAmB,EAAGC,UAAW,EAAGC,SAAU,EAAGC,SAAU,EAAGC,kBAAmB,EAAGxO,UAAW,EAAGyO,WAAW,EAAOC,aAAc,EAAGC,eAAgB,EAAGC,gBAAiB,EAAGC,cAAe,EAAGC,iBAAkB,EAAGC,WAAY,EAAGC,YAAY,EAAOC,mBAAmB,EAAOC,gBAAiB,EAAGC,KAAM,EAAGC,WAAY,EAAGC,eAAe,EAAOC,sBAAuB,EAAGC,mBAAoB,EAAGC,gBAAiB,EAAGC,kBAAkB,EAAOC,YAAa,EAAGC,aAAa,EAAOC,iBAAkB,EAAGC,cAAe,EAAGC,cAAc,EAAOC,eAAgB,EAAGC,UAAW,EAAGC,aAAc,EAAGC,SAAU,EAAGC,UAAW,EAAGC,cAAe,EAAGC,aAAc,EAAGC,SAAU,EAAGC,SAAU,EAAGC,iBAAiB,EAAOC,aAAc,EAAGC,gBAAiB,EAAGC,eAAgB,EAAGC,cAAc,EAAOC,SAAU,EAAGC,MAAO,EAAGC,YAAa,EAAGC,iBAAkB,EAAGC,QAAS,EAAGC,gBAAgB,EAAOC,WAAY,EAAGC,eAAe,EAAOC,uBAAwB,EAAGC,aAAa,EAAOC,WAAY,EAAGC,YAAY,EAAOC,gBAAiB,EAAGzM,kBAAmB,EAAG0M,eAAe,EAAOC,gBAAiB,EAAGC,gBAAgB,GAI9nD,OAHAzf,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC2C+W,EAAA1V,KAAMiK,EAAStL,GACvDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsB,KAAA,EACdqE,EAAAyd,SAAW1T,EAAOvN,QAC1B,MACwB,KAAA,EAChBwD,EAAA0d,WAAa3T,EAAOvN,QAC5B,MAC2B,KAAA,EACnBwD,EAAA2d,aAAe5T,EAAOvN,QAC9B,MAC0B,KAAA,EAClBwD,EAAA4d,YAAc7T,EAAOvN,QAC7B,MAC4B,KAAA,EACpBwD,EAAA6d,aAAe9T,EAAOvN,QAC9B,MAC8C,KAAA,EACtCwD,EAAA8d,8BAAgC/T,EAAOvN,QAC/C,MACqB,KAAA,EACbwD,EAAA+d,QAAUhU,EAAOhN,OACzB,MAC6B,KAAA,EACrBiD,EAAAge,eAAiBjU,EAAOvN,QAChC,MACgC,KAAA,EACxBwD,EAAAie,iBAAmBlU,EAAOvN,QAClC,MAC+B,KAAA,GACvBwD,EAAAke,gBAAkBnU,EAAOvN,QACjC,MAC8B,KAAA,GACtBwD,EAAAme,gBAAkBpU,EAAOvN,QACjC,MACsB,KAAA,GACdwD,EAAAoe,SAAWrU,EAAOvN,QAC1B,MAC4B,KAAA,GACpBwD,EAAAqe,cAAgBtU,EAAOvN,QAC/B,MACsC,KAAA,GAC9BwD,EAAAse,qBAAuBvU,EAAOvN,QACtC,MAC0B,KAAA,GAClBwD,EAAAue,YAAcxU,EAAOhN,OAC7B,MAC8B,KAAA,GACtBiD,EAAAwe,gBAAkBzU,EAAOvN,QACjC,MACgC,KAAA,GACxBwD,EAAA8Q,kBAAoB/G,EAAOvN,QACnC,MACwB,KAAA,GAChBwD,EAAAye,WAAa1U,EAAOvN,QAC5B,MACqB,KAAA,GACbwD,EAAA0e,SAAW3U,EAAOhN,OAC1B,MACqC,KAAA,GAC7BiD,EAAA2e,sBAAwB5U,EAAOvN,QACvC,MACmC,KAAA,GAC3BwD,EAAA4e,oBAAsB7U,EAAOvN,QACrC,MACyB,KAAA,GACjBwD,EAAA6e,WAAa9U,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAA8e,cAAgB/U,EAAOhN,OAC/B,MACoC,KAAA,GAC5BiD,EAAA+e,oBAAsBhV,EAAOvN,QACrC,MACyB,KAAA,GACjBwD,EAAAgf,YAAcjV,EAAOhN,OAC7B,MAC+B,KAAA,GACvBiD,EAAAif,gBAAkBlV,EAAOvN,QACjC,MAC0B,KAAA,GAClBwD,EAAAkf,YAAcnV,EAAOvN,QAC7B,MACgC,KAAA,GACxBwD,EAAAmf,kBAAoBpV,EAAOhN,OACnC,MACgC,KAAA,GACxBiD,EAAAof,iBAAmBrV,EAAOvN,QAClC,MACiC,KAAA,GACzBwD,EAAAqf,kBAAoBtV,EAAOvN,QACnC,MACuB,KAAA,GACfwD,EAAAsf,UAAYvV,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAuf,SAAWxV,EAAOvN,QAC1B,MACuB,KAAA,GACfwD,EAAAwf,SAAWzV,EAAOvN,QAC1B,MACkC,KAAA,GAC1BwD,EAAAyf,kBAAoB1V,EAAOvN,QACnC,MACwB,KAAA,GAChBwD,EAAAiR,UAAYlH,EAAOvN,QAC3B,MACsB,KAAA,GACdwD,EAAA0f,UAAY3V,EAAOhN,OAC3B,MAC0B,KAAA,GAClBiD,EAAA2f,aAAe5V,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAA4f,eAAiB7V,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAA6f,gBAAkB9V,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAA8f,cAAgB/V,EAAOvN,QAC/B,MAC+B,KAAA,GACvBwD,EAAA+f,iBAAmBhW,EAAOvN,QAClC,MACyB,KAAA,GACjBwD,EAAAggB,WAAajW,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAAigB,WAAalW,EAAOhN,OAC5B,MACgC,KAAA,GACxBiD,EAAAkgB,kBAAoBnW,EAAOhN,OACnC,MAC8B,KAAA,GACtBiD,EAAAmgB,gBAAkBpW,EAAOvN,QACjC,MACkB,KAAA,GACVwD,EAAAogB,KAAOrW,EAAOvN,QACtB,MACwB,KAAA,GAChBwD,EAAAqgB,WAAatW,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAAsgB,cAAgBvW,EAAOhN,OAC/B,MACqC,KAAA,GAC7BiD,EAAAugB,sBAAwBxW,EAAOvN,QACvC,MACkC,KAAA,GAC1BwD,EAAAwgB,mBAAqBzW,EAAOvN,QACpC,MACgC,KAAA,GACxBwD,EAAAygB,gBAAkB1W,EAAOvN,QACjC,MAC8B,KAAA,GACtBwD,EAAA0gB,iBAAmB3W,EAAOhN,OAClC,MACyB,KAAA,GACjBiD,EAAA2gB,YAAc5W,EAAOvN,QAC7B,MACyB,KAAA,GACjBwD,EAAA4gB,YAAc7W,EAAOhN,OAC7B,MACgC,KAAA,GACxBiD,EAAA6gB,iBAAmB9W,EAAOvN,QAClC,MAC4B,KAAA,GACpBwD,EAAA8gB,cAAgB/W,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAA+gB,aAAehX,EAAOhN,OAC9B,MAC6B,KAAA,GACrBiD,EAAAghB,eAAiBjX,EAAOvN,QAChC,MACuB,KAAA,GACfwD,EAAAihB,UAAYlX,EAAOvN,QAC3B,MAC0B,KAAA,GAClBwD,EAAAkhB,aAAenX,EAAOvN,QAC9B,MACsB,KAAA,GACdwD,EAAAmhB,SAAWpX,EAAOvN,QAC1B,MACuB,KAAA,GACfwD,EAAAohB,UAAYrX,EAAOvN,QAC3B,MAC4B,KAAA,GACpBwD,EAAAqhB,cAAgBtX,EAAOvN,QAC/B,MAC2B,KAAA,GACnBwD,EAAAshB,aAAevX,EAAOvN,QAC9B,MACsB,KAAA,GACdwD,EAAAuhB,SAAWxX,EAAOvN,QAC1B,MACsB,KAAA,GACdwD,EAAAwhB,SAAWzX,EAAOvN,QAC1B,MAC6B,KAAA,GACrBwD,EAAAyhB,gBAAkB1X,EAAOhN,OACjC,MAC6B,KAAA,GACrBiD,EAAA0hB,aAAe3X,EAAOvN,QAC9B,MAC+B,KAAA,GACvBwD,EAAA2hB,gBAAkB5X,EAAOvN,QACjC,MAC+B,KAAA,GACvBwD,EAAA4hB,eAAiB7X,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAA6hB,aAAe9X,EAAOhN,OAC9B,MACsB,KAAA,GACdiD,EAAA8hB,SAAW/X,EAAOvN,QAC1B,MACmB,KAAA,GACXwD,EAAA+hB,MAAQhY,EAAOvN,QACvB,MACyB,KAAA,GACjBwD,EAAAgiB,YAAcjY,EAAOvN,QAC7B,MAC+B,KAAA,GACvBwD,EAAAiiB,iBAAmBlY,EAAOvN,QAClC,MACqB,KAAA,GACbwD,EAAAkiB,QAAUnY,EAAOvN,QACzB,MAC6B,KAAA,GACrBwD,EAAAmiB,eAAiBpY,EAAOhN,OAChC,MACwB,KAAA,GAChBiD,EAAAoiB,WAAarY,EAAOvN,QAC5B,MAC4B,KAAA,GACpBwD,EAAAqiB,cAAgBtY,EAAOhN,OAC/B,MACsC,KAAA,GAC9BiD,EAAAsiB,uBAAyBvY,EAAOvN,QACxC,MACyB,KAAA,GACjBwD,EAAAuiB,YAAcxY,EAAOhN,OAC7B,MACyB,KAAA,GACjBiD,EAAAwiB,WAAazY,EAAOvN,QAC5B,MACwB,KAAA,GAChBwD,EAAAyiB,WAAa1Y,EAAOhN,OAC5B,MAC8B,KAAA,GACtBiD,EAAA0iB,gBAAkB3Y,EAAOvN,QACjC,MACgC,KAAA,GACxBwD,EAAAiW,kBAAoBlM,EAAOvN,QACnC,MAC2B,KAAA,GACnBwD,EAAA2iB,cAAgB5Y,EAAOhN,OAC/B,MAC+B,KAAA,GACvBiD,EAAA4iB,gBAAkB7Y,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAA6iB,eAAiB9Y,EAAOhN,OAChC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA6BK,EAAuByG,GAE3C,IAArB9G,EAAQyd,UACRpd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyd,UAEtB,IAAvBzd,EAAQ0d,YACRrd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0d,YAEpB,IAAzB1d,EAAQ2d,cACRtd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2d,cAErB,IAAxB3d,EAAQ4d,aACRvd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4d,aAEpB,IAAzB5d,EAAQ6d,cACRxd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6d,cAEH,IAA1C7d,EAAQ8d,+BACRzd,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8d,gCAEzB,IAApB9d,EAAQ+d,SACR1d,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+d,SAEjB,IAA3B/d,EAAQge,gBACR3d,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQge,gBAEhB,IAA7Bhe,EAAQie,kBACR5d,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQie,kBAEjB,IAA5Bje,EAAQke,iBACR7d,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQke,iBAElB,IAA5Ble,EAAQme,iBACR9d,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQme,iBAEzB,IAArBne,EAAQoe,UACR/d,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoe,UAEpB,IAA1Bpe,EAAQqe,eACRhe,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqe,eAEb,IAAjCre,EAAQse,sBACRje,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQse,uBAEtB,IAAxBte,EAAQue,aACRle,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQue,aAEjB,IAA5Bve,EAAQwe,iBACRne,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwe,iBAEhB,IAA9Bxe,EAAQ8Q,mBACRzQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8Q,mBAEvB,IAAvB9Q,EAAQye,YACRpe,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQye,aAEzB,IAArBze,EAAQ0e,UACRre,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0e,UAEX,IAAlC1e,EAAQ2e,uBACRte,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2e,uBAEd,IAAhC3e,EAAQ4e,qBACRve,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4e,qBAEvB,IAAvB5e,EAAQ6e,YACRxe,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6e,aAEpB,IAA1B7e,EAAQ8e,eACRze,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8e,eAEb,IAAhC9e,EAAQ+e,qBACR1e,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+e,sBAEtB,IAAxB/e,EAAQgf,aACR3e,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgf,aAEjB,IAA5Bhf,EAAQif,iBACR5e,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQif,iBAEtB,IAAxBjf,EAAQkf,aACR7e,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkf,cAEhB,IAA9Blf,EAAQmf,mBACR9e,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmf,mBAEhB,IAA7Bnf,EAAQof,kBACR/e,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQof,kBAEhB,IAA9Bpf,EAAQqf,mBACRhf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqf,mBAExB,IAAtBrf,EAAQsf,WACRjf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsf,WAEzB,IAArBtf,EAAQuf,UACRlf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuf,UAEzB,IAArBvf,EAAQwf,UACRnf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwf,UAEhB,IAA9Bxf,EAAQyf,mBACRpf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyf,mBAExB,IAAtBzf,EAAQiR,WACR5Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiR,YAExB,IAAtBjR,EAAQ0f,WACRrf,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0f,WAEpB,IAAzB1f,EAAQ2f,cACRtf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2f,cAEnB,IAA3B3f,EAAQ4f,gBACRvf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4f,gBAElB,IAA5B5f,EAAQ6f,iBACRxf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6f,iBAEpB,IAA1B7f,EAAQ8f,eACRzf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8f,eAEjB,IAA7B9f,EAAQ+f,kBACR1f,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+f,kBAEvB,IAAvB/f,EAAQggB,YACR3f,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQggB,aAEvB,IAAvBhgB,EAAQigB,YACR5f,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQigB,aAEf,IAA9BjgB,EAAQkgB,mBACR7f,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkgB,mBAEjB,IAA5BlgB,EAAQmgB,iBACR9f,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmgB,iBAE7B,IAAjBngB,EAAQogB,MACR/f,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQogB,MAEvB,IAAvBpgB,EAAQqgB,YACRhgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqgB,aAEpB,IAA1BrgB,EAAQsgB,eACRjgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsgB,eAEX,IAAlCtgB,EAAQugB,uBACRlgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQugB,uBAEf,IAA/BvgB,EAAQwgB,oBACRngB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwgB,oBAElB,IAA5BxgB,EAAQygB,iBACRpgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQygB,kBAEjB,IAA7BzgB,EAAQ0gB,kBACRrgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0gB,kBAErB,IAAxB1gB,EAAQ2gB,aACRtgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2gB,cAEtB,IAAxB3gB,EAAQ4gB,aACRvgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4gB,aAEhB,IAA7B5gB,EAAQ6gB,kBACRxgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6gB,kBAEpB,IAA1B7gB,EAAQ8gB,eACRzgB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8gB,gBAErB,IAAzB9gB,EAAQ+gB,cACR1gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+gB,cAElB,IAA3B/gB,EAAQghB,gBACR3gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQghB,gBAExB,IAAtBhhB,EAAQihB,WACR5gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQihB,WAErB,IAAzBjhB,EAAQkhB,cACR7gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkhB,cAEzB,IAArBlhB,EAAQmhB,UACR9gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmhB,UAExB,IAAtBnhB,EAAQohB,WACR/gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQohB,WAEpB,IAA1BphB,EAAQqhB,eACRhhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqhB,eAErB,IAAzBrhB,EAAQshB,cACRjhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQshB,cAEzB,IAArBthB,EAAQuhB,UACRlhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuhB,UAEzB,IAArBvhB,EAAQwhB,UACRnhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwhB,WAElB,IAA5BxhB,EAAQyhB,iBACRphB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyhB,iBAEpB,IAAzBzhB,EAAQ0hB,cACRrhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0hB,cAElB,IAA5B1hB,EAAQ2hB,iBACRthB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2hB,iBAEnB,IAA3B3hB,EAAQ4hB,gBACRvhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4hB,iBAErB,IAAzB5hB,EAAQ6hB,cACRxhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6hB,cAExB,IAArB7hB,EAAQ8hB,UACRzhB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8hB,UAE5B,IAAlB9hB,EAAQ+hB,OACR1hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+hB,OAEtB,IAAxB/hB,EAAQgiB,aACR3hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgiB,aAEjB,IAA7BhiB,EAAQiiB,kBACR5hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiiB,kBAE1B,IAApBjiB,EAAQkiB,SACR7hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkiB,UAEnB,IAA3BliB,EAAQmiB,gBACR9hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmiB,gBAEtB,IAAvBniB,EAAQoiB,YACR/hB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoiB,aAEpB,IAA1BpiB,EAAQqiB,eACRhiB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqiB,eAEV,IAAnCriB,EAAQsiB,wBACRjiB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsiB,yBAEtB,IAAxBtiB,EAAQuiB,aACRliB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuiB,aAEtB,IAAvBviB,EAAQwiB,YACRniB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwiB,aAEvB,IAAvBxiB,EAAQyiB,YACRpiB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyiB,YAEjB,IAA5BziB,EAAQ0iB,iBACRriB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0iB,iBAEhB,IAA9B1iB,EAAQiW,mBACR5V,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiW,oBAEpB,IAA1BjW,EAAQ2iB,eACRtiB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2iB,eAEjB,IAA5B3iB,EAAQ4iB,iBACRviB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4iB,kBAEnB,IAA3B5iB,EAAQ6iB,gBACRxiB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6iB,gBACjD,IAAI5Y,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAyiB,GAAc,IA3D3B,cAA+BzW,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMue,IACrD,CAAE5iB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMgZ,IACpD,CAAErd,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMwe,KAE5D,CACAvY,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2C,KAAA,EACnCqE,EAAAijB,SAAWF,GAAqB3Y,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACrG,MACwC,KAAA,EAChCjjB,EAAAkjB,QAAU1F,GAAmBpT,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAClG,MACyC,KAAA,EACjCljB,EAAA8G,QAAUkc,GAAoB5Y,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACnG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEzD9G,EAAQijB,UACRF,GAAqB3X,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpHqC,EAAQkjB,SACR1F,GAAmBpS,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjHqC,EAAQ8G,SACRkc,GAAoB5X,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACtH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA8MS,MAAA0iB,GAAuB,IAvMpC,cAAwC1W,EACpCrS,cACI8V,MAAM,6BAA8B,CAChC,CAAE3P,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+CAAgDwY,KAC/G,CAAE7c,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,UAAWyB,EAAG,IAAM6X,IACnE,CAAElc,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,2CAA4CkY,KACvG,CAAEvc,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,0CAA2CqY,KACnG,CAAE1c,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+CAAgDoY,KAC/G,CAAEzc,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,6CAA8CsY,KAC1G,CAAE3c,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCuY,KACpG,CAAE5c,GAAI,GAAIsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCmY,KAC5F,CAAExc,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCuY,KAC9F,CAAE5c,GAAI,GAAIsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCuY,KAC3F,CAAE5c,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEmjB,kBAAmB,EAAGC,cAAe,EAAGC,kBAAkB,EAAOC,eAAe,EAAOC,uBAAwB,EAAGC,qBAAqB,EAAOC,aAAc,EAAGC,kBAAmB,EAAGC,sBAAsB,EAAOC,gBAAiB,EAAGC,iBAAkB,EAAGC,SAAU,EAAGC,mBAAoB,EAAGC,QAAQ,EAAOC,kBAAmB,EAAGC,UAAW,EAAGC,cAAc,EAAOC,gBAAgB,EAAOC,WAAY,EAAGC,SAAU,EAAGC,aAAa,EAAOC,aAAa,GAItc,OAHAphB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6C+W,EAAA1V,KAAMiK,EAAStL,GACzDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwE,KAAA,GAChEqE,EAAAmjB,kBAAoBpZ,EAAOvN,QACnC,MACkD,KAAA,GAC1CwD,EAAAykB,oBAAsBpI,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQykB,qBAC1G,MACiE,KAAA,EACzDzkB,EAAAojB,cAAgBrZ,EAAOvN,QAC/B,MACgC,KAAA,EACxBwD,EAAAqjB,iBAAmBtZ,EAAOhN,OAClC,MAC4B,KAAA,EACpBiD,EAAAsjB,cAAgBvZ,EAAOhN,OAC/B,MACuC,KAAA,EAC/BiD,EAAAujB,uBAAyBxZ,EAAOxM,SACxC,MACmC,KAAA,EAC3ByC,EAAAwjB,oBAAsBzZ,EAAOhN,OACrC,MAC6D,KAAA,EACrDiD,EAAAyjB,aAAe1Z,EAAOvN,QAC9B,MACyE,KAAA,EACjEwD,EAAA0jB,kBAAoB3Z,EAAOvN,QACnC,MACoC,KAAA,EAC5BwD,EAAA2jB,qBAAuB5Z,EAAOhN,OACtC,MACoE,KAAA,EAC5DiD,EAAA4jB,gBAAkB7Z,EAAOvN,QACjC,MAC6D,KAAA,GACrDwD,EAAA6jB,iBAAmB9Z,EAAOvN,QAClC,MACqD,KAAA,GAC7CwD,EAAA8jB,SAAW/Z,EAAOvN,QAC1B,MACmC,KAAA,GAC3BwD,EAAA+jB,mBAAqBha,EAAOxM,SACpC,MACoB,KAAA,GACZyC,EAAAgkB,OAASja,EAAOhN,OACxB,MACmC,KAAA,GAC3BiD,EAAAikB,kBAAoBla,EAAOxM,SACnC,MAC0B,KAAA,GAClByC,EAAAkkB,UAAYna,EAAOxM,SAC3B,MAC0B,KAAA,GAClByC,EAAAmkB,aAAepa,EAAOhN,OAC9B,MAC4B,KAAA,GACpBiD,EAAAokB,eAAiBra,EAAOhN,OAChC,MACuD,KAAA,GAC/CiD,EAAAqkB,WAAata,EAAOvN,QAC5B,MACoD,KAAA,GAC5CwD,EAAAskB,SAAWva,EAAOvN,QAC1B,MAC0B,KAAA,GAClBwD,EAAAukB,YAAcxa,EAAOhN,OAC7B,MACyB,KAAA,GACjBiD,EAAAwkB,YAAcza,EAAOhN,OAC7B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA+BK,EAAuByG,GAEpC,IAA9B9G,EAAQmjB,mBACR9iB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmjB,mBAE9CnjB,EAAQykB,qBACRpI,GAAejR,oBAAoBpL,EAAQykB,oBAAqBpkB,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhG,IAA1BqC,EAAQojB,eACR/iB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQojB,gBAEhB,IAA7BpjB,EAAQqjB,kBACRhjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqjB,mBAElB,IAA1BrjB,EAAQsjB,eACRjjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsjB,eAET,IAAnCtjB,EAAQujB,wBACRljB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQujB,yBAEb,IAAhCvjB,EAAQwjB,qBACRnjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwjB,qBAEnB,IAAzBxjB,EAAQyjB,cACRpjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyjB,cAEf,IAA9BzjB,EAAQ0jB,mBACRrjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0jB,oBAEZ,IAAjC1jB,EAAQ2jB,sBACRtjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2jB,sBAEhB,IAA5B3jB,EAAQ4jB,iBACRvjB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4jB,iBAEhB,IAA7B5jB,EAAQ6jB,kBACRxjB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6jB,kBAEzB,IAArB7jB,EAAQ8jB,UACRzjB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8jB,UAEf,IAA/B9jB,EAAQ+jB,oBACR1jB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ+jB,qBAE3B,IAAnB/jB,EAAQgkB,QACR3jB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgkB,QAEf,IAA9BhkB,EAAQikB,mBACR5jB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQikB,mBAExB,IAAtBjkB,EAAQkkB,WACR7jB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQkkB,YAErB,IAAzBlkB,EAAQmkB,cACR9jB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmkB,eAElB,IAA3BnkB,EAAQokB,gBACR/jB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQokB,gBAEtB,IAAvBpkB,EAAQqkB,YACRhkB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqkB,YAEzB,IAArBrkB,EAAQskB,UACRjkB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQskB,WAEtB,IAAxBtkB,EAAQukB,aACRlkB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQukB,cAErB,IAAxBvkB,EAAQwkB,aACRnkB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwkB,aACjD,IAAIva,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAA2iB,GAAsB,IAzEnC,cAAuC3W,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,UAAWyB,EAAG,IAAMsW,KAEzE,CACArQ,OAAO/V,GACG,MAAAsL,EAAU,CAAE0kB,mBAAoB,EAAGC,UAAW,EAAGC,oBAAoB,EAAOC,qBAAqB,GAIhG,OAHAzhB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmC,KAAA,EAC3BqE,EAAA0kB,mBAAqB3a,EAAOxM,SACpC,MACyB,KAAA,EACjByC,EAAA2kB,UAAY5a,EAAOxM,SAC3B,MACiC,KAAA,EACzByC,EAAA4kB,mBAAqB7a,EAAOhN,OACpC,MACmC,KAAA,EAC3BiD,EAAA6kB,oBAAsB9a,EAAOhN,OACrC,MAC6C,KAAA,EACrCiD,EAAA8kB,mBAAqBhK,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8kB,oBACrG,MAAA,QAEA,IAAI7a,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA8BK,EAAuByG,GAElC,IAA/B9G,EAAQ0kB,oBACRrkB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ0kB,oBAEvB,IAAtB1kB,EAAQ2kB,WACRtkB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ2kB,YAEd,IAA/B3kB,EAAQ4kB,oBACRvkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4kB,qBAEZ,IAAhC5kB,EAAQ6kB,qBACRxkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ6kB,qBAE5C7kB,EAAQ8kB,oBACRhK,GAAW1P,oBAAoBpL,EAAQ8kB,mBAAoBzkB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA0kB,GAAkB,IA3D/B,cAAmC1Y,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMwgB,IACrD,CAAE7kB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMgZ,IACpD,CAAErd,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMygB,KAE5D,CACAxa,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC+C,KAAA,EACvCqE,EAAAijB,SAAW+B,GAAyB5a,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACzG,MACwC,KAAA,EAChCjjB,EAAAkjB,QAAU1F,GAAmBpT,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAClG,MAC6C,KAAA,EACrCljB,EAAA8G,QAAUme,GAAwB7a,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACvG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7D9G,EAAQijB,UACR+B,GAAyB5Z,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExHqC,EAAQkjB,SACR1F,GAAmBpS,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjHqC,EAAQ8G,SACRme,GAAwB7Z,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC1H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAA2kB,GAA2B,IAlExC,cAA4C3Y,EACxCrS,cACI8V,MAAM,iCAAkC,CACpC,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,0CAA2C6Y,KAC9F,CAAEld,GAAI,EAAGsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,wCAAyC0Y,KAC1F,CAAE/c,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qDAAsD2Y,KACrH,CAAEhd,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,4CAA6C4Y,MAE3G,CACA3S,OAAO/V,GACG,MAAAsL,EAAU,CAAEskB,SAAU,EAAGY,OAAQ,EAAGC,oBAAqB,EAAGC,WAAY,GAIvE,OAHAhiB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiD+W,EAAA1V,KAAMiK,EAAStL,GAC7DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwD,KAAA,EAChDqE,EAAAskB,SAAWva,EAAOvN,QAC1B,MACoD,KAAA,EAC5CwD,EAAAklB,OAASnb,EAAOvN,QACxB,MAC+E,KAAA,EACvEwD,EAAAmlB,oBAAsBpb,EAAOvN,QACrC,MAC6D,KAAA,EACrDwD,EAAAolB,WAAarb,EAAOvN,QAC5B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmCK,EAAuByG,GAEjD,IAArB9G,EAAQskB,UACRjkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQskB,UAE1B,IAAnBtkB,EAAQklB,QACR7kB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQklB,QAEb,IAAhCllB,EAAQmlB,qBACR9kB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmlB,qBAEtB,IAAvBnlB,EAAQolB,YACR/kB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQolB,YACjD,IAAInb,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAA4kB,GAA0B,IApDvC,cAA2C5Y,EACvCrS,cACI8V,MAAM,gCAAiC,CACnC,CAAE3P,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,UAAWyB,EAAG,IAAMsW,KAEzE,CACArQ,OAAO/V,GACG,MAAAsL,EAAU,CAAE0kB,mBAAoB,GAI/B,OAHAthB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgD+W,EAAA1V,KAAMiK,EAAStL,GAC5DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmC,KAAA,EAC3BqE,EAAA0kB,mBAAqB3a,EAAOxM,SACpC,MAC6C,KAAA,EACrCyC,EAAA8kB,mBAAqBhK,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8kB,oBACrG,MAAA,QAEA,IAAI7a,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkCK,EAAuByG,GAEtC,IAA/B9G,EAAQ0kB,oBACRrkB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ0kB,oBAE7C1kB,EAAQ8kB,oBACRhK,GAAW1P,oBAAoBpL,EAAQ8kB,mBAAoBzkB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GChnDQ,IAAAglB,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,sBAAsB,GAAtB,sBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,kBAAkB,GAAlB,kBAZQA,IAAAA,IAAA,CAAA,GAoFAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,0BAA0B,GAA1B,0BAIAA,EAAAA,wBAAwB,GAAxB,wBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,wBAAwB,GAAxB,wBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,YAAY,IAAZ,YA5CQA,IAAAA,IAAA,CAAA,GAkFAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,6BAA6B,OAA7B,6BAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAhHQA,IAAAA,IAAA,CAAA,GAqHAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,qBAAqB,OAArB,qBAhCQA,IAAAA,IAAA,CAAA,GAqCAC,IAAAA,IAIRA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,yBAAyB,GAAzB,yBAZQA,IAAAA,IAAA,CAAA,GAwoBC,MAAAC,GAAiB,IAznB9B,cAAkCxZ,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mCAAoCM,KAAM,SAAUyB,EAAG,GACvE,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GAClE,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,mCAAoCM,KAAM,SAAUyB,EAAG,GACvE,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,IAExD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE8lB,qBAAsB,EAAGC,WAAY,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,SAAU,EAAGC,gBAAiB,EAAGC,kBAAmB,EAAGC,iBAAiB,EAAOC,OAAQ,EAAGC,WAAY,EAAGzI,8BAA+B,EAAG0I,cAAe,EAAGC,sBAAuB,EAAGC,iBAAiB,EAAOC,mBAAoB,EAAGC,oBAAqB,EAAGC,cAAe,EAAGC,kBAAmB,EAAGlQ,OAAQ,EAAGmQ,WAAY,EAAGC,cAAc,EAAOC,eAAgB,EAAGC,aAAc,EAAGC,YAAY,EAAOC,qBAAsB,EAAGC,mBAAoB,EAAGC,YAAa,EAAGC,aAAa,EAAO/Q,YAAa,EAAGgR,aAAc,EAAGC,YAAY,EAAOC,kBAAmB,EAAGC,aAAc,EAAGC,QAAS,EAAGC,0BAA2B,EAAGC,eAAgB,EAAGC,eAAgB,EAAGC,cAAc,EAAOC,WAAY,EAAGC,mBAAoB,EAAGC,wBAAyB,EAAGC,gBAAiB,EAAGC,OAAQ,EAAGC,UAAW,EAAGC,WAAW,EAAOC,kBAAmB,EAAGC,sBAAuB,EAAGC,OAAQ,EAAGC,cAAe,EAAGC,aAAa,EAAOC,kBAAmB,EAAGC,eAAgB,EAAGC,wBAAyB,EAAGC,YAAY,EAAOhY,SAAS,EAAOiY,WAAY,EAAGC,aAAc,EAAGC,YAAY,EAAOC,kBAAmB,EAAGC,qBAAsB,EAAGC,oBAAqB,EAAGC,OAAQ,EAAGrI,aAAc,EAAGsI,WAAW,EAAOC,gBAAiB,EAAGC,cAAe,EAAGpK,UAAW,EAAGqK,wBAAyB,EAAGC,eAAgB,EAAGC,SAAU,EAAGC,oBAAqB,EAAGC,gBAAgB,EAAOC,SAAU,EAAGC,8BAA+B,EAAGC,wBAAyB,EAAGzW,WAAW,EAAO0W,YAAa,EAAGC,SAAU,EAAGC,UAAW,EAAGC,YAAY,EAAOC,WAAW,EAAOC,cAAe,EAAGC,cAAe,EAAGC,aAAc,EAAGC,WAAW,GAIrnD,OAHAvnB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoC,KAAA,EAC5BqE,EAAA8lB,qBAAuB/b,EAAOvN,QACtC,MACwB,KAAA,EAChBwD,EAAA+lB,WAAahc,EAAOvN,QAC5B,MAC2B,KAAA,EACnBwD,EAAAgmB,aAAejc,EAAOvN,QAC9B,MAC6B,KAAA,EACrBwD,EAAAimB,eAAiBlc,EAAOvN,QAChC,MACuB,KAAA,EACfwD,EAAAkmB,SAAWnc,EAAOvN,QAC1B,MAC8B,KAAA,EACtBwD,EAAAmmB,gBAAkBpc,EAAOvN,QACjC,MACgC,KAAA,EACxBwD,EAAAomB,kBAAoBrc,EAAOvN,QACnC,MAC6B,KAAA,EACrBwD,EAAAqmB,gBAAkBtc,EAAOhN,OACjC,MACoB,KAAA,EACZiD,EAAAsmB,OAASvc,EAAOvN,QACxB,MACyB,KAAA,GACjBwD,EAAAumB,WAAaxc,EAAOvN,QAC5B,MAC8C,KAAA,GACtCwD,EAAA8d,8BAAgC/T,EAAOvN,QAC/C,MAC6B,KAAA,GACrBwD,EAAAwmB,cAAgBzc,EAAOvN,QAC/B,MACoC,KAAA,GAC5BwD,EAAAymB,sBAAwB1c,EAAOvN,QACvC,MAC6B,KAAA,GACrBwD,EAAA0mB,gBAAkB3c,EAAOhN,OACjC,MACiC,KAAA,GACzBiD,EAAA2mB,mBAAqB5c,EAAOvN,QACpC,MACkC,KAAA,GAC1BwD,EAAA4mB,oBAAsB7c,EAAOvN,QACrC,MAC4B,KAAA,GACpBwD,EAAA6mB,cAAgB9c,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAA8mB,kBAAoB/c,EAAOvN,QACnC,MACoB,KAAA,GACZwD,EAAA4W,OAAS7M,EAAOvN,QACxB,MACyB,KAAA,GACjBwD,EAAA+mB,WAAahd,EAAOvN,QAC5B,MAC0B,KAAA,GAClBwD,EAAAgnB,aAAejd,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAAinB,eAAiBld,EAAOvN,QAChC,MAC2B,KAAA,GACnBwD,EAAAknB,aAAend,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAmnB,WAAapd,EAAOhN,OAC5B,MACoC,KAAA,GAC5BiD,EAAAonB,qBAAuBrd,EAAOvN,QACtC,MACiC,KAAA,GACzBwD,EAAAqnB,mBAAqBtd,EAAOvN,QACpC,MAC0B,KAAA,GAClBwD,EAAAsnB,YAAcvd,EAAOvN,QAC7B,MACyB,KAAA,GACjBwD,EAAAunB,YAAcxd,EAAOhN,OAC7B,MAC0B,KAAA,GAClBiD,EAAAwW,YAAczM,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAwnB,aAAezd,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAynB,WAAa1d,EAAOhN,OAC5B,MACkC,KAAA,GAC1BiD,EAAA0nB,kBAAoB3d,EAAOvN,QACnC,MAC2B,KAAA,GACnBwD,EAAA2nB,aAAe5d,EAAOvN,QAC9B,MACqB,KAAA,GACbwD,EAAA4nB,QAAU7d,EAAOvN,QACzB,MACyC,KAAA,GACjCwD,EAAA6nB,0BAA4B9d,EAAOvN,QAC3C,MAC6B,KAAA,GACrBwD,EAAA8nB,eAAiB/d,EAAOvN,QAChC,MAC6B,KAAA,GACrBwD,EAAA+nB,eAAiBhe,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAAgoB,aAAeje,EAAOhN,OAC9B,MACyB,KAAA,GACjBiD,EAAAioB,WAAale,EAAOvN,QAC5B,MACiC,KAAA,GACzBwD,EAAAkoB,mBAAqBne,EAAOvN,QACpC,MACuC,KAAA,GAC/BwD,EAAAmoB,wBAA0Bpe,EAAOvN,QACzC,MAC8B,KAAA,GACtBwD,EAAAooB,gBAAkBre,EAAOvN,QACjC,MACoB,KAAA,GACZwD,EAAAqoB,OAASte,EAAOvN,QACxB,MACuB,KAAA,GACfwD,EAAAsoB,UAAYve,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAuoB,UAAYxe,EAAOhN,OAC3B,MACgC,KAAA,GACxBiD,EAAAwoB,kBAAoBze,EAAOvN,QACnC,MACqC,KAAA,GAC7BwD,EAAAyoB,sBAAwB1e,EAAOvN,QACvC,MACoB,KAAA,GACZwD,EAAA0oB,OAAS3e,EAAOvN,QACxB,MAC4B,KAAA,GACpBwD,EAAA2oB,cAAgB5e,EAAOvN,QAC/B,MACwB,KAAA,GAChBwD,EAAA4oB,YAAc7e,EAAOhN,OAC7B,MACgC,KAAA,GACxBiD,EAAA6oB,kBAAoB9e,EAAOvN,QACnC,MAC6B,KAAA,GACrBwD,EAAA8oB,eAAiB/e,EAAOvN,QAChC,MACuC,KAAA,GAC/BwD,EAAA+oB,wBAA0Bhf,EAAOvN,QACzC,MACwB,KAAA,GAChBwD,EAAAgpB,WAAajf,EAAOhN,OAC5B,MACoB,KAAA,GACZiD,EAAAgR,QAAUjH,EAAOhN,OACzB,MACwB,KAAA,GAChBiD,EAAAipB,WAAalf,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAAkpB,aAAenf,EAAOvN,QAC9B,MACwB,KAAA,GAChBwD,EAAAmpB,WAAapf,EAAOhN,OAC5B,MACgC,KAAA,GACxBiD,EAAAopB,kBAAoBrf,EAAOvN,QACnC,MACmC,KAAA,GAC3BwD,EAAAqpB,qBAAuBtf,EAAOvN,QACtC,MACmC,KAAA,GAC3BwD,EAAAspB,oBAAsBvf,EAAOvN,QACrC,MACoB,KAAA,GACZwD,EAAAupB,OAASxf,EAAOvN,QACxB,MAC0B,KAAA,GAClBwD,EAAAkhB,aAAenX,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAwpB,UAAYzf,EAAOhN,OAC3B,MAC8B,KAAA,GACtBiD,EAAAypB,gBAAkB1f,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAA0pB,cAAgB3f,EAAOvN,QAC/B,MACuB,KAAA,GACfwD,EAAAsf,UAAYvV,EAAOvN,QAC3B,MACuC,KAAA,GAC/BwD,EAAA2pB,wBAA0B5f,EAAOvN,QACzC,MAC6B,KAAA,GACrBwD,EAAA4pB,eAAiB7f,EAAOvN,QAChC,MACsB,KAAA,GACdwD,EAAA6pB,SAAW9f,EAAOvN,QAC1B,MACkC,KAAA,GAC1BwD,EAAA8pB,oBAAsB/f,EAAOvN,QACrC,MAC4B,KAAA,GACpBwD,EAAA+pB,eAAiBhgB,EAAOhN,OAChC,MACuB,KAAA,GACfiD,EAAAgqB,SAAWjgB,EAAOvN,QAC1B,MAC8C,KAAA,GACtCwD,EAAAiqB,8BAAgClgB,EAAOvN,QAC/C,MACuC,KAAA,GAC/BwD,EAAAkqB,wBAA0BngB,EAAOvN,QACzC,MACsB,KAAA,GACdwD,EAAAyT,UAAY1J,EAAOhN,OAC3B,MAC0B,KAAA,GAClBiD,EAAAmqB,YAAcpgB,EAAOvN,QAC7B,MACsB,KAAA,GACdwD,EAAAoqB,SAAWrgB,EAAOvN,QAC1B,MACuB,KAAA,GACfwD,EAAAqqB,UAAYtgB,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAsqB,WAAavgB,EAAOhN,OAC5B,MACsB,KAAA,GACdiD,EAAAuqB,UAAYxgB,EAAOhN,OAC3B,MAC4B,KAAA,GACpBiD,EAAAwqB,cAAgBzgB,EAAOvN,QAC/B,MAC6B,KAAA,GACrBwD,EAAAyqB,cAAgB1gB,EAAOvN,QAC/B,MAC2B,KAAA,GACnBwD,EAAA0qB,aAAe3gB,EAAOvN,QAC9B,MACsB,KAAA,GACdwD,EAAA2qB,UAAY5gB,EAAOhN,OAC3B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE3B,IAAjC9G,EAAQ8lB,sBACRzlB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8lB,sBAEtB,IAAvB9lB,EAAQ+lB,YACR1lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+lB,YAEpB,IAAzB/lB,EAAQgmB,cACR3lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgmB,cAElB,IAA3BhmB,EAAQimB,gBACR5lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQimB,gBAExB,IAArBjmB,EAAQkmB,UACR7lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkmB,UAEjB,IAA5BlmB,EAAQmmB,iBACR9lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmmB,iBAEf,IAA9BnmB,EAAQomB,mBACR/lB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQomB,oBAEjB,IAA5BpmB,EAAQqmB,iBACRhmB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqmB,iBAEzB,IAAnBrmB,EAAQsmB,QACRjmB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQsmB,QAEtB,IAAvBtmB,EAAQumB,YACRlmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQumB,YAEJ,IAA1CvmB,EAAQ8d,+BACRzd,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8d,+BAEpB,IAA1B9d,EAAQwmB,eACRnmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwmB,eAEZ,IAAlCxmB,EAAQymB,uBACRpmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQymB,wBAElB,IAA5BzmB,EAAQ0mB,iBACRrmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0mB,iBAEd,IAA/B1mB,EAAQ2mB,oBACRtmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2mB,oBAEd,IAAhC3mB,EAAQ4mB,qBACRvmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4mB,qBAEpB,IAA1B5mB,EAAQ6mB,eACRxmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6mB,eAEhB,IAA9B7mB,EAAQ8mB,mBACRzmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8mB,mBAE3B,IAAnB9mB,EAAQ4W,QACRvW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4W,QAEvB,IAAvB5W,EAAQ+mB,YACR1mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+mB,aAErB,IAAzB/mB,EAAQgnB,cACR3mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgnB,cAElB,IAA3BhnB,EAAQinB,gBACR5mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQinB,gBAErB,IAAzBjnB,EAAQknB,cACR7mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQknB,eAEvB,IAAvBlnB,EAAQmnB,YACR9mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmnB,YAEZ,IAAjCnnB,EAAQonB,sBACR/mB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQonB,sBAEf,IAA/BpnB,EAAQqnB,oBACRhnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqnB,oBAEtB,IAAxBrnB,EAAQsnB,aACRjnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsnB,cAEtB,IAAxBtnB,EAAQunB,aACRlnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQunB,aAErB,IAAxBvnB,EAAQwW,aACRnW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwW,aAErB,IAAzBxW,EAAQwnB,cACRnnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwnB,eAEvB,IAAvBxnB,EAAQynB,YACRpnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQynB,YAEf,IAA9BznB,EAAQ0nB,mBACRrnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0nB,mBAErB,IAAzB1nB,EAAQ2nB,cACRtnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2nB,cAE1B,IAApB3nB,EAAQ4nB,SACRvnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4nB,SAER,IAAtC5nB,EAAQ6nB,2BACRxnB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6nB,2BAEnB,IAA3B7nB,EAAQ8nB,gBACRznB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8nB,gBAEnB,IAA3B9nB,EAAQ+nB,gBACR1nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+nB,iBAErB,IAAzB/nB,EAAQgoB,cACR3nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgoB,cAEtB,IAAvBhoB,EAAQioB,YACR5nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQioB,YAEf,IAA/BjoB,EAAQkoB,oBACR7nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkoB,oBAEV,IAApCloB,EAAQmoB,yBACR9nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmoB,yBAElB,IAA5BnoB,EAAQooB,iBACR/nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQooB,iBAE3B,IAAnBpoB,EAAQqoB,QACRhoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqoB,QAExB,IAAtBroB,EAAQsoB,WACRjoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsoB,YAExB,IAAtBtoB,EAAQuoB,WACRloB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuoB,WAEf,IAA9BvoB,EAAQwoB,mBACRnoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwoB,mBAEZ,IAAlCxoB,EAAQyoB,uBACRpoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyoB,uBAE3B,IAAnBzoB,EAAQ0oB,QACRroB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0oB,QAEpB,IAA1B1oB,EAAQ2oB,eACRtoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2oB,gBAEtB,IAAxB3oB,EAAQ4oB,aACRvoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4oB,aAEf,IAA9B5oB,EAAQ6oB,mBACRxoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6oB,mBAEnB,IAA3B7oB,EAAQ8oB,gBACRzoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8oB,gBAEV,IAApC9oB,EAAQ+oB,yBACR1oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+oB,0BAEvB,IAAvB/oB,EAAQgpB,YACR3oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgpB,aAEzB,IAApBhpB,EAAQgR,SACR3Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgR,SAEtB,IAAvBhR,EAAQipB,YACR5oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQipB,YAErB,IAAzBjpB,EAAQkpB,cACR7oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkpB,eAEvB,IAAvBlpB,EAAQmpB,YACR9oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmpB,YAEf,IAA9BnpB,EAAQopB,mBACR/oB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQopB,mBAEb,IAAjCppB,EAAQqpB,sBACRhpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqpB,sBAEd,IAAhCrpB,EAAQspB,qBACRjpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQspB,qBAE3B,IAAnBtpB,EAAQupB,QACRlpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQupB,QAErB,IAAzBvpB,EAAQkhB,cACR7gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkhB,eAExB,IAAtBlhB,EAAQwpB,WACRnpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwpB,WAEjB,IAA5BxpB,EAAQypB,iBACRppB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQypB,iBAEpB,IAA1BzpB,EAAQ0pB,eACRrpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0pB,eAExB,IAAtB1pB,EAAQsf,WACRjf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsf,WAEV,IAApCtf,EAAQ2pB,yBACRtpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2pB,yBAEnB,IAA3B3pB,EAAQ4pB,gBACRvpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4pB,gBAEzB,IAArB5pB,EAAQ6pB,UACRxpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6pB,UAEd,IAAhC7pB,EAAQ8pB,qBACRzpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8pB,sBAEnB,IAA3B9pB,EAAQ+pB,gBACR1pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+pB,gBAExB,IAArB/pB,EAAQgqB,UACR3pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgqB,UAEJ,IAA1ChqB,EAAQiqB,+BACR5pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiqB,+BAEV,IAApCjqB,EAAQkqB,yBACR7pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkqB,0BAExB,IAAtBlqB,EAAQyT,WACRpT,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyT,WAErB,IAAxBzT,EAAQmqB,aACR9pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmqB,aAEzB,IAArBnqB,EAAQoqB,UACR/pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoqB,UAExB,IAAtBpqB,EAAQqqB,WACRhqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqqB,YAEvB,IAAvBrqB,EAAQsqB,YACRjqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsqB,aAEvB,IAAtBtqB,EAAQuqB,WACRlqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuqB,WAEnB,IAA1BvqB,EAAQwqB,eACRnqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwqB,eAEpB,IAA1BxqB,EAAQyqB,eACRpqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyqB,eAErB,IAAzBzqB,EAAQ0qB,cACRrqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0qB,eAExB,IAAtB1qB,EAAQ2qB,WACRtqB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2qB,WACjD,IAAI1gB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAuqB,GAAU,IA3DvB,cAA2Bve,EACvBrS,cACI8V,MAAM,gBAAiB,CACnB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMqmB,IACrD,CAAE1qB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMqhB,IACpD,CAAE1lB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMsmB,KAE5D,CACArgB,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgC+W,EAAA1V,KAAMiK,EAAStL,GAC5CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuC,KAAA,EAC/BqE,EAAAijB,SAAW4H,GAAiBzgB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACjG,MACoC,KAAA,EAC5BjjB,EAAAkjB,QAAU2C,GAAezb,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC9F,MACqC,KAAA,EAC7BljB,EAAA8G,QAAUgkB,GAAgB1gB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC/F,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkBK,EAAuByG,GAErD9G,EAAQijB,UACR4H,GAAiBzf,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhHqC,EAAQkjB,SACR2C,GAAeza,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8G,SACRgkB,GAAgB1f,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAClH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyLS,MAAAwqB,GAAmB,IAlLhC,cAAoCxe,EAChCrS,cACI8V,MAAM,yBAA0B,CAC5B,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qCAAsC6gB,KAC5F,CAAEllB,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuC8gB,KAChG,CAAEnlB,GAAI,GAAIsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,IAE1E,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE+qB,WAAW,EAAOC,SAAS,EAAOC,OAAO,EAAOC,SAAS,EAAOC,cAAc,EAAOpU,YAAa,EAAGqU,mBAAmB,EAAOC,qBAAqB,EAAOC,gBAAiB,EAAGC,gBAAiB,EAAGC,uBAAwB,EAAGC,kBAAmB,EAAGC,gBAAiB,EAAGC,oBAAoB,EAAOC,oBAAoB,EAAOC,aAAa,EAAOC,oBAAoB,EAAOC,oBAAoB,EAAOC,aAAc,EAAGC,yBAA0B,GAI9b,OAHA7oB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACyC+W,EAAA1V,KAAMiK,EAAStL,GACrDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA+qB,UAAYhhB,EAAOhN,OAC3B,MACqB,KAAA,EACbiD,EAAAgrB,QAAUjhB,EAAOhN,OACzB,MACmB,KAAA,GACXiD,EAAAirB,MAAQlhB,EAAOhN,OACvB,MACqB,KAAA,EACbiD,EAAAkrB,QAAUnhB,EAAOhN,OACzB,MAC0B,KAAA,EAClBiD,EAAAmrB,aAAephB,EAAOhN,OAC9B,MACsD,KAAA,EAC9CiD,EAAA+W,YAAchN,EAAOvN,QAC7B,MACgC,KAAA,EACxBwD,EAAAorB,kBAAoBrhB,EAAOhN,OACnC,MACkC,KAAA,EAC1BiD,EAAAqrB,oBAAsBthB,EAAOhN,OACrC,MACgC,KAAA,EACxBiD,EAAAsrB,gBAAkBvhB,EAAOxM,SACjC,MACgC,KAAA,EACxByC,EAAAurB,gBAAkBxhB,EAAOxM,SACjC,MACwC,KAAA,GAChCyC,EAAAwrB,uBAAyBzhB,EAAOxM,SACxC,MACkC,KAAA,GAC1ByC,EAAAyrB,kBAAoB1hB,EAAOxM,SACnC,MACgC,KAAA,GACxByC,EAAA0rB,gBAAkB3hB,EAAOxM,SACjC,MACkC,KAAA,GAC1ByC,EAAA2rB,mBAAqB5hB,EAAOhN,OACpC,MACkC,KAAA,GAC1BiD,EAAA4rB,mBAAqB7hB,EAAOhN,OACpC,MACyB,KAAA,GACjBiD,EAAA6rB,YAAc9hB,EAAOhN,OAC7B,MACkC,KAAA,GAC1BiD,EAAA8rB,mBAAqB/hB,EAAOhN,OACpC,MACkC,KAAA,GAC1BiD,EAAA+rB,mBAAqBhiB,EAAOhN,OACpC,MACyD,KAAA,GACjDiD,EAAAgsB,aAAejiB,EAAOvN,QAC9B,MAC0C,KAAA,GAClCwD,EAAAisB,yBAA2BliB,EAAOxM,SAC1C,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA2BK,EAAuByG,IAExC,IAAtB9G,EAAQ+qB,WACR1qB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+qB,YAExB,IAApB/qB,EAAQgrB,SACR3qB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgrB,UAE1B,IAAlBhrB,EAAQirB,OACR5qB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQirB,QAEzB,IAApBjrB,EAAQkrB,SACR7qB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkrB,UAEnB,IAAzBlrB,EAAQmrB,cACR9qB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmrB,cAEpB,IAAxBnrB,EAAQ+W,aACR1W,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+W,cAEf,IAA9B/W,EAAQorB,mBACR/qB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQorB,oBAEZ,IAAhCprB,EAAQqrB,qBACRhrB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqrB,qBAEhB,IAA5BrrB,EAAQsrB,iBACRjrB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQsrB,iBAEjB,IAA5BtrB,EAAQurB,iBACRlrB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQurB,iBAEV,IAAnCvrB,EAAQwrB,wBACRnrB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQwrB,wBAEhB,IAA9BxrB,EAAQyrB,mBACRprB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQyrB,mBAElB,IAA5BzrB,EAAQ0rB,iBACRrrB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ0rB,kBAEf,IAA/B1rB,EAAQ2rB,oBACRtrB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2rB,qBAEd,IAA/B3rB,EAAQ4rB,oBACRvrB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4rB,qBAErB,IAAxB5rB,EAAQ6rB,aACRxrB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6rB,cAEd,IAA/B7rB,EAAQ8rB,oBACRzrB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8rB,qBAEd,IAA/B9rB,EAAQ+rB,oBACR1rB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+rB,oBAEpB,IAAzB/rB,EAAQgsB,cACR3rB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgsB,cAET,IAArChsB,EAAQisB,0BACR5rB,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQisB,0BAClD,IAAIhiB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAyqB,GAAkB,IAzE/B,cAAmCze,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsBohB,KACtE,CAAEzlB,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,IAEnD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEksB,aAAc,EAAGC,iBAAiB,EAAOC,oBAAoB,EAAOC,MAAO,EAAGC,OAAO,GAIhG,OAHAlpB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4B,KAAA,EACpBqE,EAAAksB,aAAeniB,EAAOxM,SAC9B,MAC6B,KAAA,EACrByC,EAAAmsB,gBAAkBpiB,EAAOhN,OACjC,MACiC,KAAA,EACzBiD,EAAAosB,mBAAqBriB,EAAOhN,OACpC,MACgC,KAAA,EACxBiD,EAAAqsB,MAAQtiB,EAAOvN,QACvB,MACkB,KAAA,EACVwD,EAAAssB,MAAQviB,EAAOhN,OACvB,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAEpC,IAAzB9G,EAAQksB,cACR7rB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQksB,eAEjB,IAA5BlsB,EAAQmsB,iBACR9rB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmsB,kBAEb,IAA/BnsB,EAAQosB,oBACR/rB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQosB,oBAE1B,IAAlBpsB,EAAQqsB,OACRhsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqsB,QAE3B,IAAlBrsB,EAAQssB,OACRjsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQssB,OAChD,IAAIriB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAksB,GAAoB,IA3DjC,cAAqClgB,EACjCrS,cACI8V,MAAM,0BAA2B,CAC7B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMgoB,IACrD,CAAErsB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMqhB,IACpD,CAAE1lB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMioB,KAE5D,CACAhiB,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC0C+W,EAAA1V,KAAMiK,EAAStL,GACtDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiD,KAAA,EACzCqE,EAAAijB,SAAWuJ,GAA2BpiB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC3G,MACoC,KAAA,EAC5BjjB,EAAAkjB,QAAU2C,GAAezb,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC9F,MAC+C,KAAA,EACvCljB,EAAA8G,QAAU2lB,GAA0BriB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACzG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA4BK,EAAuByG,GAE/D9G,EAAQijB,UACRuJ,GAA2BphB,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1HqC,EAAQkjB,SACR2C,GAAeza,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8G,SACR2lB,GAA0BrhB,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAmsB,GAA6B,IAzE1C,cAA8CngB,EAC1CrS,cACI8V,MAAM,mCAAoC,CACtC,CAAE3P,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mDAAoD+gB,KAChH,CAAEplB,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qDAAsDghB,KACpH,CAAErlB,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,IAC5D,CAAElc,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,IAExE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE0sB,gBAAiB,EAAGC,kBAAmB,EAAGrB,gBAAiB,EAAGsB,wBAAwB,GAIjG,OAHAxpB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmD+W,EAAA1V,KAAMiK,EAAStL,GAC/DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC0E,KAAA,EAClEqE,EAAA0sB,gBAAkB3iB,EAAOvN,QACjC,MAC8E,KAAA,EACtEwD,EAAA2sB,kBAAoB5iB,EAAOvN,QACnC,MAC4C,KAAA,EACpCwD,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MACgC,KAAA,EACxB7sB,EAAAsrB,gBAAkBvhB,EAAOxM,SACjC,MACuC,KAAA,EAC/ByC,EAAA4sB,uBAAyB7iB,EAAOhN,OACxC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqCK,EAAuByG,GAE5C,IAA5B9G,EAAQ0sB,iBACRrsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0sB,iBAEf,IAA9B1sB,EAAQ2sB,mBACRtsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2sB,mBAE7C3sB,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExF,IAA5BqC,EAAQsrB,iBACRjrB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQsrB,kBAEV,IAAnCtrB,EAAQ4sB,wBACRvsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4sB,wBAChD,IAAI3iB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA8FS,MAAAosB,GAA4B,IAvFzC,cAA6CpgB,EACzCrS,cACI8V,MAAM,kCAAmC,CACrC,CAAE3P,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsBohB,KACtE,CAAEzlB,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,IAEnD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEksB,aAAc,EAAGG,MAAO,EAAGS,cAAc,EAAOC,gBAAgB,EAAOC,sBAAsB,EAAOZ,oBAAoB,EAAOE,OAAO,GAIjJ,OAHAlpB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkD+W,EAAA1V,KAAMiK,EAAStL,GAC9DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4B,KAAA,EACpBqE,EAAAksB,aAAeniB,EAAOxM,SAC9B,MACgC,KAAA,EACxByC,EAAAqsB,MAAQtiB,EAAOvN,QACvB,MAC0B,KAAA,EAClBwD,EAAA8sB,aAAe/iB,EAAOhN,OAC9B,MAC6B,KAAA,EACrBiD,EAAA+sB,eAAiBhjB,EAAOhN,OAChC,MACmC,KAAA,EAC3BiD,EAAAgtB,qBAAuBjjB,EAAOhN,OACtC,MACiC,KAAA,EACzBiD,EAAAosB,mBAAqBriB,EAAOhN,OACpC,MACkB,KAAA,EACViD,EAAAssB,MAAQviB,EAAOhN,OACvB,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoCK,EAAuByG,GAE9C,IAAzB9G,EAAQksB,cACR7rB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQksB,cAE3B,IAAlBlsB,EAAQqsB,OACRhsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqsB,QAEpB,IAAzBrsB,EAAQ8sB,cACRzsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ8sB,eAEjB,IAA3B9sB,EAAQ+sB,gBACR1sB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+sB,iBAEX,IAAjC/sB,EAAQgtB,sBACR3sB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgtB,uBAEb,IAA/BhtB,EAAQosB,oBACR/rB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQosB,qBAE1B,IAAlBpsB,EAAQssB,OACRjsB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQssB,OAChD,IAAIriB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCxlDQ,IAAA4sB,IAAAA,IAIRA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,YAAY,GAAZ,YARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,OAAO,GAAP,OAhBQA,IAAAA,IAAA,CAAA,GAqBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,UAAU,GAAV,UAxBQA,IAAAA,IAAA,CAAA,GA6BAC,IAAAA,IAIRA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,qBAAqB,GAArB,qBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,QAAQ,GAAR,QAZQA,IAAAA,IAAA,CAAA,GAkCAC,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,WAAW,GAAX,WAxBQA,IAAAA,IAAA,CAAA,GA6BAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,aAAa,GAAb,aAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,iBAAiB,GAAjB,iBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,aAAa,OAAb,aAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,4BAA4B,OAA5B,4BAIAA,EAAAA,oBAAoB,OAApB,oBAxHQA,IAAAA,IAAA,CAAA,GA6HAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,wBAAwB,OAAxB,wBA5BQA,IAAAA,IAAA,CAAA,GA4nBC,MAAAC,GAAiB,IA7lB9B,cAAkCvhB,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,IAEzD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE6tB,qBAAsB,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,wBAAyB,EAAGC,kBAAmB,EAAGC,gBAAiB,EAAGC,WAAY,EAAGC,aAAc,EAAGC,iBAAkB,EAAGC,cAAc,EAAOC,UAAW,EAAGC,UAAW,EAAGC,oBAAqB,EAAG3W,cAAe,EAAG4W,YAAY,EAAOC,mBAAmB,EAAOC,kBAAmB,EAAGvY,cAAe,EAAGwY,YAAa,EAAGC,UAAW,EAAGC,UAAU,EAAOC,qBAAsB,EAAGC,YAAa,EAAGC,cAAe,EAAGC,oBAAoB,EAAOC,UAAU,EAAOC,sBAAuB,EAAGC,OAAO,EAAOC,oBAAqB,EAAGC,YAAa,EAAGC,eAAgB,EAAGC,WAAY,EAAGC,qBAAsB,EAAGC,iBAAkB,EAAGC,YAAa,EAAGC,eAAgB,EAAGC,UAAU,EAAOC,eAAe,EAAOC,aAAc,EAAGC,YAAa,EAAGC,eAAgB,EAAGC,UAAU,EAAOC,eAAgB,EAAGC,mBAAoB,EAAGC,WAAY,EAAGC,kBAAmB,EAAGC,oBAAoB,EAAOC,iBAAkB,EAAGC,eAAgB,EAAGC,WAAY,EAAGC,uBAAwB,EAAGC,gBAAgB,EAAOC,QAAS,EAAG1f,YAAa,EAAG2f,eAAe,EAAOC,mBAAoB,EAAGC,KAAM,EAAGC,UAAW,EAAGC,WAAY,EAAGC,UAAW,EAAGC,aAAc,EAAGC,YAAY,EAAOC,KAAM,EAAGC,UAAW,EAAGC,iBAAkB,EAAGC,oBAAqB,EAAGC,SAAU,EAAGC,iBAAkB,EAAGC,aAAa,EAAOC,iBAAkB,EAAGC,WAAY,EAAGC,aAAa,EAAOC,UAAW,EAAGC,UAAW,EAAGC,eAAgB,EAAG5d,kBAAmB,EAAG6d,UAAW,EAAGC,YAAY,EAAOC,aAAc,EAAGC,iBAAkB,EAAGC,WAAW,GAIx/C,OAHArvB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAA6tB,qBAAuB9jB,EAAOvN,QACtC,MACyB,KAAA,EACjBwD,EAAA8tB,YAAc/jB,EAAOvN,QAC7B,MACiC,KAAA,EACzBwD,EAAA+tB,mBAAqBhkB,EAAOvN,QACpC,MACwC,KAAA,EAChCwD,EAAAguB,wBAA0BjkB,EAAOvN,QACzC,MACiC,KAAA,EACzBwD,EAAAiuB,kBAAoBlkB,EAAOvN,QACnC,MAC+B,KAAA,EACvBwD,EAAAkuB,gBAAkBnkB,EAAOvN,QACjC,MACyB,KAAA,EACjBwD,EAAAmuB,WAAapkB,EAAOvN,QAC5B,MAC2B,KAAA,EACnBwD,EAAAouB,aAAerkB,EAAOvN,QAC9B,MAC+B,KAAA,EACvBwD,EAAAquB,iBAAmBtkB,EAAOvN,QAClC,MAC0B,KAAA,GAClBwD,EAAAsuB,aAAevkB,EAAOhN,OAC9B,MACwB,KAAA,GAChBiD,EAAAuuB,UAAYxkB,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAwuB,UAAYzkB,EAAOvN,QAC3B,MACkC,KAAA,GAC1BwD,EAAAyuB,oBAAsB1kB,EAAOvN,QACrC,MAC4B,KAAA,GACpBwD,EAAA8X,cAAgB/N,EAAOvN,QAC/B,MACwB,KAAA,GAChBwD,EAAA0uB,WAAa3kB,EAAOhN,OAC5B,MACgC,KAAA,GACxBiD,EAAA2uB,kBAAoB5kB,EAAOhN,OACnC,MACgC,KAAA,GACxBiD,EAAA4uB,kBAAoB7kB,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAAqW,cAAgBtM,EAAOvN,QAC/B,MACyB,KAAA,GACjBwD,EAAA6uB,YAAc9kB,EAAOvN,QAC7B,MACuB,KAAA,GACfwD,EAAA8uB,UAAY/kB,EAAOvN,QAC3B,MACsB,KAAA,GACdwD,EAAA+uB,SAAWhlB,EAAOhN,OAC1B,MACqC,KAAA,GAC7BiD,EAAAgvB,qBAAuBjlB,EAAOvN,QACtC,MACyB,KAAA,GACjBwD,EAAAivB,YAAcllB,EAAOvN,QAC7B,MAC4B,KAAA,GACpBwD,EAAAkvB,cAAgBnlB,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAAmvB,mBAAqBplB,EAAOhN,OACpC,MACqB,KAAA,GACbiD,EAAAovB,SAAWrlB,EAAOhN,OAC1B,MACoC,KAAA,GAC5BiD,EAAAqvB,sBAAwBtlB,EAAOvN,QACvC,MACkB,KAAA,GACVwD,EAAAsvB,MAAQvlB,EAAOhN,OACvB,MACkC,KAAA,GAC1BiD,EAAAuvB,oBAAsBxlB,EAAOvN,QACrC,MAC0B,KAAA,GAClBwD,EAAAwvB,YAAczlB,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAAyvB,eAAiB1lB,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAA0vB,WAAa3lB,EAAOvN,QAC5B,MACoC,KAAA,GAC5BwD,EAAA2vB,qBAAuB5lB,EAAOvN,QACtC,MAC+B,KAAA,GACvBwD,EAAA4vB,iBAAmB7lB,EAAOvN,QAClC,MAC0B,KAAA,GAClBwD,EAAA6vB,YAAc9lB,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAA8vB,eAAiB/lB,EAAOvN,QAChC,MACsB,KAAA,GACdwD,EAAA+vB,SAAWhmB,EAAOhN,OAC1B,MAC2B,KAAA,GACnBiD,EAAAgwB,cAAgBjmB,EAAOhN,OAC/B,MAC2B,KAAA,GACnBiD,EAAAiwB,aAAelmB,EAAOvN,QAC9B,MAC0B,KAAA,GAClBwD,EAAAkwB,YAAcnmB,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAAmwB,eAAiBpmB,EAAOvN,QAChC,MACsB,KAAA,GACdwD,EAAAowB,SAAWrmB,EAAOhN,OAC1B,MAC6B,KAAA,GACrBiD,EAAAqwB,eAAiBtmB,EAAOvN,QAChC,MACiC,KAAA,GACzBwD,EAAAswB,mBAAqBvmB,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAAuwB,WAAaxmB,EAAOvN,QAC5B,MACgC,KAAA,GACxBwD,EAAAwwB,kBAAoBzmB,EAAOvN,QACnC,MACgC,KAAA,GACxBwD,EAAAywB,mBAAqB1mB,EAAOhN,OACpC,MAC+B,KAAA,GACvBiD,EAAA0wB,iBAAmB3mB,EAAOvN,QAClC,MAC6B,KAAA,GACrBwD,EAAA2wB,eAAiB5mB,EAAOvN,QAChC,MACwB,KAAA,GAChBwD,EAAA4wB,WAAa7mB,EAAOvN,QAC5B,MACsC,KAAA,GAC9BwD,EAAA6wB,uBAAyB9mB,EAAOvN,QACxC,MAC4B,KAAA,GACpBwD,EAAA8wB,eAAiB/mB,EAAOhN,OAChC,MACqB,KAAA,GACbiD,EAAA+wB,QAAUhnB,EAAOvN,QACzB,MAC0B,KAAA,GAClBwD,EAAAqR,YAActH,EAAOvN,QAC7B,MAC0B,KAAA,GAClBwD,EAAAgxB,cAAgBjnB,EAAOhN,OAC/B,MACkC,KAAA,GAC1BiD,EAAAixB,mBAAqBlnB,EAAOvN,QACpC,MACkB,KAAA,GACVwD,EAAAkxB,KAAOnnB,EAAOvN,QACtB,MACuB,KAAA,GACfwD,EAAAmxB,UAAYpnB,EAAOvN,QAC3B,MACyB,KAAA,GACjBwD,EAAAoxB,WAAarnB,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAAqxB,UAAYtnB,EAAOvN,QAC3B,MAC2B,KAAA,GACnBwD,EAAAsxB,aAAevnB,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAuxB,WAAaxnB,EAAOhN,OAC5B,MACkB,KAAA,GACViD,EAAAwxB,KAAOznB,EAAOvN,QACtB,MACuB,KAAA,GACfwD,EAAAyxB,UAAY1nB,EAAOvN,QAC3B,MAC+B,KAAA,GACvBwD,EAAA0xB,iBAAmB3nB,EAAOvN,QAClC,MACmC,KAAA,GAC3BwD,EAAA2xB,oBAAsB5nB,EAAOvN,QACrC,MACsB,KAAA,GACdwD,EAAA4xB,SAAW7nB,EAAOvN,QAC1B,MAC+B,KAAA,GACvBwD,EAAA6xB,iBAAmB9nB,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAA8xB,YAAc/nB,EAAOhN,OAC7B,MAC+B,KAAA,GACvBiD,EAAA+xB,iBAAmBhoB,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAAgyB,WAAajoB,EAAOvN,QAC5B,MACwB,KAAA,GAChBwD,EAAAiyB,YAAcloB,EAAOhN,OAC7B,MACwB,KAAA,GAChBiD,EAAAkyB,UAAYnoB,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAmyB,UAAYpoB,EAAOvN,QAC3B,MAC8B,KAAA,GACtBwD,EAAAoyB,eAAiBroB,EAAOvN,QAChC,MACiC,KAAA,GACzBwD,EAAAwU,kBAAoBzK,EAAOvN,QACnC,MACuB,KAAA,GACfwD,EAAAqyB,UAAYtoB,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAAsyB,WAAavoB,EAAOhN,OAC5B,MAC2B,KAAA,GACnBiD,EAAAuyB,aAAexoB,EAAOvN,QAC9B,MACgC,KAAA,GACxBwD,EAAAwyB,iBAAmBzoB,EAAOvN,QAClC,MACuB,KAAA,GACfwD,EAAAyyB,UAAY1oB,EAAOhN,OAC3B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE3B,IAAjC9G,EAAQ6tB,sBACRxtB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6tB,sBAErB,IAAxB7tB,EAAQ8tB,aACRztB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8tB,aAEd,IAA/B9tB,EAAQ+tB,oBACR1tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+tB,oBAET,IAApC/tB,EAAQguB,yBACR3tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQguB,yBAEf,IAA9BhuB,EAAQiuB,mBACR5tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiuB,mBAEjB,IAA5BjuB,EAAQkuB,iBACR7tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkuB,iBAEtB,IAAvBluB,EAAQmuB,YACR9tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmuB,YAEpB,IAAzBnuB,EAAQouB,cACR/tB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQouB,cAEhB,IAA7BpuB,EAAQquB,kBACRhuB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQquB,mBAEpB,IAAzBruB,EAAQsuB,cACRjuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsuB,cAEvB,IAAtBtuB,EAAQuuB,WACRluB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuuB,WAExB,IAAtBvuB,EAAQwuB,WACRnuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwuB,WAEd,IAAhCxuB,EAAQyuB,qBACRpuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyuB,qBAEpB,IAA1BzuB,EAAQ8X,eACRzX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8X,gBAEvB,IAAvB9X,EAAQ0uB,YACRruB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0uB,aAEf,IAA9B1uB,EAAQ2uB,mBACRtuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2uB,mBAEf,IAA9B3uB,EAAQ4uB,mBACRvuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4uB,mBAEpB,IAA1B5uB,EAAQqW,eACRhW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqW,eAEtB,IAAxBrW,EAAQ6uB,aACRxuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6uB,aAExB,IAAtB7uB,EAAQ8uB,WACRzuB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8uB,YAEzB,IAArB9uB,EAAQ+uB,UACR1uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+uB,UAEZ,IAAjC/uB,EAAQgvB,sBACR3uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgvB,sBAEtB,IAAxBhvB,EAAQivB,aACR5uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQivB,aAEpB,IAA1BjvB,EAAQkvB,eACR7uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkvB,gBAEf,IAA/BlvB,EAAQmvB,oBACR9uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmvB,qBAExB,IAArBnvB,EAAQovB,UACR/uB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQovB,UAEX,IAAlCpvB,EAAQqvB,uBACRhvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqvB,wBAE5B,IAAlBrvB,EAAQsvB,OACRjvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsvB,OAEb,IAAhCtvB,EAAQuvB,qBACRlvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuvB,qBAEtB,IAAxBvvB,EAAQwvB,aACRnvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwvB,aAEnB,IAA3BxvB,EAAQyvB,gBACRpvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyvB,gBAEvB,IAAvBzvB,EAAQ0vB,YACRrvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0vB,YAEb,IAAjC1vB,EAAQ2vB,sBACRtvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2vB,sBAEjB,IAA7B3vB,EAAQ4vB,kBACRvvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4vB,kBAEtB,IAAxB5vB,EAAQ6vB,aACRxvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6vB,aAEnB,IAA3B7vB,EAAQ8vB,gBACRzvB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8vB,iBAEzB,IAArB9vB,EAAQ+vB,UACR1vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+vB,WAEnB,IAA1B/vB,EAAQgwB,eACR3vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgwB,eAEpB,IAAzBhwB,EAAQiwB,cACR5vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiwB,cAEtB,IAAxBjwB,EAAQkwB,aACR7vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkwB,aAEnB,IAA3BlwB,EAAQmwB,gBACR9vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmwB,iBAEzB,IAArBnwB,EAAQowB,UACR/vB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQowB,UAElB,IAA3BpwB,EAAQqwB,gBACRhwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqwB,gBAEf,IAA/BrwB,EAAQswB,oBACRjwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQswB,oBAEvB,IAAvBtwB,EAAQuwB,YACRlwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuwB,YAEhB,IAA9BvwB,EAAQwwB,mBACRnwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwwB,oBAEf,IAA/BxwB,EAAQywB,oBACRpwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQywB,oBAEhB,IAA7BzwB,EAAQ0wB,kBACRrwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0wB,kBAEnB,IAA3B1wB,EAAQ2wB,gBACRtwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2wB,gBAEvB,IAAvB3wB,EAAQ4wB,YACRvwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4wB,YAEX,IAAnC5wB,EAAQ6wB,wBACRxwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6wB,yBAEnB,IAA3B7wB,EAAQ8wB,gBACRzwB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8wB,gBAEzB,IAApB9wB,EAAQ+wB,SACR1wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+wB,SAEtB,IAAxB/wB,EAAQqR,aACRhR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqR,cAEpB,IAA1BrR,EAAQgxB,eACR3wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQgxB,eAEd,IAA/BhxB,EAAQixB,oBACR5wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQixB,oBAE7B,IAAjBjxB,EAAQkxB,MACR7wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkxB,MAExB,IAAtBlxB,EAAQmxB,WACR9wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmxB,WAEvB,IAAvBnxB,EAAQoxB,YACR/wB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoxB,YAExB,IAAtBpxB,EAAQqxB,WACRhxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqxB,WAErB,IAAzBrxB,EAAQsxB,cACRjxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsxB,eAEvB,IAAvBtxB,EAAQuxB,YACRlxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuxB,YAE5B,IAAjBvxB,EAAQwxB,MACRnxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwxB,MAExB,IAAtBxxB,EAAQyxB,WACRpxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyxB,WAEjB,IAA7BzxB,EAAQ0xB,kBACRrxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0xB,kBAEd,IAAhC1xB,EAAQ2xB,qBACRtxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2xB,qBAEzB,IAArB3xB,EAAQ4xB,UACRvxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4xB,UAEjB,IAA7B5xB,EAAQ6xB,kBACRxxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6xB,mBAEtB,IAAxB7xB,EAAQ8xB,aACRzxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8xB,aAEhB,IAA7B9xB,EAAQ+xB,kBACR1xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+xB,kBAEvB,IAAvB/xB,EAAQgyB,YACR3xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgyB,aAEtB,IAAxBhyB,EAAQiyB,aACR5xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQiyB,aAEvB,IAAtBjyB,EAAQkyB,WACR7xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkyB,WAExB,IAAtBlyB,EAAQmyB,WACR9xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmyB,WAEnB,IAA3BnyB,EAAQoyB,gBACR/xB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoyB,gBAEhB,IAA9BpyB,EAAQwU,mBACRnU,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwU,mBAExB,IAAtBxU,EAAQqyB,WACRhyB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqyB,YAEvB,IAAvBryB,EAAQsyB,YACRjyB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsyB,YAEpB,IAAzBtyB,EAAQuyB,cACRlyB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuyB,cAEjB,IAA7BvyB,EAAQwyB,kBACRnyB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwyB,mBAExB,IAAtBxyB,EAAQyyB,WACRpyB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyyB,WACjD,IAAIxoB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAqyB,GAAU,IA3DvB,cAA2BrmB,EACvBrS,cACI8V,MAAM,gBAAiB,CACnB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMmuB,IACrD,CAAExyB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMopB,IACpD,CAAEztB,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMouB,KAE5D,CACAnoB,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgC+W,EAAA1V,KAAMiK,EAAStL,GAC5CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuC,KAAA,EAC/BqE,EAAAijB,SAAW0P,GAAiBvoB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACjG,MACoC,KAAA,EAC5BjjB,EAAAkjB,QAAU0K,GAAexjB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC9F,MACqC,KAAA,EAC7BljB,EAAA8G,QAAU8rB,GAAgBxoB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC/F,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkBK,EAAuByG,GAErD9G,EAAQijB,UACR0P,GAAiBvnB,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhHqC,EAAQkjB,SACR0K,GAAexiB,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8G,SACR8rB,GAAgBxnB,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAClH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA4GS,MAAAsyB,GAAmB,IArGhC,cAAoCtmB,EAChCrS,cACI8V,MAAM,yBAA0B,CAC5B,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gCAAiCyoB,KAClF,CAAE9sB,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+BAAgC4oB,KAChF,CAAEjtB,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuC2oB,KAC/F,CAAEhtB,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuC6oB,KAC/F,CAAEltB,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mCAAoC8oB,KACzF,CAAEntB,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,8BAA+B0oB,KAC9E,CAAE/sB,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE6yB,OAAQ,EAAGC,MAAO,EAAGC,aAAc,EAAGC,aAAc,EAAGC,YAAY,EAAOC,cAAc,EAAOC,UAAW,EAAGh0B,KAAM,EAAGi0B,aAAa,GAI9I,OAHAhwB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACyC+W,EAAA1V,KAAMiK,EAAStL,GACrDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4C,KAAA,EACpCqE,EAAA6yB,OAAS9oB,EAAOvN,QACxB,MAC0C,KAAA,EAClCwD,EAAA8yB,MAAQ/oB,EAAOvN,QACvB,MACyD,KAAA,EACjDwD,EAAA+yB,aAAehpB,EAAOvN,QAC9B,MACyD,KAAA,EACjDwD,EAAAgzB,aAAejpB,EAAOvN,QAC9B,MACuB,KAAA,EACfwD,EAAAizB,WAAalpB,EAAOhN,OAC5B,MAC0B,KAAA,EAClBiD,EAAAkzB,aAAenpB,EAAOhN,OAC9B,MACmD,KAAA,EAC3CiD,EAAAmzB,UAAYppB,EAAOvN,QAC3B,MACwC,KAAA,EAChCwD,EAAAb,KAAO4K,EAAOvN,QACtB,MACyB,KAAA,EACjBwD,EAAAozB,YAAcrpB,EAAOhN,OAC7B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA2BK,EAAuByG,GAE3C,IAAnB9G,EAAQ6yB,QACRxyB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6yB,QAE3B,IAAlB7yB,EAAQ8yB,OACRzyB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8yB,OAEpB,IAAzB9yB,EAAQ+yB,cACR1yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+yB,cAEpB,IAAzB/yB,EAAQgzB,cACR3yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgzB,eAEtB,IAAvBhzB,EAAQizB,YACR5yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQizB,aAEnB,IAAzBjzB,EAAQkzB,cACR7yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkzB,cAEtB,IAAtBlzB,EAAQmzB,WACR9yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmzB,WAE5B,IAAjBnzB,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,OAErB,IAAxBa,EAAQozB,aACR/yB,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQozB,aAChD,IAAInpB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAuyB,GAAkB,IA3D/B,cAAmCvmB,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,8BAA+BgpB,KAC/E,CAAErtB,GAAI,EAAGsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+BAAgC+oB,KACjF,CAAEptB,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oCAAqCipB,MAEnG,CACAhjB,OAAO/V,GACH,MAAMsL,EAAU,CAAEqzB,MAAO,EAAGC,OAAQ,EAAGC,YAAa,GAI7C,OAHAnwB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyC,KAAA,EACjCqE,EAAAqzB,MAAQtpB,EAAOvN,QACvB,MAC2C,KAAA,EACnCwD,EAAAszB,OAASvpB,EAAOvN,QACxB,MACqD,KAAA,EAC7CwD,EAAAuzB,YAAcxpB,EAAOvN,QAC7B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE3C,IAAlB9G,EAAQqzB,OACRhzB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqzB,OAE1B,IAAnBrzB,EAAQszB,QACRjzB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQszB,QAErB,IAAxBtzB,EAAQuzB,aACRlzB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQuzB,aACjD,IAAItpB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCxlCQ,IAAAmzB,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GA4GAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GAmBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,cAAc,GAAd,cAMAA,EAAAA,2BAA2B,GAA3B,2BAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,iBAAiB,IAAjB,iBAIAA,EAAAA,aAAa,IAAb,aAIAA,EAAAA,aAAa,IAAb,aAIAA,EAAAA,4BAA4B,IAA5B,4BA9DQA,IAAAA,IAAA,CAAA,GAmEAC,IAAAA,IAIRA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,QAAQ,GAAR,QAZQA,IAAAA,IAAA,CAAA,GA0CAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,4BAA4B,OAA5B,4BAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,4BAA4B,OAA5B,4BAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,aAAa,OAAb,aAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,wBAAwB,OAAxB,wBApHQA,IAAAA,IAAA,CAAA,GAyHAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,sBAAsB,OAAtB,sBAhCQA,IAAAA,IAAA,CAAA,GAqCAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,cAAc,GAAd,cAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,kBAAkB,GAAlB,kBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,mBAAmB,GAAnB,mBApBQA,IAAAA,IAAA,CAAA,GAyBAC,IAAAA,IAIRA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,kBAAkB,GAAlB,kBARQA,IAAAA,IAAA,CAAA,GAaAC,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,kBAAkB,GAAlB,kBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,mBAAmB,GAAnB,mBApBQA,IAAAA,IAAA,CAAA,GAyBAC,IAAAA,IAIRA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,4BAA4B,GAA5B,4BAIAA,EAAAA,qBAAqB,GAArB,qBAZQA,IAAAA,IAAA,CAAA,GAqmBC,MAAAC,GAAgB,IAtlB7B,cAAiChoB,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,IAEtD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEs0B,WAAY,EAAGC,WAAY,EAAGC,YAAa,EAAGC,iBAAkB,EAAGC,qBAAsB,EAAGC,cAAe,EAAGC,gBAAgB,EAAOC,cAAe,EAAGC,iBAAkB,EAAGC,cAAe,EAAGC,eAAgB,EAAGC,eAAe,EAAOC,iBAAkB,EAAGC,mBAAoB,EAAGC,iBAAkB,EAAGC,kBAAkB,EAAOC,kBAAmB,EAAGC,cAAe,EAAG/jB,cAAe,EAAGgkB,kBAAmB,EAAGC,YAAa,EAAGtkB,cAAc,EAAOukB,UAAW,EAAGC,UAAW,EAAGC,cAAc,EAAOC,gBAAiB,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,eAAgB,EAAGC,kBAAmB,EAAGC,kBAAmB,EAAGC,gBAAiB,EAAGC,iBAAkB,EAAGC,kBAAkB,EAAOnV,aAAc,EAAGwH,OAAQ,EAAGpJ,UAAW,EAAGgX,sBAAuB,EAAGC,eAAe,EAAOC,gBAAiB,EAAG3lB,cAAe,EAAGgW,cAAe,EAAG4P,YAAa,EAAGtO,wBAAyB,EAAG7P,WAAW,EAAOoe,aAAa,EAAOC,YAAa,EAAGC,UAAU,EAAOC,oBAAqB,EAAGC,gBAAiB,EAAGC,iBAAiB,EAAOC,aAAc,EAAGC,gBAAiB,EAAGC,aAAa,EAAOC,oBAAqB,EAAGC,aAAc,EAAGC,sBAAuB,EAAGC,aAAc,EAAGC,WAAY,EAAGC,oBAAqB,EAAGC,aAAc,EAAGC,YAAY,EAAOC,iBAAkB,EAAGC,kBAAmB,EAAGC,aAAc,EAAGC,WAAY,EAAGC,kBAAkB,EAAOC,YAAa,EAAGC,aAAc,EAAGC,gBAAiB,EAAGC,eAAe,EAAOC,eAAe,EAAOC,sBAAuB,EAAGC,kBAAmB,EAAGC,gBAAiB,EAAGC,mBAAoB,EAAGC,aAAa,EAAOC,oBAAqB,EAAGC,WAAY,EAAGC,SAAS,GAInjD,OAHAx1B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwB,KAAA,EAChBqE,EAAAs0B,WAAavqB,EAAOvN,QAC5B,MACwB,KAAA,EAChBwD,EAAAu0B,WAAaxqB,EAAOvN,QAC5B,MAC2B,KAAA,EACnBwD,EAAAw0B,YAAczqB,EAAOvN,QAC7B,MAC+B,KAAA,EACvBwD,EAAAy0B,iBAAmB1qB,EAAOvN,QAClC,MACmC,KAAA,EAC3BwD,EAAA00B,qBAAuB3qB,EAAOvN,QACtC,MAC2B,KAAA,EACnBwD,EAAA20B,cAAgB5qB,EAAOvN,QAC/B,MAC4B,KAAA,EACpBwD,EAAA40B,eAAiB7qB,EAAOhN,OAChC,MAC4B,KAAA,EACpBiD,EAAA60B,cAAgB9qB,EAAOvN,QAC/B,MACgC,KAAA,EACxBwD,EAAA80B,iBAAmB/qB,EAAOvN,QAClC,MAC8B,KAAA,GACtBwD,EAAA+0B,cAAgBhrB,EAAOvN,QAC/B,MAC6B,KAAA,GACrBwD,EAAAg1B,eAAiBjrB,EAAOvN,QAChC,MAC4B,KAAA,GACpBwD,EAAAi1B,cAAgBlrB,EAAOhN,OAC/B,MAC+B,KAAA,GACvBiD,EAAAk1B,iBAAmBnrB,EAAOvN,QAClC,MACiC,KAAA,GACzBwD,EAAAm1B,mBAAqBprB,EAAOvN,QACpC,MAC+B,KAAA,GACvBwD,EAAAo1B,iBAAmBrrB,EAAOvN,QAClC,MAC8B,KAAA,GACtBwD,EAAAq1B,iBAAmBtrB,EAAOhN,OAClC,MACkC,KAAA,GAC1BiD,EAAAs1B,kBAAoBvrB,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAAu1B,cAAgBxrB,EAAOvN,QAC/B,MAC4B,KAAA,GACpBwD,EAAAwR,cAAgBzH,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAAw1B,kBAAoBzrB,EAAOvN,QACnC,MAC0B,KAAA,GAClBwD,EAAAy1B,YAAc1rB,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAmR,aAAepH,EAAOhN,OAC9B,MACwB,KAAA,GAChBiD,EAAA01B,UAAY3rB,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAA21B,UAAY5rB,EAAOvN,QAC3B,MACyB,KAAA,GACjBwD,EAAA41B,aAAe7rB,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAA61B,gBAAkB9rB,EAAOvN,QACjC,MAC0B,KAAA,GAClBwD,EAAA81B,YAAc/rB,EAAOvN,QAC7B,MACiC,KAAA,GACzBwD,EAAA+1B,mBAAqBhsB,EAAOvN,QACpC,MAC6B,KAAA,GACrBwD,EAAAg2B,eAAiBjsB,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAAi2B,kBAAoBlsB,EAAOvN,QACnC,MACiC,KAAA,GACzBwD,EAAAk2B,kBAAoBnsB,EAAOvN,QACnC,MAC8B,KAAA,GACtBwD,EAAAm2B,gBAAkBpsB,EAAOvN,QACjC,MAC+B,KAAA,GACvBwD,EAAAo2B,iBAAmBrsB,EAAOvN,QAClC,MAC8B,KAAA,GACtBwD,EAAAq2B,iBAAmBtsB,EAAOhN,OAClC,MAC0B,KAAA,GAClBiD,EAAAkhB,aAAenX,EAAOvN,QAC9B,MACoB,KAAA,GACZwD,EAAA0oB,OAAS3e,EAAOvN,QACxB,MACuB,KAAA,GACfwD,EAAAsf,UAAYvV,EAAOvN,QAC3B,MACqC,KAAA,GAC7BwD,EAAAs2B,sBAAwBvsB,EAAOvN,QACvC,MAC2B,KAAA,GACnBwD,EAAAu2B,cAAgBxsB,EAAOhN,OAC/B,MAC8B,KAAA,GACtBiD,EAAAw2B,gBAAkBzsB,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAA6Q,cAAgB9G,EAAOvN,QAC/B,MAC4B,KAAA,GACpBwD,EAAA6mB,cAAgB9c,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAAy2B,YAAc1sB,EAAOvN,QAC7B,MACuC,KAAA,GAC/BwD,EAAAmoB,wBAA0Bpe,EAAOvN,QACzC,MACuB,KAAA,GACfwD,EAAAsY,UAAYvO,EAAOhN,OAC3B,MACwB,KAAA,GAChBiD,EAAA02B,YAAc3sB,EAAOhN,OAC7B,MAC0B,KAAA,GAClBiD,EAAA22B,YAAc5sB,EAAOvN,QAC7B,MACsB,KAAA,GACdwD,EAAA42B,SAAW7sB,EAAOhN,OAC1B,MACkC,KAAA,GAC1BiD,EAAA62B,oBAAsB9sB,EAAOvN,QACrC,MAC8B,KAAA,GACtBwD,EAAA82B,gBAAkB/sB,EAAOvN,QACjC,MAC6B,KAAA,GACrBwD,EAAA+2B,gBAAkBhtB,EAAOhN,OACjC,MAC2B,KAAA,GACnBiD,EAAAg3B,aAAejtB,EAAOvN,QAC9B,MAC8B,KAAA,GACtBwD,EAAAi3B,gBAAkBltB,EAAOvN,QACjC,MACyB,KAAA,GACjBwD,EAAAk3B,YAAcntB,EAAOhN,OAC7B,MACmC,KAAA,GAC3BiD,EAAAm3B,oBAAsBptB,EAAOvN,QACrC,MAC2B,KAAA,GACnBwD,EAAAo3B,aAAertB,EAAOvN,QAC9B,MACoC,KAAA,GAC5BwD,EAAAq3B,sBAAwBttB,EAAOvN,QACvC,MAC2B,KAAA,GACnBwD,EAAAs3B,aAAevtB,EAAOvN,QAC9B,MACyB,KAAA,GACjBwD,EAAAu3B,WAAaxtB,EAAOvN,QAC5B,MACmC,KAAA,GAC3BwD,EAAAw3B,oBAAsBztB,EAAOvN,QACrC,MAC2B,KAAA,GACnBwD,EAAAy3B,aAAe1tB,EAAOvN,QAC9B,MACwB,KAAA,GAChBwD,EAAA03B,WAAa3tB,EAAOhN,OAC5B,MAC+B,KAAA,GACvBiD,EAAA23B,iBAAmB5tB,EAAOvN,QAClC,MACgC,KAAA,GACxBwD,EAAA43B,kBAAoB7tB,EAAOvN,QACnC,MAC2B,KAAA,GACnBwD,EAAA63B,aAAe9tB,EAAOvN,QAC9B,MACyB,KAAA,GACjBwD,EAAA83B,WAAa/tB,EAAOvN,QAC5B,MAC8B,KAAA,GACtBwD,EAAA+3B,iBAAmBhuB,EAAOhN,OAClC,MAC0B,KAAA,GAClBiD,EAAAg4B,YAAcjuB,EAAOvN,QAC7B,MAC0B,KAAA,GAClBwD,EAAAi4B,aAAeluB,EAAOvN,QAC9B,MAC8B,KAAA,GACtBwD,EAAAk4B,gBAAkBnuB,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAAm4B,cAAgBpuB,EAAOhN,OAC/B,MAC2B,KAAA,GACnBiD,EAAAo4B,cAAgBruB,EAAOhN,OAC/B,MACsC,KAAA,GAC9BiD,EAAAq4B,sBAAwBtuB,EAAOvN,QACvC,MACiC,KAAA,GACzBwD,EAAAs4B,kBAAoBvuB,EAAOvN,QACnC,MAC8B,KAAA,GACtBwD,EAAAu4B,gBAAkBxuB,EAAOvN,QACjC,MACiC,KAAA,GACzBwD,EAAAw4B,mBAAqBzuB,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAAy4B,YAAc1uB,EAAOhN,OAC7B,MACmC,KAAA,GAC3BiD,EAAA04B,oBAAsB3uB,EAAOvN,QACrC,MACyB,KAAA,GACjBwD,EAAA24B,WAAa5uB,EAAOvN,QAC5B,MACoB,KAAA,GACZwD,EAAA44B,QAAU7uB,EAAOhN,OACzB,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAEpC,IAAvB9G,EAAQs0B,YACRj0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQs0B,YAEtB,IAAvBt0B,EAAQu0B,YACRl0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQu0B,YAErB,IAAxBv0B,EAAQw0B,aACRn0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQw0B,aAEhB,IAA7Bx0B,EAAQy0B,kBACRp0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQy0B,kBAEZ,IAAjCz0B,EAAQ00B,sBACRr0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ00B,sBAEnB,IAA1B10B,EAAQ20B,eACRt0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ20B,gBAElB,IAA3B30B,EAAQ40B,gBACRv0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ40B,gBAElB,IAA1B50B,EAAQ60B,eACRx0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ60B,eAEhB,IAA7B70B,EAAQ80B,kBACRz0B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ80B,kBAEnB,IAA1B90B,EAAQ+0B,eACR10B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+0B,eAEnB,IAA3B/0B,EAAQg1B,gBACR30B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg1B,iBAEpB,IAA1Bh1B,EAAQi1B,eACR50B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQi1B,eAEhB,IAA7Bj1B,EAAQk1B,kBACR70B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk1B,kBAEf,IAA/Bl1B,EAAQm1B,oBACR90B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm1B,oBAEjB,IAA7Bn1B,EAAQo1B,kBACR/0B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo1B,mBAEjB,IAA7Bp1B,EAAQq1B,kBACRh1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQq1B,kBAEf,IAA9Br1B,EAAQs1B,mBACRj1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs1B,mBAEpB,IAA1Bt1B,EAAQu1B,eACRl1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu1B,eAEpB,IAA1Bv1B,EAAQwR,eACRnR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwR,eAEhB,IAA9BxR,EAAQw1B,mBACRn1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw1B,mBAEtB,IAAxBx1B,EAAQy1B,aACRp1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy1B,cAErB,IAAzBz1B,EAAQmR,cACR9Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmR,cAEvB,IAAtBnR,EAAQ01B,WACRr1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ01B,WAExB,IAAtB11B,EAAQ21B,WACRt1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ21B,YAErB,IAAzB31B,EAAQ41B,cACRv1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ41B,cAEjB,IAA5B51B,EAAQ61B,iBACRx1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ61B,iBAEtB,IAAxB71B,EAAQ81B,aACRz1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ81B,aAEf,IAA/B91B,EAAQ+1B,oBACR11B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+1B,oBAEnB,IAA3B/1B,EAAQg2B,gBACR31B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg2B,gBAEhB,IAA9Bh2B,EAAQi2B,mBACR51B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi2B,mBAEhB,IAA9Bj2B,EAAQk2B,mBACR71B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk2B,mBAElB,IAA5Bl2B,EAAQm2B,iBACR91B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm2B,iBAEjB,IAA7Bn2B,EAAQo2B,kBACR/1B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo2B,mBAEjB,IAA7Bp2B,EAAQq2B,kBACRh2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQq2B,kBAEpB,IAAzBr2B,EAAQkhB,cACR7gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkhB,cAE3B,IAAnBlhB,EAAQ0oB,QACRroB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0oB,QAExB,IAAtB1oB,EAAQsf,WACRjf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsf,WAEZ,IAAlCtf,EAAQs2B,uBACRj2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs2B,wBAEpB,IAA1Bt2B,EAAQu2B,eACRl2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQu2B,eAEjB,IAA5Bv2B,EAAQw2B,iBACRn2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw2B,iBAEpB,IAA1Bx2B,EAAQ6Q,eACRxQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6Q,eAEpB,IAA1B7Q,EAAQ6mB,eACRxmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6mB,eAEtB,IAAxB7mB,EAAQy2B,aACRp2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy2B,aAEV,IAApCz2B,EAAQmoB,yBACR9nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmoB,0BAExB,IAAtBnoB,EAAQsY,WACRjY,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsY,YAErB,IAAxBtY,EAAQ02B,aACRr2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ02B,aAErB,IAAxB12B,EAAQ22B,aACRt2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ22B,cAEzB,IAArB32B,EAAQ42B,UACRv2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ42B,UAEb,IAAhC52B,EAAQ62B,qBACRx2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ62B,qBAElB,IAA5B72B,EAAQ82B,iBACRz2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ82B,kBAElB,IAA5B92B,EAAQ+2B,iBACR12B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+2B,iBAEpB,IAAzB/2B,EAAQg3B,cACR32B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg3B,cAElB,IAA5Bh3B,EAAQi3B,iBACR52B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi3B,kBAEtB,IAAxBj3B,EAAQk3B,aACR72B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQk3B,aAEb,IAAhCl3B,EAAQm3B,qBACR92B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm3B,qBAErB,IAAzBn3B,EAAQo3B,cACR/2B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo3B,cAEZ,IAAlCp3B,EAAQq3B,uBACRh3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq3B,uBAErB,IAAzBr3B,EAAQs3B,cACRj3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs3B,cAEvB,IAAvBt3B,EAAQu3B,YACRl3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu3B,YAEd,IAAhCv3B,EAAQw3B,qBACRn3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw3B,qBAErB,IAAzBx3B,EAAQy3B,cACRp3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy3B,eAEvB,IAAvBz3B,EAAQ03B,YACRr3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ03B,YAEhB,IAA7B13B,EAAQ23B,kBACRt3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ23B,kBAEhB,IAA9B33B,EAAQ43B,mBACRv3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ43B,mBAErB,IAAzB53B,EAAQ63B,cACRx3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ63B,cAEvB,IAAvB73B,EAAQ83B,YACRz3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ83B,aAEjB,IAA7B93B,EAAQ+3B,kBACR13B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+3B,kBAErB,IAAxB/3B,EAAQg4B,aACR33B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg4B,aAErB,IAAzBh4B,EAAQi4B,cACR53B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi4B,cAElB,IAA5Bj4B,EAAQk4B,iBACR73B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk4B,kBAEpB,IAA1Bl4B,EAAQm4B,eACR93B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQm4B,gBAEnB,IAA1Bn4B,EAAQo4B,eACR/3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQo4B,eAEX,IAAlCp4B,EAAQq4B,uBACRh4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq4B,uBAEhB,IAA9Br4B,EAAQs4B,mBACRj4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs4B,mBAElB,IAA5Bt4B,EAAQu4B,iBACRl4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu4B,iBAEf,IAA/Bv4B,EAAQw4B,oBACRn4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw4B,qBAEtB,IAAxBx4B,EAAQy4B,aACRp4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQy4B,aAEb,IAAhCz4B,EAAQ04B,qBACRr4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ04B,qBAEvB,IAAvB14B,EAAQ24B,YACRt4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ24B,aAE1B,IAApB34B,EAAQ44B,SACRv4B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ44B,SACjD,IAAI3uB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA4GS,MAAAw4B,GAAe,IArG5B,cAAgCxsB,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoBsvB,KACpE,CAAE3zB,GAAI,EAAGsC,KAAM,MAAOM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBuvB,KAChE,CAAE5zB,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kBAAmBwvB,KAClE,CAAE7zB,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoByvB,KACpE,CAAE9zB,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,+BAAgCM,KAAM,SAAUyB,EAAG,GAClE,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE84B,MAAO,EAAGC,IAAK,EAAGC,KAAM,EAAGC,MAAO,EAAGC,aAAa,EAAOC,kBAAkB,EAAOC,0BAA0B,EAAOC,cAAc,EAAOC,YAAY,GAI/J,OAHAl2B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC8B,KAAA,EACtBqE,EAAA84B,MAAQ/uB,EAAOvN,QACvB,MAC0B,KAAA,EAClBwD,EAAA+4B,IAAMhvB,EAAOvN,QACrB,MAC4B,KAAA,EACpBwD,EAAAg5B,KAAOjvB,EAAOvN,QACtB,MAC8B,KAAA,EACtBwD,EAAAi5B,MAAQlvB,EAAOvN,QACvB,MAC0B,KAAA,EAClBwD,EAAAk5B,YAAcnvB,EAAOhN,OAC7B,MAC+B,KAAA,EACvBiD,EAAAm5B,iBAAmBpvB,EAAOhN,OAClC,MACyC,KAAA,EACjCiD,EAAAo5B,yBAA2BrvB,EAAOhN,OAC1C,MAC0B,KAAA,EAClBiD,EAAAq5B,aAAetvB,EAAOhN,OAC9B,MACyB,KAAA,EACjBiD,EAAAs5B,WAAavvB,EAAOhN,OAC5B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAExC,IAAlB9G,EAAQ84B,OACRz4B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ84B,OAE7B,IAAhB94B,EAAQ+4B,KACR14B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+4B,KAE5B,IAAjB/4B,EAAQg5B,MACR34B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQg5B,MAE3B,IAAlBh5B,EAAQi5B,OACR54B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQi5B,QAErB,IAAxBj5B,EAAQk5B,aACR74B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQk5B,cAEf,IAA7Bl5B,EAAQm5B,kBACR94B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQm5B,mBAEP,IAArCn5B,EAAQo5B,0BACR/4B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQo5B,2BAEnB,IAAzBp5B,EAAQq5B,cACRh5B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQq5B,eAErB,IAAvBr5B,EAAQs5B,YACRj5B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQs5B,YAChD,IAAIrvB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAk5B,GAAkB,IA3D/B,cAAmCltB,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMg1B,IACrD,CAAEr5B,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM6vB,IACpD,CAAEl0B,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMi1B,KAE5D,CACAhvB,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC+C,KAAA,EACvCqE,EAAAijB,SAAWuW,GAAyBpvB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACzG,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAUmR,GAAcjqB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MAC6C,KAAA,EACrCljB,EAAA8G,QAAU2yB,GAAwBrvB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACvG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7D9G,EAAQijB,UACRuW,GAAyBpuB,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExHqC,EAAQkjB,SACRmR,GAAcjpB,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACR2yB,GAAwBruB,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC1H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAiIS,MAAAm5B,GAA2B,IA1HxC,cAA4CntB,EACxCrS,cACI8V,MAAM,iCAAkC,CACpC,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMq0B,IACnD,CAAE14B,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,8CAA+CgvB,KAC9F,CAAErzB,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEb,KAAM,EAAGu6B,qBAAqB,EAAOC,aAAa,EAAOC,aAAc,EAAGC,mBAAmB,EAAOC,cAAc,EAAOC,aAAc,EAAGC,qBAAqB,EAAOC,eAAe,EAAOC,iBAAiB,EAAOC,YAAa,GAI5O,OAHA/2B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiD+W,EAAA1V,KAAMiK,EAAStL,GAC7DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAAo6B,OAASvB,GAAazuB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQo6B,QAC3F,MACwD,KAAA,EAChDp6B,EAAAb,KAAO4K,EAAOvN,QACtB,MACkC,KAAA,EAC1BwD,EAAA05B,oBAAsB3vB,EAAOhN,OACrC,MAC0B,KAAA,EAClBiD,EAAA25B,YAAc5vB,EAAOhN,OAC7B,MAC8B,KAAA,EACtBiD,EAAA45B,aAAe7vB,EAAOxM,SAC9B,MACgC,KAAA,EACxByC,EAAA65B,kBAAoB9vB,EAAOhN,OACnC,MAC4B,KAAA,GACpBiD,EAAA85B,aAAe/vB,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAA+5B,aAAehwB,EAAOxM,SAC9B,MACiC,KAAA,EACzByC,EAAAg6B,oBAAsBjwB,EAAOhN,OACrC,MAC4B,KAAA,EACpBiD,EAAAi6B,cAAgBlwB,EAAOhN,OAC/B,MAC6B,KAAA,EACrBiD,EAAAk6B,gBAAkBnwB,EAAOhN,OACjC,MAC6B,KAAA,GACrBiD,EAAAm6B,YAAcpwB,EAAOxM,SAC7B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmCK,EAAuByG,GAEtE9G,EAAQo6B,QACRvB,GAAaztB,oBAAoBpL,EAAQo6B,OAAQ/5B,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzF,IAAjBqC,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,OAEb,IAAhCa,EAAQ05B,qBACRr5B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ05B,sBAEpB,IAAxB15B,EAAQ25B,aACRt5B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ25B,aAEnB,IAAzB35B,EAAQ45B,cACRv5B,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ45B,eAEf,IAA9B55B,EAAQ65B,mBACRx5B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ65B,oBAEnB,IAAzB75B,EAAQ85B,cACRz5B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ85B,cAEpB,IAAzB95B,EAAQ+5B,cACR15B,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ+5B,eAEd,IAAhC/5B,EAAQg6B,qBACR35B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQg6B,sBAElB,IAA1Bh6B,EAAQi6B,eACR55B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQi6B,gBAEhB,IAA5Bj6B,EAAQk6B,iBACR75B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQk6B,iBAEpB,IAAxBl6B,EAAQm6B,aACR95B,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQm6B,aAClD,IAAIlwB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAo5B,GAA0B,IApDvC,cAA2CptB,EACvCrS,cACI8V,MAAM,gCAAiC,CACnC,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsB0vB,KACvE,CAAE/zB,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,IAEvD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEq6B,OAAQ,EAAGvoB,WAAW,GAIjC,OAHA1O,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgD+W,EAAA1V,KAAMiK,EAAStL,GAC5DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAAq6B,OAAStwB,EAAOvN,QACxB,MACsB,KAAA,EACdwD,EAAA8R,UAAY/H,EAAOhN,OAC3B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkCK,EAAuByG,GAElD,IAAnB9G,EAAQq6B,QACRh6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq6B,SAEvB,IAAtBr6B,EAAQ8R,WACRzR,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ8R,WAChD,IAAI7H,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAi6B,GAAoB,IA3DjC,cAAqCjuB,EACjCrS,cACI8V,MAAM,0BAA2B,CAC7B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM+1B,IACrD,CAAEp6B,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM6vB,IACpD,CAAEl0B,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMg2B,KAE5D,CACA/vB,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC0C+W,EAAA1V,KAAMiK,EAAStL,GACtDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiD,KAAA,EACzCqE,EAAAijB,SAAWsX,GAA2BnwB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC3G,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAUmR,GAAcjqB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MAC+C,KAAA,EACvCljB,EAAA8G,QAAU0zB,GAA0BpwB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACzG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA4BK,EAAuByG,GAE/D9G,EAAQijB,UACRsX,GAA2BnvB,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1HqC,EAAQkjB,SACRmR,GAAcjpB,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACR0zB,GAA0BpvB,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAwIS,MAAAk6B,GAA6B,IAjI1C,cAA8CluB,EAC1CrS,cACI8V,MAAM,mCAAoC,CACtC,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMq0B,IACnD,CAAE14B,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gDAAiDivB,KACzG,CAAEtzB,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,IAC5D,CAAElc,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,kCAAmCM,KAAM,SAAUyB,EAAG,GACrE,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gDAAiDmvB,KAC1G,CAAExzB,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,IAE9D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEy6B,aAAc,EAAGC,gBAAgB,EAAOC,oBAAoB,EAAOC,wBAAyB,EAAGC,eAAgB,EAAGC,sBAAuB,EAAGC,6BAA8B,EAAGC,iBAAiB,EAAOC,aAAc,EAAGC,oBAAqB,EAAGC,cAAe,GAIxQ,OAHA/3B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmD+W,EAAA1V,KAAMiK,EAAStL,GAC/DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAAo6B,OAASvB,GAAazuB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQo6B,QAC3F,MACmE,KAAA,EAC3Dp6B,EAAAy6B,aAAe1wB,EAAOvN,QAC9B,MAC4C,KAAA,EACpCwD,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MAC4B,KAAA,EACpB7sB,EAAA06B,eAAiB3wB,EAAOhN,OAChC,MACgC,KAAA,EACxBiD,EAAA26B,mBAAqB5wB,EAAOhN,OACpC,MACuC,KAAA,EAC/BiD,EAAA46B,wBAA0B7wB,EAAOvN,QACzC,MAC+B,KAAA,EACvBwD,EAAA66B,eAAiB9wB,EAAOxM,SAChC,MACsC,KAAA,EAC9ByC,EAAA86B,sBAAwB/wB,EAAOxM,SACvC,MAC8C,KAAA,EACtCyC,EAAA+6B,6BAA+BhxB,EAAOxM,SAC9C,MAC8B,KAAA,GACtByC,EAAAg7B,gBAAkBjxB,EAAOhN,OACjC,MACmE,KAAA,GAC3DiD,EAAAi7B,aAAelxB,EAAOvN,QAC9B,MACoC,KAAA,GAC5BwD,EAAAk7B,oBAAsBnxB,EAAOvN,QACrC,MAC8B,KAAA,GACtBwD,EAAAm7B,cAAgBpxB,EAAOxM,SAC/B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqCK,EAAuByG,GAExE9G,EAAQo6B,QACRvB,GAAaztB,oBAAoBpL,EAAQo6B,OAAQ/5B,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjF,IAAzBqC,EAAQy6B,cACRp6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQy6B,cAE7Cz6B,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,QAEzF,IAA3BqC,EAAQ06B,gBACRr6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ06B,iBAEb,IAA/B16B,EAAQ26B,oBACRt6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ26B,oBAER,IAApC36B,EAAQ46B,yBACRv6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ46B,yBAElB,IAA3B56B,EAAQ66B,gBACRx6B,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ66B,gBAEX,IAAlC76B,EAAQ86B,uBACRz6B,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ86B,uBAEJ,IAAzC96B,EAAQ+6B,8BACR16B,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ+6B,+BAEjB,IAA5B/6B,EAAQg7B,iBACR36B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQg7B,iBAEpB,IAAzBh7B,EAAQi7B,cACR56B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi7B,cAEd,IAAhCj7B,EAAQk7B,qBACR76B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk7B,qBAEpB,IAA1Bl7B,EAAQm7B,eACR96B,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQm7B,eAClD,IAAIlxB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAm6B,GAA4B,IAzEzC,cAA6CnuB,EACzCrS,cACI8V,MAAM,kCAAmC,CACrC,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsB0vB,KACvE,CAAE/zB,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uBAAwB4vB,KAC5E,CAAEj0B,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqB2vB,KACxE,CAAEh0B,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqB2vB,MAEhF,CACA1pB,OAAO/V,GACG,MAAAsL,EAAU,CAAEq6B,OAAQ,EAAGvoB,WAAW,EAAOspB,SAAU,EAAGC,QAAS,EAAGC,QAAS,GAI1E,OAHAl4B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkD+W,EAAA1V,KAAMiK,EAAStL,GAC9DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAAq6B,OAAStwB,EAAOvN,QACxB,MACsB,KAAA,EACdwD,EAAA8R,UAAY/H,EAAOhN,OAC3B,MACsC,KAAA,EAC9BiD,EAAAo7B,SAAWrxB,EAAOvN,QAC1B,MACkC,KAAA,EAC1BwD,EAAAq7B,QAAUtxB,EAAOvN,QACzB,MACkC,KAAA,EAC1BwD,EAAAs7B,QAAUvxB,EAAOvN,QACzB,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoCK,EAAuByG,GAEpD,IAAnB9G,EAAQq6B,QACRh6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq6B,SAEvB,IAAtBr6B,EAAQ8R,WACRzR,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ8R,WAEvB,IAArB9R,EAAQo7B,UACR/6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQo7B,UAEzB,IAApBp7B,EAAQq7B,SACRh7B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq7B,SAEzB,IAApBr7B,EAAQs7B,SACRj7B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQs7B,SACjD,IAAIrxB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCztDQ,IAAAk7B,IAAAA,IAIRA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,mBAAmB,GAAnB,mBAxBQA,IAAAA,IAAA,CAAA,GA6BAC,IAAAA,IAIRA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,wBAAwB,GAAxB,wBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,+BAA+B,GAA/B,+BAZQA,IAAAA,IAAA,CAAA,GA0CAC,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,cAAc,GAAd,cAhBQA,IAAAA,IAAA,CAAA,GAqBAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,aAAa,OAAb,aAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,eAAe,OAAf,eApHQA,IAAAA,IAAA,CAAA,GAyHAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,gBAAgB,OAAhB,gBA5BQA,IAAAA,IAAA,CAAA,GA0oBC,MAAAC,GAAe,IA3mB5B,cAAgCxvB,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GACjE,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE87B,mBAAoB,EAAGC,mBAAoB,EAAGC,OAAQ,EAAGC,aAAc,EAAGC,aAAc,EAAGC,iBAAkB,EAAGC,OAAO,EAAOC,oBAAqB,EAAGC,UAAW,EAAGC,YAAa,EAAGC,gBAAiB,EAAGC,YAAa,EAAGC,WAAW,EAAOC,mBAAoB,EAAGC,cAAe,EAAGC,SAAU,EAAGC,OAAQ,EAAGC,WAAY,EAAGC,UAAU,EAAOC,eAAgB,EAAGC,eAAgB,EAAGC,aAAc,EAAG/mB,eAAgB,EAAGgnB,UAAU,EAAOC,cAAe,EAAGC,cAAe,EAAGC,gBAAgB,EAAOC,cAAe,EAAGC,uBAAwB,EAAGtV,wBAAyB,EAAGuV,qBAAsB,EAAG3X,WAAY,EAAGuC,UAAW,EAAGqV,UAAW,EAAGC,SAAS,EAAOC,oBAAqB,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,kBAAmB,EAAGC,WAAY,EAAGtX,mBAAoB,EAAGuX,aAAa,EAAOC,aAAc,EAAGC,gBAAiB,EAAGC,cAAe,EAAGjU,SAAU,EAAGkU,gBAAgB,EAAOC,cAAe,EAAGC,uBAAwB,EAAGC,cAAe,EAAGC,gBAAiB,EAAGC,iBAAiB,EAAOloB,aAAc,EAAGmoB,cAAe,EAAGC,cAAc,EAAOC,kBAAmB,EAAGC,kBAAmB,EAAGC,YAAa,EAAGC,cAAe,EAAGC,YAAa,EAAGC,WAAY,EAAGC,YAAa,EAAGC,eAAe,EAAOC,eAAgB,EAAGC,MAAO,EAAGC,WAAY,EAAGC,eAAgB,EAAGC,iBAAkB,EAAGC,aAAa,EAAOC,WAAY,EAAGC,YAAY,EAAOC,iBAAkB,EAAGC,WAAY,EAAGC,kBAAmB,EAAGC,eAAe,EAAOC,WAAY,EAAGC,gBAAiB,EAAGC,OAAQ,EAAGC,kBAAmB,EAAGC,YAAY,EAAOC,aAAc,EAAGC,wBAAyB,EAAGC,aAAa,GAIjhD,OAHAr9B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAA87B,mBAAqB/xB,EAAOvN,QACpC,MACiC,KAAA,EACzBwD,EAAA+7B,mBAAqBhyB,EAAOvN,QACpC,MACoB,KAAA,EACZwD,EAAAg8B,OAASjyB,EAAOvN,QACxB,MAC0B,KAAA,EAClBwD,EAAAi8B,aAAelyB,EAAOvN,QAC9B,MAC2B,KAAA,EACnBwD,EAAAk8B,aAAenyB,EAAOvN,QAC9B,MAC+B,KAAA,EACvBwD,EAAAm8B,iBAAmBpyB,EAAOvN,QAClC,MACkB,KAAA,EACVwD,EAAAo8B,MAAQryB,EAAOhN,OACvB,MACmC,KAAA,EAC3BiD,EAAAq8B,oBAAsBtyB,EAAOvN,QACrC,MACuB,KAAA,EACfwD,EAAAs8B,UAAYvyB,EAAOvN,QAC3B,MAC0B,KAAA,GAClBwD,EAAAu8B,YAAcxyB,EAAOvN,QAC7B,MAC8B,KAAA,GACtBwD,EAAAw8B,gBAAkBzyB,EAAOvN,QACjC,MAC0B,KAAA,GAClBwD,EAAAy8B,YAAc1yB,EAAOvN,QAC7B,MACuB,KAAA,GACfwD,EAAA08B,UAAY3yB,EAAOhN,OAC3B,MACkC,KAAA,GAC1BiD,EAAA28B,mBAAqB5yB,EAAOvN,QACpC,MAC4B,KAAA,GACpBwD,EAAA48B,cAAgB7yB,EAAOvN,QAC/B,MACuB,KAAA,GACfwD,EAAA68B,SAAW9yB,EAAOvN,QAC1B,MACoB,KAAA,GACZwD,EAAA88B,OAAS/yB,EAAOvN,QACxB,MACyB,KAAA,GACjBwD,EAAA+8B,WAAahzB,EAAOvN,QAC5B,MACqB,KAAA,GACbwD,EAAAg9B,SAAWjzB,EAAOhN,OAC1B,MAC6B,KAAA,GACrBiD,EAAAi9B,eAAiBlzB,EAAOvN,QAChC,MAC6B,KAAA,GACrBwD,EAAAk9B,eAAiBnzB,EAAOvN,QAChC,MAC2B,KAAA,GACnBwD,EAAAm9B,aAAepzB,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAAoW,eAAiBrM,EAAOvN,QAChC,MACqB,KAAA,GACbwD,EAAAo9B,SAAWrzB,EAAOhN,OAC1B,MAC6B,KAAA,GACrBiD,EAAAq9B,cAAgBtzB,EAAOvN,QAC/B,MAC8B,KAAA,GACtBwD,EAAAs9B,cAAgBvzB,EAAOvN,QAC/B,MAC6B,KAAA,GACrBwD,EAAAu9B,eAAiBxzB,EAAOhN,OAChC,MAC4B,KAAA,GACpBiD,EAAAw9B,cAAgBzzB,EAAOvN,QAC/B,MACsC,KAAA,GAC9BwD,EAAAy9B,uBAAyB1zB,EAAOvN,QACxC,MACuC,KAAA,GAC/BwD,EAAAmoB,wBAA0Bpe,EAAOvN,QACzC,MACqC,KAAA,GAC7BwD,EAAA09B,qBAAuB3zB,EAAOvN,QACtC,MACwB,KAAA,GAChBwD,EAAA+lB,WAAahc,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAAsoB,UAAYve,EAAOvN,QAC3B,MACuB,KAAA,GACfwD,EAAA29B,UAAY5zB,EAAOvN,QAC3B,MACoB,KAAA,GACZwD,EAAA49B,QAAU7zB,EAAOhN,OACzB,MACmC,KAAA,GAC3BiD,EAAA69B,oBAAsB9zB,EAAOvN,QACrC,MAC2B,KAAA,GACnBwD,EAAA89B,aAAe/zB,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAA+9B,eAAiBh0B,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAAg+B,kBAAoBj0B,EAAOvN,QACnC,MACwB,KAAA,GAChBwD,EAAAi+B,WAAal0B,EAAOvN,QAC5B,MACiC,KAAA,GACzBwD,EAAA2mB,mBAAqB5c,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAAk+B,YAAcn0B,EAAOhN,OAC7B,MAC4B,KAAA,GACpBiD,EAAAm+B,aAAep0B,EAAOvN,QAC9B,MAC8B,KAAA,GACtBwD,EAAAo+B,gBAAkBr0B,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAAq+B,cAAgBt0B,EAAOvN,QAC/B,MACsB,KAAA,GACdwD,EAAAoqB,SAAWrgB,EAAOvN,QAC1B,MAC4B,KAAA,GACpBwD,EAAAs+B,eAAiBv0B,EAAOhN,OAChC,MAC6B,KAAA,GACrBiD,EAAAu+B,cAAgBx0B,EAAOvN,QAC/B,MACqC,KAAA,GAC7BwD,EAAAw+B,uBAAyBz0B,EAAOvN,QACxC,MAC4B,KAAA,GACpBwD,EAAAy+B,cAAgB10B,EAAOvN,QAC/B,MAC8B,KAAA,GACtBwD,EAAA0+B,gBAAkB30B,EAAOvN,QACjC,MAC6B,KAAA,GACrBwD,EAAA2+B,gBAAkB50B,EAAOhN,OACjC,MAC2B,KAAA,GACnBiD,EAAAyW,aAAe1M,EAAOvN,QAC9B,MAC8B,KAAA,GACtBwD,EAAA4+B,cAAgB70B,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAA6+B,aAAe90B,EAAOhN,OAC9B,MACgC,KAAA,GACxBiD,EAAA8+B,kBAAoB/0B,EAAOvN,QACnC,MACiC,KAAA,GACzBwD,EAAA++B,kBAAoBh1B,EAAOvN,QACnC,MACyB,KAAA,GACjBwD,EAAAg/B,YAAcj1B,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAAi/B,cAAgBl1B,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAAk/B,YAAcn1B,EAAOvN,QAC7B,MACwB,KAAA,GAChBwD,EAAAm/B,WAAap1B,EAAOvN,QAC5B,MACyB,KAAA,GACjBwD,EAAAo/B,YAAcr1B,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAq/B,cAAgBt1B,EAAOhN,OAC/B,MAC6B,KAAA,GACrBiD,EAAAs/B,eAAiBv1B,EAAOvN,QAChC,MACmB,KAAA,GACXwD,EAAAu/B,MAAQx1B,EAAOvN,QACvB,MACwB,KAAA,GAChBwD,EAAAw/B,WAAaz1B,EAAOvN,QAC5B,MAC6B,KAAA,GACrBwD,EAAAy/B,eAAiB11B,EAAOvN,QAChC,MAC+B,KAAA,GACvBwD,EAAA0/B,iBAAmB31B,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAA2/B,YAAc51B,EAAOhN,OAC7B,MACyB,KAAA,GACjBiD,EAAA4/B,WAAa71B,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAA6/B,WAAa91B,EAAOhN,OAC5B,MACgC,KAAA,GACxBiD,EAAA8/B,iBAAmB/1B,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAA+/B,WAAah2B,EAAOvN,QAC5B,MACgC,KAAA,GACxBwD,EAAAggC,kBAAoBj2B,EAAOvN,QACnC,MAC0B,KAAA,GAClBwD,EAAAigC,cAAgBl2B,EAAOhN,OAC/B,MACyB,KAAA,GACjBiD,EAAAkgC,WAAan2B,EAAOvN,QAC5B,MAC8B,KAAA,GACtBwD,EAAAmgC,gBAAkBp2B,EAAOvN,QACjC,MACoB,KAAA,GACZwD,EAAAogC,OAASr2B,EAAOvN,QACxB,MACiC,KAAA,GACzBwD,EAAAqgC,kBAAoBt2B,EAAOvN,QACnC,MACuB,KAAA,GACfwD,EAAAsgC,WAAav2B,EAAOhN,OAC5B,MAC2B,KAAA,GACnBiD,EAAAugC,aAAex2B,EAAOvN,QAC9B,MACwC,KAAA,GAChCwD,EAAAwgC,wBAA0Bz2B,EAAOvN,QACzC,MACyB,KAAA,GACjBwD,EAAAygC,YAAc12B,EAAOhN,OAC7B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE3B,IAA/B9G,EAAQ87B,oBACRz7B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ87B,oBAEd,IAA/B97B,EAAQ+7B,oBACR17B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+7B,oBAE1B,IAAnB/7B,EAAQg8B,QACR37B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQg8B,QAEpB,IAAzBh8B,EAAQi8B,cACR57B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQi8B,cAEpB,IAAzBj8B,EAAQk8B,cACR77B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQk8B,cAEhB,IAA7Bl8B,EAAQm8B,kBACR97B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQm8B,mBAE3B,IAAlBn8B,EAAQo8B,OACR/7B,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQo8B,OAEZ,IAAhCp8B,EAAQq8B,qBACRh8B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq8B,qBAEvB,IAAtBr8B,EAAQs8B,WACRj8B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQs8B,WAErB,IAAxBt8B,EAAQu8B,aACRl8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu8B,aAElB,IAA5Bv8B,EAAQw8B,iBACRn8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw8B,iBAEtB,IAAxBx8B,EAAQy8B,aACRp8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy8B,cAExB,IAAtBz8B,EAAQ08B,WACRr8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ08B,WAEd,IAA/B18B,EAAQ28B,oBACRt8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ28B,oBAEpB,IAA1B38B,EAAQ48B,eACRv8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ48B,eAEzB,IAArB58B,EAAQ68B,UACRx8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ68B,UAE3B,IAAnB78B,EAAQ88B,QACRz8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ88B,QAEvB,IAAvB98B,EAAQ+8B,YACR18B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+8B,aAEzB,IAArB/8B,EAAQg9B,UACR38B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQg9B,UAElB,IAA3Bh9B,EAAQi9B,gBACR58B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi9B,gBAEnB,IAA3Bj9B,EAAQk9B,gBACR78B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk9B,gBAErB,IAAzBl9B,EAAQm9B,cACR98B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm9B,cAEnB,IAA3Bn9B,EAAQoW,gBACR/V,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoW,iBAEzB,IAArBpW,EAAQo9B,UACR/8B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQo9B,UAEnB,IAA1Bp9B,EAAQq9B,eACRh9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq9B,eAEpB,IAA1Br9B,EAAQs9B,eACRj9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs9B,gBAEnB,IAA3Bt9B,EAAQu9B,gBACRl9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQu9B,gBAEnB,IAA1Bv9B,EAAQw9B,eACRn9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw9B,eAEX,IAAnCx9B,EAAQy9B,wBACRp9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy9B,wBAEV,IAApCz9B,EAAQmoB,yBACR9nB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmoB,yBAEb,IAAjCnoB,EAAQ09B,sBACRr9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ09B,sBAEvB,IAAvB19B,EAAQ+lB,YACR1lB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+lB,YAExB,IAAtB/lB,EAAQsoB,WACRjoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsoB,WAExB,IAAtBtoB,EAAQ29B,WACRt9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ29B,YAE1B,IAApB39B,EAAQ49B,SACRv9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ49B,SAEb,IAAhC59B,EAAQ69B,qBACRx9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ69B,qBAErB,IAAzB79B,EAAQ89B,cACRz9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ89B,cAEnB,IAA3B99B,EAAQ+9B,gBACR19B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+9B,gBAEhB,IAA9B/9B,EAAQg+B,mBACR39B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg+B,mBAEvB,IAAvBh+B,EAAQi+B,YACR59B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi+B,YAEf,IAA/Bj+B,EAAQ2mB,oBACRtmB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2mB,qBAEtB,IAAxB3mB,EAAQk+B,aACR79B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQk+B,aAEpB,IAAzBl+B,EAAQm+B,cACR99B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm+B,cAElB,IAA5Bn+B,EAAQo+B,iBACR/9B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo+B,iBAEpB,IAA1Bp+B,EAAQq+B,eACRh+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq+B,eAEzB,IAArBr+B,EAAQoqB,UACR/pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoqB,WAEnB,IAA3BpqB,EAAQs+B,gBACRj+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQs+B,gBAEnB,IAA1Bt+B,EAAQu+B,eACRl+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu+B,eAEX,IAAnCv+B,EAAQw+B,wBACRn+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw+B,wBAEpB,IAA1Bx+B,EAAQy+B,eACRp+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy+B,eAElB,IAA5Bz+B,EAAQ0+B,iBACRr+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0+B,kBAElB,IAA5B1+B,EAAQ2+B,iBACRt+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2+B,iBAEpB,IAAzB3+B,EAAQyW,cACRpW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyW,cAEpB,IAA1BzW,EAAQ4+B,eACRv+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4+B,gBAErB,IAAzB5+B,EAAQ6+B,cACRx+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6+B,cAEf,IAA9B7+B,EAAQ8+B,mBACRz+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8+B,mBAEhB,IAA9B9+B,EAAQ++B,mBACR1+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ++B,mBAEtB,IAAxB/+B,EAAQg/B,aACR3+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg/B,aAEpB,IAA1Bh/B,EAAQi/B,eACR5+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi/B,eAEtB,IAAxBj/B,EAAQk/B,aACR7+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk/B,aAEvB,IAAvBl/B,EAAQm/B,YACR9+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm/B,YAEtB,IAAxBn/B,EAAQo/B,aACR/+B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo/B,cAEpB,IAA1Bp/B,EAAQq/B,eACRh/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQq/B,eAElB,IAA3Br/B,EAAQs/B,gBACRj/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs/B,gBAE5B,IAAlBt/B,EAAQu/B,OACRl/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu/B,OAEvB,IAAvBv/B,EAAQw/B,YACRn/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw/B,YAEnB,IAA3Bx/B,EAAQy/B,gBACRp/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy/B,gBAEjB,IAA7Bz/B,EAAQ0/B,kBACRr/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0/B,mBAEtB,IAAxB1/B,EAAQ2/B,aACRt/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2/B,aAEtB,IAAvB3/B,EAAQ4/B,YACRv/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4/B,aAEvB,IAAvB5/B,EAAQ6/B,YACRx/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6/B,YAEhB,IAA7B7/B,EAAQ8/B,kBACRz/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8/B,kBAEvB,IAAvB9/B,EAAQ+/B,YACR1/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+/B,YAEhB,IAA9B//B,EAAQggC,mBACR3/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQggC,oBAEpB,IAA1BhgC,EAAQigC,eACR5/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQigC,eAEtB,IAAvBjgC,EAAQkgC,YACR7/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkgC,YAElB,IAA5BlgC,EAAQmgC,iBACR9/B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmgC,iBAE3B,IAAnBngC,EAAQogC,QACR//B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQogC,QAEhB,IAA9BpgC,EAAQqgC,mBACRhgC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqgC,oBAEvB,IAAvBrgC,EAAQsgC,YACRjgC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsgC,YAEpB,IAAzBtgC,EAAQugC,cACRlgC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQugC,cAEV,IAApCvgC,EAAQwgC,yBACRngC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwgC,0BAEtB,IAAxBxgC,EAAQygC,aACRpgC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQygC,aACjD,IAAIx2B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAqgC,GAAQ,IA3DrB,cAAyBr0B,EACrBrS,cACI8V,MAAM,cAAe,CACjB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMm8B,IACrD,CAAExgC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMq3B,IACpD,CAAE17B,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMo8B,KAE5D,CACAn2B,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8B+W,EAAA1V,KAAMiK,EAAStL,GAC1CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAAijB,SAAW0d,GAAev2B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC/F,MACkC,KAAA,EAC1BjjB,EAAAkjB,QAAU2Y,GAAazxB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC5F,MACmC,KAAA,EAC3BljB,EAAA8G,QAAU85B,GAAcx2B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC7F,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgBK,EAAuByG,GAEnD9G,EAAQijB,UACR0d,GAAev1B,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQkjB,SACR2Y,GAAazwB,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ8G,SACR85B,GAAcx1B,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA6JS,MAAAsgC,GAAiB,IAtJ9B,cAAkCt0B,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iCAAkC+2B,KACnG,CAAEp7B,GAAI,EAAGsC,KAAM,oCAAqCM,KAAM,SAAUyB,EAAG,GACvE,CAAErE,GAAI,EAAGsC,KAAM,gCAAiCM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iCAAkC+2B,KAC1G,CAAEp7B,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCg3B,KAC1G,CAAEr7B,GAAI,EAAGsC,KAAM,kCAAmCM,KAAM,OAAQyB,EAAG,IAAM,CAAC,6CAA8Ci3B,KACxH,CAAEt7B,GAAI,EAAGsC,KAAM,wCAAyCM,KAAM,SAAUyB,EAAG,GAC3E,CAAErE,GAAI,EAAGsC,KAAM,0CAA2CM,KAAM,SAAUyB,EAAG,GAC7E,CAAErE,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,OAAQL,SAAU,4BAA6B8B,EAAG,IAAM,CAAC,iCAAkC+2B,KAC7I,CAAEp7B,GAAI,EAAGsC,KAAM,0CAA2CM,KAAM,SAAUyB,EAAG,GAC7E,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,IAEvE,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE6gC,qBAAsB,EAAGC,8BAA+B,EAAGC,0BAA2B,EAAGC,uBAAwB,EAAGC,8BAA+B,EAAGC,kCAAmC,EAAGC,oCAAqC,EAAGC,0BAA2B,EAAGC,mCAAoC,EAAGC,kBAAmB,EAAGC,UAAU,EAAOC,gBAAgB,EAAOC,iBAAiB,EAAOC,iBAAiB,EAAOC,iBAAiB,EAAOC,uBAAwB,GAIld,OAHAx+B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6D,KAAA,EACrDqE,EAAA6gC,qBAAuB92B,EAAOvN,QACtC,MAC+C,KAAA,EACvCwD,EAAA8gC,8BAAgC/2B,EAAOvN,QAC/C,MACoE,KAAA,EAC5DwD,EAAA+gC,0BAA4Bh3B,EAAOvN,QAC3C,MACoE,KAAA,EAC5DwD,EAAAghC,uBAAyBj3B,EAAOvN,QACxC,MACkF,KAAA,EAC1EwD,EAAAihC,8BAAgCl3B,EAAOvN,QAC/C,MACmD,KAAA,EAC3CwD,EAAAkhC,kCAAoCn3B,EAAOvN,QACnD,MACqD,KAAA,EAC7CwD,EAAAmhC,oCAAsCp3B,EAAOvN,QACrD,MAC8G,KAAA,EACtGwD,EAAAohC,0BAA4Br3B,EAAOvN,QAC3C,MACqD,KAAA,EAC7CwD,EAAAqhC,mCAAqCt3B,EAAOvN,QACpD,MACiC,KAAA,GACzBwD,EAAAshC,kBAAoBv3B,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAAuhC,SAAWx3B,EAAOhN,OAC1B,MAC6B,KAAA,GACrBiD,EAAAwhC,eAAiBz3B,EAAOhN,OAChC,MAC8B,KAAA,GACtBiD,EAAAyhC,gBAAkB13B,EAAOhN,OACjC,MAC8B,KAAA,GACtBiD,EAAA0hC,gBAAkB33B,EAAOhN,OACjC,MAC8B,KAAA,GACtBiD,EAAA2hC,gBAAkB53B,EAAOhN,OACjC,MACsC,KAAA,GAC9BiD,EAAA4hC,uBAAyB73B,EAAOvN,QACxC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE3B,IAAjC9G,EAAQ6gC,sBACRxgC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6gC,sBAEH,IAA1C7gC,EAAQ8gC,+BACRzgC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8gC,+BAEP,IAAtC9gC,EAAQ+gC,2BACR1gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+gC,2BAEV,IAAnC/gC,EAAQghC,wBACR3gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQghC,wBAEH,IAA1ChhC,EAAQihC,+BACR5gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQihC,+BAEC,IAA9CjhC,EAAQkhC,mCACR7gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkhC,mCAEG,IAAhDlhC,EAAQmhC,qCACR9gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmhC,qCAEP,IAAtCnhC,EAAQohC,2BACR/gC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQohC,2BAEE,IAA/CphC,EAAQqhC,oCACRhhC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqhC,oCAEf,IAA9BrhC,EAAQshC,mBACRjhC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQshC,oBAEzB,IAArBthC,EAAQuhC,UACRlhC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuhC,WAElB,IAA3BvhC,EAAQwhC,gBACRnhC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwhC,iBAEjB,IAA5BxhC,EAAQyhC,iBACRphC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyhC,kBAEjB,IAA5BzhC,EAAQ0hC,iBACRrhC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0hC,kBAEjB,IAA5B1hC,EAAQ2hC,iBACRthC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2hC,iBAEV,IAAnC3hC,EAAQ4hC,wBACRvhC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4hC,wBAClD,IAAI33B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAugC,GAAgB,IAzE7B,cAAiCv0B,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,UAAWyB,EAAG,IAAMsW,IACvE,CAAE3a,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kCAAmCk3B,KACtF,CAAEv7B,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kCAAmCk3B,KACtF,CAAEv7B,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,IAEpE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE6hC,QAAS,EAAGC,QAAS,EAAGC,yBAA0B,EAAGC,sBAAsB,GAItF,OAHA5+B,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmD,KAAA,EAC3CqE,EAAAiiC,uBAAyBnnB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiiC,wBACzG,MACgD,KAAA,EACxCjiC,EAAA6hC,QAAU93B,EAAOvN,QACzB,MACgD,KAAA,EACxCwD,EAAA8hC,QAAU/3B,EAAOvN,QACzB,MACwC,KAAA,EAChCwD,EAAA+hC,yBAA2Bh4B,EAAOvN,QAC1C,MACmC,KAAA,EAC3BwD,EAAAgiC,qBAAuBj4B,EAAOhN,OACtC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE3D9G,EAAQiiC,wBACRnnB,GAAW1P,oBAAoBpL,EAAQiiC,uBAAwB5hC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpG,IAApBqC,EAAQ6hC,SACRxhC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6hC,SAEzB,IAApB7hC,EAAQ8hC,SACRzhC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8hC,SAER,IAArC9hC,EAAQ+hC,0BACR1hC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+hC,2BAEZ,IAAjC/hC,EAAQgiC,sBACR3hC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgiC,sBAChD,IAAI/3B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GChsCQ,IAAA6hC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,MAAM,GAAN,MApBQA,IAAAA,IAAA,CAAA,GA8CAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,YAAY,GAAZ,YARQA,IAAAA,IAAA,CAAA,GAsGAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,cAAc,GAAd,cAxCQA,IAAAA,IAAA,CAAA,GAoEAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,6BAA6B,OAA7B,6BAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,4BAA4B,OAA5B,4BAhHQA,IAAAA,IAAA,CAAA,GAqHAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,qBAAqB,OAArB,qBA5BQA,IAAAA,IAAA,CAAA,GAmoBC,MAAAC,GAAgB,IApmB7B,cAAiCn2B,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,gCAAiCM,KAAM,SAAUyB,EAAG,GACnE,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,IAEzD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEyiC,gBAAiB,EAAGC,gBAAiB,EAAGC,cAAe,EAAGC,kBAAmB,EAAGC,2BAA4B,EAAGC,UAAW,EAAGC,WAAY,EAAGC,YAAY,EAAOC,wBAAyB,EAAGC,WAAY,EAAGC,cAAe,EAAGC,iBAAkB,EAAGC,iBAAkB,EAAGC,eAAgB,EAAGC,aAAa,EAAOC,aAAc,EAAGC,cAAe,EAAGC,YAAa,EAAGC,eAAe,EAAOC,kBAAmB,EAAGlwB,YAAa,EAAGG,QAAS,EAAGgwB,WAAY,EAAGC,YAAa,EAAGC,iBAAiB,EAAOC,MAAO,EAAGC,aAAc,EAAGC,SAAS,EAAOzM,aAAc,EAAG0M,cAAe,EAAGC,mBAAoB,EAAGC,aAAc,EAAGC,WAAY,EAAGC,iBAAiB,EAAOC,gBAAiB,EAAGC,YAAa,EAAGC,UAAW,EAAGC,gBAAiB,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,oBAAoB,EAAOC,kBAAmB,EAAGC,aAAc,EAAGC,iBAAkB,EAAGC,kBAAmB,EAAGC,WAAW,EAAOC,kBAAmB,EAAGC,YAAa,EAAGC,iBAAkB,EAAGC,YAAa,EAAGC,eAAgB,EAAGC,iBAAiB,EAAOC,YAAa,EAAGC,iBAAkB,EAAGC,gBAAgB,EAAOC,UAAW,EAAGC,kBAAmB,EAAGC,SAAU,EAAGC,eAAgB,EAAGC,uBAAwB,EAAGC,YAAa,EAAGC,sBAAuB,EAAGC,kBAAmB,EAAGC,UAAU,EAAOC,cAAe,EAAGC,YAAa,EAAGC,cAAe,EAAGC,SAAS,EAAOC,iBAAiB,EAAOC,wBAAyB,EAAG3O,YAAa,EAAG4O,SAAU,EAAGC,wBAAyB,EAAGC,YAAY,EAAOC,YAAa,EAAGC,mBAAoB,EAAGlxB,OAAQ,EAAGmxB,eAAe,EAAO5yB,eAAe,EAAO6yB,iBAAkB,EAAGC,aAAc,EAAGC,YAAY,GAItiD,OAHAhkC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC8B,KAAA,EACtBqE,EAAAyiC,gBAAkB14B,EAAOvN,QACjC,MAC8B,KAAA,EACtBwD,EAAA0iC,gBAAkB34B,EAAOvN,QACjC,MAC4B,KAAA,EACpBwD,EAAA2iC,cAAgB54B,EAAOvN,QAC/B,MACiC,KAAA,EACzBwD,EAAA4iC,kBAAoB74B,EAAOvN,QACnC,MAC2C,KAAA,EACnCwD,EAAA6iC,2BAA6B94B,EAAOvN,QAC5C,MACuB,KAAA,EACfwD,EAAA8iC,UAAY/4B,EAAOvN,QAC3B,MACwB,KAAA,EAChBwD,EAAA+iC,WAAah5B,EAAOvN,QAC5B,MACwB,KAAA,EAChBwD,EAAAgjC,WAAaj5B,EAAOhN,OAC5B,MACwC,KAAA,EAChCiD,EAAAijC,wBAA0Bl5B,EAAOvN,QACzC,MACwB,KAAA,GAChBwD,EAAAkjC,WAAan5B,EAAOvN,QAC5B,MAC4B,KAAA,GACpBwD,EAAAmjC,cAAgBp5B,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAAojC,iBAAmBr5B,EAAOvN,QAClC,MAC+B,KAAA,GACvBwD,EAAAqjC,iBAAmBt5B,EAAOvN,QAClC,MAC6B,KAAA,GACrBwD,EAAAsjC,eAAiBv5B,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAAujC,YAAcx5B,EAAOhN,OAC7B,MAC2B,KAAA,GACnBiD,EAAAwjC,aAAez5B,EAAOvN,QAC9B,MAC2B,KAAA,GACnBwD,EAAAyjC,cAAgB15B,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAA0jC,YAAc35B,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAA2jC,cAAgB55B,EAAOhN,OAC/B,MACiC,KAAA,GACzBiD,EAAA4jC,kBAAoB75B,EAAOvN,QACnC,MAC0B,KAAA,GAClBwD,EAAA0T,YAAc3J,EAAOvN,QAC7B,MACqB,KAAA,GACbwD,EAAA6T,QAAU9J,EAAOvN,QACzB,MACwB,KAAA,GAChBwD,EAAA6jC,WAAa95B,EAAOvN,QAC5B,MAC0B,KAAA,GAClBwD,EAAA8jC,YAAc/5B,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAA+jC,gBAAkBh6B,EAAOhN,OACjC,MACmB,KAAA,GACXiD,EAAAgkC,MAAQj6B,EAAOvN,QACvB,MAC2B,KAAA,GACnBwD,EAAAikC,aAAel6B,EAAOvN,QAC9B,MACoB,KAAA,GACZwD,EAAAkkC,QAAUn6B,EAAOhN,OACzB,MAC2B,KAAA,GACnBiD,EAAAy3B,aAAe1tB,EAAOvN,QAC9B,MAC4B,KAAA,GACpBwD,EAAAmkC,cAAgBp6B,EAAOvN,QAC/B,MACiC,KAAA,GACzBwD,EAAAokC,mBAAqBr6B,EAAOvN,QACpC,MAC2B,KAAA,GACnBwD,EAAAqkC,aAAet6B,EAAOvN,QAC9B,MACyB,KAAA,GACjBwD,EAAAskC,WAAav6B,EAAOvN,QAC5B,MAC6B,KAAA,GACrBwD,EAAAukC,gBAAkBx6B,EAAOhN,OACjC,MAC8B,KAAA,GACtBiD,EAAAwkC,gBAAkBz6B,EAAOvN,QACjC,MACyB,KAAA,GACjBwD,EAAAykC,YAAc16B,EAAOvN,QAC7B,MACwB,KAAA,GAChBwD,EAAA0kC,UAAY36B,EAAOvN,QAC3B,MAC8B,KAAA,GACtBwD,EAAA2kC,gBAAkB56B,EAAOvN,QACjC,MAC2B,KAAA,GACnBwD,EAAA4kC,aAAe76B,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAA6kC,eAAiB96B,EAAOvN,QAChC,MACiC,KAAA,GACzBwD,EAAA8kC,mBAAqB/6B,EAAOhN,OACpC,MACgC,KAAA,GACxBiD,EAAA+kC,kBAAoBh7B,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAAglC,aAAej7B,EAAOvN,QAC9B,MAC+B,KAAA,GACvBwD,EAAAilC,iBAAmBl7B,EAAOvN,QAClC,MACgC,KAAA,GACxBwD,EAAAklC,kBAAoBn7B,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAAmlC,UAAYp7B,EAAOhN,OAC3B,MACgC,KAAA,GACxBiD,EAAAolC,kBAAoBr7B,EAAOvN,QACnC,MAC2B,KAAA,GACnBwD,EAAAqlC,YAAct7B,EAAOvN,QAC7B,MAC+B,KAAA,GACvBwD,EAAAslC,iBAAmBv7B,EAAOvN,QAClC,MACyB,KAAA,GACjBwD,EAAAulC,YAAcx7B,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAAwlC,eAAiBz7B,EAAOvN,QAChC,MAC8B,KAAA,GACtBwD,EAAAylC,gBAAkB17B,EAAOhN,OACjC,MAC2B,KAAA,GACnBiD,EAAA0lC,YAAc37B,EAAOvN,QAC7B,MAC+B,KAAA,GACvBwD,EAAA2lC,iBAAmB57B,EAAOvN,QAClC,MAC4B,KAAA,GACpBwD,EAAA4lC,eAAiB77B,EAAOhN,OAChC,MACwB,KAAA,GAChBiD,EAAA6lC,UAAY97B,EAAOvN,QAC3B,MACiC,KAAA,GACzBwD,EAAA8lC,kBAAoB/7B,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAA+lC,SAAWh8B,EAAOvN,QAC1B,MAC6B,KAAA,GACrBwD,EAAAgmC,eAAiBj8B,EAAOvN,QAChC,MACuC,KAAA,GAC/BwD,EAAAimC,uBAAyBl8B,EAAOvN,QACxC,MAC0B,KAAA,GAClBwD,EAAAkmC,YAAcn8B,EAAOvN,QAC7B,MACqC,KAAA,GAC7BwD,EAAAmmC,sBAAwBp8B,EAAOvN,QACvC,MACiC,KAAA,GACzBwD,EAAAomC,kBAAoBr8B,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAAqmC,SAAWt8B,EAAOhN,OAC1B,MAC4B,KAAA,GACpBiD,EAAAsmC,cAAgBv8B,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAAumC,YAAcx8B,EAAOvN,QAC7B,MAC4B,KAAA,GACpBwD,EAAAwmC,cAAgBz8B,EAAOvN,QAC/B,MACoB,KAAA,GACZwD,EAAAymC,QAAU18B,EAAOhN,OACzB,MAC6B,KAAA,GACrBiD,EAAA0mC,gBAAkB38B,EAAOhN,OACjC,MACuC,KAAA,GAC/BiD,EAAA2mC,wBAA0B58B,EAAOvN,QACzC,MAC0B,KAAA,GAClBwD,EAAAg4B,YAAcjuB,EAAOvN,QAC7B,MACuB,KAAA,GACfwD,EAAA4mC,SAAW78B,EAAOvN,QAC1B,MACuC,KAAA,GAC/BwD,EAAA6mC,wBAA0B98B,EAAOvN,QACzC,MACuB,KAAA,GACfwD,EAAA8mC,WAAa/8B,EAAOhN,OAC5B,MAC0B,KAAA,GAClBiD,EAAA+mC,YAAch9B,EAAOvN,QAC7B,MACiC,KAAA,GACzBwD,EAAAgnC,mBAAqBj9B,EAAOvN,QACpC,MACoB,KAAA,GACZwD,EAAA8V,OAAS/L,EAAOvN,QACxB,MAC2B,KAAA,GACnBwD,EAAAinC,cAAgBl9B,EAAOhN,OAC/B,MAC2B,KAAA,GACnBiD,EAAAqU,cAAgBtK,EAAOhN,OAC/B,MACgC,KAAA,GACxBiD,EAAAknC,iBAAmBn9B,EAAOvN,QAClC,MAC2B,KAAA,GACnBwD,EAAAmnC,aAAep9B,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAonC,WAAar9B,EAAOhN,OAC5B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE/B,IAA5B9G,EAAQyiC,iBACRpiC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyiC,iBAEjB,IAA5BziC,EAAQ0iC,iBACRriC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0iC,iBAEnB,IAA1B1iC,EAAQ2iC,eACRtiC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2iC,eAEf,IAA9B3iC,EAAQ4iC,mBACRviC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4iC,mBAEN,IAAvC5iC,EAAQ6iC,4BACRxiC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6iC,4BAEvB,IAAtB7iC,EAAQ8iC,WACRziC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8iC,WAEtB,IAAvB9iC,EAAQ+iC,YACR1iC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+iC,aAEtB,IAAvB/iC,EAAQgjC,YACR3iC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgjC,YAER,IAApChjC,EAAQijC,yBACR5iC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQijC,yBAEtB,IAAvBjjC,EAAQkjC,YACR7iC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkjC,YAEpB,IAA1BljC,EAAQmjC,eACR9iC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmjC,eAEjB,IAA7BnjC,EAAQojC,kBACR/iC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQojC,kBAEjB,IAA7BpjC,EAAQqjC,kBACRhjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqjC,kBAEnB,IAA3BrjC,EAAQsjC,gBACRjjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsjC,iBAEtB,IAAxBtjC,EAAQujC,aACRljC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQujC,aAEpB,IAAzBvjC,EAAQwjC,cACRnjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwjC,cAEpB,IAA1BxjC,EAAQyjC,eACRpjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyjC,eAEtB,IAAxBzjC,EAAQ0jC,aACRrjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0jC,cAEpB,IAA1B1jC,EAAQ2jC,eACRtjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2jC,eAEf,IAA9B3jC,EAAQ4jC,mBACRvjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4jC,mBAEtB,IAAxB5jC,EAAQ0T,aACRrT,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0T,aAE1B,IAApB1T,EAAQ6T,SACRxT,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6T,SAEvB,IAAvB7T,EAAQ6jC,YACRxjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6jC,YAEtB,IAAxB7jC,EAAQ8jC,aACRzjC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8jC,cAElB,IAA5B9jC,EAAQ+jC,iBACR1jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+jC,iBAE3B,IAAlB/jC,EAAQgkC,OACR3jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgkC,OAErB,IAAzBhkC,EAAQikC,cACR5jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQikC,eAE1B,IAApBjkC,EAAQkkC,SACR7jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkkC,SAEpB,IAAzBlkC,EAAQy3B,cACRp3B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy3B,cAEpB,IAA1Bz3B,EAAQmkC,eACR9jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmkC,eAEf,IAA/BnkC,EAAQokC,oBACR/jC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQokC,oBAErB,IAAzBpkC,EAAQqkC,cACRhkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqkC,cAEvB,IAAvBrkC,EAAQskC,YACRjkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQskC,aAElB,IAA5BtkC,EAAQukC,iBACRlkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQukC,iBAEjB,IAA5BvkC,EAAQwkC,iBACRnkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwkC,iBAEtB,IAAxBxkC,EAAQykC,aACRpkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQykC,aAExB,IAAtBzkC,EAAQ0kC,WACRrkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0kC,WAElB,IAA5B1kC,EAAQ2kC,iBACRtkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2kC,iBAErB,IAAzB3kC,EAAQ4kC,cACRvkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4kC,cAEnB,IAA3B5kC,EAAQ6kC,gBACRxkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6kC,iBAEf,IAA/B7kC,EAAQ8kC,oBACRzkC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8kC,oBAEf,IAA9B9kC,EAAQ+kC,mBACR1kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+kC,mBAErB,IAAzB/kC,EAAQglC,cACR3kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQglC,cAEjB,IAA7BhlC,EAAQilC,kBACR5kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQilC,kBAEhB,IAA9BjlC,EAAQklC,mBACR7kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQklC,oBAExB,IAAtBllC,EAAQmlC,WACR9kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmlC,WAEf,IAA9BnlC,EAAQolC,mBACR/kC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQolC,mBAEtB,IAAxBplC,EAAQqlC,aACRhlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqlC,aAEjB,IAA7BrlC,EAAQslC,kBACRjlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQslC,kBAEtB,IAAxBtlC,EAAQulC,aACRllC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQulC,aAEnB,IAA3BvlC,EAAQwlC,gBACRnlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwlC,iBAElB,IAA5BxlC,EAAQylC,iBACRplC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQylC,iBAErB,IAAxBzlC,EAAQ0lC,aACRrlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0lC,aAEjB,IAA7B1lC,EAAQ2lC,kBACRtlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2lC,mBAEnB,IAA3B3lC,EAAQ4lC,gBACRvlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4lC,gBAEvB,IAAtB5lC,EAAQ6lC,WACRxlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6lC,WAEhB,IAA9B7lC,EAAQ8lC,mBACRzlC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8lC,mBAEzB,IAArB9lC,EAAQ+lC,UACR1lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+lC,UAEnB,IAA3B/lC,EAAQgmC,gBACR3lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgmC,gBAEX,IAAnChmC,EAAQimC,wBACR5lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQimC,wBAEtB,IAAxBjmC,EAAQkmC,aACR7lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkmC,aAEZ,IAAlClmC,EAAQmmC,uBACR9lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmmC,uBAEhB,IAA9BnmC,EAAQomC,mBACR/lC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQomC,oBAEzB,IAArBpmC,EAAQqmC,UACRhmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqmC,UAEnB,IAA1BrmC,EAAQsmC,eACRjmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsmC,eAEtB,IAAxBtmC,EAAQumC,aACRlmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQumC,aAEpB,IAA1BvmC,EAAQwmC,eACRnmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwmC,gBAE1B,IAApBxmC,EAAQymC,SACRpmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQymC,UAEjB,IAA5BzmC,EAAQ0mC,iBACRrmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0mC,iBAET,IAApC1mC,EAAQ2mC,yBACRtmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2mC,yBAEtB,IAAxB3mC,EAAQg4B,aACR33B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg4B,aAEzB,IAArBh4B,EAAQ4mC,UACRvmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4mC,UAEV,IAApC5mC,EAAQ6mC,yBACRxmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6mC,0BAEvB,IAAvB7mC,EAAQ8mC,YACRzmC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8mC,YAErB,IAAxB9mC,EAAQ+mC,aACR1mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+mC,aAEf,IAA/B/mC,EAAQgnC,oBACR3mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgnC,oBAE3B,IAAnBhnC,EAAQ8V,QACRzV,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8V,SAEpB,IAA1B9V,EAAQinC,eACR5mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQinC,gBAEnB,IAA1BjnC,EAAQqU,eACRhU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqU,eAEhB,IAA7BrU,EAAQknC,kBACR7mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQknC,kBAErB,IAAzBlnC,EAAQmnC,cACR9mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmnC,eAEvB,IAAvBnnC,EAAQonC,YACR/mC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQonC,YACjD,IAAIn9B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAgnC,GAAe,IA3D5B,cAAgCh7B,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM8iC,IACrD,CAAEnnC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMg+B,IACpD,CAAEriC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM+iC,KAE5D,CACA98B,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4C,KAAA,EACpCqE,EAAAijB,SAAWqkB,GAAsBl9B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACtG,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAUsf,GAAcp4B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MAC0C,KAAA,EAClCljB,EAAA8G,QAAUygC,GAAqBn9B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACpG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE1D9G,EAAQijB,UACRqkB,GAAsBl8B,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErHqC,EAAQkjB,SACRsf,GAAcp3B,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACRygC,GAAqBn8B,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACvH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAinC,GAAwB,IA3DrC,cAAyCj7B,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,2CAA4C09B,KACpG,CAAE/hC,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,IAErD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEy6B,aAAc,EAAG+M,WAAW,EAAOC,QAAS,GAIvD,OAHArkC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC8D,KAAA,EACtDqE,EAAAy6B,aAAe1wB,EAAOvN,QAC9B,MACuB,KAAA,EACfwD,EAAAwnC,UAAYz9B,EAAOhN,OAC3B,MACsB,KAAA,EACdiD,EAAAynC,QAAU19B,EAAOxM,SACzB,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,GAE1C,IAAzB9G,EAAQy6B,cACRp6B,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQy6B,eAEvB,IAAtBz6B,EAAQwnC,WACRnnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwnC,WAExB,IAApBxnC,EAAQynC,SACRpnC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQynC,SACjD,IAAIx9B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAAknC,GAAuB,IAlEpC,cAAwCl7B,EACpCrS,cACI8V,MAAM,6BAA8B,CAChC,CAAE3P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mCAAoC29B,KACpF,CAAEhiC,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,IAEnE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE0nC,gBAAgB,EAAOrU,MAAO,EAAGsU,cAAc,EAAOC,oBAAoB,GAIrF,OAHAxkC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6C+W,EAAA1V,KAAMiK,EAAStL,GACzDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4B,KAAA,EACpBqE,EAAA0nC,eAAiB39B,EAAOhN,OAChC,MAC8C,KAAA,EACtCiD,EAAAqzB,MAAQtpB,EAAOvN,QACvB,MAC2B,KAAA,EACnBwD,EAAA2nC,aAAe59B,EAAOhN,OAC9B,MACkC,KAAA,EAC1BiD,EAAA4nC,mBAAqB79B,EAAOhN,OACpC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA+BK,EAAuByG,IAEvC,IAA3B9G,EAAQ0nC,gBACRrnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0nC,gBAE1B,IAAlB1nC,EAAQqzB,OACRhzB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqzB,QAEpB,IAAzBrzB,EAAQ2nC,cACRtnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2nC,eAEb,IAA/B3nC,EAAQ4nC,oBACRvnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4nC,oBAChD,IAAI39B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAwnC,GAAc,IA3D3B,cAA+Bx7B,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMsjC,IACrD,CAAE3nC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMg+B,IACpD,CAAEriC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMujC,KAE5D,CACAt9B,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2C,KAAA,EACnCqE,EAAAijB,SAAW6kB,GAAqB19B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACrG,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAUsf,GAAcp4B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MACyC,KAAA,EACjCljB,EAAA8G,QAAUihC,GAAoB39B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACnG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEzD9G,EAAQijB,UACR6kB,GAAqB18B,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpHqC,EAAQkjB,SACRsf,GAAcp3B,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACRihC,GAAoB38B,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACtH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAynC,GAAuB,IAzEpC,cAAwCz7B,EACpCrS,cACI8V,MAAM,6BAA8B,CAChC,CAAE3P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,IAExE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE2nC,cAAc,EAAOC,oBAAoB,EAAOI,oBAAoB,EAAOC,WAAW,EAAOC,uBAAwB,GAIhI,OAHA9kC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6C+W,EAAA1V,KAAMiK,EAAStL,GACzDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2B,KAAA,EACnBqE,EAAA2nC,aAAe59B,EAAOhN,OAC9B,MACkC,KAAA,EAC1BiD,EAAA4nC,mBAAqB79B,EAAOhN,OACpC,MACiC,KAAA,EACzBiD,EAAAgoC,mBAAqBj+B,EAAOhN,OACpC,MACuB,KAAA,EACfiD,EAAAioC,UAAYl+B,EAAOhN,OAC3B,MACyC,KAAA,EACjCiD,EAAAkoC,uBAAyBn+B,EAAOxM,SACxC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA+BK,EAAuByG,IAEzC,IAAzB9G,EAAQ2nC,cACRtnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2nC,eAEb,IAA/B3nC,EAAQ4nC,oBACRvnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4nC,qBAEb,IAA/B5nC,EAAQgoC,oBACR3nC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgoC,qBAEtB,IAAtBhoC,EAAQioC,WACR5nC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQioC,WAET,IAAnCjoC,EAAQkoC,wBACR7nC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQkoC,wBACjD,IAAIj+B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA0nC,GAAsB,IA3DnC,cAAuC17B,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,UAAWyB,EAAG,IAAMsW,KAE1E,CACArQ,OAAO/V,GACH,MAAMsL,EAAU,CAAEmoC,cAAc,EAAOT,gBAAgB,GAIhD,OAHAtkC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2B,KAAA,EACnBqE,EAAAmoC,aAAep+B,EAAOhN,OAC9B,MAC4B,KAAA,EACpBiD,EAAA0nC,eAAiB39B,EAAOhN,OAChC,MAC8C,KAAA,EACtCiD,EAAAooC,oBAAsBttB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQooC,qBACtG,MAAA,QAEA,IAAIn+B,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA8BK,EAAuByG,IAExC,IAAzB9G,EAAQmoC,cACR9nC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmoC,eAEjB,IAA3BnoC,EAAQ0nC,gBACRrnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0nC,gBAE5C1nC,EAAQooC,qBACRttB,GAAW1P,oBAAoBpL,EAAQooC,oBAAqB/nC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACzH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAgoC,GAAgB,IA3D7B,cAAiCh8B,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM8jC,IACrD,CAAEnoC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMg+B,IACpD,CAAEriC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM+jC,KAE5D,CACA99B,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6C,KAAA,EACrCqE,EAAAijB,SAAWqlB,GAAuBl+B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACvG,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAUsf,GAAcp4B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MAC2C,KAAA,EACnCljB,EAAA8G,QAAUyhC,GAAsBn+B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACrG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE3D9G,EAAQijB,UACRqlB,GAAuBl9B,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEtHqC,EAAQkjB,SACRsf,GAAcp3B,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACRyhC,GAAsBn9B,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAioC,GAAyB,IApDtC,cAA0Cj8B,EACtCrS,cACI8V,MAAM,+BAAgC,CAClC,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,4CAA6C49B,KAC5F,CAAEjiC,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,KAEpE,CACA5R,OAAO/V,GACG,MAAAsL,EAAU,CAAEb,KAAM,GAIjB,OAHAiE,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+C+W,EAAA1V,KAAMiK,EAAStL,GAC3DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsD,KAAA,EAC9CqE,EAAAb,KAAO4K,EAAOvN,QACtB,MAC4C,KAAA,EACpCwD,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MAAA,QAEA,IAAI5iB,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiCK,EAAuByG,GAEnD,IAAjB9G,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAE7Ca,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAAkoC,GAAwB,IAlErC,cAAyCl8B,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,UAAWyB,EAAG,IAAMsW,IAClE,CAAE3a,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,IAEjE,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEmoC,cAAc,EAAOT,gBAAgB,EAAOc,kBAAmB,GAI1E,OAHAplC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2B,KAAA,EACnBqE,EAAAmoC,aAAep+B,EAAOhN,OAC9B,MAC4B,KAAA,EACpBiD,EAAA0nC,eAAiB39B,EAAOhN,OAChC,MAC8C,KAAA,EACtCiD,EAAAooC,oBAAsBttB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQooC,qBACtG,MACkC,KAAA,EAC1BpoC,EAAAwoC,kBAAoBz+B,EAAOxM,SACnC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,IAE1C,IAAzB9G,EAAQmoC,cACR9nC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmoC,eAEjB,IAA3BnoC,EAAQ0nC,gBACRrnC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0nC,gBAE5C1nC,EAAQooC,qBACRttB,GAAW1P,oBAAoBpL,EAAQooC,oBAAqB/nC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvF,IAA9BqC,EAAQwoC,mBACRnoC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQwoC,mBACjD,IAAIv+B,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCzgDQ,IAAAooC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,aAAa,GAAb,aApCQA,IAAAA,IAAA,CAAA,GAyCAC,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,eAAe,GAAf,eAhBQA,IAAAA,IAAA,CAAA,GAwFAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,iBAAiB,GAAjB,iBAIAA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,aAAa,GAAb,aAxCQA,IAAAA,IAAA,CAAA,GAsEAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,8BAA8B,OAA9B,8BAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,6BAA6B,OAA7B,6BAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,+BAA+B,OAA/B,+BAIAA,EAAAA,6BAA6B,OAA7B,6BAIAA,EAAAA,kBAAkB,OAAlB,kBApHQA,IAAAA,IAAA,CAAA,GAyHAC,IAAAA,IAIRA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,iBAAiB,OAAjB,iBA5BQA,IAAAA,IAAA,CAAA,GAiCAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,kBAAkB,GAAlB,kBA5BQA,IAAAA,IAAA,CAAA,GAiCAC,IAAAA,IAIRA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,kBAAkB,GAAlB,kBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,gBAAgB,GAAhB,gBAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,mBAAmB,GAAnB,mBARQA,IAAAA,IAAA,CAAA,GAmlBC,MAAAC,GAAiB,IAxkB9B,cAAkC78B,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GACjE,CAAErE,GAAI,GAAIsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GAClE,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GACjE,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mCAAoCM,KAAM,SAAUyB,EAAG,GACvE,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GACjE,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,mCAAoCM,KAAM,SAAUyB,EAAG,GACvE,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEmpC,eAAgB,EAAGC,eAAgB,EAAGC,aAAc,EAAGC,gBAAiB,EAAGC,gBAAiB,EAAGC,aAAa,EAAOC,aAAc,EAAGC,mBAAoB,EAAGC,0BAA2B,EAAGC,yBAA0B,EAAGC,aAAc,EAAGC,YAAa,EAAGC,aAAa,EAAOC,gBAAiB,EAAGC,eAAgB,EAAGC,UAAW,EAAGC,YAAa,EAAGC,WAAW,EAAOC,YAAa,EAAGC,gBAAiB,EAAGC,aAAc,EAAGC,oBAAoB,EAAOC,oBAAqB,EAAGC,gBAAiB,EAAGC,sBAAuB,EAAGC,eAAe,EAAOC,SAAU,EAAGC,eAAgB,EAAGC,SAAU,EAAGC,eAAgB,EAAG9pB,aAAc,EAAG+pB,iBAAiB,EAAOC,sBAAuB,EAAG5rB,UAAW,EAAG6rB,eAAgB,EAAGC,wBAAyB,EAAGC,qBAAsB,EAAG73B,qBAAqB,EAAO83B,UAAW,EAAGC,WAAY,EAAGthB,8BAA+B,EAAGuhB,oBAAqB,EAAGC,YAAY,EAAOC,eAAgB,EAAGC,QAAS,EAAGC,gBAAiB,EAAGC,kBAAmB,EAAGC,gBAAgB,EAAOC,kBAAmB,EAAGC,mBAAoB,EAAGr0B,oBAAqB,EAAGs0B,sBAAsB,EAAOlmB,WAAY,EAAGmmB,YAAa,EAAGC,mBAAoB,EAAGh2B,mBAAoB,EAAGi2B,wBAAyB,EAAG90B,YAAa,EAAG+0B,WAAY,EAAGC,eAAe,EAAOC,iBAAkB,EAAGC,YAAa,EAAGC,iBAAkB,EAAGC,QAAS,EAAG5uB,8BAA+B,EAAGnM,uBAAuB,EAAOg7B,UAAW,EAAGC,cAAe,EAAGC,YAAa,EAAGC,YAAY,EAAOv4B,oBAAqB,EAAGw4B,WAAY,EAAGC,gBAAiB,EAAG17B,iBAAkB,EAAG27B,gBAAgB,EAAOC,cAAe,EAAGC,mBAAoB,EAAGC,aAAa,GAI9jD,OAHAhqC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6B,KAAA,EACrBqE,EAAAmpC,eAAiBp/B,EAAOvN,QAChC,MAC+B,KAAA,EACvBwD,EAAAopC,eAAiBr/B,EAAOvN,QAChC,MAC2B,KAAA,EACnBwD,EAAAqpC,aAAet/B,EAAOvN,QAC9B,MAC8B,KAAA,EACtBwD,EAAAspC,gBAAkBv/B,EAAOvN,QACjC,MAC8B,KAAA,EACtBwD,EAAAupC,gBAAkBx/B,EAAOvN,QACjC,MACyB,KAAA,EACjBwD,EAAAwpC,YAAcz/B,EAAOhN,OAC7B,MAC0B,KAAA,EAClBiD,EAAAypC,aAAe1/B,EAAOvN,QAC9B,MACmC,KAAA,EAC3BwD,EAAA0pC,mBAAqB3/B,EAAOvN,QACpC,MACyC,KAAA,EACjCwD,EAAA2pC,0BAA4B5/B,EAAOvN,QAC3C,MACyC,KAAA,GACjCwD,EAAA4pC,yBAA2B7/B,EAAOvN,QAC1C,MAC2B,KAAA,GACnBwD,EAAA6pC,aAAe9/B,EAAOvN,QAC9B,MAC2B,KAAA,GACnBwD,EAAA8pC,YAAc//B,EAAOvN,QAC7B,MACyB,KAAA,GACjBwD,EAAA+pC,YAAchgC,EAAOhN,OAC7B,MAC8B,KAAA,GACtBiD,EAAAgqC,gBAAkBjgC,EAAOvN,QACjC,MAC6B,KAAA,GACrBwD,EAAAiqC,eAAiBlgC,EAAOvN,QAChC,MACwB,KAAA,GAChBwD,EAAAkqC,UAAYngC,EAAOvN,QAC3B,MAC0B,KAAA,GAClBwD,EAAAmqC,YAAcpgC,EAAOvN,QAC7B,MACuB,KAAA,GACfwD,EAAAoqC,UAAYrgC,EAAOhN,OAC3B,MAC0B,KAAA,GAClBiD,EAAAqqC,YAActgC,EAAOvN,QAC7B,MAC8B,KAAA,GACtBwD,EAAAsqC,gBAAkBvgC,EAAOvN,QACjC,MAC2B,KAAA,GACnBwD,EAAAuqC,aAAexgC,EAAOvN,QAC9B,MACgC,KAAA,GACxBwD,EAAAwqC,mBAAqBzgC,EAAOhN,OACpC,MACoC,KAAA,GAC5BiD,EAAAyqC,oBAAsB1gC,EAAOvN,QACrC,MAC+B,KAAA,GACvBwD,EAAA0qC,gBAAkB3gC,EAAOvN,QACjC,MACoC,KAAA,GAC5BwD,EAAA2qC,sBAAwB5gC,EAAOvN,QACvC,MAC4B,KAAA,GACpBwD,EAAA4qC,cAAgB7gC,EAAOhN,OAC/B,MACsB,KAAA,GACdiD,EAAA6qC,SAAW9gC,EAAOvN,QAC1B,MAC6B,KAAA,GACrBwD,EAAA8qC,eAAiB/gC,EAAOvN,QAChC,MACsB,KAAA,GACdwD,EAAA+qC,SAAWhhC,EAAOvN,QAC1B,MAC6B,KAAA,GACrBwD,EAAAgrC,eAAiBjhC,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAAkhB,aAAenX,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAAirC,gBAAkBlhC,EAAOhN,OACjC,MACqC,KAAA,GAC7BiD,EAAAkrC,sBAAwBnhC,EAAOvN,QACvC,MACuB,KAAA,GACfwD,EAAAsf,UAAYvV,EAAOvN,QAC3B,MAC6B,KAAA,GACrBwD,EAAAmrC,eAAiBphC,EAAOvN,QAChC,MACwC,KAAA,GAChCwD,EAAAorC,wBAA0BrhC,EAAOvN,QACzC,MACoC,KAAA,GAC5BwD,EAAAqrC,qBAAuBthC,EAAOvN,QACtC,MACkC,KAAA,GAC1BwD,EAAAwT,oBAAsBzJ,EAAOhN,OACrC,MACuB,KAAA,GACfiD,EAAAsrC,UAAYvhC,EAAOvN,QAC3B,MACyB,KAAA,GACjBwD,EAAAurC,WAAaxhC,EAAOvN,QAC5B,MAC8C,KAAA,GACtCwD,EAAAiqB,8BAAgClgB,EAAOvN,QAC/C,MACkC,KAAA,GAC1BwD,EAAAwrC,oBAAsBzhC,EAAOvN,QACrC,MACwB,KAAA,GAChBwD,EAAAyrC,WAAa1hC,EAAOhN,OAC5B,MAC6B,KAAA,GACrBiD,EAAA0rC,eAAiB3hC,EAAOvN,QAChC,MACqB,KAAA,GACbwD,EAAA2rC,QAAU5hC,EAAOvN,QACzB,MAC8B,KAAA,GACtBwD,EAAA4rC,gBAAkB7hC,EAAOvN,QACjC,MACkC,KAAA,GAC1BwD,EAAA6rC,kBAAoB9hC,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAA8rC,eAAiB/hC,EAAOhN,OAChC,MACkC,KAAA,GAC1BiD,EAAA+rC,kBAAoBhiC,EAAOvN,QACnC,MACmC,KAAA,GAC3BwD,EAAAgsC,mBAAqBjiC,EAAOvN,QACpC,MACoC,KAAA,GAC5BwD,EAAA2X,oBAAsB5N,EAAOvN,QACrC,MACoC,KAAA,GAC5BwD,EAAAisC,qBAAuBliC,EAAOhN,OACtC,MACwB,KAAA,GAChBiD,EAAA+lB,WAAahc,EAAOvN,QAC5B,MACyB,KAAA,GACjBwD,EAAAksC,YAAcniC,EAAOvN,QAC7B,MACiC,KAAA,GACzBwD,EAAAmsC,mBAAqBpiC,EAAOvN,QACpC,MACmC,KAAA,GAC3BwD,EAAAmW,mBAAqBpM,EAAOvN,QACpC,MACwC,KAAA,GAChCwD,EAAAosC,wBAA0BriC,EAAOvN,QACzC,MACyB,KAAA,GACjBwD,EAAAsX,YAAcvN,EAAOvN,QAC7B,MACwB,KAAA,GAChBwD,EAAAqsC,WAAatiC,EAAOvN,QAC5B,MAC4B,KAAA,GACpBwD,EAAAssC,cAAgBviC,EAAOhN,OAC/B,MACgC,KAAA,GACxBiD,EAAAusC,iBAAmBxiC,EAAOvN,QAClC,MAC4B,KAAA,GACpBwD,EAAAwsC,YAAcziC,EAAOvN,QAC7B,MACgC,KAAA,GACxBwD,EAAAysC,iBAAmB1iC,EAAOvN,QAClC,MACqB,KAAA,GACbwD,EAAA0sC,QAAU3iC,EAAOvN,QACzB,MAC8C,KAAA,GACtCwD,EAAA8d,8BAAgC/T,EAAOvN,QAC/C,MACmC,KAAA,GAC3BwD,EAAA2R,sBAAwB5H,EAAOhN,OACvC,MACuB,KAAA,GACfiD,EAAA2sC,UAAY5iC,EAAOvN,QAC3B,MAC4B,KAAA,GACpBwD,EAAA4sC,cAAgB7iC,EAAOvN,QAC/B,MAC4B,KAAA,GACpBwD,EAAA6sC,YAAc9iC,EAAOvN,QAC7B,MACuB,KAAA,GACfwD,EAAA8sC,WAAa/iC,EAAOhN,OAC5B,MACoC,KAAA,GAC5BiD,EAAAuU,oBAAsBxK,EAAOvN,QACrC,MACwB,KAAA,GAChBwD,EAAA+sC,WAAahjC,EAAOvN,QAC5B,MAC8B,KAAA,GACtBwD,EAAAgtC,gBAAkBjjC,EAAOvN,QACjC,MAC+B,KAAA,GACvBwD,EAAAsR,iBAAmBvH,EAAOvN,QAClC,MAC4B,KAAA,GACpBwD,EAAAitC,eAAiBljC,EAAOhN,OAChC,MAC6B,KAAA,GACrBiD,EAAAktC,cAAgBnjC,EAAOvN,QAC/B,MACiC,KAAA,GACzBwD,EAAAmtC,mBAAqBpjC,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAAotC,YAAcrjC,EAAOhN,OAC7B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAEjC,IAA3B9G,EAAQmpC,gBACR9oC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmpC,gBAElB,IAA3BnpC,EAAQopC,gBACR/oC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQopC,gBAEpB,IAAzBppC,EAAQqpC,cACRhpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqpC,cAEjB,IAA5BrpC,EAAQspC,iBACRjpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQspC,iBAEjB,IAA5BtpC,EAAQupC,iBACRlpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQupC,kBAErB,IAAxBvpC,EAAQwpC,aACRnpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwpC,aAEnB,IAAzBxpC,EAAQypC,cACRppC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQypC,cAEd,IAA/BzpC,EAAQ0pC,oBACRrpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0pC,oBAEP,IAAtC1pC,EAAQ2pC,2BACRtpC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2pC,2BAER,IAArC3pC,EAAQ4pC,0BACRvpC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4pC,0BAErB,IAAzB5pC,EAAQ6pC,cACRxpC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6pC,cAEtB,IAAxB7pC,EAAQ8pC,aACRzpC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8pC,cAEtB,IAAxB9pC,EAAQ+pC,aACR1pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+pC,aAEjB,IAA5B/pC,EAAQgqC,iBACR3pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgqC,iBAEnB,IAA3BhqC,EAAQiqC,gBACR5pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiqC,gBAExB,IAAtBjqC,EAAQkqC,WACR7pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkqC,WAEtB,IAAxBlqC,EAAQmqC,aACR9pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmqC,cAExB,IAAtBnqC,EAAQoqC,WACR/pC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQoqC,WAErB,IAAxBpqC,EAAQqqC,aACRhqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqqC,aAElB,IAA5BrqC,EAAQsqC,iBACRjqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsqC,iBAErB,IAAzBtqC,EAAQuqC,cACRlqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuqC,eAEf,IAA/BvqC,EAAQwqC,oBACRnqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwqC,oBAEb,IAAhCxqC,EAAQyqC,qBACRpqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyqC,qBAElB,IAA5BzqC,EAAQ0qC,iBACRrqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0qC,iBAEZ,IAAlC1qC,EAAQ2qC,uBACRtqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2qC,wBAEpB,IAA1B3qC,EAAQ4qC,eACRvqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4qC,eAExB,IAArB5qC,EAAQ6qC,UACRxqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6qC,UAEnB,IAA3B7qC,EAAQ8qC,gBACRzqC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8qC,gBAEzB,IAArB9qC,EAAQ+qC,UACR1qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+qC,UAEnB,IAA3B/qC,EAAQgrC,gBACR3qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgrC,gBAErB,IAAzBhrC,EAAQkhB,cACR7gB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkhB,eAElB,IAA5BlhB,EAAQirC,iBACR5qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQirC,iBAEX,IAAlCjrC,EAAQkrC,uBACR7qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkrC,uBAExB,IAAtBlrC,EAAQsf,WACRjf,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsf,WAEnB,IAA3Btf,EAAQmrC,gBACR9qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmrC,gBAEV,IAApCnrC,EAAQorC,yBACR/qC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQorC,yBAEb,IAAjCprC,EAAQqrC,sBACRhrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqrC,uBAEd,IAAhCrrC,EAAQwT,qBACRnT,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwT,qBAEvB,IAAtBxT,EAAQsrC,WACRjrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsrC,WAEvB,IAAvBtrC,EAAQurC,YACRlrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQurC,YAEJ,IAA1CvrC,EAAQiqB,+BACR5pB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiqB,+BAEd,IAAhCjqB,EAAQwrC,qBACRnrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwrC,sBAEvB,IAAvBxrC,EAAQyrC,YACRprC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQyrC,YAElB,IAA3BzrC,EAAQ0rC,gBACRrrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0rC,gBAE1B,IAApB1rC,EAAQ2rC,SACRtrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2rC,SAElB,IAA5B3rC,EAAQ4rC,iBACRvrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4rC,iBAEhB,IAA9B5rC,EAAQ6rC,mBACRxrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6rC,oBAEnB,IAA3B7rC,EAAQ8rC,gBACRzrC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8rC,gBAEf,IAA9B9rC,EAAQ+rC,mBACR1rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+rC,mBAEf,IAA/B/rC,EAAQgsC,oBACR3rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgsC,oBAEd,IAAhChsC,EAAQ2X,qBACRtX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2X,sBAEb,IAAjC3X,EAAQisC,sBACR5rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQisC,sBAEtB,IAAvBjsC,EAAQ+lB,YACR1lB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+lB,YAEtB,IAAxB/lB,EAAQksC,aACR7rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQksC,aAEf,IAA/BlsC,EAAQmsC,oBACR9rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmsC,oBAEf,IAA/BnsC,EAAQmW,oBACR9V,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmW,oBAEV,IAApCnW,EAAQosC,yBACR/rC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQosC,yBAEtB,IAAxBpsC,EAAQsX,aACRjX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsX,aAEvB,IAAvBtX,EAAQqsC,YACRhsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqsC,aAEpB,IAA1BrsC,EAAQssC,eACRjsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQssC,eAEhB,IAA7BtsC,EAAQusC,kBACRlsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQusC,kBAEtB,IAAxBvsC,EAAQwsC,aACRnsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwsC,aAEjB,IAA7BxsC,EAAQysC,kBACRpsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQysC,kBAE1B,IAApBzsC,EAAQ0sC,SACRrsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0sC,SAEJ,IAA1C1sC,EAAQ8d,+BACRzd,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8d,gCAEZ,IAAlC9d,EAAQ2R,uBACRtR,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2R,uBAEvB,IAAtB3R,EAAQ2sC,WACRtsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2sC,WAEpB,IAA1B3sC,EAAQ4sC,eACRvsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4sC,eAEtB,IAAxB5sC,EAAQ6sC,aACRxsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6sC,cAEvB,IAAvB7sC,EAAQ8sC,YACRzsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8sC,YAEb,IAAhC9sC,EAAQuU,qBACRlU,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuU,qBAEvB,IAAvBvU,EAAQ+sC,YACR1sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+sC,YAElB,IAA5B/sC,EAAQgtC,iBACR3sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgtC,iBAEjB,IAA7BhtC,EAAQsR,kBACRjR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsR,mBAEnB,IAA3BtR,EAAQitC,gBACR5sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQitC,gBAEnB,IAA1BjtC,EAAQktC,eACR7sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQktC,eAEf,IAA/BltC,EAAQmtC,oBACR9sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmtC,qBAEtB,IAAxBntC,EAAQotC,aACR/sC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQotC,aACjD,IAAInjC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAgtC,GAAqB,IA3DlC,cAAsChhC,EAClCrS,cACI8V,MAAM,2BAA4B,CAC9B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM8oC,IACrD,CAAEntC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM0kC,IACpD,CAAE/oC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM+oC,KAE5D,CACA9iC,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC2C+W,EAAA1V,KAAMiK,EAAStL,GACvDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkD,KAAA,EAC1CqE,EAAAijB,SAAWqqB,GAA4BljC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC5G,MACoC,KAAA,EAC5BjjB,EAAAkjB,QAAUgmB,GAAe9+B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC9F,MACgD,KAAA,EACxCljB,EAAA8G,QAAUymC,GAA2BnjC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC1G,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA6BK,EAAuByG,GAEhE9G,EAAQijB,UACRqqB,GAA4BliC,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3HqC,EAAQkjB,SACRgmB,GAAe99B,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8G,SACRymC,GAA2BniC,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC7H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA0HS,MAAAitC,GAA8B,IAnH3C,cAA+CjhC,EAC3CrS,cACI8V,MAAM,oCAAqC,CACvC,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,IAC5D,CAAElc,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,UAAWyB,EAAG,IAAM6X,IAClE,CAAElc,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iDAAkDkkC,KACjG,CAAEvoC,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GAClE,CAAErE,GAAI,GAAIsC,KAAM,2CAA4CM,KAAM,SAAUyB,EAAG,IAEvF,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEwtC,SAAU,EAAGC,UAAW,EAAGC,qBAAsB,EAAGC,mBAAoB,EAAGC,WAAY,EAAGzuC,KAAM,EAAG0uC,eAAe,EAAOC,2BAA2B,EAAOC,qCAAqC,GAI3M,OAHA3qC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoD+W,EAAA1V,KAAMiK,EAAStL,GAChEsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAAwtC,SAAWzjC,EAAOvN,QAC1B,MACwB,KAAA,EAChBwD,EAAAytC,UAAY1jC,EAAOvN,QAC3B,MACqC,KAAA,EAC7BwD,EAAA0tC,qBAAuB3jC,EAAOxM,SACtC,MACkC,KAAA,EAC1ByC,EAAA2tC,mBAAqB5jC,EAAOvN,QACpC,MACyB,KAAA,EACjBwD,EAAA4tC,WAAa7jC,EAAOvN,QAC5B,MAC4C,KAAA,EACpCwD,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MACiD,KAAA,GACzC7sB,EAAAguC,mBAAqB3xB,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQguC,oBACzG,MAC2D,KAAA,EACnDhuC,EAAAb,KAAO4K,EAAOvN,QACtB,MAC4B,KAAA,GACpBwD,EAAA6tC,cAAgB9jC,EAAOhN,OAC/B,MACwC,KAAA,GAChCiD,EAAA8tC,0BAA4B/jC,EAAOhN,OAC3C,MACqD,KAAA,GAC7CiD,EAAA+tC,oCAAsChkC,EAAOhN,OACrD,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsCK,EAAuByG,GAEpD,IAArB9G,EAAQwtC,UACRntC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQwtC,UAEvB,IAAtBxtC,EAAQytC,WACRptC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQytC,WAEZ,IAAjCztC,EAAQ0tC,sBACRrtC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ0tC,sBAEd,IAA/B1tC,EAAQ2tC,oBACRttC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2tC,oBAEtB,IAAvB3tC,EAAQ4tC,YACRvtC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4tC,YAE7C5tC,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpHqC,EAAQguC,oBACR3xB,GAAejR,oBAAoBpL,EAAQguC,mBAAoB3tC,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExG,IAAjBqC,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,OAEnB,IAA1Ba,EAAQ6tC,eACRxtC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ6tC,gBAEP,IAAtC7tC,EAAQ8tC,2BACRztC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8tC,4BAEG,IAAhD9tC,EAAQ+tC,qCACR1tC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+tC,qCACjD,IAAI9jC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAktC,GAA6B,IAzE1C,cAA8ClhC,EAC1CrS,cACI8V,MAAM,mCAAoC,CACtC,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,yBAA0BykC,KAC9E,CAAE9oC,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBwkC,KACpE,CAAE7oC,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBukC,KACpE,CAAE5oC,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,IAEhE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEiuC,UAAW,EAAGC,KAAM,EAAGC,KAAM,EAAGC,qBAAsB,EAAGC,kBAAkB,GAItF,OAHAjrC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmD+W,EAAA1V,KAAMiK,EAAStL,GAC/DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwC,KAAA,EAChCqE,EAAAiuC,UAAYlkC,EAAOvN,QAC3B,MAC8B,KAAA,EACtBwD,EAAAkuC,KAAOnkC,EAAOvN,QACtB,MAC8B,KAAA,EACtBwD,EAAAmuC,KAAOpkC,EAAOvN,QACtB,MACsC,KAAA,EAC9BwD,EAAAouC,qBAAuBrkC,EAAOxM,SACtC,MAC+B,KAAA,EACvByC,EAAAquC,iBAAmBtkC,EAAOhN,OAClC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqCK,EAAuByG,GAElD,IAAtB9G,EAAQiuC,WACR5tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiuC,WAE5B,IAAjBjuC,EAAQkuC,MACR7tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkuC,MAE5B,IAAjBluC,EAAQmuC,MACR9tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmuC,MAEZ,IAAjCnuC,EAAQouC,sBACR/tC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQouC,uBAEhB,IAA7BpuC,EAAQquC,kBACRhuC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQquC,kBAChD,IAAIpkC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAiuC,GAAoB,IA3DjC,cAAqCjiC,EACjCrS,cACI8V,MAAM,0BAA2B,CAC7B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM+pC,IACrD,CAAEpuC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM0kC,IACpD,CAAE/oC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMgqC,KAE5D,CACA/jC,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC0C+W,EAAA1V,KAAMiK,EAAStL,GACtDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiD,KAAA,EACzCqE,EAAAijB,SAAWsrB,GAA2BnkC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC3G,MACoC,KAAA,EAC5BjjB,EAAAkjB,QAAUgmB,GAAe9+B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC9F,MAC+C,KAAA,EACvCljB,EAAA8G,QAAU0nC,GAA0BpkC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACzG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA4BK,EAAuByG,GAE/D9G,EAAQijB,UACRsrB,GAA2BnjC,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1HqC,EAAQkjB,SACRgmB,GAAe99B,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8G,SACR0nC,GAA0BpjC,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAkuC,GAA6B,IAzE1C,cAA8CliC,EAC1CrS,cACI8V,MAAM,mCAAoC,CACtC,CAAE3P,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,KAEpE,CACA5R,OAAO/V,GACG,MAAAsL,EAAU,CAAEyuC,aAAa,EAAOC,eAAe,EAAOC,kBAAkB,EAAOC,UAAW,GAIzF,OAHAxrC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmD+W,EAAA1V,KAAMiK,EAAStL,GAC/DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAAyuC,YAAc1kC,EAAOhN,OAC7B,MAC4B,KAAA,EACpBiD,EAAA0uC,cAAgB3kC,EAAOhN,OAC/B,MAC+B,KAAA,EACvBiD,EAAA2uC,iBAAmB5kC,EAAOhN,OAClC,MACyB,KAAA,EACjBiD,EAAA4uC,UAAY7kC,EAAOxM,SAC3B,MAC4C,KAAA,EACpCyC,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MAAA,QAEA,IAAI5iB,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqCK,EAAuByG,IAEhD,IAAxB9G,EAAQyuC,aACRpuC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQyuC,cAElB,IAA1BzuC,EAAQ0uC,eACRruC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0uC,gBAEf,IAA7B1uC,EAAQ2uC,kBACRtuC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2uC,kBAEtB,IAAtB3uC,EAAQ4uC,WACRvuC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ4uC,WAE7C5uC,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAmuC,GAA4B,IAzEzC,cAA6CniC,EACzCrS,cACI8V,MAAM,kCAAmC,CACrC,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,yBAA0BykC,KAC9E,CAAE9oC,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBwkC,KACpE,CAAE7oC,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBukC,KACpE,CAAE5oC,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,IAEhE,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEiuC,UAAW,EAAGC,KAAM,EAAGC,KAAM,EAAGC,qBAAsB,EAAGC,kBAAkB,GAItF,OAHAjrC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkD+W,EAAA1V,KAAMiK,EAAStL,GAC9DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwC,KAAA,EAChCqE,EAAAiuC,UAAYlkC,EAAOvN,QAC3B,MAC8B,KAAA,EACtBwD,EAAAkuC,KAAOnkC,EAAOvN,QACtB,MAC8B,KAAA,EACtBwD,EAAAmuC,KAAOpkC,EAAOvN,QACtB,MACsC,KAAA,EAC9BwD,EAAAouC,qBAAuBrkC,EAAOxM,SACtC,MAC+B,KAAA,EACvByC,EAAAquC,iBAAmBtkC,EAAOhN,OAClC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoCK,EAAuByG,GAEjD,IAAtB9G,EAAQiuC,WACR5tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiuC,WAE5B,IAAjBjuC,EAAQkuC,MACR7tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkuC,MAE5B,IAAjBluC,EAAQmuC,MACR9tC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmuC,MAEZ,IAAjCnuC,EAAQouC,sBACR/tC,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQouC,uBAEhB,IAA7BpuC,EAAQquC,kBACRhuC,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQquC,kBAChD,IAAIpkC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCn5CQ,IAAAwuC,IAAAA,IAIRA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,QAAQ,GAAR,QAIAA,EAAAA,MAAM,GAAN,MAhBQA,IAAAA,IAAA,CAAA,GAuBAC,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,gBAAgB,GAAhB,gBARQA,IAAAA,IAAA,CAAA,GAeAC,IAAAA,IAIRA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,WAAW,GAAX,WAZQA,IAAAA,IAAA,CAAA,GAoCAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,cAAc,GAAd,cAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,wBAAwB,OAAxB,wBAxHQA,IAAAA,IAAA,CAAA,GA6HAC,IAAAA,IAIRA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,oBAAoB,OAApB,oBAhCQA,IAAAA,IAAA,CAAA,GAmqBC,MAAAC,GAAc,IAhoB3B,cAA+B9iC,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEovC,eAAgB,EAAGC,YAAa,EAAGC,gBAAiB,EAAGC,gBAAiB,EAAGC,gBAAiB,EAAGC,oBAAqB,EAAGC,gBAAiB,EAAGC,YAAa,EAAGC,iBAAkB,EAAGl7B,YAAY,EAAOm7B,gBAAiB,EAAGC,qBAAsB,EAAGC,iBAAkB,EAAGC,eAAgB,EAAGC,cAAe,EAAGC,gBAAgB,EAAOC,WAAY,EAAGC,eAAgB,EAAGC,kBAAmB,EAAGC,cAAe,EAAG1+B,kBAAmB,EAAG2+B,aAAa,EAAOC,oBAAqB,EAAGC,YAAa,EAAGC,YAAa,EAAGC,MAAM,EAAOC,eAAgB,EAAGC,mBAAoB,EAAGC,WAAY,EAAGC,eAAe,EAAOC,kBAAmB,EAAGC,aAAc,EAAGC,iBAAkB,EAAGC,OAAQ,EAAGC,qBAAsB,EAAGC,cAAe,EAAGC,cAAe,EAAGC,OAAQ,EAAGC,WAAW,EAAOC,YAAa,EAAGn7B,eAAgB,EAAGo7B,cAAe,EAAGC,iBAAkB,EAAGC,gBAAiB,EAAGC,aAAc,EAAGC,WAAW,EAAOC,aAAc,EAAGC,UAAW,EAAGC,WAAY,EAAGC,YAAY,EAAOC,WAAY,EAAGC,aAAc,EAAGC,cAAe,EAAGC,YAAa,EAAGC,eAAe,EAAOC,UAAW,EAAGC,QAAS,EAAGC,YAAY,EAAOC,UAAW,EAAGC,kBAAmB,EAAGC,SAAU,EAAGC,UAAW,EAAGC,aAAc,EAAGzqB,UAAW,EAAG0qB,WAAY,EAAGC,YAAa,EAAGC,UAAU,EAAOC,iBAAkB,EAAGC,YAAa,EAAGC,gBAAiB,EAAGC,QAAS,EAAGC,UAAU,EAAOC,mBAAoB,EAAGC,WAAY,EAAGC,UAAW,EAAGn9B,aAAc,EAAGo9B,iBAAkB,EAAGC,YAAY,EAAOC,YAAa,EAAGC,mBAAoB,EAAGC,eAAgB,EAAGC,YAAa,EAAGC,sBAAsB,EAAOx/B,eAAgB,EAAGy/B,iBAAkB,EAAGC,YAAY,GAIxiD,OAHA/wC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6B,KAAA,EACrBqE,EAAAovC,eAAiBrlC,EAAOvN,QAChC,MAC0B,KAAA,EAClBwD,EAAAqvC,YAActlC,EAAOvN,QAC7B,MAC8B,KAAA,EACtBwD,EAAAsvC,gBAAkBvlC,EAAOvN,QACjC,MAC8B,KAAA,EACtBwD,EAAAuvC,gBAAkBxlC,EAAOvN,QACjC,MAC8B,KAAA,EACtBwD,EAAAwvC,gBAAkBzlC,EAAOvN,QACjC,MACkC,KAAA,EAC1BwD,EAAAyvC,oBAAsB1lC,EAAOvN,QACrC,MAC8B,KAAA,EACtBwD,EAAA0vC,gBAAkB3lC,EAAOvN,QACjC,MAC0B,KAAA,EAClBwD,EAAA2vC,YAAc5lC,EAAOvN,QAC7B,MACiC,KAAA,EACzBwD,EAAA4vC,iBAAmB7lC,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAA0U,WAAa3K,EAAOhN,OAC5B,MAC8B,KAAA,GACtBiD,EAAA6vC,gBAAkB9lC,EAAOvN,QACjC,MACmC,KAAA,GAC3BwD,EAAA8vC,qBAAuB/lC,EAAOvN,QACtC,MAC+B,KAAA,GACvBwD,EAAA+vC,iBAAmBhmC,EAAOvN,QAClC,MAC8B,KAAA,GACtBwD,EAAAgwC,eAAiBjmC,EAAOvN,QAChC,MAC4B,KAAA,GACpBwD,EAAAiwC,cAAgBlmC,EAAOvN,QAC/B,MAC6B,KAAA,GACrBwD,EAAAkwC,eAAiBnmC,EAAOhN,OAChC,MACyB,KAAA,GACjBiD,EAAAmwC,WAAapmC,EAAOvN,QAC5B,MAC6B,KAAA,GACrBwD,EAAAowC,eAAiBrmC,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAAqwC,kBAAoBtmC,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAAswC,cAAgBvmC,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAA4R,kBAAoB7H,EAAOvN,QACnC,MACyB,KAAA,GACjBwD,EAAAuwC,YAAcxmC,EAAOhN,OAC7B,MACkC,KAAA,GAC1BiD,EAAAwwC,oBAAsBzmC,EAAOvN,QACrC,MAC0B,KAAA,GAClBwD,EAAAywC,YAAc1mC,EAAOvN,QAC7B,MAC0B,KAAA,GAClBwD,EAAA0wC,YAAc3mC,EAAOvN,QAC7B,MACiB,KAAA,GACTwD,EAAA2wC,KAAO5mC,EAAOhN,OACtB,MAC6B,KAAA,GACrBiD,EAAA4wC,eAAiB7mC,EAAOvN,QAChC,MACiC,KAAA,GACzBwD,EAAA6wC,mBAAqB9mC,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAA8wC,WAAa/mC,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAA+wC,cAAgBhnC,EAAOhN,OAC/B,MACiC,KAAA,GACzBiD,EAAAgxC,kBAAoBjnC,EAAOvN,QACnC,MAC0B,KAAA,GAClBwD,EAAAixC,aAAelnC,EAAOvN,QAC9B,MAC+B,KAAA,GACvBwD,EAAAkxC,iBAAmBnnC,EAAOvN,QAClC,MACoB,KAAA,GACZwD,EAAAmxC,OAASpnC,EAAOvN,QACxB,MACmC,KAAA,GAC3BwD,EAAAoxC,qBAAuBrnC,EAAOvN,QACtC,MAC6B,KAAA,GACrBwD,EAAAqxC,cAAgBtnC,EAAOvN,QAC/B,MAC4B,KAAA,GACpBwD,EAAAsxC,cAAgBvnC,EAAOvN,QAC/B,MACoB,KAAA,GACZwD,EAAAuxC,OAASxnC,EAAOvN,QACxB,MACsB,KAAA,GACdwD,EAAAwxC,UAAYznC,EAAOhN,OAC3B,MAC0B,KAAA,GAClBiD,EAAAyxC,YAAc1nC,EAAOvN,QAC7B,MAC6B,KAAA,GACrBwD,EAAAsW,eAAiBvM,EAAOvN,QAChC,MAC4B,KAAA,GACpBwD,EAAA0xC,cAAgB3nC,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAA2xC,iBAAmB5nC,EAAOvN,QAClC,MAC+B,KAAA,GACvBwD,EAAA4xC,gBAAkB7nC,EAAOvN,QACjC,MAC2B,KAAA,GACnBwD,EAAA6xC,aAAe9nC,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAA8xC,UAAY/nC,EAAOhN,OAC3B,MAC2B,KAAA,GACnBiD,EAAA+xC,aAAehoC,EAAOvN,QAC9B,MACwB,KAAA,GAChBwD,EAAAgyC,UAAYjoC,EAAOvN,QAC3B,MACwB,KAAA,GAChBwD,EAAAiyC,WAAaloC,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAAkyC,WAAanoC,EAAOhN,OAC5B,MACyB,KAAA,GACjBiD,EAAAmyC,WAAapoC,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAAoyC,aAAeroC,EAAOvN,QAC9B,MAC4B,KAAA,GACpBwD,EAAAqyC,cAAgBtoC,EAAOvN,QAC/B,MACyB,KAAA,GACjBwD,EAAAsyC,YAAcvoC,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAuyC,cAAgBxoC,EAAOhN,OAC/B,MACwB,KAAA,GAChBiD,EAAAwyC,UAAYzoC,EAAOvN,QAC3B,MACqB,KAAA,GACbwD,EAAAyyC,QAAU1oC,EAAOvN,QACzB,MACwB,KAAA,GAChBwD,EAAA0yC,WAAa3oC,EAAOhN,OAC5B,MACuB,KAAA,GACfiD,EAAA2yC,UAAY5oC,EAAOvN,QAC3B,MACgC,KAAA,GACxBwD,EAAA4yC,kBAAoB7oC,EAAOvN,QACnC,MACuB,KAAA,GACfwD,EAAA6yC,SAAW9oC,EAAOvN,QAC1B,MACwB,KAAA,GAChBwD,EAAA8yC,UAAY/oC,EAAOvN,QAC3B,MAC2B,KAAA,GACnBwD,EAAA+yC,aAAehpC,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAAsoB,UAAYve,EAAOvN,QAC3B,MACwB,KAAA,GAChBwD,EAAAgzC,WAAajpC,EAAOvN,QAC5B,MAC0B,KAAA,GAClBwD,EAAAizC,YAAclpC,EAAOvN,QAC7B,MACsB,KAAA,GACdwD,EAAAkzC,SAAWnpC,EAAOhN,OAC1B,MAC+B,KAAA,GACvBiD,EAAAmzC,iBAAmBppC,EAAOvN,QAClC,MAC0B,KAAA,GAClBwD,EAAAozC,YAAcrpC,EAAOvN,QAC7B,MAC8B,KAAA,GACtBwD,EAAAqzC,gBAAkBtpC,EAAOvN,QACjC,MACqB,KAAA,GACbwD,EAAAszC,QAAUvpC,EAAOvN,QACzB,MACsB,KAAA,GACdwD,EAAAuzC,SAAWxpC,EAAOhN,OAC1B,MACmC,KAAA,GAC3BiD,EAAAwzC,mBAAqBzpC,EAAOvN,QACpC,MACyB,KAAA,GACjBwD,EAAAyzC,WAAa1pC,EAAOvN,QAC5B,MACyB,KAAA,GACjBwD,EAAA0zC,UAAY3pC,EAAOvN,QAC3B,MAC2B,KAAA,GACnBwD,EAAAuW,aAAexM,EAAOvN,QAC9B,MAC+B,KAAA,GACvBwD,EAAA2zC,iBAAmB5pC,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAA4zC,WAAa7pC,EAAOhN,OAC5B,MAC0B,KAAA,GAClBiD,EAAA6zC,YAAc9pC,EAAOvN,QAC7B,MACiC,KAAA,GACzBwD,EAAA8zC,mBAAqB/pC,EAAOvN,QACpC,MAC8B,KAAA,GACtBwD,EAAA+zC,eAAiBhqC,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAAg0C,YAAcjqC,EAAOvN,QAC7B,MACmC,KAAA,GAC3BwD,EAAAi0C,qBAAuBlqC,EAAOhN,OACtC,MAC6B,KAAA,GACrBiD,EAAAyU,eAAiB1K,EAAOvN,QAChC,MACiC,KAAA,GACzBwD,EAAAk0C,iBAAmBnqC,EAAOvN,QAClC,MACwB,KAAA,GAChBwD,EAAAm0C,WAAapqC,EAAOhN,OAC5B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAE9B,IAA3B9G,EAAQovC,gBACR/uC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQovC,gBAErB,IAAxBpvC,EAAQqvC,aACRhvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqvC,aAEjB,IAA5BrvC,EAAQsvC,iBACRjvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQsvC,iBAEjB,IAA5BtvC,EAAQuvC,iBACRlvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQuvC,iBAEjB,IAA5BvvC,EAAQwvC,iBACRnvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQwvC,iBAEb,IAAhCxvC,EAAQyvC,qBACRpvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyvC,qBAEjB,IAA5BzvC,EAAQ0vC,iBACRrvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0vC,iBAErB,IAAxB1vC,EAAQ2vC,aACRtvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2vC,aAEhB,IAA7B3vC,EAAQ4vC,kBACRvvC,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4vC,mBAEtB,IAAvB5vC,EAAQ0U,YACRrU,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0U,YAEjB,IAA5B1U,EAAQ6vC,iBACRxvC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6vC,iBAEb,IAAjC7vC,EAAQ8vC,sBACRzvC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8vC,sBAEjB,IAA7B9vC,EAAQ+vC,kBACR1vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+vC,kBAEnB,IAA3B/vC,EAAQgwC,gBACR3vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgwC,gBAEpB,IAA1BhwC,EAAQiwC,eACR5vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiwC,gBAEnB,IAA3BjwC,EAAQkwC,gBACR7vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkwC,gBAEtB,IAAvBlwC,EAAQmwC,YACR9vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmwC,YAEnB,IAA3BnwC,EAAQowC,gBACR/vC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQowC,gBAEhB,IAA9BpwC,EAAQqwC,mBACRhwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqwC,mBAEpB,IAA1BrwC,EAAQswC,eACRjwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQswC,eAEhB,IAA9BtwC,EAAQ4R,mBACRvR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4R,oBAEtB,IAAxB5R,EAAQuwC,aACRlwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuwC,aAEb,IAAhCvwC,EAAQwwC,qBACRnwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwwC,qBAEtB,IAAxBxwC,EAAQywC,aACRpwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQywC,aAEtB,IAAxBzwC,EAAQ0wC,aACRrwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0wC,cAE7B,IAAjB1wC,EAAQ2wC,MACRtwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2wC,MAElB,IAA3B3wC,EAAQ4wC,gBACRvwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4wC,gBAEf,IAA/B5wC,EAAQ6wC,oBACRxwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6wC,oBAEvB,IAAvB7wC,EAAQ8wC,YACRzwC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8wC,aAEpB,IAA1B9wC,EAAQ+wC,eACR1wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+wC,eAEf,IAA9B/wC,EAAQgxC,mBACR3wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgxC,mBAErB,IAAzBhxC,EAAQixC,cACR5wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQixC,cAEjB,IAA7BjxC,EAAQkxC,kBACR7wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkxC,kBAE3B,IAAnBlxC,EAAQmxC,QACR9wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmxC,QAEb,IAAjCnxC,EAAQoxC,sBACR/wC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoxC,sBAEpB,IAA1BpxC,EAAQqxC,eACRhxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqxC,eAEpB,IAA1BrxC,EAAQsxC,eACRjxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsxC,eAE3B,IAAnBtxC,EAAQuxC,QACRlxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuxC,SAExB,IAAtBvxC,EAAQwxC,WACRnxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwxC,WAErB,IAAxBxxC,EAAQyxC,aACRpxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyxC,aAEnB,IAA3BzxC,EAAQsW,gBACRjW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsW,gBAEpB,IAA1BtW,EAAQ0xC,eACRrxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0xC,eAEjB,IAA7B1xC,EAAQ2xC,kBACRtxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2xC,kBAElB,IAA5B3xC,EAAQ4xC,iBACRvxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4xC,iBAErB,IAAzB5xC,EAAQ6xC,cACRxxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6xC,eAExB,IAAtB7xC,EAAQ8xC,WACRzxC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ8xC,WAEpB,IAAzB9xC,EAAQ+xC,cACR1xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+xC,cAExB,IAAtB/xC,EAAQgyC,WACR3xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgyC,WAEvB,IAAvBhyC,EAAQiyC,YACR5xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiyC,aAEvB,IAAvBjyC,EAAQkyC,YACR7xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkyC,YAEtB,IAAvBlyC,EAAQmyC,YACR9xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmyC,YAErB,IAAzBnyC,EAAQoyC,cACR/xC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoyC,cAEpB,IAA1BpyC,EAAQqyC,eACRhyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqyC,eAEtB,IAAxBryC,EAAQsyC,aACRjyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsyC,cAEpB,IAA1BtyC,EAAQuyC,eACRlyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuyC,eAEvB,IAAtBvyC,EAAQwyC,WACRnyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwyC,WAE1B,IAApBxyC,EAAQyyC,SACRpyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyyC,UAEvB,IAAvBzyC,EAAQ0yC,YACRryC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0yC,YAEvB,IAAtB1yC,EAAQ2yC,WACRtyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2yC,WAEhB,IAA9B3yC,EAAQ4yC,mBACRvyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4yC,mBAEzB,IAArB5yC,EAAQ6yC,UACRxyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6yC,UAExB,IAAtB7yC,EAAQ8yC,WACRzyC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8yC,WAErB,IAAzB9yC,EAAQ+yC,cACR1yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+yC,cAExB,IAAtB/yC,EAAQsoB,WACRjoB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsoB,WAEvB,IAAvBtoB,EAAQgzC,YACR3yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgzC,YAEtB,IAAxBhzC,EAAQizC,aACR5yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQizC,cAEzB,IAArBjzC,EAAQkzC,UACR7yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkzC,UAEhB,IAA7BlzC,EAAQmzC,kBACR9yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmzC,kBAEtB,IAAxBnzC,EAAQozC,aACR/yC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQozC,aAElB,IAA5BpzC,EAAQqzC,iBACRhzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqzC,iBAE1B,IAApBrzC,EAAQszC,SACRjzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQszC,UAEzB,IAArBtzC,EAAQuzC,UACRlzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQuzC,UAEd,IAA/BvzC,EAAQwzC,oBACRnzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwzC,oBAEvB,IAAvBxzC,EAAQyzC,YACRpzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyzC,YAExB,IAAtBzzC,EAAQ0zC,WACRrzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0zC,WAErB,IAAzB1zC,EAAQuW,cACRlW,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuW,cAEjB,IAA7BvW,EAAQ2zC,kBACRtzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2zC,mBAEvB,IAAvB3zC,EAAQ4zC,YACRvzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4zC,YAErB,IAAxB5zC,EAAQ6zC,aACRxzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6zC,aAEf,IAA/B7zC,EAAQ8zC,oBACRzzC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8zC,oBAEnB,IAA3B9zC,EAAQ+zC,gBACR1zC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+zC,gBAEtB,IAAxB/zC,EAAQg0C,aACR3zC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg0C,cAEb,IAAjCh0C,EAAQi0C,sBACR5zC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQi0C,sBAElB,IAA3Bj0C,EAAQyU,gBACRpU,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyU,gBAEjB,IAA7BzU,EAAQk0C,kBACR7zC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk0C,mBAEvB,IAAvBl0C,EAAQm0C,YACR9zC,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQm0C,YACjD,IAAIlqC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA+zC,GAAO,IA3DpB,cAAwB/nC,EACpBrS,cACI8V,MAAM,aAAc,CAChB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM6vC,IACrD,CAAEl0C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM2qC,IACpD,CAAEhvC,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM8vC,KAE5D,CACA7pC,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6B+W,EAAA1V,KAAMiK,EAAStL,GACzCsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoC,KAAA,EAC5BqE,EAAAijB,SAAWoxB,GAAcjqC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAC9F,MACiC,KAAA,EACzBjjB,EAAAkjB,QAAUisB,GAAY/kC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC3F,MACkC,KAAA,EAC1BljB,EAAA8G,QAAUwtC,GAAalqC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC5F,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAeK,EAAuByG,GAElD9G,EAAQijB,UACRoxB,GAAcjpC,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQkjB,SACRisB,GAAY/jC,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQ8G,SACRwtC,GAAalpC,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC/G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAwIS,MAAAg0C,GAAgB,IAjI7B,cAAiChoC,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,2BAA4BqqC,KAC3E,CAAE1uC,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,EAAGsC,KAAM,wCAAyCM,KAAM,SAAUyB,EAAG,GAC3E,CAAErE,GAAI,EAAGsC,KAAM,uCAAwCM,KAAM,SAAUyB,EAAG,GAC1E,CAAErE,GAAI,GAAIsC,KAAM,+BAAgCM,KAAM,SAAUyB,EAAG,GACnE,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,uCAAwCsqC,KACrG,CAAE3uC,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,iCAAkCM,KAAM,SAAUyB,EAAG,GACpE,CAAErE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kCAAmCuqC,MAEzF,CACAtkC,OAAO/V,GACG,MAAAsL,EAAU,CAAEb,KAAM,EAAGo1C,uBAAwB,EAAGC,gCAAiC,EAAGC,+BAAgC,EAAGC,yBAA0B,EAAGC,iBAAkB,EAAGC,wBAAwB,EAAOC,gBAAiB,EAAGC,uBAAuB,EAAOC,WAAY,EAAGC,mBAAmB,EAAOC,4BAA6B,EAAGC,IAAK,GAIvU,OAHA9xC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAAb,KAAO4K,EAAOvN,QACtB,MACuC,KAAA,EAC/BwD,EAAAu0C,uBAAyBxqC,EAAOvN,QACxC,MACmD,KAAA,EAC3CwD,EAAAw0C,gCAAkCzqC,EAAOvN,QACjD,MACkD,KAAA,EAC1CwD,EAAAy0C,+BAAiC1qC,EAAOvN,QAChD,MAC0C,KAAA,GAClCwD,EAAA00C,yBAA2B3qC,EAAOvN,QAC1C,MAC+D,KAAA,EACvDwD,EAAA20C,iBAAmB5qC,EAAOvN,QAClC,MACqC,KAAA,EAC7BwD,EAAA40C,uBAAyB7qC,EAAOhN,OACxC,MAC+B,KAAA,EACvBiD,EAAA60C,gBAAkB9qC,EAAOvN,QACjC,MACqC,KAAA,GAC7BwD,EAAA80C,sBAAwB/qC,EAAOhN,OACvC,MACyB,KAAA,GACjBiD,EAAA+0C,WAAahrC,EAAOvN,QAC5B,MACgC,KAAA,GACxBwD,EAAAg1C,kBAAoBjrC,EAAOhN,OACnC,MAC6C,KAAA,EACrCiD,EAAAi1C,4BAA8BlrC,EAAOxM,SAC7C,MAC2C,KAAA,EACnCyC,EAAAk1C,IAAMnrC,EAAOvN,QACrB,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE1C,IAAjB9G,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAEV,IAAnCa,EAAQu0C,wBACRl0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQu0C,wBAED,IAA5Cv0C,EAAQw0C,iCACRn0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQw0C,iCAEF,IAA3Cx0C,EAAQy0C,gCACRp0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQy0C,gCAER,IAArCz0C,EAAQ00C,0BACRr0C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ00C,0BAEjB,IAA7B10C,EAAQ20C,kBACRt0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ20C,mBAEV,IAAnC30C,EAAQ40C,wBACRv0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ40C,wBAEhB,IAA5B50C,EAAQ60C,iBACRx0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ60C,kBAEX,IAAlC70C,EAAQ80C,uBACRz0C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ80C,uBAEtB,IAAvB90C,EAAQ+0C,YACR10C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+0C,aAEhB,IAA9B/0C,EAAQg1C,mBACR30C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQg1C,mBAEL,IAAxCh1C,EAAQi1C,6BACR50C,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQi1C,6BAE7B,IAAhBj1C,EAAQk1C,KACR70C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQk1C,KACjD,IAAIjrC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAi0C,GAAe,IA3D5B,cAAgCjoC,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+BAAgCwqC,KAChF,CAAE7uC,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,IAExE,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEqzB,MAAO,EAAG8hB,eAAgB,EAAGC,wBAAyB,GAIjE,OAHAhyC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC0C,KAAA,EAClCqE,EAAAqzB,MAAQtpB,EAAOvN,QACvB,MAC6B,KAAA,EACrBwD,EAAAm1C,eAAiBprC,EAAOvN,QAChC,MACwC,KAAA,EAChCwD,EAAAo1C,wBAA0BrrC,EAAOvN,QACzC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAExC,IAAlB9G,EAAQqzB,OACRhzB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqzB,OAElB,IAA3BrzB,EAAQm1C,gBACR90C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQm1C,gBAET,IAApCn1C,EAAQo1C,yBACR/0C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQo1C,yBACjD,IAAInrC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GC7/BQ,IAAAg1C,IAAAA,IAIRA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,SAAS,GAAT,SAhBQA,IAAAA,IAAA,CAAA,GAqBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,eAAe,GAAf,eAIAA,EAAAA,eAAe,GAAf,eAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,gBAAgB,IAAhB,gBAIAA,EAAAA,wBAAwB,IAAxB,wBAIAA,EAAAA,gBAAgB,IAAhB,gBAIAA,EAAAA,SAAS,IAAT,SAxDQA,IAAAA,IAAA,CAAA,GA0FAC,IAAAA,IAIRA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,gBAAgB,GAAhB,gBAIAA,EAAAA,kBAAkB,GAAlB,kBAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,mBAAmB,GAAnB,mBAhCQA,IAAAA,IAAA,CAAA,GAqCAC,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,aAAa,GAAb,aAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,MAAM,GAAN,MAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,aAAa,IAAb,aAIAA,EAAAA,UAAU,IAAV,UAIAA,EAAAA,QAAQ,IAAR,QAIAA,EAAAA,OAAO,IAAP,OAIAA,EAAAA,YAAY,IAAZ,YAIAA,EAAAA,SAAS,IAAT,SAIAA,EAAAA,UAAU,IAAV,UAIAA,EAAAA,QAAQ,IAAR,QAIAA,EAAAA,UAAU,IAAV,UAIAA,EAAAA,UAAU,IAAV,UAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,SAAS,IAAT,SAIAA,EAAAA,cAAc,IAAd,cAIAA,EAAAA,WAAW,IAAX,WAIAA,EAAAA,cAAc,IAAd,cAIAA,EAAAA,SAAS,IAAT,SAIAA,EAAAA,cAAc,IAAd,cAIAA,EAAAA,OAAO,IAAP,OAIAA,EAAAA,cAAc,IAAd,cAIAA,EAAAA,OAAO,IAAP,OAIAA,EAAAA,OAAO,IAAP,OApIQA,IAAAA,IAAA,CAAA,GAyIAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,0BAA0B,OAA1B,0BAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,uBAAuB,OAAvB,uBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,wBAAwB,OAAxB,wBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,qBAAqB,OAArB,qBAhHQA,IAAAA,IAAA,CAAA,GAqHAC,IAAAA,IAIRA,EAAAA,uBAAuB,GAAvB,uBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,iBAAiB,OAAjB,iBA5BQA,IAAAA,IAAA,CAAA,GA4nBC,MAAAC,GAAgB,IA7lB7B,cAAiCvpC,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GACjE,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,gCAAiCM,KAAM,SAAUyB,EAAG,GACnE,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC/D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,+BAAgCM,KAAM,SAAUyB,EAAG,GACnE,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE61C,wBAAyB,EAAGC,kBAAmB,EAAGC,YAAa,EAAGC,0BAA2B,EAAGC,UAAW,EAAGC,kBAAmB,EAAGC,YAAa,EAAGC,eAAe,EAAOC,cAAe,EAAGC,gBAAiB,EAAGC,SAAU,EAAGC,WAAY,EAAGC,cAAc,EAAOC,kBAAmB,EAAGC,cAAe,EAAGC,OAAQ,EAAGllC,qBAAsB,EAAGmlC,cAAc,EAAOC,gBAAiB,EAAGC,aAAc,EAAGC,kBAAmB,EAAGC,UAAW,EAAGC,gBAAgB,EAAOC,aAAc,EAAGC,eAAgB,EAAGC,cAAc,EAAOC,uBAAwB,EAAGC,WAAY,EAAGC,YAAa,EAAGC,WAAY,EAAGC,oBAAqB,EAAGC,YAAa,EAAGC,eAAgB,EAAGC,mBAAoB,EAAGC,WAAW,EAAOC,aAAc,EAAGC,eAAgB,EAAGC,WAAY,EAAGC,kBAAmB,EAAGC,WAAW,EAAOC,QAAS,EAAGC,iBAAkB,EAAGC,2BAA4B,EAAGC,cAAe,EAAG3nC,cAAc,EAAO4nC,gBAAiB,EAAGC,eAAgB,EAAGC,kBAAmB,EAAGC,WAAY,EAAGC,eAAe,EAAOC,mBAAoB,EAAGC,eAAgB,EAAGC,aAAa,EAAOC,iBAAkB,EAAGC,QAAS,EAAGC,cAAe,EAAGC,WAAY,EAAGC,WAAY,EAAGC,YAAa,EAAGC,kBAAmB,EAAGC,YAAa,EAAGC,aAAa,EAAOzzB,WAAY,EAAG0zB,gBAAiB,EAAGC,IAAK,EAAGC,YAAa,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,eAAe,EAAO9b,kBAAmB,EAAG+b,gBAAiB,EAAGC,eAAgB,EAAGC,aAAa,EAAOC,gBAAiB,EAAGC,gBAAiB,EAAGC,cAAe,EAAGC,gBAAiB,EAAGC,YAAY,EAAOC,eAAgB,EAAGjmC,aAAc,EAAGkmC,eAAe,GAI1gD,OAHAp3C,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyC,KAAA,EACjCqE,EAAA61C,wBAA0B9rC,EAAOvN,QACzC,MACgC,KAAA,EACxBwD,EAAA81C,kBAAoB/rC,EAAOvN,QACnC,MAC0B,KAAA,EAClBwD,EAAA+1C,YAAchsC,EAAOvN,QAC7B,MAC2C,KAAA,EACnCwD,EAAAg2C,0BAA4BjsC,EAAOvN,QAC3C,MACwB,KAAA,EAChBwD,EAAAi2C,UAAYlsC,EAAOvN,QAC3B,MACiC,KAAA,EACzBwD,EAAAk2C,kBAAoBnsC,EAAOvN,QACnC,MACyB,KAAA,EACjBwD,EAAAm2C,YAAcpsC,EAAOvN,QAC7B,MAC2B,KAAA,EACnBwD,EAAAo2C,cAAgBrsC,EAAOhN,OAC/B,MAC4B,KAAA,EACpBiD,EAAAq2C,cAAgBtsC,EAAOvN,QAC/B,MAC+B,KAAA,GACvBwD,EAAAs2C,gBAAkBvsC,EAAOvN,QACjC,MACsB,KAAA,GACdwD,EAAAu2C,SAAWxsC,EAAOvN,QAC1B,MACyB,KAAA,GACjBwD,EAAAw2C,WAAazsC,EAAOvN,QAC5B,MACyB,KAAA,GACjBwD,EAAAy2C,aAAe1sC,EAAOhN,OAC9B,MACgC,KAAA,GACxBiD,EAAA02C,kBAAoB3sC,EAAOvN,QACnC,MAC4B,KAAA,GACpBwD,EAAA22C,cAAgB5sC,EAAOvN,QAC/B,MACoB,KAAA,GACZwD,EAAA42C,OAAS7sC,EAAOvN,QACxB,MACmC,KAAA,GAC3BwD,EAAA0R,qBAAuB3H,EAAOvN,QACtC,MAC0B,KAAA,GAClBwD,EAAA62C,aAAe9sC,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAA82C,gBAAkB/sC,EAAOvN,QACjC,MAC0B,KAAA,GAClBwD,EAAA+2C,aAAehtC,EAAOvN,QAC9B,MACgC,KAAA,GACxBwD,EAAAg3C,kBAAoBjtC,EAAOvN,QACnC,MACuB,KAAA,GACfwD,EAAAi3C,UAAYltC,EAAOvN,QAC3B,MAC6B,KAAA,GACrBwD,EAAAk3C,eAAiBntC,EAAOhN,OAChC,MAC2B,KAAA,GACnBiD,EAAAm3C,aAAeptC,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAAo3C,eAAiBrtC,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAAq3C,aAAettC,EAAOhN,OAC9B,MACsC,KAAA,GAC9BiD,EAAAs3C,uBAAyBvtC,EAAOvN,QACxC,MACyB,KAAA,GACjBwD,EAAAu3C,WAAaxtC,EAAOvN,QAC5B,MAC0B,KAAA,GAClBwD,EAAAw3C,YAAcztC,EAAOvN,QAC7B,MACyB,KAAA,GACjBwD,EAAAy3C,WAAa1tC,EAAOvN,QAC5B,MACmC,KAAA,GAC3BwD,EAAA03C,oBAAsB3tC,EAAOvN,QACrC,MAC0B,KAAA,GAClBwD,EAAA23C,YAAc5tC,EAAOvN,QAC7B,MAC+B,KAAA,GACvBwD,EAAA43C,eAAiB7tC,EAAOvN,QAChC,MACkC,KAAA,GAC1BwD,EAAA63C,mBAAqB9tC,EAAOvN,QACpC,MACuB,KAAA,GACfwD,EAAA83C,UAAY/tC,EAAOhN,OAC3B,MAC2B,KAAA,GACnBiD,EAAA+3C,aAAehuC,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAAg4C,eAAiBjuC,EAAOvN,QAChC,MACwB,KAAA,GAChBwD,EAAAi4C,WAAaluC,EAAOvN,QAC5B,MACgC,KAAA,GACxBwD,EAAAk4C,kBAAoBnuC,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAAm4C,UAAYpuC,EAAOhN,OAC3B,MACqB,KAAA,GACbiD,EAAAo4C,QAAUruC,EAAOvN,QACzB,MAC+B,KAAA,GACvBwD,EAAAq4C,iBAAmBtuC,EAAOvN,QAClC,MAC0C,KAAA,GAClCwD,EAAAs4C,2BAA6BvuC,EAAOvN,QAC5C,MAC4B,KAAA,GACpBwD,EAAAu4C,cAAgBxuC,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAA4Q,aAAe7G,EAAOhN,OAC9B,MAC8B,KAAA,GACtBiD,EAAAw4C,gBAAkBzuC,EAAOvN,QACjC,MAC6B,KAAA,GACrBwD,EAAAy4C,eAAiB1uC,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAA04C,kBAAoB3uC,EAAOvN,QACnC,MACyB,KAAA,GACjBwD,EAAA24C,WAAa5uC,EAAOvN,QAC5B,MAC2B,KAAA,GACnBwD,EAAA44C,cAAgB7uC,EAAOhN,OAC/B,MACkC,KAAA,GAC1BiD,EAAA64C,mBAAqB9uC,EAAOvN,QACpC,MAC8B,KAAA,GACtBwD,EAAA84C,eAAiB/uC,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAA+4C,YAAchvC,EAAOhN,OAC7B,MAC+B,KAAA,GACvBiD,EAAAg5C,iBAAmBjvC,EAAOvN,QAClC,MACsB,KAAA,GACdwD,EAAAi5C,QAAUlvC,EAAOvN,QACzB,MAC4B,KAAA,GACpBwD,EAAAk5C,cAAgBnvC,EAAOvN,QAC/B,MACwB,KAAA,GAChBwD,EAAAm5C,WAAapvC,EAAOvN,QAC5B,MACwB,KAAA,GAChBwD,EAAAo5C,WAAarvC,EAAOvN,QAC5B,MAC0B,KAAA,GAClBwD,EAAAq5C,YAActvC,EAAOvN,QAC7B,MACgC,KAAA,GACxBwD,EAAAs5C,kBAAoBvvC,EAAOvN,QACnC,MACyB,KAAA,GACjBwD,EAAAu5C,YAAcxvC,EAAOvN,QAC7B,MACyB,KAAA,GACjBwD,EAAAw5C,YAAczvC,EAAOhN,OAC7B,MACwB,KAAA,GAChBiD,EAAA+lB,WAAahc,EAAOvN,QAC5B,MAC8B,KAAA,GACtBwD,EAAAy5C,gBAAkB1vC,EAAOvN,QACjC,MACmB,KAAA,GACXwD,EAAA05C,IAAM3vC,EAAOvN,QACrB,MAC2B,KAAA,GACnBwD,EAAA25C,YAAc5vC,EAAOvN,QAC7B,MAC4B,KAAA,GACpBwD,EAAA45C,aAAe7vC,EAAOvN,QAC9B,MAC6B,KAAA,GACrBwD,EAAA65C,eAAiB9vC,EAAOvN,QAChC,MAC0B,KAAA,GAClBwD,EAAA85C,cAAgB/vC,EAAOhN,OAC/B,MACgC,KAAA,GACxBiD,EAAAg+B,kBAAoBj0B,EAAOvN,QACnC,MAC6B,KAAA,GACrBwD,EAAA+5C,gBAAkBhwC,EAAOvN,QACjC,MAC6B,KAAA,GACrBwD,EAAAg6C,eAAiBjwC,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAAi6C,YAAclwC,EAAOhN,OAC7B,MACgC,KAAA,GACxBiD,EAAAk6C,gBAAkBnwC,EAAOvN,QACjC,MAC8B,KAAA,GACtBwD,EAAAm6C,gBAAkBpwC,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAAo6C,cAAgBrwC,EAAOvN,QAC/B,MACgC,KAAA,GACxBwD,EAAAq6C,gBAAkBtwC,EAAOvN,QACjC,MACwB,KAAA,GAChBwD,EAAAs6C,WAAavwC,EAAOhN,OAC5B,MAC6B,KAAA,GACrBiD,EAAAu6C,eAAiBxwC,EAAOvN,QAChC,MAC2B,KAAA,GACnBwD,EAAAsU,aAAevK,EAAOvN,QAC9B,MAC2B,KAAA,GACnBwD,EAAAw6C,cAAgBzwC,EAAOhN,OAC/B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAEvB,IAApC9G,EAAQ61C,yBACRx1C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ61C,yBAEf,IAA9B71C,EAAQ81C,mBACRz1C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ81C,mBAErB,IAAxB91C,EAAQ+1C,aACR11C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+1C,aAEP,IAAtC/1C,EAAQg2C,2BACR31C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQg2C,2BAEvB,IAAtBh2C,EAAQi2C,WACR51C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQi2C,WAEf,IAA9Bj2C,EAAQk2C,mBACR71C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQk2C,mBAErB,IAAxBl2C,EAAQm2C,aACR91C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQm2C,cAEnB,IAA1Bn2C,EAAQo2C,eACR/1C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQo2C,eAElB,IAA1Bp2C,EAAQq2C,eACRh2C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq2C,eAEjB,IAA5Br2C,EAAQs2C,iBACRj2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs2C,iBAEzB,IAArBt2C,EAAQu2C,UACRl2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu2C,UAEvB,IAAvBv2C,EAAQw2C,YACRn2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw2C,aAErB,IAAzBx2C,EAAQy2C,cACRp2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQy2C,cAEf,IAA9Bz2C,EAAQ02C,mBACRr2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ02C,mBAEpB,IAA1B12C,EAAQ22C,eACRt2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ22C,eAE3B,IAAnB32C,EAAQ42C,QACRv2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ42C,QAEb,IAAjC52C,EAAQ0R,sBACRrR,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0R,uBAErB,IAAzB1R,EAAQ62C,cACRx2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ62C,cAEjB,IAA5B72C,EAAQ82C,iBACRz2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ82C,iBAErB,IAAzB92C,EAAQ+2C,cACR12C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+2C,cAEhB,IAA9B/2C,EAAQg3C,mBACR32C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg3C,mBAExB,IAAtBh3C,EAAQi3C,WACR52C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi3C,YAEnB,IAA3Bj3C,EAAQk3C,gBACR72C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQk3C,gBAEpB,IAAzBl3C,EAAQm3C,cACR92C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm3C,cAEnB,IAA3Bn3C,EAAQo3C,gBACR/2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo3C,iBAErB,IAAzBp3C,EAAQq3C,cACRh3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQq3C,cAEV,IAAnCr3C,EAAQs3C,wBACRj3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs3C,wBAEvB,IAAvBt3C,EAAQu3C,YACRl3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu3C,YAEtB,IAAxBv3C,EAAQw3C,aACRn3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw3C,aAEvB,IAAvBx3C,EAAQy3C,YACRp3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy3C,YAEd,IAAhCz3C,EAAQ03C,qBACRr3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ03C,qBAEtB,IAAxB13C,EAAQ23C,aACRt3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ23C,aAEnB,IAA3B33C,EAAQ43C,gBACRv3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ43C,gBAEf,IAA/B53C,EAAQ63C,oBACRx3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ63C,qBAExB,IAAtB73C,EAAQ83C,WACRz3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ83C,WAEpB,IAAzB93C,EAAQ+3C,cACR13C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+3C,cAEnB,IAA3B/3C,EAAQg4C,gBACR33C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg4C,gBAEvB,IAAvBh4C,EAAQi4C,YACR53C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi4C,YAEhB,IAA9Bj4C,EAAQk4C,mBACR73C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk4C,oBAExB,IAAtBl4C,EAAQm4C,WACR93C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQm4C,WAEzB,IAApBn4C,EAAQo4C,SACR/3C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo4C,SAEjB,IAA7Bp4C,EAAQq4C,kBACRh4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq4C,kBAEP,IAAvCr4C,EAAQs4C,4BACRj4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs4C,4BAEpB,IAA1Bt4C,EAAQu4C,eACRl4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu4C,gBAErB,IAAzBv4C,EAAQ4Q,cACRvQ,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4Q,cAEjB,IAA5B5Q,EAAQw4C,iBACRn4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw4C,iBAEnB,IAA3Bx4C,EAAQy4C,gBACRp4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy4C,gBAEhB,IAA9Bz4C,EAAQ04C,mBACRr4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ04C,mBAEvB,IAAvB14C,EAAQ24C,YACRt4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ24C,aAEpB,IAA1B34C,EAAQ44C,eACRv4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ44C,eAEd,IAA/B54C,EAAQ64C,oBACRx4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ64C,oBAEnB,IAA3B74C,EAAQ84C,gBACRz4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ84C,iBAEtB,IAAxB94C,EAAQ+4C,aACR14C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+4C,aAEhB,IAA7B/4C,EAAQg5C,kBACR34C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg5C,kBAE1B,IAApBh5C,EAAQi5C,SACR54C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi5C,SAEpB,IAA1Bj5C,EAAQk5C,eACR74C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk5C,eAEvB,IAAvBl5C,EAAQm5C,YACR94C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm5C,YAEvB,IAAvBn5C,EAAQo5C,YACR/4C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo5C,YAEtB,IAAxBp5C,EAAQq5C,aACRh5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq5C,aAEhB,IAA9Br5C,EAAQs5C,mBACRj5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs5C,mBAEtB,IAAxBt5C,EAAQu5C,aACRl5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu5C,cAEtB,IAAxBv5C,EAAQw5C,aACRn5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQw5C,aAEtB,IAAvBx5C,EAAQ+lB,YACR1lB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+lB,YAElB,IAA5B/lB,EAAQy5C,iBACRp5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy5C,iBAE9B,IAAhBz5C,EAAQ05C,KACRr5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ05C,KAEtB,IAAxB15C,EAAQ25C,aACRt5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ25C,aAErB,IAAzB35C,EAAQ45C,cACRv5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ45C,cAEnB,IAA3B55C,EAAQ65C,gBACRx5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ65C,iBAEpB,IAA1B75C,EAAQ85C,eACRz5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ85C,eAEf,IAA9B95C,EAAQg+B,mBACR39B,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg+B,mBAElB,IAA5Bh+B,EAAQ+5C,iBACR15C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+5C,iBAEnB,IAA3B/5C,EAAQg6C,gBACR35C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg6C,iBAEtB,IAAxBh6C,EAAQi6C,aACR55C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQi6C,aAEjB,IAA5Bj6C,EAAQk6C,iBACR75C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQk6C,iBAElB,IAA5Bl6C,EAAQm6C,iBACR95C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm6C,iBAEpB,IAA1Bn6C,EAAQo6C,eACR/5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo6C,eAElB,IAA5Bp6C,EAAQq6C,iBACRh6C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq6C,kBAEvB,IAAvBr6C,EAAQs6C,YACRj6C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQs6C,YAElB,IAA3Bt6C,EAAQu6C,gBACRl6C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu6C,gBAErB,IAAzBv6C,EAAQsU,cACRjU,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsU,eAEpB,IAA1BtU,EAAQw6C,eACRn6C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQw6C,eACjD,IAAIvwC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgTS,MAAAo6C,GAAmB,IAzShC,cAAoCpuC,EAChCrS,cACI8V,MAAM,yBAA0B,CAC5B,CAAE3P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,IAEzD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE06C,cAAe,EAAGC,MAAM,EAAOC,aAAc,EAAGC,aAAc,EAAGC,YAAY,EAAOC,SAAU,EAAGC,UAAW,EAAGC,aAAc,EAAGC,eAAgB,EAAGC,YAAa,EAAGC,eAAe,EAAOC,gBAAiB,EAAGC,SAAU,EAAGC,cAAe,EAAGC,eAAe,EAAOC,gBAAgB,EAAOC,YAAY,EAAOC,iBAAkB,EAAGC,SAAU,EAAGC,iBAAiB,EAAOC,cAAe,EAAGC,aAAc,EAAGC,mBAAmB,EAAOC,YAAa,EAAGC,OAAO,EAAOC,gBAAgB,EAAOC,eAAe,EAAOC,YAAa,EAAGC,QAAQ,EAAOC,gBAAiB,EAAGC,WAAY,EAAGC,SAAU,EAAGC,cAAc,EAAOlzB,WAAW,EAAOmzB,OAAO,EAAOC,WAAW,EAAOC,WAAY,GAI3pB,OAHAz5C,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACyC+W,EAAA1V,KAAMiK,EAAStL,GACrDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4B,KAAA,EACpBqE,EAAA06C,cAAgB3wC,EAAOvN,QAC/B,MACiB,KAAA,EACTwD,EAAA26C,KAAO5wC,EAAOhN,OACtB,MAC2B,KAAA,EACnBiD,EAAA46C,aAAe7wC,EAAOvN,QAC9B,MAC2B,KAAA,EACnBwD,EAAA66C,aAAe9wC,EAAOvN,QAC9B,MACwB,KAAA,EAChBwD,EAAA86C,WAAa/wC,EAAOhN,OAC5B,MACsB,KAAA,EACdiD,EAAA+6C,SAAWhxC,EAAOvN,QAC1B,MACwB,KAAA,EAChBwD,EAAAg7C,UAAYjxC,EAAOvN,QAC3B,MAC2B,KAAA,EACnBwD,EAAAi7C,aAAelxC,EAAOvN,QAC9B,MAC8B,KAAA,EACtBwD,EAAAk7C,eAAiBnxC,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAAm7C,YAAcpxC,EAAOvN,QAC7B,MAC2B,KAAA,GACnBwD,EAAAo7C,cAAgBrxC,EAAOhN,OAC/B,MAC8B,KAAA,GACtBiD,EAAAq7C,gBAAkBtxC,EAAOvN,QACjC,MACsB,KAAA,GACdwD,EAAAs7C,SAAWvxC,EAAOvN,QAC1B,MAC4B,KAAA,GACpBwD,EAAAu7C,cAAgBxxC,EAAOvN,QAC/B,MAC2B,KAAA,GACnBwD,EAAAw7C,cAAgBzxC,EAAOhN,OAC/B,MAC6B,KAAA,GACrBiD,EAAAy7C,eAAiB1xC,EAAOhN,OAChC,MACuB,KAAA,GACfiD,EAAA07C,WAAa3xC,EAAOhN,OAC5B,MACiC,KAAA,GACzBiD,EAAA27C,iBAAmB5xC,EAAOvN,QAClC,MACuB,KAAA,GACfwD,EAAA47C,SAAW7xC,EAAOvN,QAC1B,MAC8B,KAAA,GACtBwD,EAAA67C,gBAAkB9xC,EAAOhN,OACjC,MAC4B,KAAA,GACpBiD,EAAA87C,cAAgB/xC,EAAOvN,QAC/B,MAC0B,KAAA,GAClBwD,EAAA+7C,aAAehyC,EAAOvN,QAC9B,MACiC,KAAA,GACzBwD,EAAAg8C,kBAAoBjyC,EAAOhN,OACnC,MAC0B,KAAA,GAClBiD,EAAAi8C,YAAclyC,EAAOvN,QAC7B,MACkB,KAAA,GACVwD,EAAAk8C,MAAQnyC,EAAOhN,OACvB,MAC6B,KAAA,GACrBiD,EAAAm8C,eAAiBpyC,EAAOhN,OAChC,MAC6B,KAAA,GACrBiD,EAAAo8C,cAAgBryC,EAAOhN,OAC/B,MAC0B,KAAA,GAClBiD,EAAAq8C,YAActyC,EAAOvN,QAC7B,MACmB,KAAA,GACXwD,EAAAs8C,OAASvyC,EAAOhN,OACxB,MACgC,KAAA,GACxBiD,EAAAu8C,gBAAkBxyC,EAAOvN,QACjC,MACyB,KAAA,GACjBwD,EAAAw8C,WAAazyC,EAAOvN,QAC5B,MACuB,KAAA,GACfwD,EAAAy8C,SAAW1yC,EAAOvN,QAC1B,MACyB,KAAA,GACjBwD,EAAA08C,aAAe3yC,EAAOhN,OAC9B,MACuB,KAAA,GACfiD,EAAAwpB,UAAYzf,EAAOhN,OAC3B,MACkB,KAAA,GACViD,EAAA28C,MAAQ5yC,EAAOhN,OACvB,MACsB,KAAA,GACdiD,EAAA48C,UAAY7yC,EAAOhN,OAC3B,MACwB,KAAA,GAChBiD,EAAA68C,WAAa9yC,EAAOvN,QAC5B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA2BK,EAAuByG,GAEpC,IAA1B9G,EAAQ06C,eACRr6C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ06C,gBAE5B,IAAjB16C,EAAQ26C,MACRt6C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ26C,MAEnB,IAAzB36C,EAAQ46C,cACRv6C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ46C,cAEpB,IAAzB56C,EAAQ66C,cACRx6C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ66C,eAEtB,IAAvB76C,EAAQ86C,YACRz6C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ86C,YAEvB,IAArB96C,EAAQ+6C,UACR16C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+6C,UAEvB,IAAtB/6C,EAAQg7C,WACR36C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQg7C,WAEpB,IAAzBh7C,EAAQi7C,cACR56C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQi7C,cAElB,IAA3Bj7C,EAAQk7C,gBACR76C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQk7C,gBAErB,IAAxBl7C,EAAQm7C,aACR96C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm7C,cAEpB,IAA1Bn7C,EAAQo7C,eACR/6C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQo7C,eAEjB,IAA5Bp7C,EAAQq7C,iBACRh7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq7C,iBAEzB,IAArBr7C,EAAQs7C,UACRj7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs7C,UAEpB,IAA1Bt7C,EAAQu7C,eACRl7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu7C,gBAEpB,IAA1Bv7C,EAAQw7C,eACRn7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQw7C,gBAElB,IAA3Bx7C,EAAQy7C,gBACRp7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQy7C,iBAEtB,IAAvBz7C,EAAQ07C,YACRr7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ07C,YAEhB,IAA7B17C,EAAQ27C,kBACRt7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ27C,kBAEzB,IAArB37C,EAAQ47C,UACRv7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ47C,WAElB,IAA5B57C,EAAQ67C,iBACRx7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ67C,iBAEnB,IAA1B77C,EAAQ87C,eACRz7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ87C,eAErB,IAAzB97C,EAAQ+7C,cACR17C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+7C,eAEhB,IAA9B/7C,EAAQg8C,mBACR37C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQg8C,mBAErB,IAAxBh8C,EAAQi8C,aACR57C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi8C,cAE5B,IAAlBj8C,EAAQk8C,OACR77C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQk8C,QAElB,IAA3Bl8C,EAAQm8C,gBACR97C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQm8C,iBAEnB,IAA1Bn8C,EAAQo8C,eACR/7C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQo8C,eAErB,IAAxBp8C,EAAQq8C,aACRh8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq8C,cAE3B,IAAnBr8C,EAAQs8C,QACRj8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQs8C,QAEjB,IAA5Bt8C,EAAQu8C,iBACRl8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu8C,iBAEvB,IAAvBv8C,EAAQw8C,YACRn8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQw8C,YAEzB,IAArBx8C,EAAQy8C,UACRp8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQy8C,WAErB,IAAzBz8C,EAAQ08C,cACRr8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ08C,eAEvB,IAAtB18C,EAAQwpB,WACRnpB,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwpB,YAE3B,IAAlBxpB,EAAQ28C,OACRt8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ28C,QAEvB,IAAtB38C,EAAQ48C,WACRv8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ48C,WAEtB,IAAvB58C,EAAQ68C,YACRx8C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ68C,YAClD,IAAI5yC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAy8C,GAAS,IA3DtB,cAA0BzwC,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMu4C,IACrD,CAAE58C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMoxC,IACpD,CAAEz1C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMw4C,KAE5D,CACAvyC,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsC,KAAA,EAC9BqE,EAAAijB,SAAW85B,GAAgB3yC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UAChG,MACmC,KAAA,EAC3BjjB,EAAAkjB,QAAU0yB,GAAcxrC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC7F,MACoC,KAAA,EAC5BljB,EAAA8G,QAAUk2C,GAAe5yC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAC9F,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAEpD9G,EAAQijB,UACR85B,GAAgB3xC,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE/GqC,EAAQkjB,SACR0yB,GAAcxqC,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQ8G,SACRk2C,GAAe5xC,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACjH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAqGS,MAAA08C,GAAkB,IA9F/B,cAAmC1wC,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qCAAsC6wC,KACrF,CAAEl1C,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kCAAmC8wC,KACnF,CAAEn1C,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAM6X,IAC5D,CAAElc,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,EAAGsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,gCAAiCM,KAAM,SAAUyB,EAAG,IAE5E,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEb,KAAM,EAAG+X,MAAO,EAAG+lC,WAAW,EAAOC,kBAAmB,EAAGC,sBAAuB,EAAGC,qBAAsB,EAAGC,4BAA4B,GAIrJ,OAHAj6C,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC+C,KAAA,EACvCqE,EAAAb,KAAO4K,EAAOvN,QACtB,MAC6C,KAAA,EACrCwD,EAAAkX,MAAQnN,EAAOvN,QACvB,MACuB,KAAA,EACfwD,EAAAi9C,UAAYlzC,EAAOhN,OAC3B,MACoC,KAAA,EAC5BiD,EAAAk9C,kBAAoBnzC,EAAOxM,SACnC,MAC4C,KAAA,EACpCyC,EAAA6sB,eAAiBxQ,GAAejS,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sB,gBACrG,MACuC,KAAA,EAC/B7sB,EAAAm9C,sBAAwBpzC,EAAOxM,SACvC,MACsC,KAAA,EAC9ByC,EAAAo9C,qBAAuBrzC,EAAOxM,SACtC,MAC0C,KAAA,GAClCyC,EAAAq9C,2BAA6BtzC,EAAOhN,OAC5C,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE5C,IAAjB9G,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAE3B,IAAlBa,EAAQkX,OACR7W,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkX,QAEvB,IAAtBlX,EAAQi9C,WACR58C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQi9C,WAEd,IAA9Bj9C,EAAQk9C,mBACR78C,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQk9C,mBAE7Cl9C,EAAQ6sB,gBACRxQ,GAAejR,oBAAoBpL,EAAQ6sB,eAAgBxsB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElF,IAAlCqC,EAAQm9C,uBACR98C,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQm9C,uBAEZ,IAAjCn9C,EAAQo9C,sBACR/8C,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQo9C,uBAEN,IAAvCp9C,EAAQq9C,4BACRh9C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQq9C,4BACjD,IAAIpzC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAA28C,GAAiB,IAhF9B,cAAkC3wC,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,4BAA6BgxC,KAC5E,CAAEr1C,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,+BAAgCixC,KACnF,CAAEt1C,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMi2C,IACxD,CAAEt6C,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,IAE9D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEs9C,KAAM,EAAGC,QAAS,EAAG54B,UAAW,EAAG64B,qBAAsB,EAAGC,gBAAgB,GAIvF,OAHAr6C,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsC,KAAA,EAC9BqE,EAAAs9C,KAAOvzC,EAAOvN,QACtB,MAC6C,KAAA,EACrCwD,EAAAu9C,QAAUxzC,EAAOvN,QACzB,MAC0C,KAAA,EAClCwD,EAAA09C,WAAajD,GAAiBrwC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ09C,YACnG,MACyB,KAAA,EACjB19C,EAAA2kB,UAAY5a,EAAOxM,SAC3B,MACqC,KAAA,EAC7ByC,EAAAw9C,qBAAuBzzC,EAAOxM,SACtC,MAC6B,KAAA,EACrByC,EAAAy9C,eAAiB1zC,EAAOhN,OAChC,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE3C,IAAjB9G,EAAQs9C,MACRj9C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQs9C,MAEzB,IAApBt9C,EAAQu9C,SACRl9C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQu9C,SAE7Cv9C,EAAQ09C,YACRjD,GAAiBrvC,oBAAoBpL,EAAQ09C,WAAYr9C,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5F,IAAtBqC,EAAQ2kB,WACRtkB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ2kB,WAEZ,IAAjC3kB,EAAQw9C,sBACRn9C,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQw9C,uBAElB,IAA3Bx9C,EAAQy9C,gBACRp9C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQy9C,gBAChD,IAAIxzC,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GC7rDQ,IAAAs9C,IAAAA,IAIRA,EAAAA,UAAU,GAAV,UAIAA,EAAAA,WAAW,GAAX,WAIAA,EAAAA,SAAS,GAAT,SAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,aAAa,GAAb,aAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,cAAc,GAAd,cAIAA,EAAAA,aAAa,GAAb,aAZQA,IAAAA,IAAA,CAAA,GAgHAC,IAAAA,IAIRA,EAAAA,OAAO,GAAP,OAIAA,EAAAA,SAAS,GAAT,SAIAA,EAAAA,WAAW,GAAX,WAZQA,IAAAA,IAAA,CAAA,GAiBAC,IAAAA,IAIRA,EAAAA,YAAY,GAAZ,YAIAA,EAAAA,aAAa,GAAb,aARQA,IAAAA,IAAA,CAAA,GAuFAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,8BAA8B,OAA9B,8BAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,sBAAsB,OAAtB,sBAIAA,EAAAA,aAAa,OAAb,aAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,eAAe,OAAf,eAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,kBAAkB,OAAlB,kBAIAA,EAAAA,2BAA2B,OAA3B,2BAIAA,EAAAA,mBAAmB,OAAnB,mBAIAA,EAAAA,oBAAoB,OAApB,oBAIAA,EAAAA,eAAe,OAAf,eAhIQA,IAAAA,IAAA,CAAA,GAqIAC,IAAAA,IAIRA,EAAAA,sBAAsB,GAAtB,sBAIAA,EAAAA,qBAAqB,OAArB,qBAIAA,EAAAA,yBAAyB,OAAzB,yBAIAA,EAAAA,cAAc,OAAd,cAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,gBAAgB,OAAhB,gBAIAA,EAAAA,iBAAiB,OAAjB,iBAIAA,EAAAA,2BAA2B,OAA3B,2BAhCQA,IAAAA,IAAA,CAAA,GA4pBC,MAAAC,GAAe,IAznB5B,cAAgC7xC,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,8BAA+BM,KAAM,SAAUyB,EAAG,GAClE,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,4BAA6BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC7D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,0BAA2BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEm+C,eAAgB,EAAGC,QAAS,EAAGC,SAAU,EAAGC,eAAgB,EAAGC,iBAAkB,EAAGC,SAAU,EAAGC,aAAc,EAAGC,iBAAiB,EAAOC,aAAc,EAAGhS,UAAW,EAAGiS,eAAgB,EAAGC,cAAe,EAAGjnC,aAAa,EAAOknC,oBAAqB,EAAGC,WAAY,EAAGC,SAAU,EAAGC,eAAgB,EAAGC,aAAa,EAAOC,oBAAqB,EAAGC,mBAAoB,EAAGC,aAAc,EAAGC,gBAAiB,EAAGC,QAAS,EAAGC,SAAS,EAAOC,eAAe,EAAOC,UAAW,EAAGxpC,aAAc,EAAGypC,UAAU,EAAOpJ,SAAU,EAAGqJ,gBAAiB,EAAGC,cAAe,EAAGC,WAAY,EAAG7J,UAAW,EAAG8J,eAAgB,EAAGzG,mBAAmB,EAAO0G,eAAgB,EAAGC,iBAAkB,EAAGC,iBAAkB,EAAGC,WAAY,EAAGC,gBAAiB,EAAGC,aAAc,EAAGC,aAAa,EAAOC,kBAAmB,EAAGC,gBAAiB,EAAGC,eAAgB,EAAGC,qBAAsB,EAAG3vC,iBAAiB,EAAO4vC,wBAAyB,EAAGC,eAAgB,EAAGC,mBAAoB,EAAGC,mBAAoB,EAAGppC,eAAgB,EAAGqpC,gBAAiB,EAAGpqC,QAAQ,EAAOqqC,eAAgB,EAAGC,YAAa,EAAGC,YAAY,EAAOC,SAAS,EAAOC,sBAAuB,EAAGC,aAAc,EAAGC,MAAO,EAAGC,WAAY,EAAGC,SAAU,EAAGC,oBAAqB,EAAGhwB,UAAW,EAAGiwB,eAAe,EAAOC,mBAAoB,EAAGC,eAAgB,EAAGC,qBAAsB,EAAG9pB,kBAAkB,EAAO+pB,aAAc,EAAGC,oBAAqB,EAAGC,eAAgB,EAAGC,cAAe,EAAGC,aAAc,EAAGC,WAAW,EAAOC,kBAAmB,EAAGC,sBAAuB,EAAGC,WAAY,EAAGC,WAAY,EAAGC,YAAY,EAAOC,mBAAoB,EAAGC,iBAAkB,EAAGC,qBAAsB,EAAGC,YAAY,GAInlD,OAHAx/C,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6B,KAAA,EACrBqE,EAAAm+C,eAAiBp0C,EAAOvN,QAChC,MACqB,KAAA,EACbwD,EAAAo+C,QAAUr0C,EAAOvN,QACzB,MACsB,KAAA,EACdwD,EAAAq+C,SAAWt0C,EAAOvN,QAC1B,MAC6B,KAAA,EACrBwD,EAAAs+C,eAAiBv0C,EAAOvN,QAChC,MAC+B,KAAA,EACvBwD,EAAAu+C,iBAAmBx0C,EAAOvN,QAClC,MACsB,KAAA,EACdwD,EAAAw+C,SAAWz0C,EAAOvN,QAC1B,MAC2B,KAAA,EACnBwD,EAAAy+C,aAAe10C,EAAOvN,QAC9B,MAC6B,KAAA,EACrBwD,EAAA0+C,gBAAkB30C,EAAOhN,OACjC,MAC2B,KAAA,EACnBiD,EAAA2+C,aAAe50C,EAAOvN,QAC9B,MACuB,KAAA,GACfwD,EAAA2sC,UAAY5iC,EAAOvN,QAC3B,MAC6B,KAAA,GACrBwD,EAAA4+C,eAAiB70C,EAAOvN,QAChC,MAC4B,KAAA,GACpBwD,EAAA6+C,cAAgB90C,EAAOvN,QAC/B,MACyB,KAAA,GACjBwD,EAAA4X,YAAc7N,EAAOhN,OAC7B,MACmC,KAAA,GAC3BiD,EAAA8+C,oBAAsB/0C,EAAOvN,QACrC,MACwB,KAAA,GAChBwD,EAAA++C,WAAah1C,EAAOvN,QAC5B,MACsB,KAAA,GACdwD,EAAAg/C,SAAWj1C,EAAOvN,QAC1B,MAC8B,KAAA,GACtBwD,EAAAi/C,eAAiBl1C,EAAOvN,QAChC,MACyB,KAAA,GACjBwD,EAAAk/C,YAAcn1C,EAAOhN,OAC7B,MACmC,KAAA,GAC3BiD,EAAAm/C,oBAAsBp1C,EAAOvN,QACrC,MACkC,KAAA,GAC1BwD,EAAAo/C,mBAAqBr1C,EAAOvN,QACpC,MAC2B,KAAA,GACnBwD,EAAAq/C,aAAet1C,EAAOvN,QAC9B,MAC+B,KAAA,GACvBwD,EAAAs/C,gBAAkBv1C,EAAOvN,QACjC,MACqB,KAAA,GACbwD,EAAAu/C,QAAUx1C,EAAOvN,QACzB,MACoB,KAAA,GACZwD,EAAAw/C,QAAUz1C,EAAOhN,OACzB,MAC4B,KAAA,GACpBiD,EAAAy/C,cAAgB11C,EAAOhN,OAC/B,MACwB,KAAA,GAChBiD,EAAA0/C,UAAY31C,EAAOvN,QAC3B,MAC4B,KAAA,GACpBwD,EAAAkW,aAAenM,EAAOvN,QAC9B,MACqB,KAAA,GACbwD,EAAA2/C,SAAW51C,EAAOhN,OAC1B,MACsB,KAAA,GACdiD,EAAAu2C,SAAWxsC,EAAOvN,QAC1B,MAC8B,KAAA,GACtBwD,EAAA4/C,gBAAkB71C,EAAOvN,QACjC,MAC4B,KAAA,GACpBwD,EAAA6/C,cAAgB91C,EAAOvN,QAC/B,MACyB,KAAA,GACjBwD,EAAA8/C,WAAa/1C,EAAOvN,QAC5B,MACwB,KAAA,GAChBwD,EAAAi2C,UAAYlsC,EAAOvN,QAC3B,MAC6B,KAAA,GACrBwD,EAAA+/C,eAAiBh2C,EAAOvN,QAChC,MAC+B,KAAA,GACvBwD,EAAAs5C,kBAAoBvvC,EAAOhN,OACnC,MAC6B,KAAA,GACrBiD,EAAAggD,eAAiBj2C,EAAOvN,QAChC,MAC+B,KAAA,GACvBwD,EAAAigD,iBAAmBl2C,EAAOvN,QAClC,MAC+B,KAAA,GACvBwD,EAAAkgD,iBAAmBn2C,EAAOvN,QAClC,MACyB,KAAA,GACjBwD,EAAAmgD,WAAap2C,EAAOvN,QAC5B,MAC8B,KAAA,GACtBwD,EAAAogD,gBAAkBr2C,EAAOvN,QACjC,MAC2B,KAAA,GACnBwD,EAAAqgD,aAAet2C,EAAOvN,QAC9B,MACyB,KAAA,GACjBwD,EAAAsgD,YAAcv2C,EAAOhN,OAC7B,MACgC,KAAA,GACxBiD,EAAAugD,kBAAoBx2C,EAAOvN,QACnC,MAC8B,KAAA,GACtBwD,EAAAwgD,gBAAkBz2C,EAAOvN,QACjC,MAC+B,KAAA,GACvBwD,EAAAygD,eAAiB12C,EAAOvN,QAChC,MACqC,KAAA,GAC7BwD,EAAA0gD,qBAAuB32C,EAAOvN,QACtC,MAC+B,KAAA,GACvBwD,EAAA+Q,gBAAkBhH,EAAOhN,OACjC,MACyC,KAAA,GACjCiD,EAAA2gD,wBAA0B52C,EAAOvN,QACzC,MAC6B,KAAA,GACrBwD,EAAA4gD,eAAiB72C,EAAOvN,QAChC,MACmC,KAAA,GAC3BwD,EAAA6gD,mBAAqB92C,EAAOvN,QACpC,MACiC,KAAA,GACzBwD,EAAA8gD,mBAAqB/2C,EAAOvN,QACpC,MAC6B,KAAA,GACrBwD,EAAA0X,eAAiB3N,EAAOvN,QAChC,MACgC,KAAA,GACxBwD,EAAA+gD,gBAAkBh3C,EAAOvN,QACjC,MACmB,KAAA,GACXwD,EAAA2W,OAAS5M,EAAOhN,OACxB,MAC6B,KAAA,GACrBiD,EAAAghD,eAAiBj3C,EAAOvN,QAChC,MAC2B,KAAA,GACnBwD,EAAAihD,YAAcl3C,EAAOvN,QAC7B,MACwB,KAAA,GAChBwD,EAAAkhD,WAAan3C,EAAOhN,OAC5B,MACoB,KAAA,GACZiD,EAAAmhD,QAAUp3C,EAAOhN,OACzB,MACuC,KAAA,GAC/BiD,EAAAohD,sBAAwBr3C,EAAOvN,QACvC,MAC2B,KAAA,GACnBwD,EAAAqhD,aAAet3C,EAAOvN,QAC9B,MACmB,KAAA,GACXwD,EAAAshD,MAAQv3C,EAAOvN,QACvB,MACwB,KAAA,GAChBwD,EAAAuhD,WAAax3C,EAAOvN,QAC5B,MACsB,KAAA,GACdwD,EAAAwhD,SAAWz3C,EAAOvN,QAC1B,MACkC,KAAA,GAC1BwD,EAAAyhD,oBAAsB13C,EAAOvN,QACrC,MACuB,KAAA,GACfwD,EAAAyxB,UAAY1nB,EAAOvN,QAC3B,MAC4B,KAAA,GACpBwD,EAAA0hD,cAAgB33C,EAAOhN,OAC/B,MACiC,KAAA,GACzBiD,EAAA2hD,mBAAqB53C,EAAOvN,QACpC,MAC6B,KAAA,GACrBwD,EAAA4hD,eAAiB73C,EAAOvN,QAChC,MACmC,KAAA,GAC3BwD,EAAA6hD,qBAAuB93C,EAAOvN,QACtC,MAC8B,KAAA,GACtBwD,EAAA+3B,iBAAmBhuB,EAAOhN,OAClC,MAC4B,KAAA,GACpBiD,EAAA8hD,aAAe/3C,EAAOvN,QAC9B,MACkC,KAAA,GAC1BwD,EAAA+hD,oBAAsBh4C,EAAOvN,QACrC,MAC6B,KAAA,GACrBwD,EAAAgiD,eAAiBj4C,EAAOvN,QAChC,MAC4B,KAAA,GACpBwD,EAAAiiD,cAAgBl4C,EAAOvN,QAC/B,MAC2B,KAAA,GACnBwD,EAAAkiD,aAAen4C,EAAOvN,QAC9B,MACsB,KAAA,GACdwD,EAAAmiD,UAAYp4C,EAAOhN,OAC3B,MACgC,KAAA,GACxBiD,EAAAoiD,kBAAoBr4C,EAAOvN,QACnC,MACoC,KAAA,GAC5BwD,EAAAqiD,sBAAwBt4C,EAAOvN,QACvC,MACyB,KAAA,GACjBwD,EAAAsiD,WAAav4C,EAAOvN,QAC5B,MACwB,KAAA,GAChBwD,EAAAuiD,WAAax4C,EAAOvN,QAC5B,MACyB,KAAA,GACjBwD,EAAAwiD,WAAaz4C,EAAOhN,OAC5B,MACmC,KAAA,GAC3BiD,EAAAyiD,mBAAqB14C,EAAOvN,QACpC,MAC+B,KAAA,GACvBwD,EAAA0iD,iBAAmB34C,EAAOvN,QAClC,MACqC,KAAA,GAC7BwD,EAAA2iD,qBAAuB54C,EAAOvN,QACtC,MACwB,KAAA,GAChBwD,EAAA4iD,WAAa74C,EAAOhN,OAC5B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE/B,IAA3B9G,EAAQm+C,gBACR99C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQm+C,gBAEzB,IAApBn+C,EAAQo+C,SACR/9C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQo+C,SAExB,IAArBp+C,EAAQq+C,UACRh+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQq+C,UAElB,IAA3Br+C,EAAQs+C,gBACRj+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQs+C,gBAEhB,IAA7Bt+C,EAAQu+C,kBACRl+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQu+C,kBAExB,IAArBv+C,EAAQw+C,UACRn+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQw+C,UAEpB,IAAzBx+C,EAAQy+C,cACRp+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQy+C,eAEjB,IAA5Bz+C,EAAQ0+C,iBACRr+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0+C,iBAEnB,IAAzB1+C,EAAQ2+C,cACRt+C,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ2+C,cAEvB,IAAtB3+C,EAAQ2sC,WACRtsC,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2sC,WAEnB,IAA3B3sC,EAAQ4+C,gBACRv+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4+C,gBAEpB,IAA1B5+C,EAAQ6+C,eACRx+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6+C,gBAEtB,IAAxB7+C,EAAQ4X,aACRvX,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4X,aAEb,IAAhC5X,EAAQ8+C,qBACRz+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8+C,qBAEvB,IAAvB9+C,EAAQ++C,YACR1+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ++C,YAEzB,IAArB/+C,EAAQg/C,UACR3+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQg/C,UAEnB,IAA3Bh/C,EAAQi/C,gBACR5+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi/C,iBAEtB,IAAxBj/C,EAAQk/C,aACR7+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQk/C,aAEb,IAAhCl/C,EAAQm/C,qBACR9+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQm/C,qBAEf,IAA/Bn/C,EAAQo/C,oBACR/+C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQo/C,oBAErB,IAAzBp/C,EAAQq/C,cACRh/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQq/C,cAElB,IAA5Br/C,EAAQs/C,iBACRj/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQs/C,iBAE1B,IAApBt/C,EAAQu/C,SACRl/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu/C,UAE1B,IAApBv/C,EAAQw/C,SACRn/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQw/C,UAEnB,IAA1Bx/C,EAAQy/C,eACRp/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQy/C,eAEvB,IAAtBz/C,EAAQ0/C,WACRr/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0/C,WAErB,IAAzB1/C,EAAQkW,cACR7V,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkW,eAEzB,IAArBlW,EAAQ2/C,UACRt/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2/C,UAExB,IAArB3/C,EAAQu2C,UACRl2C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQu2C,UAElB,IAA5Bv2C,EAAQ4/C,iBACRv/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4/C,iBAEpB,IAA1B5/C,EAAQ6/C,eACRx/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6/C,eAEvB,IAAvB7/C,EAAQ8/C,YACRz/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8/C,YAExB,IAAtB9/C,EAAQi2C,WACR51C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQi2C,WAEnB,IAA3Bj2C,EAAQ+/C,gBACR1/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+/C,iBAEhB,IAA9B//C,EAAQs5C,mBACRj5C,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQs5C,mBAElB,IAA3Bt5C,EAAQggD,gBACR3/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQggD,gBAEjB,IAA7BhgD,EAAQigD,kBACR5/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQigD,kBAEjB,IAA7BjgD,EAAQkgD,kBACR7/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkgD,kBAEvB,IAAvBlgD,EAAQmgD,YACR9/C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmgD,YAElB,IAA5BngD,EAAQogD,iBACR//C,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQogD,iBAErB,IAAzBpgD,EAAQqgD,cACRhgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqgD,eAEtB,IAAxBrgD,EAAQsgD,aACRjgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsgD,aAEf,IAA9BtgD,EAAQugD,mBACRlgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQugD,mBAElB,IAA5BvgD,EAAQwgD,iBACRngD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwgD,iBAEnB,IAA3BxgD,EAAQygD,gBACRpgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQygD,gBAEb,IAAjCzgD,EAAQ0gD,sBACRrgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0gD,uBAElB,IAA5B1gD,EAAQ+Q,iBACR1Q,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+Q,iBAET,IAApC/Q,EAAQ2gD,yBACRtgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2gD,yBAEnB,IAA3B3gD,EAAQ4gD,gBACRvgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4gD,gBAEf,IAA/B5gD,EAAQ6gD,oBACRxgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6gD,oBAEf,IAA/B7gD,EAAQ8gD,oBACRzgD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8gD,oBAEnB,IAA3B9gD,EAAQ0X,gBACRrX,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0X,gBAElB,IAA5B1X,EAAQ+gD,iBACR1gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+gD,kBAE3B,IAAnB/gD,EAAQ2W,QACRtW,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2W,QAElB,IAA3B3W,EAAQghD,gBACR3gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQghD,gBAEtB,IAAxBhhD,EAAQihD,aACR5gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQihD,cAEvB,IAAvBjhD,EAAQkhD,YACR7gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQkhD,aAEzB,IAApBlhD,EAAQmhD,SACR9gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmhD,SAEX,IAAlCnhD,EAAQohD,uBACR/gD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQohD,uBAErB,IAAzBphD,EAAQqhD,cACRhhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqhD,cAE5B,IAAlBrhD,EAAQshD,OACRjhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQshD,OAEvB,IAAvBthD,EAAQuhD,YACRlhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuhD,YAEzB,IAArBvhD,EAAQwhD,UACRnhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwhD,UAEd,IAAhCxhD,EAAQyhD,qBACRphD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyhD,qBAExB,IAAtBzhD,EAAQyxB,WACRpxB,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyxB,YAEpB,IAA1BzxB,EAAQ0hD,eACRrhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0hD,eAEd,IAA/B1hD,EAAQ2hD,oBACRthD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2hD,oBAEnB,IAA3B3hD,EAAQ4hD,gBACRvhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4hD,gBAEb,IAAjC5hD,EAAQ6hD,sBACRxhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6hD,uBAEjB,IAA7B7hD,EAAQ+3B,kBACR13B,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+3B,kBAEpB,IAAzB/3B,EAAQ8hD,cACRzhD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8hD,cAEd,IAAhC9hD,EAAQ+hD,qBACR1hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ+hD,qBAEnB,IAA3B/hD,EAAQgiD,gBACR3hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQgiD,gBAEpB,IAA1BhiD,EAAQiiD,eACR5hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQiiD,eAErB,IAAzBjiD,EAAQkiD,cACR7hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkiD,eAExB,IAAtBliD,EAAQmiD,WACR9hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQmiD,WAEf,IAA9BniD,EAAQoiD,mBACR/hD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQoiD,mBAEZ,IAAlCpiD,EAAQqiD,uBACRhiD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQqiD,uBAEvB,IAAvBriD,EAAQsiD,YACRjiD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQsiD,YAEvB,IAAvBtiD,EAAQuiD,YACRliD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQuiD,aAEvB,IAAvBviD,EAAQwiD,YACRniD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwiD,YAEd,IAA/BxiD,EAAQyiD,oBACRpiD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyiD,oBAEjB,IAA7BziD,EAAQ0iD,kBACRriD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ0iD,kBAEb,IAAjC1iD,EAAQ2iD,sBACRtiD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ2iD,uBAEvB,IAAvB3iD,EAAQ4iD,YACRviD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ4iD,YACjD,IAAI34C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAwiD,GAAe,IA3D5B,cAAgCx2C,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMs+C,IACrD,CAAE3iD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM05C,IACpD,CAAE/9C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMu+C,KAE5D,CACAt4C,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4C,KAAA,EACpCqE,EAAAijB,SAAW6/B,GAAsB14C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACtG,MACkC,KAAA,EAC1BjjB,EAAAkjB,QAAUg7B,GAAa9zC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC5F,MAC0C,KAAA,EAClCljB,EAAA8G,QAAUi8C,GAAqB34C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACpG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE1D9G,EAAQijB,UACR6/B,GAAsB13C,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErHqC,EAAQkjB,SACRg7B,GAAa9yC,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ8G,SACRi8C,GAAqB33C,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACvH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA0HS,MAAAyiD,GAAwB,IAnHrC,cAAyCz2C,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mCAAoCm5C,KACnF,CAAEx9C,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCo5C,KAC1F,CAAEz9C,GAAI,EAAGsC,KAAM,WAAYM,KAAM,OAAQyB,EAAG,IAAM,CAAC,sCAAuCq5C,KAC1F,CAAE19C,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GAClD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEb,KAAM,EAAG6jD,QAAS,EAAGC,QAAS,EAAGC,cAAc,EAAOC,UAAU,EAAOC,aAAa,EAAOC,YAAY,EAAOC,cAAc,EAAOC,mBAAmB,EAAOC,oBAAoB,EAAOC,cAAe,GAIlN,OAHArgD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6C,KAAA,EACrCqE,EAAAb,KAAO4K,EAAOvN,QACtB,MACoD,KAAA,EAC5CwD,EAAAgjD,QAAUj5C,EAAOvN,QACzB,MACoD,KAAA,EAC5CwD,EAAAijD,QAAUl5C,EAAOvN,QACzB,MAC2B,KAAA,EACnBwD,EAAAkjD,aAAen5C,EAAOhN,OAC9B,MACsB,KAAA,EACdiD,EAAAmjD,SAAWp5C,EAAOhN,OAC1B,MACyB,KAAA,EACjBiD,EAAAojD,YAAcr5C,EAAOhN,OAC7B,MACwB,KAAA,EAChBiD,EAAAqjD,WAAat5C,EAAOhN,OAC5B,MAC0B,KAAA,EAClBiD,EAAAsjD,aAAev5C,EAAOhN,OAC9B,MACgC,KAAA,EACxBiD,EAAAujD,kBAAoBx5C,EAAOhN,OACnC,MACiC,KAAA,GACzBiD,EAAAwjD,mBAAqBz5C,EAAOhN,OACpC,MAC4B,KAAA,GACpBiD,EAAAyjD,cAAgB15C,EAAOvN,QAC/B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,GAElD,IAAjB9G,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAEzB,IAApBa,EAAQgjD,SACR3iD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgjD,SAEzB,IAApBhjD,EAAQijD,SACR5iD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQijD,UAEpB,IAAzBjjD,EAAQkjD,cACR7iD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkjD,eAEvB,IAArBljD,EAAQmjD,UACR9iD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmjD,WAEpB,IAAxBnjD,EAAQojD,aACR/iD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQojD,cAErB,IAAvBpjD,EAAQqjD,YACRhjD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqjD,aAEnB,IAAzBrjD,EAAQsjD,cACRjjD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsjD,eAEd,IAA9BtjD,EAAQujD,mBACRljD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQujD,oBAEb,IAA/BvjD,EAAQwjD,oBACRnjD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQwjD,oBAEnB,IAA1BxjD,EAAQyjD,eACRpjD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQyjD,eAClD,IAAIx5C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAA0iD,GAAuB,IA7CpC,cAAwC12C,EACpCrS,cACI8V,MAAM,6BAA8B,CAChC,CAAE3P,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,UAAWyB,EAAG,IAAMsW,KAErE,CACArQ,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6C+W,EAAA1V,KAAMiK,EAAStL,GACzDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACyC,IADzCC,EAEQqE,EAAA0jD,gBAAkB5oC,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ0jD,qBAClG,CAEA,IAAIz5C,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA+BK,EAAuByG,GAElE9G,EAAQ0jD,iBACR5oC,GAAW1P,oBAAoBpL,EAAQ0jD,gBAAiBrjD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACrH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAsjD,GAAa,IA3D1B,cAA8Bt3C,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMo/C,IACrD,CAAEzjD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM05C,IACpD,CAAE/9C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMq/C,KAE5D,CACAp5C,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC0C,KAAA,EAClCqE,EAAAijB,SAAW2gC,GAAoBx5C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACpG,MACkC,KAAA,EAC1BjjB,EAAAkjB,QAAUg7B,GAAa9zC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC5F,MACwC,KAAA,EAChCljB,EAAA8G,QAAU+8C,GAAmBz5C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SAClG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAExD9G,EAAQijB,UACR2gC,GAAoBx4C,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEnHqC,EAAQkjB,SACRg7B,GAAa9yC,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ8G,SACR+8C,GAAmBz4C,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACrH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA6JS,MAAAujD,GAAsB,IAtJnC,cAAuCv3C,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,0CAA2Cs5C,KACrG,CAAE39C,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,yCAA0Cu5C,KACpG,CAAE59C,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE8jD,cAAe,EAAGN,oBAAoB,EAAOO,gBAAiB,EAAGC,SAAS,EAAOC,SAAS,EAAOC,YAAY,EAAOC,SAAU,EAAGC,iBAAkB,EAAGC,kBAAmB,EAAGC,WAAW,EAAOC,cAAe,EAAGC,aAAc,EAAGC,UAAW,EAAGC,WAAW,EAAOC,aAAa,EAAOC,YAAa,GAI7S,OAHAxhD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC+D,KAAA,EACvDqE,EAAA8jD,cAAgB/5C,EAAOvN,QAC/B,MACiC,KAAA,EACzBwD,EAAAwjD,mBAAqBz5C,EAAOhN,OACpC,MACgC,KAAA,EACxBiD,EAAA+jD,gBAAkBh6C,EAAOvN,QACjC,MACqB,KAAA,EACbwD,EAAAgkD,QAAUj6C,EAAOhN,OACzB,MACqB,KAAA,EACbiD,EAAAikD,QAAUl6C,EAAOhN,OACzB,MACwB,KAAA,EAChBiD,EAAAkkD,WAAan6C,EAAOhN,OAC5B,MACuB,KAAA,EACfiD,EAAAmkD,SAAWp6C,EAAO1M,QAC1B,MACiC,KAAA,EACzB2C,EAAAokD,iBAAmBr6C,EAAOvN,QAClC,MACiC,KAAA,EACzBwD,EAAAqkD,kBAAoBt6C,EAAOvN,QACnC,MACsB,KAAA,GACdwD,EAAAskD,UAAYv6C,EAAOhN,OAC3B,MAC6B,KAAA,GACrBiD,EAAAukD,cAAgBx6C,EAAO1M,QAC/B,MAC6D,KAAA,GACrD2C,EAAAwkD,aAAez6C,EAAOvN,QAC9B,MACwB,KAAA,GAChBwD,EAAAykD,UAAY16C,EAAO1M,QAC3B,MACuB,KAAA,GACf2C,EAAA0kD,UAAY36C,EAAOhN,OAC3B,MACyB,KAAA,GACjBiD,EAAA2kD,YAAc56C,EAAOhN,OAC7B,MAC0B,KAAA,GAClBiD,EAAA4kD,YAAc76C,EAAOvN,QAC7B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA8BK,EAAuByG,GAEvC,IAA1B9G,EAAQ8jD,eACRzjD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8jD,gBAEd,IAA/B9jD,EAAQwjD,oBACRnjD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwjD,oBAEhB,IAA5BxjD,EAAQ+jD,iBACR1jD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+jD,kBAEzB,IAApB/jD,EAAQgkD,SACR3jD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQgkD,UAExB,IAApBhkD,EAAQikD,SACR5jD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQikD,UAErB,IAAvBjkD,EAAQkkD,YACR7jD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkkD,YAEvB,IAArBlkD,EAAQmkD,UACR9jD,EAAO3E,IAAI,EAAGK,EAASG,OAAOmB,MAAM2C,EAAQmkD,UAEf,IAA7BnkD,EAAQokD,kBACR/jD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQokD,kBAEf,IAA9BpkD,EAAQqkD,mBACRhkD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqkD,oBAEvB,IAAtBrkD,EAAQskD,WACRjkD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQskD,WAEnB,IAA1BtkD,EAAQukD,eACRlkD,EAAO3E,IAAI,GAAIK,EAASG,OAAOmB,MAAM2C,EAAQukD,eAEpB,IAAzBvkD,EAAQwkD,cACRnkD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwkD,cAExB,IAAtBxkD,EAAQykD,WACRpkD,EAAO3E,IAAI,GAAIK,EAASG,OAAOmB,MAAM2C,EAAQykD,YAEvB,IAAtBzkD,EAAQ0kD,WACRrkD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ0kD,YAErB,IAAxB1kD,EAAQ2kD,aACRtkD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ2kD,aAErB,IAAxB3kD,EAAQ4kD,aACRvkD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4kD,aAClD,IAAI36C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAwjD,GAAqB,IAzElC,cAAsCx3C,EAClCrS,cACI8V,MAAM,2BAA4B,CAC9B,CAAE3P,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,UAAWyB,EAAG,IAAMsW,IAC7D,CAAE3a,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE6kD,UAAW,EAAGC,WAAW,EAAOC,mBAAmB,EAAOC,eAAe,GAIpF,OAHA5hD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC2C+W,EAAA1V,KAAMiK,EAAStL,GACvDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyC,KAAA,EACjCqE,EAAA0jD,gBAAkB5oC,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ0jD,iBAClG,MACwB,KAAA,EAChB1jD,EAAA6kD,UAAY96C,EAAOvN,QAC3B,MACuB,KAAA,EACfwD,EAAA8kD,UAAY/6C,EAAOhN,OAC3B,MACgC,KAAA,EACxBiD,EAAA+kD,kBAAoBh7C,EAAOhN,OACnC,MAC4B,KAAA,EACpBiD,EAAAglD,cAAgBj7C,EAAOhN,OAC/B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA6BK,EAAuByG,GAEhE9G,EAAQ0jD,iBACR5oC,GAAW1P,oBAAoBpL,EAAQ0jD,gBAAiBrjD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3F,IAAtBqC,EAAQ6kD,WACRxkD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6kD,YAEvB,IAAtB7kD,EAAQ8kD,WACRzkD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ8kD,YAEd,IAA9B9kD,EAAQ+kD,mBACR1kD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+kD,oBAElB,IAA1B/kD,EAAQglD,eACR3kD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQglD,eAChD,IAAI/6C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA4kD,GAAiB,IA3D9B,cAAkC54C,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAM0gD,IACrD,CAAE/kD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM05C,IACpD,CAAE/9C,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAM2gD,KAE5D,CACA16C,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC8C,KAAA,EACtCqE,EAAAijB,SAAWiiC,GAAwB96C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQijB,UACxG,MACkC,KAAA,EAC1BjjB,EAAAkjB,QAAUg7B,GAAa9zC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkjB,SAC5F,MAC4C,KAAA,EACpCljB,EAAA8G,QAAUq+C,GAAuB/6C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8G,SACtG,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE5D9G,EAAQijB,UACRiiC,GAAwB95C,oBAAoBpL,EAAQijB,SAAU5iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvHqC,EAAQkjB,SACRg7B,GAAa9yC,oBAAoBpL,EAAQkjB,QAAS7iB,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ8G,SACRq+C,GAAuB/5C,oBAAoBpL,EAAQ8G,QAASzG,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACzH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAA6kD,GAA0B,IA3DvC,cAA2C74C,EACvCrS,cACI8V,MAAM,gCAAiC,CACnC,CAAE3P,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,6BAA8BM,KAAM,SAAUyB,EAAG,GAChE,CAAErE,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEolD,kBAAmB,EAAGC,0BAA0B,EAAOC,aAAc,GAIhF,OAHAliD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgD+W,EAAA1V,KAAMiK,EAAStL,GAC5DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACzBqE,EAAAolD,kBAAoBr7C,EAAOvN,QACnC,MACuC,KAAA,EAC/BwD,EAAAqlD,yBAA2Bt7C,EAAOhN,OAC1C,MAC4B,KAAA,EACpBiD,EAAAslD,aAAev7C,EAAOxM,SAC9B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkCK,EAAuByG,GAEvC,IAA9B9G,EAAQolD,mBACR/kD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQolD,oBAER,IAArCplD,EAAQqlD,0BACRhlD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqlD,0BAEnB,IAAzBrlD,EAAQslD,cACRjlD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQslD,cACjD,IAAIr7C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAA8kD,GAAyB,IApDtC,cAA0C94C,EACtCrS,cACI8V,MAAM,+BAAgC,CAClC,CAAE3P,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,UAAWyB,EAAG,IAAMsW,IAC7D,CAAE3a,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEksB,aAAc,GAIzB,OAHA9oB,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+C+W,EAAA1V,KAAMiK,EAAStL,GAC3DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyC,KAAA,EACjCqE,EAAA0jD,gBAAkB5oC,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ0jD,iBAClG,MAC4B,KAAA,EACpB1jD,EAAAksB,aAAeniB,EAAOxM,SAC9B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiCK,EAAuByG,GAEpE9G,EAAQ0jD,iBACR5oC,GAAW1P,oBAAoBpL,EAAQ0jD,gBAAiBrjD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExF,IAAzBqC,EAAQksB,cACR7rB,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQksB,cACjD,IAAIjiB,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GC7tCQ,IAAAklD,IAAAA,IAIRA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,mBAAmB,GAAnB,mBAIAA,EAAAA,0BAA0B,GAA1B,0BAIAA,EAAAA,oBAAoB,GAApB,oBAIAA,EAAAA,qBAAqB,GAArB,qBAIAA,EAAAA,yBAAyB,GAAzB,yBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,wBAAwB,GAAxB,wBAIAA,EAAAA,yBAAyB,IAAzB,yBAIAA,EAAAA,wBAAwB,IAAxB,wBAhDQA,IAAAA,IAAA,CAAA,GA6XC,MAAAC,GAAS,IA1UtB,cAA0Bn5C,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,aAAc0J,KAC7D,CAAE/N,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,cAAe4J,KAC/D,CAAEjO,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMmV,IACtD,CAAExZ,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMmQ,IACrD,CAAExU,GAAI,GAAIsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMqL,IACzD,CAAE1P,GAAI,GAAIsC,KAAM,QAASM,KAAM,UAAWyB,EAAG,IAAM4O,IACnD,CAAEjT,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMq+C,IACzE,CAAE1iD,GAAI,GAAIsC,KAAM,cAAeM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMm/C,IACxE,CAAExjD,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMygD,IAC7E,CAAE9kD,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMs4C,IAClE,CAAE38C,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM4vC,IAChE,CAAEj0C,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM6oC,IAC/E,CAAEltC,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM8pC,IAC/E,CAAEnuC,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM6jC,IAC3E,CAAEloC,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM6iC,IAC1E,CAAElnC,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMqjC,IACzE,CAAE1nC,GAAI,GAAIsC,KAAM,QAASM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMk8B,IAClE,CAAEvgC,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM+0B,IAC7E,CAAEp5B,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM81B,IAC/E,CAAEn6B,GAAI,GAAIsC,KAAM,UAAWM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMkuB,IACpE,CAAEvyB,GAAI,GAAIsC,KAAM,UAAWM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMomB,IACpE,CAAEzqB,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAM+nB,IAC/E,CAAEpsB,GAAI,GAAIsC,KAAM,cAAeM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMse,IACxE,CAAE3iB,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMugB,IAC7E,CAAE5kB,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAM6W,IACpD,CAAElb,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoB6J,KAC3E,CAAElO,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoB6J,KAC3E,CAAElO,GAAI,GAAIsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMsX,IACvD,CAAE3b,GAAI,GAAIsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,UAAWyB,EAAG,IAAMyX,IAC3D,CAAE9b,GAAI,GAAIsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMqV,KAE9D,CACApP,OAAO/V,GACG,MAAAsL,EAAU,CAAEyC,KAAM,GAAIgjD,KAAM,EAAGC,MAAO,EAAGC,KAAM,CAAExiD,eAAW,GAAayiD,cAAe,GAAIC,YAAa,EAAGC,YAAa,EAAGC,iBAAiB,EAAOC,mBAAoB,GAIvK,OAHA5iD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmB,KAAA,GACXqE,EAAAyC,KAAOsH,EAAOtM,SACtB,MACuB,KAAA,EACfuC,EAAAylD,KAAO17C,EAAOvN,QACtB,MACyB,KAAA,EACjBwD,EAAA0lD,MAAQ37C,EAAOvN,QACvB,MACqC,KAAA,EAC7BwD,EAAAimD,UAAYtsC,GAAcvP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQimD,WAC/F,MAC+B,KAAA,EACvBjmD,EAAAkmD,SAAWvxC,GAASvK,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkmD,UACzF,MACmC,KAAA,GAC3BlmD,EAAAmmD,WAAat2C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmmD,YAC5F,MACmC,KAAA,GAC3BnmD,EAAAomD,MAAQhzC,GAAgBhJ,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQomD,OAC7F,MACwC,KAAA,EACxCpmD,EAAQ2lD,KAAO,CACXxiD,UAAW,eACXkjD,aAAcxD,GAAaz4C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaU,eAE1G,MACoC,KAAA,GACpCrmD,EAAQ2lD,KAAO,CACXxiD,UAAW,aACXmjD,WAAY3C,GAAWv5C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaW,aAEtG,MAC6C,KAAA,GAC7CtmD,EAAQ2lD,KAAO,CACXxiD,UAAW,iBACXojD,eAAgBtB,GAAe76C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaY,iBAE9G,MAC2B,KAAA,EAC3BvmD,EAAQ2lD,KAAO,CACXxiD,UAAW,SACXqjD,OAAQ1J,GAAO1yC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaa,SAE9F,MACuB,KAAA,EACvBxmD,EAAQ2lD,KAAO,CACXxiD,UAAW,OACXsjD,KAAMrS,GAAKhqC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAac,OAE1F,MACoD,KAAA,EACpDzmD,EAAQ2lD,KAAO,CACXxiD,UAAW,qBACXujD,mBAAoBrZ,GAAmBjjC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAae,qBAEtH,MACkD,KAAA,GAClD1mD,EAAQ2lD,KAAO,CACXxiD,UAAW,oBACXwjD,kBAAmBrY,GAAkBlkC,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAagB,oBAEpH,MAC0C,KAAA,GAC1C3mD,EAAQ2lD,KAAO,CACXxiD,UAAW,gBACXyjD,cAAeve,GAAcj+B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaiB,gBAE5G,MACwC,KAAA,GACxC5mD,EAAQ2lD,KAAO,CACXxiD,UAAW,eACX0jD,aAAcxf,GAAaj9B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAakB,eAE1G,MACsC,KAAA,GACtC7mD,EAAQ2lD,KAAO,CACXxiD,UAAW,cACX2jD,YAAajf,GAAYz9B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAamB,cAExG,MACyB,KAAA,GACzB9mD,EAAQ2lD,KAAO,CACXxiD,UAAW,QACX4jD,MAAOrmB,GAAMt2B,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaoB,QAE5F,MAC8C,KAAA,GAC9C/mD,EAAQ2lD,KAAO,CACXxiD,UAAW,kBACX6jD,gBAAiBztB,GAAgBnvB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAaqB,kBAEhH,MACkD,KAAA,GAClDhnD,EAAQ2lD,KAAO,CACXxiD,UAAW,oBACX8jD,kBAAmB3sB,GAAkBlwB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAasB,oBAEpH,MAC6B,KAAA,GAC7BjnD,EAAQ2lD,KAAO,CACXxiD,UAAW,UACX+jD,QAASx0B,GAAQtoB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAauB,UAEhG,MAC6B,KAAA,GAC7BlnD,EAAQ2lD,KAAO,CACXxiD,UAAW,UACXgkD,QAASv8B,GAAQxgB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAawB,UAEhG,MACkD,KAAA,GAClDnnD,EAAQ2lD,KAAO,CACXxiD,UAAW,oBACXikD,kBAAmB76B,GAAkBniB,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAayB,oBAEpH,MACqC,KAAA,GACrCpnD,EAAQ2lD,KAAO,CACXxiD,UAAW,cACXkkD,YAAavkC,GAAY1Y,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAa0B,cAExG,MAC8C,KAAA,GAC9CrnD,EAAQ2lD,KAAO,CACXxiD,UAAW,kBACXmkD,gBAAiBviC,GAAgB3a,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQ2lD,KAAa2B,kBAEhH,MAC4B,KAAA,GACpBtnD,EAAA4lD,cAAgB77C,EAAOtM,SAC/B,MAC2B,KAAA,GACnBuC,EAAAunD,OAASlsC,GAAOjR,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQunD,QACrF,MACoC,KAAA,GAC5BvnD,EAAA6lD,YAAc97C,EAAOvN,QAC7B,MACoC,KAAA,GAC5BwD,EAAA8lD,YAAc/7C,EAAOvN,QAC7B,MACiC,KAAA,GACzBwD,EAAA+b,UAAYD,GAAU1R,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ+b,WAC3F,MAC+B,KAAA,GACvB/b,EAAA+lD,gBAAkBh8C,EAAOhN,OACjC,MACmC,KAAA,GAC3BiD,EAAAgmD,mBAAqBj8C,EAAOxM,SACpC,MACwC,KAAA,GAChCyC,EAAAwnD,aAAevrC,GAAa7R,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwnD,cACjG,MACkC,KAAA,GAC1BxnD,EAAAynD,SAAW5tC,GAAYzP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQynD,UAC5F,MAAA,QAEA,IAAIx9C,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAEnC,KAAjB9G,EAAQyC,MACRpC,EAAO3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEvC,IAAjBzC,EAAQylD,MACRplD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQylD,MAE3B,IAAlBzlD,EAAQ0lD,OACRrlD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0lD,OAE7C1lD,EAAQimD,WACRtsC,GAAcvO,oBAAoBpL,EAAQimD,UAAW5lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQkmD,UACRvxC,GAASvJ,oBAAoBpL,EAAQkmD,SAAU7lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExGqC,EAAQmmD,YACRt2C,GAAUzE,oBAAoBpL,EAAQmmD,WAAY9lD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQomD,OACRhzC,GAAgBhI,oBAAoBpL,EAAQomD,MAAO/lD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElF,iBAA3BqC,EAAQ2lD,KAAKxiD,WACb0/C,GAAaz3C,oBAAoBpL,EAAQ2lD,KAAKU,aAAchmD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1F,eAA3BqC,EAAQ2lD,KAAKxiD,WACbwgD,GAAWv4C,oBAAoBpL,EAAQ2lD,KAAKW,WAAYjmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvF,mBAA3BqC,EAAQ2lD,KAAKxiD,WACb8hD,GAAe75C,oBAAoBpL,EAAQ2lD,KAAKY,eAAgBlmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE/F,WAA3BqC,EAAQ2lD,KAAKxiD,WACb25C,GAAO1xC,oBAAoBpL,EAAQ2lD,KAAKa,OAAQnmD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9E,SAA3BqC,EAAQ2lD,KAAKxiD,WACbixC,GAAKhpC,oBAAoBpL,EAAQ2lD,KAAKc,KAAMpmD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1E,uBAA3BqC,EAAQ2lD,KAAKxiD,WACbkqC,GAAmBjiC,oBAAoBpL,EAAQ2lD,KAAKe,mBAAoBrmD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEtG,sBAA3BqC,EAAQ2lD,KAAKxiD,WACbmrC,GAAkBljC,oBAAoBpL,EAAQ2lD,KAAKgB,kBAAmBtmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErG,kBAA3BqC,EAAQ2lD,KAAKxiD,WACbklC,GAAcj9B,oBAAoBpL,EAAQ2lD,KAAKiB,cAAevmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7F,iBAA3BqC,EAAQ2lD,KAAKxiD,WACbkkC,GAAaj8B,oBAAoBpL,EAAQ2lD,KAAKkB,aAAcxmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3F,gBAA3BqC,EAAQ2lD,KAAKxiD,WACb0kC,GAAYz8B,oBAAoBpL,EAAQ2lD,KAAKmB,YAAazmD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzF,UAA3BqC,EAAQ2lD,KAAKxiD,WACbu9B,GAAMt1B,oBAAoBpL,EAAQ2lD,KAAKoB,MAAO1mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7E,oBAA3BqC,EAAQ2lD,KAAKxiD,WACbo2B,GAAgBnuB,oBAAoBpL,EAAQ2lD,KAAKqB,gBAAiB3mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjG,sBAA3BqC,EAAQ2lD,KAAKxiD,WACbm3B,GAAkBlvB,oBAAoBpL,EAAQ2lD,KAAKsB,kBAAmB5mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErG,YAA3BqC,EAAQ2lD,KAAKxiD,WACbuvB,GAAQtnB,oBAAoBpL,EAAQ2lD,KAAKuB,QAAS7mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjF,YAA3BqC,EAAQ2lD,KAAKxiD,WACbynB,GAAQxf,oBAAoBpL,EAAQ2lD,KAAKwB,QAAS9mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjF,sBAA3BqC,EAAQ2lD,KAAKxiD,WACbopB,GAAkBnhB,oBAAoBpL,EAAQ2lD,KAAKyB,kBAAmB/mD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErG,gBAA3BqC,EAAQ2lD,KAAKxiD,WACb2f,GAAY1X,oBAAoBpL,EAAQ2lD,KAAK0B,YAAahnD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzF,oBAA3BqC,EAAQ2lD,KAAKxiD,WACb4hB,GAAgB3Z,oBAAoBpL,EAAQ2lD,KAAK2B,gBAAiBjnD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElG,KAA1BqC,EAAQ4lD,eACRvlD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQ4lD,eAExD5lD,EAAQunD,QACRlsC,GAAOjQ,oBAAoBpL,EAAQunD,OAAQlnD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7E,IAAxBqC,EAAQ6lD,aACRxlD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ6lD,aAEtB,IAAxB7lD,EAAQ8lD,aACRzlD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ8lD,aAE9C9lD,EAAQ+b,WACRD,GAAU1Q,oBAAoBpL,EAAQ+b,UAAW1b,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,QAE/E,IAA5BqC,EAAQ+lD,iBACR1lD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQ+lD,iBAEd,IAA/B/lD,EAAQgmD,oBACR3lD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQgmD,oBAE9ChmD,EAAQwnD,cACRvrC,GAAa7Q,oBAAoBpL,EAAQwnD,aAAcnnD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjHqC,EAAQynD,UACR5tC,GAAYzO,oBAAoBpL,EAAQynD,SAAUpnD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAqnD,GAAQ,IApDrB,cAAyBr7C,EACrBrS,cACI8V,MAAM,cAAe,CACjB,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMghD,IACrF,CAAErlD,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWyB,EAAG,IAAMoO,KAE1D,CACAnI,OAAO/V,GACH,MAAMsL,EAAU,CAAE2nD,QAAS,IAIpB,OAHAvkD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8B+W,EAAA1V,KAAMiK,EAAStL,GAC1CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAA2nD,QAAQhxD,KAAK6uD,GAAOp7C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACxE,MAC8B,KAAA,EACtB9G,EAAAomD,MAAQxzC,GAAWxI,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQomD,OACxF,MAAA,QAEA,IAAIn8C,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgBK,EAAuByG,GAEvD,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ2nD,QAAQzyD,OAAQD,IACxCuwD,GAAOp6C,oBAAoBpL,EAAQ2nD,QAAQ1yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExGqC,EAAQomD,OACRxzC,GAAWxH,oBAAoBpL,EAAQomD,MAAO/lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC3G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAAunD,GAAO,IAhFpB,cAAwBv7C,EACpBrS,cACI8V,MAAM,aAAc,CAChB,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMkjD,IACrF,CAAEvnD,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWyB,EAAG,IAAMyL,IAClD,CAAE9P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMmR,IACpD,CAAExV,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMsW,IACnF,CAAE3a,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,IAE5D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE6nD,QAAS,GAAIC,MAAO,GAAIC,qBAAqB,EAAOC,cAAe,GAI9E,OAHA5kD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6B+W,EAAA1V,KAAMiK,EAAStL,GACzCsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoC,KAAA,EAC5BqE,EAAA6nD,QAAQlxD,KAAK+wD,GAAMt9C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACvE,MAC6B,KAAA,EACrB9G,EAAAomD,MAAQn2C,GAAU7F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQomD,OACvF,MAC6B,KAAA,EACrBpmD,EAAAioD,QAAUtyC,GAAQvL,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQioD,SACvF,MACuC,KAAA,EAC/BjoD,EAAA8nD,MAAMnxD,KAAKmkB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MACiC,KAAA,EACzB9G,EAAA+nD,oBAAsBh+C,EAAOhN,OACrC,MAC4B,KAAA,EACpBiD,EAAAgoD,cAAgBj+C,EAAOvN,QAC/B,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAeK,EAAuByG,GAEtD,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ6nD,QAAQ3yD,OAAQD,IACxCyyD,GAAMt8C,oBAAoBpL,EAAQ6nD,QAAQ5yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvGqC,EAAQomD,OACRn2C,GAAU7E,oBAAoBpL,EAAQomD,MAAO/lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEtGqC,EAAQioD,SACRtyC,GAAQvK,oBAAoBpL,EAAQioD,QAAS5nD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ8nD,MAAM5yD,OAAQD,IACtC6lB,GAAW1P,oBAAoBpL,EAAQ8nD,MAAM7yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,QAE1E,IAAhCqC,EAAQ+nD,qBACR1nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ+nD,qBAElB,IAA1B/nD,EAAQgoD,eACR3nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgoD,eACjD,IAAI/9C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAA6nD,GAAa,IAhF1B,cAA8B77C,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,EAAwBC,EAAG,GAC5E,CAAEtE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,wBAAyBM,KAAM,SAAUyB,EAAG,GAC3D,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,IAE7D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEmoD,WAAY,EAAGC,WAAY,GAAIC,OAAO,EAAOC,qBAAqB,EAAOC,QAAQ,EAAOC,eAAe,GAIlH,OAHAplD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwB,KAAA,EAChBqE,EAAAmoD,WAAap+C,EAAOvN,QAC5B,MACyB,KAAA,EACzBwD,EAAQooD,WAAar+C,EAAOpN,QAAQhC,WACpC,MACkB,KAAA,EACVqF,EAAAqoD,MAAQt+C,EAAOhN,OACvB,MACkC,KAAA,EAC1BiD,EAAAsoD,oBAAsBv+C,EAAOhN,OACrC,MACoB,KAAA,EACZiD,EAAAuoD,OAASx+C,EAAOhN,OACxB,MAC4B,KAAA,EACpBiD,EAAAwoD,cAAgBz+C,EAAOhN,OAC/B,MAAA,QAEA,IAAIkN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAEjC,IAAvB9G,EAAQmoD,YACR9nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmoD,YAEtB,KAAvBnoD,EAAQooD,YACR/nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQW,MAAMqD,EAAQooD,aAE3B,IAAlBpoD,EAAQqoD,OACRhoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqoD,QAEZ,IAAhCroD,EAAQsoD,qBACRjoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsoD,sBAEzB,IAAnBtoD,EAAQuoD,QACRloD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQuoD,SAElB,IAA1BvoD,EAAQwoD,eACRnoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQwoD,eAChD,IAAIv+C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAooD,GAAgB,IA3D7B,cAAiCp8C,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,UAAWyB,EAAG,IAAMwW,IAC/C,CAAE7a,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMkkD,KAE7F,CACAj+C,OAAO/V,GACH,MAAMsL,EAAU,CAAE2oD,SAAS,EAAOvvC,QAAS,IAIpC,OAHAhW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAAiY,GAAK+C,GAAS5Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiY,IACnF,MACqB,KAAA,EACbjY,EAAA2oD,QAAU5+C,EAAOhN,OACzB,MACoD,KAAA,EAC5CiD,EAAAoZ,QAAQziB,KAAK+xD,GAAsBt+C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACvF,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE3D9G,EAAQiY,IACR+C,GAAS5P,oBAAoBpL,EAAQiY,GAAI5X,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,QAE9E,IAApBqC,EAAQ2oD,SACRtoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2oD,SAEhD,IAAA,IAAS1zD,EAAI,EAAGA,EAAI+K,EAAQoZ,QAAQlkB,OAAQD,IACxCyzD,GAAsBt9C,oBAAoBpL,EAAQoZ,QAAQnkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC3H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA+IS,MAAAqoD,GAAwB,IAxIrC,cAAyCr8C,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,GAAIsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE4oD,UAAW,EAAGC,MAAO,EAAGC,KAAM,EAAGC,MAAO,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,EAAGC,OAAQ,EAAGC,QAAS,EAAGC,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,EAAGC,UAAW,EAAGC,WAAY,GAI3K,OAHArmD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwB,KAAA,GAChBqE,EAAA4oD,UAAY7+C,EAAOvN,QAC3B,MACmB,KAAA,EACXwD,EAAA6oD,MAAQ9+C,EAAOvN,QACvB,MACkB,KAAA,EACVwD,EAAA8oD,KAAO/+C,EAAOvN,QACtB,MACmB,KAAA,EACXwD,EAAA+oD,MAAQh/C,EAAOvN,QACvB,MACoB,KAAA,EACZwD,EAAAgpD,OAASj/C,EAAOvN,QACxB,MACoB,KAAA,EACZwD,EAAAipD,OAASl/C,EAAOvN,QACxB,MACqB,KAAA,EACbwD,EAAAkpD,QAAUn/C,EAAOvN,QACzB,MACoB,KAAA,EACZwD,EAAAmpD,OAASp/C,EAAOvN,QACxB,MACqB,KAAA,EACbwD,EAAAopD,QAAUr/C,EAAOvN,QACzB,MACqB,KAAA,EACbwD,EAAAqpD,OAASt/C,EAAOxM,SACxB,MACqB,KAAA,GACbyC,EAAAspD,OAASv/C,EAAOxM,SACxB,MACsB,KAAA,GACdyC,EAAAupD,QAAUx/C,EAAOxM,SACzB,MACwB,KAAA,GAChByC,EAAAwpD,UAAYz/C,EAAOxM,SAC3B,MAC2B,KAAA,GACnByC,EAAAypD,WAAa1/C,EAAOxM,SAC5B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,GAE7C,IAAtB9G,EAAQ4oD,WACRvoD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4oD,WAE5B,IAAlB5oD,EAAQ6oD,OACRxoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6oD,OAE5B,IAAjB7oD,EAAQ8oD,MACRzoD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ8oD,MAE3B,IAAlB9oD,EAAQ+oD,OACR1oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+oD,OAE1B,IAAnB/oD,EAAQgpD,QACR3oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgpD,QAE1B,IAAnBhpD,EAAQipD,QACR5oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQipD,QAEzB,IAApBjpD,EAAQkpD,SACR7oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkpD,SAE1B,IAAnBlpD,EAAQmpD,QACR9oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmpD,QAEzB,IAApBnpD,EAAQopD,SACR/oD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQopD,SAE1B,IAAnBppD,EAAQqpD,QACRhpD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQqpD,QAE1B,IAAnBrpD,EAAQspD,QACRjpD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQspD,QAE1B,IAApBtpD,EAAQupD,SACRlpD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQupD,SAExB,IAAtBvpD,EAAQwpD,WACRnpD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQwpD,WAEvB,IAAvBxpD,EAAQypD,YACRppD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQypD,YAClD,IAAIx/C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAAqpD,GAAc,IAlE3B,cAA+Br9C,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,UAAWyB,EAAG,IAAMwW,IAC/C,CAAE7a,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,IAEvD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE2pD,iBAAkB,EAAGC,mBAAoB,EAAGC,SAAU,GAIjE,OAHAzmD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAAiY,GAAK+C,GAAS5Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiY,IACnF,MACiC,KAAA,EACzBjY,EAAA2pD,iBAAmB5/C,EAAOxM,SAClC,MACmC,KAAA,EAC3ByC,EAAA4pD,mBAAqB7/C,EAAOxM,SACpC,MACwB,KAAA,EAChByC,EAAA6pD,SAAW9/C,EAAOxM,SAC1B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEzD9G,EAAQiY,IACR+C,GAAS5P,oBAAoBpL,EAAQiY,GAAI5X,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErE,IAA7BqC,EAAQ2pD,kBACRtpD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ2pD,kBAEd,IAA/B3pD,EAAQ4pD,oBACRvpD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ4pD,oBAExB,IAArB5pD,EAAQ6pD,UACRxpD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ6pD,UACjD,IAAI5/C,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAypD,GAAkB,IAzE/B,cAAmCz9C,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,UAAWyB,EAAG,IAAMwW,IAC/C,CAAE7a,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,qBAAsB+gD,KACrE,CAAEplD,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,IAEzD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEb,KAAM,EAAG4qD,OAAQ,EAAGC,KAAM,EAAGC,WAAY,GAIpD,OAHA7mD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACyB,KAAA,EACjBqE,EAAAiY,GAAK+C,GAAS5Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiY,IACnF,MAC+B,KAAA,EACvBjY,EAAAb,KAAO4K,EAAOvN,QACtB,MACoB,KAAA,EACZwD,EAAA+pD,OAAShgD,EAAOvN,QACxB,MACmB,KAAA,EACXwD,EAAAgqD,KAAOjgD,EAAOxM,SACtB,MAC0B,KAAA,EAClByC,EAAAiqD,WAAalgD,EAAOxM,SAC5B,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7D9G,EAAQiY,IACR+C,GAAS5P,oBAAoBpL,EAAQiY,GAAI5X,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjF,IAAjBqC,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAE1B,IAAnBa,EAAQ+pD,QACR1pD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+pD,QAE5B,IAAjB/pD,EAAQgqD,MACR3pD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQgqD,MAEtB,IAAvBhqD,EAAQiqD,YACR5pD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQiqD,YACjD,IAAIhgD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA6HS,MAAA6pD,GAAsB,IAtHnC,cAAuC79C,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,EAAwBC,EAAG,GACxE,CAAEtE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,EAAwBC,EAAG,GACxE,CAAEtE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,MAAO+B,EAAG,EAAwBpL,EAAG,CAAEqJ,KAAM,SAAUyB,EAAG,IACvF,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,IAEzF,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEmqD,IAAK,EAAGC,MAAO,EAAGC,IAAK,EAAGC,QAAS,GAAIC,IAAK,EAAGC,QAAS,GAAIC,KAAM,GAAIC,UAAW,IAI5F,OAHAtnD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkB,KAAA,EACVqE,EAAAmqD,IAAMpgD,EAAOxM,SACrB,MACoB,KAAA,EACZyC,EAAAoqD,MAAQrgD,EAAOxM,SACvB,MACkB,KAAA,EACVyC,EAAAqqD,IAAMtgD,EAAOxM,SACrB,MACqB,KAAA,EACrByC,EAAQsqD,QAAUvgD,EAAOpN,QAAQhC,WACjC,MACkB,KAAA,EACVqF,EAAAuqD,IAAMxgD,EAAOxM,SACrB,MACqB,KAAA,EACrByC,EAAQwqD,QAAUzgD,EAAOpN,QAAQhC,WACjC,MAC8B,KAAA,EAC9B5E,KAAK40D,eAAe3qD,EAAQyqD,KAAM1gD,EAAQjD,GAC1C,MACkC,KAAA,EAClC,GAAIlL,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ0qD,UAAU/zD,KAAKoT,EAAOxM,eAElCyC,EAAQ0qD,UAAU/zD,KAAKoT,EAAOxM,UAClC,MAAA,QAEA,IAAI0M,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACQ2qD,eAAe5kD,EAAkCgE,EAAuBjD,GACxE,IAA+CW,EAAoDH,EAAnGjM,EAAM0O,EAAO3O,SAAU/D,EAAM0S,EAAO9T,IAAMoF,EACvC,KAAA0O,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACC,KAAA,EACD8L,EAAMsC,EAAOvN,QACb,MACC,KAAA,EACD8K,EAAMyC,EAAOvN,QACb,MAAA,QACW,MAAA,IAAIzD,WAAW3C,MAAM,oEAE5C,CACI2P,EAAA0B,GAAO,GAAKH,GAAO,CAC3B,CACA8D,oBAAoBpL,EAA8BK,EAAuByG,GAEjD,IAAhB9G,EAAQmqD,KACR9pD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQmqD,KAE3B,IAAlBnqD,EAAQoqD,OACR/pD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQoqD,OAE7B,IAAhBpqD,EAAQqqD,KACRhqD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQqqD,KAEzB,KAApBrqD,EAAQsqD,SACRjqD,EAAO3E,IAAI,EAAGK,EAASC,QAAQW,MAAMqD,EAAQsqD,SAE7B,IAAhBtqD,EAAQuqD,KACRlqD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQuqD,KAEzB,KAApBvqD,EAAQwqD,SACRnqD,EAAO3E,IAAI,EAAGK,EAASC,QAAQW,MAAMqD,EAAQwqD,SAEjD,IAAA,IAAStmD,KAAKd,OAAOC,KAAKrD,EAAQyqD,MACvBpqD,EAAA3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAOrD,IAAI,EAAGK,EAASC,QAAQQ,MAAM4J,SAASlC,IAAIxI,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQyqD,KAAKvmD,IAAWvG,OAEhJ,GAAAqC,EAAQ0qD,UAAUx1D,OAAQ,CAC1BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ0qD,UAAUx1D,OAAQD,IACnCoL,EAAA9C,OAAOyC,EAAQ0qD,UAAUz1D,IACpCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA+IS,MAAAuqD,GAAc,IAxI3B,cAA+Bv+C,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,GAAIsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GACjD,CAAErE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IAChD,CAAE/pD,GAAI,GAAIsC,KAAM,QAASM,KAAM,UAAWyB,EAAG,IAAM0lD,IACnD,CAAE/pD,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAM0lD,IACnD,CAAE/pD,GAAI,GAAIsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAM0lD,IAClD,CAAE/pD,GAAI,GAAIsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IACjD,CAAE/pD,GAAI,GAAIsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IACjD,CAAE/pD,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACrD,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMikD,IACrF,CAAEtoD,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMklD,IACnF,CAAEvpD,GAAI,GAAIsC,KAAM,YAAaM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMslD,IACxF,CAAE3pD,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMomD,KAE1F,CACAngD,OAAO/V,GACG,MAAAsL,EAAU,CAAEyC,KAAM,GAAImmD,UAAW,EAAGiC,cAAe,EAAGC,cAAe,EAAGC,QAAS,GAAIC,MAAO,GAAIC,UAAW,GAAIC,KAAM,IAIpH,OAHA9nD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmB,KAAA,EACXqE,EAAAyC,KAAOsH,EAAOtM,SACtB,MACwB,KAAA,GAChBuC,EAAA4oD,UAAY7+C,EAAOvN,QAC3B,MACqC,KAAA,EAC7BwD,EAAAmrD,IAAMjB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmrD,KAC/F,MACuC,KAAA,GAC/BnrD,EAAAorD,MAAQlB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQorD,OACjG,MACwC,KAAA,EAChCprD,EAAAspD,OAASY,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQspD,QAClG,MACsC,KAAA,GAC9BtpD,EAAAqrD,KAAOnB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQqrD,MAChG,MACqC,KAAA,GAC7BrrD,EAAAkc,IAAMguC,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkc,KAC/F,MACqC,KAAA,GAC7Blc,EAAAsrD,IAAMpB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQsrD,KAC/F,MAC8B,KAAA,EACtBtrD,EAAA6qD,cAAgB9gD,EAAOxM,SAC/B,MAC8B,KAAA,GACtByC,EAAA8qD,cAAgB/gD,EAAOxM,SAC/B,MAC4C,KAAA,EACpCyC,EAAA+qD,QAAQp0D,KAAK8xD,GAAcr+C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC/E,MACwC,KAAA,EAChC9G,EAAAgrD,MAAMr0D,KAAK+yD,GAAYt/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC3E,MACgD,KAAA,GACxC9G,EAAAirD,UAAUt0D,KAAKmzD,GAAgB1/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACnF,MACuC,KAAA,EAC/B9G,EAAAkrD,KAAKv0D,KAAKi0D,GAAYxgD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAExC,KAAjB9G,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEjC,IAAtBzC,EAAQ4oD,WACRvoD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQ4oD,WAE9C5oD,EAAQmrD,KACRjB,GAAoB9+C,oBAAoBpL,EAAQmrD,IAAK9qD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQorD,OACRlB,GAAoB9+C,oBAAoBpL,EAAQorD,MAAO/qD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjHqC,EAAQspD,QACRY,GAAoB9+C,oBAAoBpL,EAAQspD,OAAQjpD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjHqC,EAAQqrD,MACRnB,GAAoB9+C,oBAAoBpL,EAAQqrD,KAAMhrD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhHqC,EAAQkc,KACRguC,GAAoB9+C,oBAAoBpL,EAAQkc,IAAK7b,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE/GqC,EAAQsrD,KACRpB,GAAoB9+C,oBAAoBpL,EAAQsrD,IAAKjrD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErF,IAA1BqC,EAAQ6qD,eACRxqD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ6qD,eAEnB,IAA1B7qD,EAAQ8qD,eACRzqD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ8qD,eAElD,IAAA,IAAS71D,EAAI,EAAGA,EAAI+K,EAAQ+qD,QAAQ71D,OAAQD,IACxCwzD,GAAcr9C,oBAAoBpL,EAAQ+qD,QAAQ91D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEnH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQgrD,MAAM91D,OAAQD,IACtCy0D,GAAYt+C,oBAAoBpL,EAAQgrD,MAAM/1D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE/G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQirD,UAAU/1D,OAAQD,IAC1C60D,GAAgB1+C,oBAAoBpL,EAAQirD,UAAUh2D,GAAIoL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQkrD,KAAKh2D,OAAQD,IACrC21D,GAAYx/C,oBAAoBpL,EAAQkrD,KAAKj2D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC9G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAkrD,GAAe,IA3D5B,cAAgCl/C,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IAChD,CAAE/pD,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IAChD,CAAE/pD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMomD,KAE7F,CACAngD,OAAO/V,GACH,MAAMsL,EAAU,CAAE2nD,QAAS,IAIpB,OAHAvkD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAAmrD,IAAMjB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmrD,KAC/F,MACqC,KAAA,EAC7BnrD,EAAAkc,IAAMguC,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkc,KAC/F,MAC0C,KAAA,EAClClc,EAAA2nD,QAAQhxD,KAAKi0D,GAAYxgD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC7E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAE1D9G,EAAQmrD,KACRjB,GAAoB9+C,oBAAoBpL,EAAQmrD,IAAK9qD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQkc,KACRguC,GAAoB9+C,oBAAoBpL,EAAQkc,IAAK7b,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ2nD,QAAQzyD,OAAQD,IACxC21D,GAAYx/C,oBAAoBpL,EAAQ2nD,QAAQ1yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACjH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAmrD,GAAc,IA3D3B,cAA+Bn/C,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IAChD,CAAE/pD,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAM0lD,IAChD,CAAE/pD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM+mD,KAE7F,CACA9gD,OAAO/V,GACH,MAAMsL,EAAU,CAAE6nD,QAAS,IAIpB,OAHAzkD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACqC,KAAA,EAC7BqE,EAAAmrD,IAAMjB,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmrD,KAC/F,MACqC,KAAA,EAC7BnrD,EAAAkc,IAAMguC,GAAoB9/C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkc,KAC/F,MAC2C,KAAA,EACnClc,EAAA6nD,QAAQlxD,KAAK40D,GAAanhD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC9E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEzD9G,EAAQmrD,KACRjB,GAAoB9+C,oBAAoBpL,EAAQmrD,IAAK9qD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQkc,KACRguC,GAAoB9+C,oBAAoBpL,EAAQkc,IAAK7b,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ6nD,QAAQ3yD,OAAQD,IACxCs2D,GAAangD,oBAAoBpL,EAAQ6nD,QAAQ5yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAClH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAorD,GAAmB,IA7ChC,cAAoCp/C,EAChCrS,cACI8V,MAAM,yBAA0B,CAC5B,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMomD,KAE7F,CACAngD,OAAO/V,GACH,MAAMsL,EAAU,CAAEoZ,QAAS,IAIpB,OAHAhW,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACyC+W,EAAA1V,KAAMiK,EAAStL,GACrDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GAC0C,IAD1CC,EAEQqE,EAAAoZ,QAAQziB,KAAKi0D,GAAYxgD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QAC7E,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA2BK,EAAuByG,GAElE,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQoZ,QAAQlkB,OAAQD,IACxC21D,GAAYx/C,oBAAoBpL,EAAQoZ,QAAQnkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACjH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAqrD,GAAiB,IA3D9B,cAAkCr/C,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMojD,IACjD,CAAEznD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqU,IACtD,CAAE1Y,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAM0jD,KAEhE,CACAz9C,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA2rD,KAAO/D,GAAKx9C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2rD,MACjF,MACiC,KAAA,EACzB3rD,EAAA4rD,UAAY/yC,GAAUzO,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4rD,WAC3F,MACoC,KAAA,EAC5B5rD,EAAA6rD,WAAa3D,GAAW99C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6rD,YAC7F,MAAA,QAEA,IAAI5hD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE5D9G,EAAQ2rD,MACR/D,GAAKx8C,oBAAoBpL,EAAQ2rD,KAAMtrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhGqC,EAAQ4rD,WACR/yC,GAAUzN,oBAAoBpL,EAAQ4rD,UAAWvrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQ6rD,YACR3D,GAAW98C,oBAAoBpL,EAAQ6rD,WAAYxrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAAyrD,GAAgB,IAhF7B,cAAiCz/C,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,UAAWyB,EAAG,IAAMgnD,IACzD,CAAErrD,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,UAAWyB,EAAG,IAAMinD,IAC9D,CAAEtrD,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,SAAUyB,EAAG,GAC9D,CAAErE,GAAI,EAAGsC,KAAM,yBAA0BM,KAAM,SAAUyB,EAAG,GAC5D,CAAErE,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAE+rD,KAAM,GAAIC,uBAAwB,EAAGC,qBAAsB,EAAGC,YAAa,IAItF,OAHA9oD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACsC,KAAA,EAC9BqE,EAAAmsD,YAAcX,GAAYphD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmsD,aAC/F,MACgD,KAAA,EACxCnsD,EAAAosD,iBAAmBX,GAAiBrhD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQosD,kBACzG,MACmB,KAAA,EACXpsD,EAAA+rD,KAAOhiD,EAAOtM,SACtB,MACuC,KAAA,EAC/BuC,EAAAgsD,uBAAyBjiD,EAAOxM,SACxC,MACqC,KAAA,EAC7ByC,EAAAisD,qBAAuBliD,EAAOxM,SACtC,MAC2B,KAAA,EACnByC,EAAAksD,YAAcniD,EAAOtM,SAC7B,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE3D9G,EAAQmsD,aACRX,GAAYpgD,oBAAoBpL,EAAQmsD,YAAa9rD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQosD,kBACRX,GAAiBrgD,oBAAoBpL,EAAQosD,iBAAkB/rD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvG,KAAjBqC,EAAQ+rD,MACR1rD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQ+rD,MAEpB,IAAnC/rD,EAAQgsD,wBACR3rD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQgsD,wBAEZ,IAAjChsD,EAAQisD,sBACR5rD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQisD,sBAErB,KAAxBjsD,EAAQksD,aACR7rD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQksD,aAC3D,IAAIjiD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAgsD,GAAsB,IA7CnC,cAAuChgD,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMojD,KAEzD,CACAn9C,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACuB,IADvBC,EAEQqE,EAAA2rD,KAAO/D,GAAKx9C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2rD,UACjF,CAEA,IAAI1hD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA8BK,EAAuByG,GAEjE9G,EAAQ2rD,MACR/D,GAAKx8C,oBAAoBpL,EAAQ2rD,KAAMtrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACpG,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA4GS,MAAAisD,GAAc,IArG3B,cAA+BjgD,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMqL,IACvD,CAAE1P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMqL,IACvD,CAAE1P,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,UAAWyB,EAAG,IAAMqL,IAC1D,CAAE1P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMqL,IACxD,CAAE1P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,UAAWyB,EAAG,IAAMqL,IAC3D,CAAE1P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMqL,IACxD,CAAE1P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUJ,OAAQ,EAA2B6B,EAAG,GAC7E,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWyB,EAAG,IAAM4O,IAClD,CAAEjT,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMwW,KAE/F,CACAvQ,OAAO/V,GACH,MAAMsL,EAAU,CAAEusD,KAAM,GAAIxwC,UAAW,IAIhC,OAHA3Y,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAwsD,UAAY38C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwsD,WAC3F,MACkC,KAAA,EAC1BxsD,EAAAysD,UAAY58C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQysD,WAC3F,MACqC,KAAA,EAC7BzsD,EAAA0sD,aAAe78C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ0sD,cAC9F,MACmC,KAAA,EAC3B1sD,EAAA2sD,WAAa98C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2sD,YAC5F,MACsC,KAAA,EAC9B3sD,EAAA4sD,cAAgB/8C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4sD,eAC/F,MACmC,KAAA,EAC3B5sD,EAAA6sD,WAAah9C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6sD,YAC5F,MAC4B,KAAA,EAC5B7sD,EAAQusD,KAAK51D,KAAKoT,EAAOtM,UACzB,MACmC,KAAA,EAC3BuC,EAAAomD,MAAQhzC,GAAgBhJ,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQomD,OAC7F,MACyC,KAAA,EACjCpmD,EAAA+b,UAAUplB,KAAKqkB,GAAS5Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC5E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAEzD9G,EAAQwsD,WACR38C,GAAUzE,oBAAoBpL,EAAQwsD,UAAWnsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQysD,WACR58C,GAAUzE,oBAAoBpL,EAAQysD,UAAWpsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQ0sD,cACR78C,GAAUzE,oBAAoBpL,EAAQ0sD,aAAcrsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ2sD,YACR98C,GAAUzE,oBAAoBpL,EAAQ2sD,WAAYtsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ4sD,eACR/8C,GAAUzE,oBAAoBpL,EAAQ4sD,cAAevsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE9GqC,EAAQ6sD,YACRh9C,GAAUzE,oBAAoBpL,EAAQ6sD,WAAYxsD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE/G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQusD,KAAKr3D,OAAQD,IAC9BoL,EAAA3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQusD,KAAKt3D,IAE5D+K,EAAQomD,OACRhzC,GAAgBhI,oBAAoBpL,EAAQomD,MAAO/lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ+b,UAAU7mB,OAAQD,IAC1C+lB,GAAS5P,oBAAoBpL,EAAQ+b,UAAU9mB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAysD,GAAa,IA7C1B,cAA8BzgD,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM8nD,KAE7F,CACA7hD,OAAO/V,GACH,MAAMsL,EAAU,CAAE2nD,QAAS,IAIpB,OAHAvkD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GAC0C,IAD1CC,EAEQqE,EAAA2nD,QAAQhxD,KAAK21D,GAAYliD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QAC7E,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAE5D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ2nD,QAAQzyD,OAAQD,IACxCq3D,GAAYlhD,oBAAoBpL,EAAQ2nD,QAAQ1yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACjH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAA0sD,GAAY,IA7CzB,cAA6B1gD,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMsoD,KAE7F,CACAriD,OAAO/V,GACH,MAAMsL,EAAU,CAAE6nD,QAAS,IAIpB,OAHAzkD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACyC,IADzCC,EAEQqE,EAAA6nD,QAAQlxD,KAAKm2D,GAAW1iD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QAC5E,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAE3D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ6nD,QAAQ3yD,OAAQD,IACxC63D,GAAW1hD,oBAAoBpL,EAAQ6nD,QAAQ5yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAA2sD,GAAqB,IApDlC,cAAsC3gD,EAClCrS,cACI8V,MAAM,2BAA4B,CAC9B,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMuoD,IACvD,CAAE5sD,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,IAE1D,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEksD,YAAa,IAIxB,OAHA9oD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC2C+W,EAAA1V,KAAMiK,EAAStL,GACvDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAitD,UAAYF,GAAU3iD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQitD,WAC3F,MAC2B,KAAA,EACnBjtD,EAAAksD,YAAcniD,EAAOtM,SAC7B,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA6BK,EAAuByG,GAEhE9G,EAAQitD,WACRF,GAAU3hD,oBAAoBpL,EAAQitD,UAAW5sD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElF,KAAxBqC,EAAQksD,aACR7rD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQksD,aAC3D,IAAIjiD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAmIS,MAAA6sD,GAAqB,IA5HlC,cAAsC7gD,EAClCrS,cACI8V,MAAM,2BAA4B,CAC9B,CAAE3P,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMghD,IACnD,CAAErlD,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMyL,IACvD,CAAE9P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMoO,IACxD,CAAEzS,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMmR,IACpD,CAAExV,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqU,IACtD,CAAE1Y,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAM0jD,IACxD,CAAE/nD,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMsW,IACnF,CAAE3a,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,aAAc8J,KACxG,CAAEnO,GAAI,GAAIsC,KAAM,wBAAyBM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,mBAAoB+J,KACtH,CAAEpO,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,aAAc8J,MAElF,CACA7D,OAAO/V,GACH,MAAMsL,EAAU,CAAE8nD,MAAO,GAAIqF,aAAc,GAAIC,mBAAoB,GAAIC,gBAAiB,GAIjF,OAHAjqD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC2C+W,EAAA1V,KAAMiK,EAAStL,GACvDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC2B,KAAA,EACnBqE,EAAAstD,OAAS9H,GAAOp7C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQstD,QACrF,MACkC,KAAA,EAC1BttD,EAAAutD,UAAYt9C,GAAU7F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQutD,WAC3F,MACoC,KAAA,EAC5BvtD,EAAAwtD,WAAa56C,GAAWxI,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwtD,YAC7F,MAC6B,KAAA,EACrBxtD,EAAAioD,QAAUtyC,GAAQvL,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQioD,SACvF,MACiC,KAAA,EACzBjoD,EAAA4rD,UAAY/yC,GAAUzO,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4rD,WAC3F,MACoC,KAAA,EAC5B5rD,EAAA6rD,WAAa3D,GAAW99C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6rD,YAC7F,MACuC,KAAA,EAC/B7rD,EAAA8nD,MAAMnxD,KAAKmkB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MAC0C,KAAA,EAC1C,GAAIlL,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQmtD,aAAax2D,KAAKoT,EAAOvN,cAErCwD,EAAQmtD,aAAax2D,KAAKoT,EAAOvN,SACrC,MACuD,KAAA,GACvD,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQotD,mBAAmBz2D,KAAKoT,EAAOvN,cAE3CwD,EAAQotD,mBAAmBz2D,KAAKoT,EAAOvN,SAC3C,MACoC,KAAA,EAC5BwD,EAAAqtD,gBAAkBtjD,EAAOvN,QACjC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA6BK,EAAuByG,GAEhE9G,EAAQstD,QACR9H,GAAOp6C,oBAAoBpL,EAAQstD,OAAQjtD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpGqC,EAAQutD,WACRt9C,GAAU7E,oBAAoBpL,EAAQutD,UAAWltD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQwtD,YACR56C,GAAWxH,oBAAoBpL,EAAQwtD,WAAYntD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQioD,SACRtyC,GAAQvK,oBAAoBpL,EAAQioD,QAAS5nD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEtGqC,EAAQ4rD,WACR/yC,GAAUzN,oBAAoBpL,EAAQ4rD,UAAWvrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQ6rD,YACR3D,GAAW98C,oBAAoBpL,EAAQ6rD,WAAYxrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ8nD,MAAM5yD,OAAQD,IACtC6lB,GAAW1P,oBAAoBpL,EAAQ8nD,MAAM7yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1G,GAAAqC,EAAQmtD,aAAaj4D,OAAQ,CAC7BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQmtD,aAAaj4D,OAAQD,IACtCoL,EAAA7D,MAAMwD,EAAQmtD,aAAal4D,IACtCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQotD,mBAAmBl4D,OAAQ,CACnCmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQotD,mBAAmBl4D,OAAQD,IAC5CoL,EAAA7D,MAAMwD,EAAQotD,mBAAmBn4D,IAC5CoL,EAAO1C,MACX,CAEgC,IAA5BqC,EAAQqtD,iBACRhtD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqtD,iBACjD,IAAIpjD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAAotD,GAAoB,IAlEjC,cAAqCphD,EACjCrS,cACI8V,MAAM,0BAA2B,CAC7B,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAMkpD,IAChD,CAAEvtD,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAMkpD,IAChD,CAAEvtD,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAMkpD,IAChD,CAAEvtD,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMkpD,KAEzD,CACAjjD,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC0C+W,EAAA1V,KAAMiK,EAAStL,GACtDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAmrD,IAAMuC,GAAiBtjD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmrD,KAC5F,MACkC,KAAA,EAC1BnrD,EAAAkc,IAAMwxC,GAAiBtjD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkc,KAC5F,MACkC,KAAA,EAC1Blc,EAAA2tD,IAAMD,GAAiBtjD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2tD,KAC5F,MACmC,KAAA,EAC3B3tD,EAAAqrD,KAAOqC,GAAiBtjD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQqrD,MAC7F,MAAA,QAEA,IAAIphD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA4BK,EAAuByG,GAE/D9G,EAAQmrD,KACRuC,GAAiBtiD,oBAAoBpL,EAAQmrD,IAAK9qD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQkc,KACRwxC,GAAiBtiD,oBAAoBpL,EAAQkc,IAAK7b,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ2tD,KACRD,GAAiBtiD,oBAAoBpL,EAAQ2tD,IAAKttD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQqrD,MACRqC,GAAiBtiD,oBAAoBpL,EAAQqrD,KAAMhrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAChH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAyES,MAAAqtD,GAAmB,IAlEhC,cAAoCrhD,EAChCrS,cACI8V,MAAM,yBAA0B,CAC5B,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMqL,IACpD,CAAE1P,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,UAAWyB,EAAG,IAAMqL,IAC1D,CAAE1P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqL,IACtD,CAAE1P,GAAI,EAAGsC,KAAM,kBAAmBM,KAAM,UAAWyB,EAAG,IAAMqL,KAEpE,CACApF,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACyC+W,EAAA1V,KAAMiK,EAAStL,GACrDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC+B,KAAA,EACvBqE,EAAA4tD,QAAU/9C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4tD,SACzF,MACqC,KAAA,EAC7B5tD,EAAA6tD,aAAeh+C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6tD,cAC9F,MACiC,KAAA,EACzB7tD,EAAA8tD,SAAWj+C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8tD,UAC1F,MACuC,KAAA,EAC/B9tD,EAAA+tD,cAAgBl+C,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ+tD,eAC/F,MAAA,QAEA,IAAI9jD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA2BK,EAAuByG,GAE9D9G,EAAQ4tD,SACR/9C,GAAUzE,oBAAoBpL,EAAQ4tD,QAASvtD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExGqC,EAAQ6tD,cACRh+C,GAAUzE,oBAAoBpL,EAAQ6tD,aAAcxtD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQ8tD,UACRj+C,GAAUzE,oBAAoBpL,EAAQ8tD,SAAUztD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzGqC,EAAQ+tD,eACRl+C,GAAUzE,oBAAoBpL,EAAQ+tD,cAAe1tD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAClH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoD0B,IA7C9B,cAAkCgM,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUyB,EAAG,IAEzD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEguD,WAAY,IAIvB,OAHA5qD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GAC0B,IAD1BC,EAEQqE,EAAAguD,WAAajkD,EAAOtM,aAC5B,CAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAErC,KAAvB9G,EAAQguD,YACR3tD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQguD,YAC3D,IAAI/jD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA4GS,MAAA4tD,GAAkB,IArG/B,cAAmC5hD,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,mBAAoBM,KAAM,SAAUyB,EAAG,GACtD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,MAAOM,KAAM,SAAUyB,EAAG,GACzC,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,UAAWyB,EAAG,IAAMsnD,IAC9D,CAAE3rD,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,UAAWyB,EAAG,IAAMipD,KAExE,CACAhjD,OAAO/V,GACH,MAAMsL,EAAU,CAAEkuD,oBAAqB,EAAGC,gBAAiB,EAAGC,cAAe,EAAGC,UAAW,EAAGC,eAAe,EAAOnD,IAAK,EAAGjvC,IAAK,GAI1H,OAHA9Y,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAkuD,oBAAsBnkD,EAAOvN,QACrC,MAC8B,KAAA,EACtBwD,EAAAmuD,gBAAkBpkD,EAAOvN,QACjC,MAC4B,KAAA,EACpBwD,EAAAouD,cAAgBrkD,EAAOvN,QAC/B,MACwB,KAAA,EAChBwD,EAAAquD,UAAYtkD,EAAOvN,QAC3B,MAC2B,KAAA,EACnBwD,EAAAsuD,cAAgBvkD,EAAOhN,OAC/B,MACkB,KAAA,EACViD,EAAAmrD,IAAMphD,EAAOxM,SACrB,MACkB,KAAA,EACVyC,EAAAkc,IAAMnS,EAAOxM,SACrB,MAC6C,KAAA,EACrCyC,EAAAuuD,gBAAkBzC,GAAc1hD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQuuD,iBACrG,MACmD,KAAA,EAC3CvuD,EAAAwuD,kBAAoBf,GAAkBrjD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwuD,mBAC3G,MAAA,QAEA,IAAIvkD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7B,IAAhC9G,EAAQkuD,qBACR7tD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkuD,qBAEjB,IAA5BluD,EAAQmuD,iBACR9tD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmuD,iBAEnB,IAA1BnuD,EAAQouD,eACR/tD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQouD,eAEvB,IAAtBpuD,EAAQquD,WACRhuD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQquD,YAEnB,IAA1BruD,EAAQsuD,eACRjuD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQsuD,eAE5B,IAAhBtuD,EAAQmrD,KACR9qD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQmrD,KAE7B,IAAhBnrD,EAAQkc,KACR7b,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQkc,KAE7Clc,EAAQuuD,iBACRzC,GAAc1gD,oBAAoBpL,EAAQuuD,gBAAiBluD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpHqC,EAAQwuD,mBACRf,GAAkBriD,oBAAoBpL,EAAQwuD,kBAAmBnuD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC9H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCvyES,MAAAouD,GAAa,IAhF1B,cAA8BpiD,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMkqD,IACnF,CAAEvuD,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMmqD,IACtF,CAAExuD,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMoqD,IAClF,CAAEzuD,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM+U,IACxF,CAAEpZ,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMqqD,IACxF,CAAE1uD,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMqqD,KAEjG,CACApkD,OAAO/V,GACH,MAAMsL,EAAU,CAAE4Z,MAAO,GAAIK,SAAU,GAAIP,KAAM,GAAIo1C,WAAY,GAAIC,UAAW,GAAIC,WAAY,IAIzF,OAHA5rD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACmC,KAAA,EAC3BqE,EAAA4Z,MAAMjjB,KAAK+3D,GAAOtkD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACtE,MACyC,KAAA,EACjC9G,EAAAia,SAAStjB,KAAKg4D,GAAUvkD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC5E,MACiC,KAAA,EACzB9G,EAAA0Z,KAAK/iB,KAAKi4D,GAAMxkD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACpE,MACiD,KAAA,EACzC9G,EAAA8uD,WAAWn4D,KAAK4iB,GAAgBnP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IACpF,MAC0C,KAAA,EAClC9G,EAAA+uD,UAAUp4D,KAAKk4D,GAASzkD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC5E,MAC2C,KAAA,EACnC9G,EAAAgvD,WAAWr4D,KAAKk4D,GAASzkD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC7E,MAAA,QAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAE5D,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQ4Z,MAAM1kB,OAAQD,IACtCy5D,GAAOtjD,oBAAoBpL,EAAQ4Z,MAAM3kB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQia,SAAS/kB,OAAQD,IACzC05D,GAAUvjD,oBAAoBpL,EAAQia,SAAShlB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ0Z,KAAKxkB,OAAQD,IACrC25D,GAAMxjD,oBAAoBpL,EAAQ0Z,KAAKzkB,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExG,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ8uD,WAAW55D,OAAQD,IAC3CskB,GAAgBnO,oBAAoBpL,EAAQ8uD,WAAW75D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAExH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ+uD,UAAU75D,OAAQD,IAC1C45D,GAASzjD,oBAAoBpL,EAAQ+uD,UAAU95D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhH,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQgvD,WAAW95D,OAAQD,IAC3C45D,GAASzjD,oBAAoBpL,EAAQgvD,WAAW/5D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACjH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuOS,MAAAquD,GAAS,IAhOtB,cAA0BriD,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBgK,KACjE,CAAErO,GAAI,EAAGsC,KAAM,aAAcM,KAAM,OAAQyB,EAAG,IAAM,CAAC,kBAAmBiK,KACxE,CAAEtO,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoBkK,KAC1E,CAAEvO,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBmK,KACtE,CAAExO,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,yBAA0BoK,KACvF,CAAEzO,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,iBAAkBuK,KAC1G,CAAE5O,GAAI,GAAIsC,KAAM,cAAeM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GACnF,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,eAAgBM,KAAM,SAAUyB,EAAG,GACnD,CAAErE,GAAI,GAAIsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,UAAWM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBsK,KACxE,CAAE3O,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,cAAe4J,KAC3G,CAAEjO,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoB6J,KACnF,CAAElO,GAAI,GAAIsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,IAEvD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAIwsD,KAAM,GAAI9vD,KAAM,EAAG+a,UAAW,EAAGC,WAAY,EAAGC,SAAU,EAAGC,iBAAkB,EAAGtK,MAAO,GAAIuK,WAAY,GAAIC,YAAa,GAAIC,gBAAiB,EAAGC,gBAAiB,EAAGC,YAAa,EAAGw0C,KAAM,EAAGC,MAAO,EAAGC,QAAS,EAAGC,QAAQ,EAAOC,QAAQ,EAAOC,eAAgB,GAAIC,mBAAoB,EAAG70C,QAAS,IAInU,OAHAvX,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MACmB,KAAA,EACXuC,EAAAivD,KAAOllD,EAAOtM,SACtB,MAC2B,KAAA,EACnBuC,EAAAb,KAAO4K,EAAOvN,QACtB,MACkC,KAAA,EAC1BwD,EAAAka,UAAYnQ,EAAOvN,QAC3B,MACoC,KAAA,EAC5BwD,EAAAma,WAAapQ,EAAOvN,QAC5B,MACgC,KAAA,EACxBwD,EAAAoa,SAAWrQ,EAAOvN,QAC1B,MACiD,KAAA,EACzCwD,EAAAqa,iBAAmBtQ,EAAOvN,QAClC,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MAC2C,KAAA,GAC3C,GAAI3B,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQsa,WAAW3jB,KAAKoT,EAAOvN,cAEnCwD,EAAQsa,WAAW3jB,KAAKoT,EAAOvN,SACnC,MACmC,KAAA,GACnC,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQua,YAAY5jB,KAAKoT,EAAOxM,eAEpCyC,EAAQua,YAAY5jB,KAAKoT,EAAOxM,UACpC,MACgC,KAAA,GACxByC,EAAAwa,gBAAkBzQ,EAAOxM,SACjC,MACgC,KAAA,GACxByC,EAAAya,gBAAkB1Q,EAAOxM,SACjC,MAC2B,KAAA,GACnByC,EAAA0a,YAAc3Q,EAAOxM,SAC7B,MACkB,KAAA,GACVyC,EAAAkvD,KAAOnlD,EAAOvN,QACtB,MACmB,KAAA,GACXwD,EAAAmvD,MAAQplD,EAAOvN,QACvB,MACiC,KAAA,GACzBwD,EAAAovD,QAAUrlD,EAAOvN,QACzB,MACmB,KAAA,GACXwD,EAAAqvD,OAAStlD,EAAOhN,OACxB,MACmB,KAAA,GACXiD,EAAAsvD,OAASvlD,EAAOhN,OACxB,MAC4C,KAAA,GAC5C,GAAInB,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQuvD,eAAe54D,KAAKoT,EAAOvN,cAEvCwD,EAAQuvD,eAAe54D,KAAKoT,EAAOvN,SACvC,MAC4C,KAAA,GACpCwD,EAAAwvD,mBAAqBzlD,EAAOvN,QACpC,MACuB,KAAA,GACfwD,EAAA2a,QAAU5Q,EAAOtM,SACzB,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GA0BpD,GAxBe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE5B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,KAAjBzC,EAAQivD,MACR5uD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQivD,MAEtC,IAAjBjvD,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAEvB,IAAtBa,EAAQka,WACR7Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQka,WAEtB,IAAvBla,EAAQma,YACR9Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQma,YAExB,IAArBna,EAAQoa,UACR/Z,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQoa,UAEhB,IAA7Bpa,EAAQqa,kBACRha,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQqa,kBAE7Cra,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQsa,WAAWplB,OAAQ,CAC3BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQsa,WAAWplB,OAAQD,IACpCoL,EAAA7D,MAAMwD,EAAQsa,WAAWrlB,IACpCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQua,YAAYrlB,OAAQ,CAC5BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQua,YAAYrlB,OAAQD,IACrCoL,EAAA9C,OAAOyC,EAAQua,YAAYtlB,IACtCoL,EAAO1C,MACX,CA0BI,GAxB4B,IAA5BqC,EAAQwa,iBACRna,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQwa,iBAElB,IAA5Bxa,EAAQya,iBACRpa,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQya,iBAEtB,IAAxBza,EAAQ0a,aACRra,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQ0a,aAE7B,IAAjB1a,EAAQkvD,MACR7uD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQkvD,MAE5B,IAAlBlvD,EAAQmvD,OACR9uD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmvD,OAE1B,IAApBnvD,EAAQovD,SACR/uD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQovD,UAE3B,IAAnBpvD,EAAQqvD,QACRhvD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQqvD,SAE1B,IAAnBrvD,EAAQsvD,QACRjvD,EAAO3E,IAAI,GAAIK,EAASC,QAAQe,KAAKiD,EAAQsvD,QAE7CtvD,EAAQuvD,eAAer6D,OAAQ,CAC/BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQuvD,eAAer6D,OAAQD,IACxCoL,EAAA7D,MAAMwD,EAAQuvD,eAAet6D,IACxCoL,EAAO1C,MACX,CAEmC,IAA/BqC,EAAQwvD,oBACRnvD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwvD,oBAE1B,KAApBxvD,EAAQ2a,SACRta,EAAO3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQ2a,SAC5D,IAAI1Q,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgKS,MAAAsuD,GAAY,IAzJzB,cAA6BtiD,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,SAAUyB,EAAG,GAC/C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,SAAUyB,EAAG,GAC7C,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBgK,KACjE,CAAErO,GAAI,GAAIsC,KAAM,cAAeM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,iBAAkBgK,KAC1G,CAAErO,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBmL,KAC5E,CAAExP,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBsK,KACvE,CAAE3O,GAAI,GAAIsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,GAAIsC,KAAM,kBAAmBM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,cAAe4J,KAC3G,CAAEjO,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoB6J,MAE3F,CACA5D,OAAO/V,GACH,MAAMsL,EAAU,CAAE4a,SAAU,EAAGO,OAAQ,EAAGD,QAAS,EAAGzY,KAAM,GAAIwsD,KAAM,GAAI9vD,KAAM,EAAGswD,WAAY,GAAIC,YAAa,EAAG3/C,MAAO,GAAIq/C,QAAS,EAAGD,MAAO,EAAGI,eAAgB,GAAIC,mBAAoB,GAIrL,OAHApsD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA4a,SAAW7Q,EAAOvN,QAC1B,MACqB,KAAA,EACbwD,EAAAmb,OAASpR,EAAOvN,QACxB,MACsB,KAAA,EACdwD,EAAAkb,QAAUnR,EAAOvN,QACzB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MACmB,KAAA,EACXuC,EAAAivD,KAAOllD,EAAOtM,SACtB,MAC2B,KAAA,EACnBuC,EAAAb,KAAO4K,EAAOvN,QACtB,MAC2C,KAAA,GAC3C,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQyvD,WAAW94D,KAAKoT,EAAOvN,cAEnCwD,EAAQyvD,WAAW94D,KAAKoT,EAAOvN,SACnC,MACsC,KAAA,EAC9BwD,EAAA0vD,YAAc3lD,EAAOvN,QAC7B,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MACiC,KAAA,EACzByC,EAAAovD,QAAUrlD,EAAOvN,QACzB,MACmB,KAAA,GACXwD,EAAAmvD,MAAQplD,EAAOvN,QACvB,MAC4C,KAAA,GAC5C,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQuvD,eAAe54D,KAAKoT,EAAOvN,cAEvCwD,EAAQuvD,eAAe54D,KAAKoT,EAAOvN,SACvC,MAC4C,KAAA,GACpCwD,EAAAwvD,mBAAqBzlD,EAAOvN,QACpC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAoBvD,GAlBqB,IAArB9G,EAAQ4a,UACRva,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ4a,UAE1B,IAAnB5a,EAAQmb,QACR9a,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmb,QAEzB,IAApBnb,EAAQkb,SACR7a,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQkb,SAE5B,KAAjBlb,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,KAAjBzC,EAAQivD,MACR5uD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQivD,MAEtC,IAAjBjvD,EAAQb,MACRkB,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQb,MAE7Ca,EAAQyvD,WAAWv6D,OAAQ,CAC3BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQyvD,WAAWv6D,OAAQD,IACpCoL,EAAA7D,MAAMwD,EAAQyvD,WAAWx6D,IACpCoL,EAAO1C,MACX,CAKI,GAHwB,IAAxBqC,EAAQ0vD,aACRrvD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ0vD,aAE7C1vD,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAQI,GANoB,IAApBqC,EAAQovD,SACR/uD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQovD,SAE3B,IAAlBpvD,EAAQmvD,OACR9uD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQmvD,OAE9CnvD,EAAQuvD,eAAer6D,OAAQ,CAC/BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQuvD,eAAer6D,OAAQD,IACxCoL,EAAA7D,MAAMwD,EAAQuvD,eAAet6D,IACxCoL,EAAO1C,MACX,CAEmC,IAA/BqC,EAAQwvD,oBACRnvD,EAAO3E,IAAI,GAAIK,EAASC,QAAQQ,MAAMwD,EAAQwvD,oBAClD,IAAIvlD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoHS,MAAAuuD,GAAQ,IA7GrB,cAAyBviD,EACrBrS,cACI8V,MAAM,cAAe,CACjB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,OAAQyB,EAAG,IAAM,CAAC,iBAAkBuK,KAClE,CAAE5O,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAC5E,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,OAAQyB,EAAG,IAAM,CAAC,oBAAqBsK,KACvE,CAAE3O,GAAI,EAAGsC,KAAM,SAAUM,KAAM,SAAUyB,EAAG,GAC5C,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,OAAQyB,EAAG,IAAM,CAAC,mBAAoB6J,MAE1F,CACA5D,OAAO/V,GACG,MAAAsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAIwsD,KAAM,GAAIp0C,MAAO,EAAG9K,MAAO,GAAIo/C,MAAO,EAAGC,QAAS,EAAGC,QAAQ,EAAOG,mBAAoB,GAIpH,OAHApsD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8B+W,EAAA1V,KAAMiK,EAAStL,GAC1CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MACmB,KAAA,EACXuC,EAAAivD,KAAOllD,EAAOtM,SACtB,MAC4B,KAAA,EACpBuC,EAAA6a,MAAQ9Q,EAAOvN,QACvB,MAC6B,KAAA,EAC7B,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,eAE9ByC,EAAQ+P,MAAMpZ,KAAKoT,EAAOxM,UAC9B,MACmB,KAAA,EACXyC,EAAAmvD,MAAQplD,EAAOvN,QACvB,MACiC,KAAA,EACzBwD,EAAAovD,QAAUrlD,EAAOvN,QACzB,MACmB,KAAA,EACXwD,EAAAqvD,OAAStlD,EAAOhN,OACxB,MAC4C,KAAA,EACpCiD,EAAAwvD,mBAAqBzlD,EAAOvN,QACpC,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgBK,EAAuByG,GAcnD,GAZe,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE5B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,KAAjBzC,EAAQivD,MACR5uD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQivD,MAErC,IAAlBjvD,EAAQ6a,OACRxa,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6a,OAE7C7a,EAAQ+P,MAAM7a,OAAQ,CACtBmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ+P,MAAM7a,OAAQD,IAC/BoL,EAAA9C,OAAOyC,EAAQ+P,MAAM9a,IAChCoL,EAAO1C,MACX,CAEsB,IAAlBqC,EAAQmvD,OACR9uD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmvD,OAEzB,IAApBnvD,EAAQovD,SACR/uD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQovD,UAE1B,IAAnBpvD,EAAQqvD,QACRhvD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQqvD,QAEb,IAA/BrvD,EAAQwvD,oBACRnvD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQwvD,oBACjD,IAAIvlD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAkES,MAAAwuD,GAAW,IA3DxB,cAA4BxiD,EACxBrS,cACI8V,MAAM,iBAAkB,CACpB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,GAC1C,CAAErE,GAAI,EAAGsC,KAAM,OAAQM,KAAM,SAAUyB,EAAG,IAElD,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEiY,GAAI,EAAGxV,KAAM,GAAIwsD,KAAM,IAIlC,OAHA7rD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACiC+W,EAAA1V,KAAMiK,EAAStL,GAC7CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgB,KAAA,EACRqE,EAAAiY,GAAKlO,EAAOvN,QACpB,MACmB,KAAA,EACXwD,EAAAyC,KAAOsH,EAAOtM,SACtB,MACmB,KAAA,EACXuC,EAAAivD,KAAOllD,EAAOtM,SACtB,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAmBK,EAAuByG,GAEvC,IAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQiY,IAE5B,KAAjBjY,EAAQyC,MACRpC,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyC,MAEtC,KAAjBzC,EAAQivD,MACR5uD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQivD,MAC3D,IAAIhlD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAiKS,MAAAsvD,GAAkB,IA1J/B,cAAmCtjD,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,kBAAmBiK,KAC1G,CAAEtO,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,mBAAoBkK,KAC5G,CAAEvO,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,GAAIsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,EAAGsC,KAAM,qBAAsBM,KAAM,SAAUyB,EAAG,GACxD,CAAErE,GAAI,GAAIsC,KAAM,iBAAkBM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GACtF,CAAErE,GAAI,GAAIsC,KAAM,gBAAiBM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GACrF,CAAErE,GAAI,GAAIsC,KAAM,oBAAqBM,KAAM,SAAUJ,OAAQ,EAA2B6B,EAAG,IAEnG,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAE4vD,WAAY,GAAIC,YAAa,GAAIC,iBAAkB,EAAGC,iBAAkB,EAAGC,iBAAkB,EAAGC,iBAAkB,EAAGC,kBAAkB,EAAOC,kBAAkB,EAAOC,kBAAkB,EAAOC,cAAe,GAAIC,aAAc,GAAIC,iBAAkB,IAIlQ,OAHAntD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC4C,KAAA,EAC5C,GAAIC,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ4vD,WAAWj5D,KAAKoT,EAAOvN,cAEnCwD,EAAQ4vD,WAAWj5D,KAAKoT,EAAOvN,SACnC,MAC8C,KAAA,EAC9C,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQ6vD,YAAYl5D,KAAKoT,EAAOvN,cAEpCwD,EAAQ6vD,YAAYl5D,KAAKoT,EAAOvN,SACpC,MACkC,KAAA,EAC1BwD,EAAA8vD,iBAAmB/lD,EAAOxM,SAClC,MACkC,KAAA,EAC1ByC,EAAA+vD,iBAAmBhmD,EAAOxM,SAClC,MACkC,KAAA,EAC1ByC,EAAAgwD,iBAAmBjmD,EAAOxM,SAClC,MACkC,KAAA,GAC1ByC,EAAAiwD,iBAAmBlmD,EAAOxM,SAClC,MAC+B,KAAA,EACvByC,EAAAkwD,iBAAmBnmD,EAAOhN,OAClC,MAC+B,KAAA,EACvBiD,EAAAmwD,iBAAmBpmD,EAAOhN,OAClC,MAC+B,KAAA,EACvBiD,EAAAowD,iBAAmBrmD,EAAOhN,OAClC,MACqC,KAAA,GACrC,GAAInB,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQqwD,cAAc15D,KAAKoT,EAAOvN,cAEtCwD,EAAQqwD,cAAc15D,KAAKoT,EAAOvN,SACtC,MACoC,KAAA,GACpC,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQswD,aAAa35D,KAAKoT,EAAOvN,cAErCwD,EAAQswD,aAAa35D,KAAKoT,EAAOvN,SACrC,MACyC,KAAA,GACzCwD,EAAQuwD,iBAAiB55D,KAAKoT,EAAOtM,UACrC,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7D,GAAA9G,EAAQ4vD,WAAW16D,OAAQ,CAC3BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ4vD,WAAW16D,OAAQD,IACpCoL,EAAA7D,MAAMwD,EAAQ4vD,WAAW36D,IACpCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQ6vD,YAAY36D,OAAQ,CAC5BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQ6vD,YAAY36D,OAAQD,IACrCoL,EAAA7D,MAAMwD,EAAQ6vD,YAAY56D,IACrCoL,EAAO1C,MACX,CAuBI,GArB6B,IAA7BqC,EAAQ8vD,kBACRzvD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ8vD,kBAEhB,IAA7B9vD,EAAQ+vD,kBACR1vD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQ+vD,kBAEhB,IAA7B/vD,EAAQgwD,kBACR3vD,EAAO3E,IAAI,EAAGK,EAASE,OAAOsB,OAAOyC,EAAQgwD,kBAEhB,IAA7BhwD,EAAQiwD,kBACR5vD,EAAO3E,IAAI,GAAIK,EAASE,OAAOsB,OAAOyC,EAAQiwD,mBAEjB,IAA7BjwD,EAAQkwD,kBACR7vD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQkwD,mBAEf,IAA7BlwD,EAAQmwD,kBACR9vD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQmwD,mBAEf,IAA7BnwD,EAAQowD,kBACR/vD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQowD,kBAE5CpwD,EAAQqwD,cAAcn7D,OAAQ,CAC9BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQqwD,cAAcn7D,OAAQD,IACvCoL,EAAA7D,MAAMwD,EAAQqwD,cAAcp7D,IACvCoL,EAAO1C,MACX,CAEI,GAAAqC,EAAQswD,aAAap7D,OAAQ,CAC7BmL,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OACzC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQswD,aAAap7D,OAAQD,IACtCoL,EAAA7D,MAAMwD,EAAQswD,aAAar7D,IACtCoL,EAAO1C,MACX,CAEA,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQuwD,iBAAiBr7D,OAAQD,IAC1CoL,EAAA3E,IAAI,GAAIK,EAASI,iBAAiBsB,OAAOuC,EAAQuwD,iBAAiBt7D,IAC7E,IAAIgV,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAmHS,MAAAmwD,GAAc,IA5G3B,cAA+BnkD,EAC3BrS,cACI8V,MAAM,oBAAqB,CACvB,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,GAC3C,CAAErE,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,EAAwBC,EAAG,GAC/E,CAAEtE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,sBAAuBM,KAAM,SAAUyB,EAAG,GACzD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,SAAUyB,EAAG,GAC1D,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,SAAUyB,EAAG,GACvD,CAAErE,GAAI,EAAGsC,KAAM,WAAYM,KAAM,SAAUyB,EAAG,GAC9C,CAAErE,GAAI,EAAGsC,KAAM,UAAWM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiB2J,KACnE,CAAEhO,GAAI,GAAIsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMmrD,KAE7D,CACAllD,OAAO/V,GACH,MAAMsL,EAAU,CAAEmoD,WAAY,EAAGgH,MAAO,EAAGsB,aAAc,GAAIC,mBAAmB,EAAOC,mBAAmB,EAAOC,oBAAoB,EAAOC,kBAAkB,EAAOC,SAAU,GAAIC,QAAS,GAIrL,OAHA3tD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACoC+W,EAAA1V,KAAMiK,EAAStL,GAChDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwB,KAAA,EAChBqE,EAAAmoD,WAAap+C,EAAOvN,QAC5B,MACmB,KAAA,EACXwD,EAAAmvD,MAAQplD,EAAOvN,QACvB,MAC4B,KAAA,EAC5BwD,EAAQywD,aAAe1mD,EAAOpN,QAAQhC,WACtC,MACgC,KAAA,EACxBqF,EAAA0wD,kBAAoB3mD,EAAOhN,OACnC,MACgC,KAAA,EACxBiD,EAAA2wD,kBAAoB5mD,EAAOhN,OACnC,MACiC,KAAA,EACzBiD,EAAA4wD,mBAAqB7mD,EAAOhN,OACpC,MAC8B,KAAA,EACtBiD,EAAA6wD,iBAAmB9mD,EAAOhN,OAClC,MACuB,KAAA,EACfiD,EAAA8wD,SAAW/mD,EAAOtM,SAC1B,MAC6B,KAAA,EACrBuC,EAAA+wD,QAAUhnD,EAAOvN,QACzB,MACqC,KAAA,GAC7BwD,EAAAgxD,QAAUrB,GAAgBvlD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQgxD,SAC/F,MAAA,QAEA,IAAI/mD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAsBK,EAAuByG,GAElC,IAAvB9G,EAAQmoD,YACR9nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmoD,YAE3B,IAAlBnoD,EAAQmvD,OACR9uD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmvD,OAEpB,KAAzBnvD,EAAQywD,cACRpwD,EAAO3E,IAAI,EAAGK,EAASC,QAAQW,MAAMqD,EAAQywD,eAEf,IAA9BzwD,EAAQ0wD,mBACRrwD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ0wD,oBAEd,IAA9B1wD,EAAQ2wD,mBACRtwD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ2wD,oBAEb,IAA/B3wD,EAAQ4wD,oBACRvwD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ4wD,qBAEf,IAA7B5wD,EAAQ6wD,kBACRxwD,EAAO3E,IAAI,EAAGK,EAASC,QAAQe,KAAKiD,EAAQ6wD,kBAEvB,KAArB7wD,EAAQ8wD,UACRzwD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQ8wD,UAEnC,IAApB9wD,EAAQ+wD,SACR1wD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+wD,SAE7C/wD,EAAQgxD,SACRrB,GAAgBvkD,oBAAoBpL,EAAQgxD,QAAS3wD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACnH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2HS,MAAA4wD,GAAwB,IApHrC,cAAyC5kD,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMgsD,IACrD,CAAErwD,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMyL,IACvD,CAAE9P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMmR,IACpD,CAAExV,GAAI,EAAGsC,KAAM,QAASM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMsW,IACnF,CAAE3a,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMoO,IACxD,CAAEzS,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMghD,IACnD,CAAErlD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqU,IACtD,CAAE1Y,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GACjF,CAAErE,GAAI,GAAIsC,KAAM,mBAAoBM,KAAM,UAAWyB,EAAG,IAAMqL,KAEtE,CACApF,OAAO/V,GACG,MAAAsL,EAAU,CAAE8nD,MAAO,GAAIE,cAAe,EAAGkJ,UAAW,IAInD,OAHA9tD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAmxD,SAAWX,GAAYpmD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmxD,UAC5F,MACkC,KAAA,EAC1BnxD,EAAAutD,UAAYt9C,GAAU7F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQutD,WAC3F,MAC6B,KAAA,EACrBvtD,EAAAioD,QAAUtyC,GAAQvL,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQioD,SACvF,MACuC,KAAA,EAC/BjoD,EAAA8nD,MAAMnxD,KAAKmkB,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MACoC,KAAA,EAC5B9G,EAAAwtD,WAAa56C,GAAWxI,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwtD,YAC7F,MAC2B,KAAA,EACnBxtD,EAAAstD,OAAS9H,GAAOp7C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQstD,QACrF,MACiC,KAAA,EACzBttD,EAAA4rD,UAAY/yC,GAAUzO,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4rD,WAC3F,MAC4B,KAAA,EACpB5rD,EAAAgoD,cAAgBj+C,EAAOvN,QAC/B,MACkC,KAAA,EAClC,GAAIZ,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQkxD,UAAUv6D,KAAKoT,EAAOxM,eAElCyC,EAAQkxD,UAAUv6D,KAAKoT,EAAOxM,UAClC,MACwC,KAAA,GAChCyC,EAAAoxD,eAAiBvhD,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQoxD,gBAChG,MAAA,QAEA,IAAInnD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,GAEnE9G,EAAQmxD,UACRX,GAAYplD,oBAAoBpL,EAAQmxD,SAAU9wD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQutD,WACRt9C,GAAU7E,oBAAoBpL,EAAQutD,UAAWltD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQioD,SACRtyC,GAAQvK,oBAAoBpL,EAAQioD,QAAS5nD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1G,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQ8nD,MAAM5yD,OAAQD,IACtC6lB,GAAW1P,oBAAoBpL,EAAQ8nD,MAAM7yD,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAc1G,GAZAqC,EAAQwtD,YACR56C,GAAWxH,oBAAoBpL,EAAQwtD,WAAYntD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQstD,QACR9H,GAAOp6C,oBAAoBpL,EAAQstD,OAAQjtD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpGqC,EAAQ4rD,WACR/yC,GAAUzN,oBAAoBpL,EAAQ4rD,UAAWvrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEhF,IAA1BqC,EAAQgoD,eACR3nD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQgoD,eAE7ChoD,EAAQkxD,UAAUh8D,OAAQ,CAC1BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQkxD,UAAUh8D,OAAQD,IACnCoL,EAAA9C,OAAOyC,EAAQkxD,UAAUj8D,IACpCoL,EAAO1C,MACX,CAEIqC,EAAQoxD,gBACRvhD,GAAUzE,oBAAoBpL,EAAQoxD,eAAgB/wD,EAAO3E,IAAI,GAAIK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACpH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA0ES,MAAAgxD,GAAe,IAnE5B,cAAgChlD,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMmV,IACjD,CAAExZ,GAAI,EAAGsC,KAAM,cAAeM,KAAM,SAAUJ,OAAQ,EAAyB6B,EAAG,GAClF,CAAErE,GAAI,EAAGsC,KAAM,oBAAqBM,KAAM,UAAWyB,EAAG,IAAMqL,KAEtE,CACApF,OAAO/V,GACH,MAAMsL,EAAU,CAAEmmD,WAAY,IAIvB,OAHA/iD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACgC,KAAA,EACxBqE,EAAAsxD,KAAO33C,GAAcvP,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQsxD,MAC1F,MACmC,KAAA,EACnC,GAAI11D,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQmmD,WAAWxvD,KAAKoT,EAAOxM,eAEnCyC,EAAQmmD,WAAWxvD,KAAKoT,EAAOxM,UACnC,MACyC,KAAA,EACjCyC,EAAAuxD,gBAAkB1hD,GAAUzF,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQuxD,iBACjG,MAAA,QAEA,IAAItnD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAK1D,GAHA9G,EAAQsxD,MACR33C,GAAcvO,oBAAoBpL,EAAQsxD,KAAMjxD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzGqC,EAAQmmD,WAAWjxD,OAAQ,CAC3BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQmmD,WAAWjxD,OAAQD,IACpCoL,EAAA9C,OAAOyC,EAAQmmD,WAAWlxD,IACrCoL,EAAO1C,MACX,CAEIqC,EAAQuxD,iBACR1hD,GAAUzE,oBAAoBpL,EAAQuxD,gBAAiBlxD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACpH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAqGS,MAAAmxD,GAAgB,IA9F7B,cAAiCnlD,EAC7BrS,cACI8V,MAAM,sBAAuB,CACzB,CAAE3P,GAAI,EAAGsC,KAAM,aAAcM,KAAM,UAAWyB,EAAG,IAAMyL,IACvD,CAAE9P,GAAI,EAAGsC,KAAM,cAAeM,KAAM,UAAWyB,EAAG,IAAMoO,IACxD,CAAEzS,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMmR,IACpD,CAAExV,GAAI,EAAGsC,KAAM,eAAgBM,KAAM,UAAWyB,EAAG,IAAM4O,IACzD,CAAEjT,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMmQ,IACrD,CAAExU,GAAI,EAAGsC,KAAM,OAAQM,KAAM,OAAQyB,EAAG,IAAM,CAAC,aAAc0J,KAC7D,CAAE/N,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMsX,IACtD,CAAE3b,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,SAAUyB,EAAG,IAE3D,CACAiG,OAAO/V,GACH,MAAMsL,EAAU,CAAEylD,KAAM,EAAGgM,aAAc,IAIlC,OAHAruD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACsC+W,EAAA1V,KAAMiK,EAAStL,GAClDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAutD,UAAYt9C,GAAU7F,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQutD,WAC3F,MACoC,KAAA,EAC5BvtD,EAAAwtD,WAAa56C,GAAWxI,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQwtD,YAC7F,MAC6B,KAAA,EACrBxtD,EAAAioD,QAAUtyC,GAAQvL,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQioD,SACvF,MAC0C,KAAA,EAClCjoD,EAAA0xD,YAAct+C,GAAgBhJ,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ0xD,aACnG,MAC+B,KAAA,EACvB1xD,EAAAkmD,SAAWvxC,GAASvK,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQkmD,UACzF,MACuB,KAAA,EACflmD,EAAAylD,KAAO17C,EAAOvN,QACtB,MACiC,KAAA,EACzBwD,EAAA+b,UAAYD,GAAU1R,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ+b,WAC3F,MAC4B,KAAA,EACpB/b,EAAAyxD,aAAe1nD,EAAOtM,SAC9B,MAAA,QAEA,IAAIwM,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAwBK,EAAuByG,GAE3D9G,EAAQutD,WACRt9C,GAAU7E,oBAAoBpL,EAAQutD,UAAWltD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQwtD,YACR56C,GAAWxH,oBAAoBpL,EAAQwtD,WAAYntD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5GqC,EAAQioD,SACRtyC,GAAQvK,oBAAoBpL,EAAQioD,QAAS5nD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEtGqC,EAAQ0xD,aACRt+C,GAAgBhI,oBAAoBpL,EAAQ0xD,YAAarxD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAElHqC,EAAQkmD,UACRvxC,GAASvJ,oBAAoBpL,EAAQkmD,SAAU7lD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEvF,IAAjBqC,EAAQylD,MACRplD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQylD,MAE7CzlD,EAAQ+b,WACRD,GAAU1Q,oBAAoBpL,EAAQ+b,UAAW1b,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjF,KAAzBqC,EAAQyxD,cACRpxD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQyxD,cAC3D,IAAIxnD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAsxD,GAAe,IApD5B,cAAgCtlD,EAC5BrS,cACI8V,MAAM,qBAAsB,CACxB,CAAE3P,GAAI,EAAGsC,KAAM,iBAAkBM,KAAM,SAAUyB,EAAG,GACpD,CAAErE,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAM6W,KAE3D,CACA5Q,OAAO/V,GACG,MAAAsL,EAAU,CAAE4lD,cAAe,IAI1B,OAHAxiD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACqC+W,EAAA1V,KAAMiK,EAAStL,GACjDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GAC6B,KAAA,EACrBqE,EAAA4lD,cAAgB77C,EAAOtM,SAC/B,MAC2B,KAAA,EACnBuC,EAAAunD,OAASlsC,GAAOjR,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQunD,QACrF,MAAA,QAEA,IAAIt9C,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAuBK,EAAuByG,GAEhC,KAA1B9G,EAAQ4lD,eACRvlD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQ4lD,eAEvD5lD,EAAQunD,QACRlsC,GAAOjQ,oBAAoBpL,EAAQunD,OAAQlnD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACxG,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAuFS,MAAAuxD,GAAU,IAhFvB,cAA2BvlD,EACvBrS,cACI8V,MAAM,gBAAiB,CACnB,CAAE3P,GAAI,EAAGsC,KAAM,KAAMM,KAAM,SAAUyB,EAAG,GACxC,CAAErE,GAAI,EAAGsC,KAAM,aAAcM,KAAM,SAAUyB,EAAG,GAChD,CAAErE,GAAI,EAAGsC,KAAM,uBAAwBM,KAAM,UAAWyB,EAAG,IAAMsW,IACjE,CAAE3a,GAAI,EAAGsC,KAAM,4BAA6BM,KAAM,UAAWyB,EAAG,IAAMsW,IACtE,CAAE3a,GAAI,EAAGsC,KAAM,iCAAkCM,KAAM,UAAWyB,EAAG,IAAMsW,IAC3E,CAAE3a,GAAI,EAAGsC,KAAM,2BAA4BM,KAAM,UAAWyB,EAAG,IAAMsW,KAE7E,CACArQ,OAAO/V,GACH,MAAMsL,EAAU,CAAEiY,GAAI,GAAI45C,UAAW,GAI9B,OAHAzuD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACgC+W,EAAA1V,KAAMiK,EAAStL,GAC5CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiB,KAAA,EACTqE,EAAAiY,GAAKlO,EAAOtM,SACpB,MACwB,KAAA,EAChBuC,EAAA6xD,UAAY9nD,EAAOvN,QAC3B,MAC6C,KAAA,EACrCwD,EAAA8xD,oBAAsBh3C,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8xD,qBACtG,MACkD,KAAA,EAC1C9xD,EAAA+xD,wBAA0Bj3C,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ+xD,yBAC1G,MACuD,KAAA,EAC/C/xD,EAAAgyD,2BAA6Bl3C,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQgyD,4BAC7G,MACiD,KAAA,EACzChyD,EAAAiyD,uBAAyBn3C,GAAW1Q,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQiyD,wBACzG,MAAA,QAEA,IAAIhoD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAkBK,EAAuByG,GAEtC,KAAf9G,EAAQiY,IACR5X,EAAO3E,IAAI,EAAGK,EAASI,iBAAiBsB,OAAOuC,EAAQiY,IAEjC,IAAtBjY,EAAQ6xD,WACRxxD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ6xD,WAE7C7xD,EAAQ8xD,qBACRh3C,GAAW1P,oBAAoBpL,EAAQ8xD,oBAAqBzxD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErHqC,EAAQ+xD,yBACRj3C,GAAW1P,oBAAoBpL,EAAQ+xD,wBAAyB1xD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEzHqC,EAAQgyD,4BACRl3C,GAAW1P,oBAAoBpL,EAAQgyD,2BAA4B3xD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE5HqC,EAAQiyD,wBACRn3C,GAAW1P,oBAAoBpL,EAAQiyD,uBAAwB5xD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC5H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA4DS,MAAA6xD,GAAsB,IArDnC,cAAuC7lD,EACnCrS,cACI8V,MAAM,4BAA6B,CAC/B,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,OAAQJ,OAAQ,EAAyB6B,EAAG,IAAM,CAAC,kBAAmBskC,MAEhH,CACAr+B,OAAO/V,GACH,MAAMsL,EAAU,CAAEmyD,UAAW,IAItB,OAHA/uD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC4C+W,EAAA1V,KAAMiK,EAAStL,GACxDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GAC0C,IAD1CC,EAEA,GAAIC,IAAaG,EAASI,gBACtB,IAAA,IAAS6L,EAAI+B,EAAOvN,QAAUuN,EAAO9T,IAAK8T,EAAO9T,IAAM+R,GACnDhI,EAAQmyD,UAAUx7D,KAAKoT,EAAOvN,cAElCwD,EAAQmyD,UAAUx7D,KAAKoT,EAAOvN,aAClC,CAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA8BK,EAAuByG,GAEjE,GAAA9G,EAAQmyD,UAAUj9D,OAAQ,CAC1BmL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OACxC,IAAA,IAAS9J,EAAI,EAAGA,EAAI+K,EAAQmyD,UAAUj9D,OAAQD,IACnCoL,EAAA7D,MAAMwD,EAAQmyD,UAAUl9D,IACnCoL,EAAO1C,MACX,CACA,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAA+xD,GAAuB,IA7CpC,cAAwC/lD,EACpCrS,cACI8V,MAAM,6BAA8B,CAChC,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAM0tD,KAE9F,CACAznD,OAAO/V,GACH,MAAMsL,EAAU,CAAEqyD,SAAU,IAIrB,OAHAjvD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC6C+W,EAAA1V,KAAMiK,EAAStL,GACzDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACmD,IADnDC,EAEQqE,EAAAqyD,SAAS17D,KAAKu7D,GAAoB9nD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,QACtF,CAEA,IAAImD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA+BK,EAAuByG,GAEtE,IAAA,IAAS7R,EAAI,EAAGA,EAAI+K,EAAQqyD,SAASn9D,OAAQD,IACzCi9D,GAAoB9mD,oBAAoBpL,EAAQqyD,SAASp9D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC1H,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAoDS,MAAAiyD,GAAiB,IA7C9B,cAAkCjmD,EAC9BrS,cACI8V,MAAM,uBAAwB,CAC1B,CAAE3P,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqU,KAE9D,CACApO,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACuC+W,EAAA1V,KAAMiK,EAAStL,GACnDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,GACiC,IADjCC,EAEQqE,EAAA4rD,UAAY/yC,GAAUzO,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4rD,eAC3F,CAEA,IAAI3hD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,EAAC,CAE1G,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAyBK,EAAuByG,GAE5D9G,EAAQ4rD,WACR/yC,GAAUzN,oBAAoBpL,EAAQ4rD,UAAWvrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC9G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAkyD,GAAY,IAzEzB,cAA6BlmD,EACzBrS,cACI8V,MAAM,kBAAmB,CACrB,CAAE3P,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMojD,IACjD,CAAEznD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMotD,IACvF,CAAEzxD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAM4tD,IACtD,CAAEjyD,GAAI,EAAGsC,KAAM,UAAWM,KAAM,OAAQyB,EAAG,IAAM,CAAC,gBAAiB2J,KACnE,CAAEhO,GAAI,EAAGsC,KAAM,QAASM,KAAM,SAAUyB,EAAG,IAEnD,CACAiG,OAAO/V,GACG,MAAAsL,EAAU,CAAEwyD,SAAU,GAAIzB,QAAS,EAAG5B,MAAO,GAI5C,OAHA/rD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACkC+W,EAAA1V,KAAMiK,EAAStL,GAC9CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACuB,KAAA,EACfqE,EAAA2rD,KAAO/D,GAAKx9C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2rD,MACjF,MACwC,KAAA,EAChC3rD,EAAAwyD,SAAS77D,KAAKi7D,GAAQxnD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MAC4C,KAAA,EACpC9G,EAAAmyD,UAAYC,GAAqBhoD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmyD,WACtG,MAC6B,KAAA,EACrBnyD,EAAA+wD,QAAUhnD,EAAOvN,QACzB,MACmB,KAAA,EACXwD,EAAAmvD,MAAQplD,EAAOvN,QACvB,MAAA,QAEA,IAAIyN,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAoBK,EAAuByG,GAEvD9G,EAAQ2rD,MACR/D,GAAKx8C,oBAAoBpL,EAAQ2rD,KAAMtrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpG,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQwyD,SAASt9D,OAAQD,IACzC28D,GAAQxmD,oBAAoBpL,EAAQwyD,SAASv9D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQmyD,WACRC,GAAqBhnD,oBAAoBpL,EAAQmyD,UAAW9xD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjG,IAApBqC,EAAQ+wD,SACR1wD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQ+wD,SAE3B,IAAlB/wD,EAAQmvD,OACR9uD,EAAO3E,IAAI,EAAGK,EAASC,QAAQQ,MAAMwD,EAAQmvD,OACjD,IAAIllD,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAgFS,MAAAoyD,GAAkB,IAzE/B,cAAmCpmD,EAC/BrS,cACI8V,MAAM,wBAAyB,CAC3B,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWyB,EAAG,IAAMgsD,IACrD,CAAErwD,GAAI,EAAGsC,KAAM,OAAQM,KAAM,UAAWyB,EAAG,IAAMojD,IACjD,CAAEznD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWJ,OAAQ,EAAyB6B,EAAG,IAAMotD,IACvF,CAAEzxD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAM4tD,IACtD,CAAEjyD,GAAI,EAAGsC,KAAM,YAAaM,KAAM,UAAWyB,EAAG,IAAMqU,KAE9D,CACApO,OAAO/V,GACH,MAAMsL,EAAU,CAAEwyD,SAAU,IAIrB,OAHApvD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACwC+W,EAAA1V,KAAMiK,EAAStL,GACpDsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACkC,KAAA,EAC1BqE,EAAAmxD,SAAWX,GAAYpmD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmxD,UAC5F,MACuB,KAAA,EACfnxD,EAAA2rD,KAAO/D,GAAKx9C,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2rD,MACjF,MACwC,KAAA,EAChC3rD,EAAAwyD,SAAS77D,KAAKi7D,GAAQxnD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,IAC1E,MAC4C,KAAA,EACpC9G,EAAAmyD,UAAYC,GAAqBhoD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQmyD,WACtG,MACiC,KAAA,EACzBnyD,EAAA4rD,UAAY/yC,GAAUzO,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ4rD,WAC3F,MAAA,QAEA,IAAI3hD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAA0BK,EAAuByG,GAE7D9G,EAAQmxD,UACRX,GAAYplD,oBAAoBpL,EAAQmxD,SAAU9wD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE3GqC,EAAQ2rD,MACR/D,GAAKx8C,oBAAoBpL,EAAQ2rD,KAAMtrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEpG,IAAA,IAAS1I,EAAI,EAAGA,EAAI+K,EAAQwyD,SAASt9D,OAAQD,IACzC28D,GAAQxmD,oBAAoBpL,EAAQwyD,SAASv9D,GAAIoL,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE1GqC,EAAQmyD,WACRC,GAAqBhnD,oBAAoBpL,EAAQmyD,UAAW9xD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAErHqC,EAAQ4rD,WACR/yC,GAAUzN,oBAAoBpL,EAAQ4rD,UAAWvrD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC9G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAqyD,GAAS,IApDtB,cAA0BrmD,EACtBrS,cACI8V,MAAM,eAAgB,CAClB,CAAE3P,GAAI,EAAGsC,KAAM,UAAWM,KAAM,UAAWyB,EAAG,IAAMknD,IACpD,CAAEvrD,GAAI,EAAGsC,KAAM,SAAUM,KAAM,UAAWyB,EAAG,IAAMsnD,KAE3D,CACArhD,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC+B+W,EAAA1V,KAAMiK,EAAStL,GAC3CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACoC,KAAA,EAC5BqE,EAAA2yD,QAAUjH,GAAethD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ2yD,SAC9F,MACkC,KAAA,EAC1B3yD,EAAAvH,OAASqzD,GAAc1hD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQvH,QAC5F,MAAA,QAEA,IAAIwR,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAiBK,EAAuByG,GAEpD9G,EAAQ2yD,SACRjH,GAAetgD,oBAAoBpL,EAAQ2yD,QAAStyD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAE7GqC,EAAQvH,QACRqzD,GAAc1gD,oBAAoBpL,EAAQvH,OAAQ4H,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC/G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GA2DS,MAAAuyD,GAAa,IApD1B,cAA8BvmD,EAC1BrS,cACI8V,MAAM,mBAAoB,CACtB,CAAE3P,GAAI,EAAGsC,KAAM,MAAOM,KAAM,UAAWyB,EAAG,IAAMkuD,IAChD,CAAEvyD,GAAI,EAAGsC,KAAM,gBAAiBM,KAAM,UAAWyB,EAAG,IAAMkuD,KAElE,CACAjoD,OAAO/V,GACH,MAAMsL,EAAU,CAAA,EAIT,OAHAoD,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GACmC+W,EAAA1V,KAAMiK,EAAStL,GAC/CsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACwB,KAAA,EAChBqE,EAAA6yD,IAAMH,GAAOtoD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ6yD,KAClF,MACkC,KAAA,EAC1B7yD,EAAA8yD,aAAeJ,GAAOtoD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAS9G,EAAQ8yD,cAC3F,MAAA,QAEA,IAAI7oD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAqBK,EAAuByG,GAExD9G,EAAQ6yD,KACRH,GAAOtnD,oBAAoBpL,EAAQ6yD,IAAKxyD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEjGqC,EAAQ8yD,cACRJ,GAAOtnD,oBAAoBpL,EAAQ8yD,aAAczyD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAC9G,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GAiES,MAAA0yD,GAAwB,IA1DrC,cAAyC1mD,EACrCrS,cACI8V,MAAM,8BAA+B,CACjC,CAAE3P,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMouD,IACpE,CAAEzyD,GAAI,EAAGsC,KAAM,WAAYM,KAAM,UAAWD,MAAO,OAAQ0B,EAAG,IAAMgsD,KAE5E,CACA/lD,OAAO/V,GACH,MAAMsL,EAAU,CAAEC,KAAM,CAAEkD,eAAW,IAI9B,OAHAC,OAAAwJ,eAAe5M,EAASsB,EAAc,CAAEuL,YAAY,EAAOnY,MAAOqB,YAC3D,IAAVrB,GAC8C+W,EAAA1V,KAAMiK,EAAStL,GAC1DsL,CACX,CACAoK,mBAAmBL,EAAuB7U,EAAgB4R,EAA4BI,GAClF,IAAIlH,EAAUkH,GAAUnR,KAAK0U,SAAUpT,EAAM0S,EAAO9T,IAAMf,EACnD,KAAA6U,EAAO9T,IAAMoB,GAAK,CACrB,IAAKsE,EAASC,GAAYmO,EAAOrO,MACzB,OAAAC,GACiC,KAAA,EACjCqE,EAAQC,KAAO,CACXkD,UAAW,UACX6vD,QAASJ,GAAWxoD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQC,KAAa+yD,UAEnG,MACkC,KAAA,EAClChzD,EAAQC,KAAO,CACXkD,UAAW,WACXguD,SAAUX,GAAYpmD,mBAAmBL,EAAQA,EAAO3O,SAAU0L,EAAU9G,EAAQC,KAAakxD,WAErG,MAAA,QAEA,IAAIlnD,EAAInD,EAAQlG,iBAChB,GAAU,UAANqJ,EACA,MAAM,IAAIlR,WAAW3C,MAAM,iBAAiBuF,gBAAsBC,UAAiB7F,KAAKgK,YACxF,IAAAmK,EAAIH,EAAOlO,KAAKD,IACV,IAANqO,KACO,IAANA,EAAatK,EAAoBG,OAASmK,GAAGlU,KAAKgK,SAAUC,EAASrE,EAASC,EAAUsO,GAEzG,CACO,OAAAlK,CACX,CACAoL,oBAAoBpL,EAAgCK,EAAuByG,GAExC,YAA3B9G,EAAQC,KAAKkD,WACbyvD,GAAWxnD,oBAAoBpL,EAAQC,KAAK+yD,QAAS3yD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OAEnF,aAA3BqC,EAAQC,KAAKkD,WACbqtD,GAAYplD,oBAAoBpL,EAAQC,KAAKkxD,SAAU9wD,EAAO3E,IAAI,EAAGK,EAASI,iBAAiB4C,OAAQ+H,GAASnJ,OACpH,IAAIsM,EAAInD,EAAQ/F,mBAGT,OAFG,IAANkJ,IACM,GAALA,EAAYtK,EAAoBS,QAAU6J,GAAGlU,KAAKgK,SAAUC,EAASK,GACnEA,CACX,GCj8ES4yD,GAAgB,EAGhBC,GAAY,QAGnBC,GAAgBC,OAAOC,SAASC,SAASv+D,MAAM,KAC/Cw+D,GAAcJ,GAAcK,WAAUC,GAJnB,SAI2BA,ICKpC,SAAAC,GAAiB7oD,EAAW/U,GAC3C,OAAI+U,EAAI/U,GACA,EACGA,EAAI+U,EACP,EAEA,CAET,CAEO,SAAS8oD,GAAIxpD,GACnB,OAAOA,EAAIypD,QAAO,CAACC,EAAOC,IAAQD,EAAQC,GAAK,EAChD,CAGO,SAASC,GAAS5pD,GACxB,OAAOA,EAAIypD,QAAO,CAACE,EAAKE,EAAG/+D,EAAGkV,IAAQ6pD,EAAI7pD,EAAI2pD,GAAO7+D,EAAI6+D,GAAK,EAC/D,CAGgB,SAAAG,GAAQ9pD,EAAelV,EAAWi/D,IAChD/pD,EAAIlV,GAAIkV,EAAI+pD,IAAM,CAAC/pD,EAAI+pD,GAAI/pD,EAAIlV,GACjC,CAGgB,SAAAk/D,GAAetpD,EAAa/U,EAAas+D,GAExD,OADAA,EAAaA,GAAe,EAACvpD,EAAM/U,IAAS+U,GAAK/U,GAC1C+U,EAAE3V,QAAUY,EAAEZ,QAAU2V,EAAEwpD,OAAM,CAAC/sD,EAAKrS,IAAMm/D,EAAY9sD,EAAKxR,EAAEb,KACvE,CAQgB,SAAAq/D,GAAYnqD,EAAeiqD,GAC1CA,EAAaA,GAAe,EAACvpD,EAAM/U,IAAS+U,GAAK/U,GACjD,MAAMy+D,EAAwB,GAMvB,OALHpqD,EAAAqqD,SAAeltD,IACsC,MAApDitD,EAAYnwD,MAAaqwD,GAAAL,EAAYK,EAAMntD,MAC9CitD,EAAY59D,KAAK2Q,EAClB,IAEMitD,CACR,CAIgB,SAAAG,GAAUvqD,EAAezP,GACxC,MAAMi6D,EAAoC,CAAA,EASnC,OARHxqD,EAAAqqD,SAAeltD,IACZ,MAAAstD,EAAYl6D,EAAS4M,GACvBqtD,EAAQC,GACHD,EAAAC,GAAWj+D,KAAK2Q,GAEhBqtD,EAAAC,GAAa,CAACttD,EACvB,IAEMqtD,CACR,CAEgB,SAAAE,GAAcC,EAAeC,GAC5C,OAAO,MAAQD,EAAQz8D,KAAK28D,KAAKD,EAClC,CAOO,SAASE,GAAiBC,GACzB,OAAA9xD,OAAOC,KAAK6xD,GACjB10D,QAAOiH,IAAQhC,MAAMlO,OAAO29D,EAASztD,OACrC1B,QAAWK,SAAS8uD,EAASztD,KAChC,CAGO,SAAS0tD,GAAaC,GAC5B,OAAuB,GAAhBA,EAAMC,MACd,CAGgB,SAAAC,GAAUC,EAAaC,GAClC,GAAA,2BAA2B/6D,KAAK86D,GAAM,CACzC,IAAI73D,EAAQ63D,EAAIztD,UAAU,GAAG/S,MAAM,IACf,GAAhB2I,EAAMxI,SACTwI,EAAQ,CAACA,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,KAElE,MAAM+3D,EAAS,KAAO/3D,EAAMC,KAAK,IACjC,MAAO,QAAU,CAAE83D,GAAK,GAAM,IAAMA,GAAK,EAAK,IAAS,IAAJA,GAAS93D,KAAK,KAAO,IAAM63D,EAAQ,GACvF,CACM,MAAA,IAAIp/D,MAAM,sBAAwBm/D,EACzC,CAagB,SAAAG,GAAez1D,EAAc01D,GACtC,MAAAC,EAAU,gCAAkCxtD,mBAAmBnI,GAC/D41D,EAAqBC,SAASC,cAAc,KAC/BF,EAAAG,aAAa,OAAQJ,GACrBC,EAAAG,aAAa,WAAYL,GACnCG,SAAAG,KAAKC,YAAYL,GAC1BA,EAAmBM,QACnBN,EAAmBO,QACpB,CAEO,SAASC,GAAoBC,EAAmBC,EAAgBC,EAAeluC,EAAmBmuC,EAAyBC,GACjI,MAAMC,EAAQH,EAAQD,EAClB,IAAAK,EAAWD,EAAME,QAAQvuC,GACzBquC,GAAS,IACZC,EAAW,IAAMA,GAElBN,EAAKQ,YAAcF,EAEfF,GACEJ,EAAAS,UAAUX,OAAO,YACjBE,EAAAS,UAAUX,OAAO,aACZO,GAAS,GAAKK,QAAQP,IAC3BH,EAAAS,UAAUX,OAAO,YACjBE,EAAAS,UAAUE,IAAI,cAEdX,EAAAS,UAAUX,OAAO,YACjBE,EAAAS,UAAUE,IAAI,YAErB,CAGgB,SAAAC,GAAgB/sD,EAAejG,GAC9C,OAAS,GAALA,EACI,GACQ,GAALA,EACHiG,EAAIpE,KAASiuD,GAAA,CAACA,KAEd7pD,EAAIpE,KAAI,CAACiuD,EAAG/+D,KACZ,MAAAkiE,EAAkBhtD,EAAIlT,QACZkgE,EAAAC,OAAOniE,EAAG,GAEnB,OAD6BiiE,GAAaC,EAAiBjzD,EAAI,GACnC6B,KAAYsxD,GAAA,CAACrD,GAAGrpD,OAAO0sD,IAAK,IAC7DC,MAEL,CAYgB,SAAAC,GAAwBptD,EAAejG,GACtD,GAAS,GAALA,EACH,MAAO,GAAC,GACO,GAALA,EACV,OAAOiG,EAAIpE,KAASiuD,GAAA,CAACA,KACf,CACN,MAAMwD,EAAUD,GAAqBptD,EAAKjG,EAAI,GACvC,OAAAiG,EAAIpE,KAASiuD,GACZwD,EAAQzxD,KAAmB0xD,IAC3B,MAAAC,EAAUD,EAAYxgE,QAErB,OADPygE,EAAQ/gE,KAAKq9D,GACN0D,CAAA,MAENJ,MACJ,CACD,CAGgB,SAAAK,GAAwBxtD,EAAejG,GAGtD,OAAOowD,GAFOiD,GAAqBptD,EAAKjG,GACnB6B,KAAmB0xD,GAAAA,EAAY7sD,UAC5B,CAACgtD,EAAcC,IAAiBD,EAAavD,OAAM,CAACiC,EAAMrhE,IAAMqhE,GAAQuB,EAAa5iE,MAC9G,ED5L6C,GAAfs+D,IAAyBJ,GAAcI,GAAc,GEDtE,MAAAuE,GAAc7C,GAAclmD,IAA8BvO,QAAgBqa,GAAAA,GAAS9L,GAASgpD,kBAC5FC,GAAiB,CAACjpD,GAASkpD,YAAalpD,GAASmpD,eAAgBnpD,GAASopD,cAE1EC,GAAmB,CAACrpD,GAASspD,cAAetpD,GAASupD,eAAgBvpD,GAASwpD,gBAE9EC,OAA6B1uD,IAe1B,SAAA2uD,GAAsBC,EAAoBC,GAClD,OAAAD,GAAYC,GAAgBH,GAAuBI,IAAID,IAAgBH,GAAuBxuD,IAAI2uD,GAAc90D,SAAS60D,EACjI,CAGgB,SAAAG,GAAiBC,EAAUH,GACnC,OAAAF,GAAsBK,EAAIj+C,MAAO89C,EACzC,CAGgB,SAAAI,GAAqBD,EAAUH,GAC9C,OAAQG,EAAIj+C,OAAS9L,GAASiqD,eAAkBL,GAAe5pD,GAASiqD,aACzE,CAEgB,SAAAC,GAAkBH,EAAU3J,GACpC,OAAC2J,EAAIzJ,QACXyJ,EAAItJ,oBAAsBnhD,GAAW6qD,oBAC3B,MAAT/J,GAAiB2J,EAAI3J,OAASA,EACjC,CAhCAqJ,GAAuB15D,IAAIiQ,GAASiqD,aAAc,CAACjqD,GAASiqD,eAC5DR,GAAuB15D,IAAIiQ,GAASopD,aAAc,CAACppD,GAASopD,aAAcppD,GAASupD,eAAgBvpD,GAASspD,cAAetpD,GAASoqD,oBACpIX,GAAuB15D,IAAIiQ,GAASkpD,YAAa,CAAClpD,GAASkpD,YAAalpD,GAASupD,eAAgBvpD,GAASwpD,eAAgBxpD,GAASoqD,oBACnIX,GAAuB15D,IAAIiQ,GAASmpD,eAAgB,CAACnpD,GAASmpD,eAAgBnpD,GAASwpD,eAAgBxpD,GAASspD,cAAetpD,GAASoqD,oBACxIX,GAAuB15D,IAAIiQ,GAASoqD,kBAAmB,CACtDpqD,GAASkpD,YACTlpD,GAASwpD,eACTxpD,GAASmpD,eACTnpD,GAASspD,cACTtpD,GAASopD,aACTppD,GAASupD,eACTvpD,GAASoqD,oBAwBH,MAAMC,GAWZp/D,YAAYie,EAAYohD,EAAqBC,EAAgBC,EAAmBC,EAAiBC,EAA+BC,GAC/H3jE,KAAKkiB,GAAKA,EACVliB,KAAKsjE,YAAcA,EACnBtjE,KAAKujE,OAASA,EACdvjE,KAAKwjE,UAAYA,EACjBxjE,KAAKyjE,QAAUA,EACfzjE,KAAK0jE,oBAAsBA,EAC3B1jE,KAAK2jE,mBAAqBA,EAERC,GAAA76D,IAAI/I,KAAKkiB,GAAIliB,KAChC,CAGA6jE,MAAMC,EAAgBC,EAAmBC,GACpC,KAAEF,GAAU9jE,KAAKujE,QAAUQ,GAAa/jE,KAAKwjE,WAAaQ,GAAWhkE,KAAKyjE,SACtE,OAAA,EAGJ,GAAAzjE,KAAK0jE,qBAAuB1qD,GAASgpD,gBACjC,OAAA,EAKR,OAFmBqB,GAAiBY,iBAAiBjkE,KAAK0jE,oBAAqBI,EAAQC,EAAWC,GAChFX,GAAiBY,iBAAiBjkE,KAAK2jE,mBAAoBG,EAAQC,EAAWC,EAEjG,CAEAE,0BACC,OAAsB,GAAflkE,KAAKujE,QAAiC,GAAlBvjE,KAAKwjE,WAAkC,GAAhBxjE,KAAKyjE,OACxD,CAEAU,cACC,OAAsB,GAAfnkE,KAAKujE,QAAiC,GAAlBvjE,KAAKwjE,WAAkC,GAAhBxjE,KAAKyjE,OACxD,CAEAW,cACQ,MAAA,CAACpkE,KAAKujE,OAAQvjE,KAAKwjE,UAAWxjE,KAAKyjE,SAAS31D,SAAS,EAC7D,CAEAu2D,kBACC,OAAsB,GAAfrkE,KAAKujE,QAAiC,GAAlBvjE,KAAKwjE,WAAkC,GAAhBxjE,KAAKyjE,OACxD,CAEAn/D,wBAAgCq+D,EAAoBmB,EAAgBC,EAAmBC,GAClF,GAAArB,GAAY3pD,GAASkpD,YACjB,OAAA4B,EAAA,GACGnB,GAAY3pD,GAASmpD,eACxB,OAAA4B,EAAA,GACGpB,GAAY3pD,GAASopD,aACxB,OAAA4B,EAED,MAAA,IAAI3jE,MAAM,yCAA2CsiE,EAE7D,CAEAr+D,qBAAqB4d,EAAYohD,EAAqBC,EAAgBC,EAAmBC,GACjF,OAAA,IAAIJ,GAAiBnhD,EAAIohD,EAAaC,EAAQC,EAAWC,EAASzqD,GAASgpD,gBAAiBhpD,GAASgpD,gBAC7G,CAEA19D,yBAAyB4d,EAAYohD,EAAqBI,EAA+BC,GACjF,OAAA,IAAIN,GAAiBnhD,EAAIohD,EAAa,EAAG,EAAG,EAAGI,EAAqBC,EAC5E,EAGD,MAAMC,OAAwB7vD,IAEvB,SAASuwD,GAAoBpiD,GACnC,IAAK0hD,GAAkBf,IAAI3gD,GACpB,MAAA,IAAI7hB,MAAM,uCAAyC6hB,GAGnD,OAAA0hD,GAAkB3vD,IAAIiO,EAC9B,CAMO,SAASqiD,GAA+BC,GACvC,OAAAF,GAAoBE,EAAQtiD,IAAIohD,WACxC,CAGO,MAAMmB,GAA2BpB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAC1ErB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAClIrB,GAAiBqB,cAAc,MAAO,gCAAiC,EAAG,EAAG,GACzErB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACvGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GACzGrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACpGrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GACxHrB,GAAiBqB,cAAc,MAAO,gCAAiC,EAAG,EAAG,GAClFrB,GAAiBqB,cAAc,MAAO,2DAA4D,EAAG,EAAG,GACtGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GAErGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GAClGrB,GAAiBqB,cAAc,MAAO,2DAA4D,EAAG,EAAG,GACzGrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GACzHrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GAC1GrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACvGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GACrGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GACpGrB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAClH,MAAMC,GAAgCtB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAC9HrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAC1HrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAClIrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACpGrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAC3HrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GACrGrB,GAAiBqB,cAAc,MAAO,wDAAyD,EAAG,EAAG,GACvGrB,GAAiBqB,cAAc,MAAO,2DAA4D,EAAG,EAAG,GAClGrB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAChFrB,GAAiBqB,cAAc,MAAO,2DAA4D,EAAG,EAAG,GACvGrB,GAAiBqB,cAAc,MAAO,+EAAgF,EAAG,EAAG,GAGjIrB,GAAiBqB,cAAc,MAAO,kFAAmF,EAAG,EAAG,GACjK,MAAME,GAA0BvB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAC1ErB,GAAiBqB,cAAc,MAAO,kFAAmF,EAAG,EAAG,GACrIrB,GAAiBqB,cAAc,MAAO,gCAAiC,EAAG,EAAG,GACxErB,GAAiBqB,cAAc,MAAO,2DAA4D,EAAG,EAAG,GAC3GrB,GAAiBqB,cAAc,MAAO,mCAAoC,EAAG,EAAG,GAC1ErB,GAAiBqB,cAAc,MAAO,kFAAmF,EAAG,EAAG,GACjIrB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAC5ErB,GAAiBqB,cAAc,MAAO,kFAAmF,EAAG,EAAG,GACvIrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACtGrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACvGrB,GAAiBqB,cAAc,MAAO,0DAA2D,EAAG,EAAG,GACjGrB,GAAiBqB,cAAc,MAAO,iCAAkC,EAAG,EAAG,GAChFrB,GAAiBqB,cAAc,MAAO,kFAAmF,EAAG,EAAG,GAE/HrB,GAAiBwB,kBAAkB,MAAO,yCAA0C7rD,GAASkpD,YAAalpD,GAASopD,cACpHiB,GAAiBwB,kBAAkB,MAAO,2CAA4C7rD,GAASkpD,YAAalpD,GAASmpD,gBACtHkB,GAAiBwB,kBAAkB,MAAO,4CAA6C7rD,GAASopD,aAAcppD,GAASmpD,gBACxHkB,GAAiBwB,kBAAkB,MAAO,4CAA6C7rD,GAASopD,aAAcppD,GAASmpD,gBAE9J,MAAM2C,GAAyD,CAC9D,CAAC9rD,GAASopD,cAAe,oBACzB,CAACppD,GAASiqD,cAAe,oBACzB,CAACjqD,GAASkpD,aAAc,mBACxB,CAAClpD,GAASmpD,gBAAiB,sBAC3B,CAACnpD,GAASoqD,mBAAoB,0BAEf,SAAA2B,GAAqBxE,EAAmBz7C,GAGvD,GAFOzX,OAAAU,OAAO+2D,IAAqBrG,YAAoB8B,EAAKS,UAAUX,OAAO2E,MAEzEF,GAAoBhgD,GAKlB,MAAA,IAAIzkB,MAAM,sCAAwCykB,GAJlDy7C,EAAAS,UAAUE,IAAI4D,GAAoBhgD,GAKzC,CAEA,MAAMmgD,GAAyD,CAC9D,CAACjsD,GAASopD,cAAe,sDACzB,CAACppD,GAASiqD,cAAe,sDACzB,CAACjqD,GAASkpD,aAAc,qDACxB,CAAClpD,GAASmpD,gBAAiB,wDAC3B,CAACnpD,GAASoqD,mBAAoB,4DAExB,SAAS8B,GAAyBpgD,GACxC,GAAImgD,GAAoBngD,GACvB,OAAOmgD,GAAoBngD,GAEtB,MAAA,IAAIzkB,MAAM,6CAA+CykB,EAChE,CC7Ia,MAAAqgD,GAAYjG,GAAchnD,GAAM/Y,OAIhCimE,GAAgC,CAC5CltD,EAAKmtD,iBACLntD,EAAKotD,eACLptD,EAAKqtD,mBACLrtD,EAAKstD,WACLttD,EAAKutD,SACLvtD,EAAKwtD,uBACLxtD,EAAKytD,sBACLztD,EAAK0tD,kBACL1tD,EAAK2tD,iBACL3tD,EAAK4tD,gBACL5tD,EAAK6tD,UACL7tD,EAAK8tD,oBACL9tD,EAAK+tD,sBACL/tD,EAAKguD,YACLhuD,EAAKiuD,YACLjuD,EAAKkuD,sBACLluD,EAAKmuD,gBACLnuD,EAAKouD,qBAGOC,GAAkC,CAC9CluD,GAAMmuD,iBACNnuD,GAAMouD,WACNpuD,GAAMquD,YACNruD,GAAMsuD,UACNtuD,GAAMuuD,aACNvuD,GAAMwuD,YACNxuD,GAAMyuD,WACNzuD,GAAM0uD,YACN1uD,GAAM2uD,aACN3uD,GAAM4uD,cAGMC,GAAkC,CAC9C,CAAChvD,EAAKmtD,kBAAmB,gBACzB,CAACntD,EAAK8tD,qBAAsB,mBAC5B,CAAC9tD,EAAK+tD,uBAAwB,qBAC9B,CAAC/tD,EAAKotD,gBAAiB,kBACvB,CAACptD,EAAKqtD,oBAAqB,mBAC3B,CAACrtD,EAAKstD,YAAa,SACnB,CAACttD,EAAKutD,UAAW,OACjB,CAACvtD,EAAK6tD,WAAY,QAClB,CAAC7tD,EAAKwtD,wBAAyB,sBAC/B,CAACxtD,EAAKytD,uBAAwB,qBAC9B,CAACztD,EAAK0tD,mBAAoB,SAC1B,CAAC1tD,EAAK2tD,kBAAmB,gBACzB,CAAC3tD,EAAK4tD,iBAAkB,eACxB,CAAC5tD,EAAKguD,aAAc,UACpB,CAAChuD,EAAKiuD,aAAc,cACpB,CAACjuD,EAAKkuD,uBAAwB,qBAC9B,CAACluD,EAAKmuD,iBAAkB,mBACxB,CAACnuD,EAAKouD,qBAAsB,qBAGhBa,GAAoC,CAChD,CAAC9uD,GAAM+uD,cAAe,GACtB,CAAC/uD,GAAMouD,YAAa,QACpB,CAACpuD,GAAMquD,aAAc,SACrB,CAACruD,GAAMsuD,WAAY,OACnB,CAACtuD,GAAMuuD,cAAe,UACtB,CAACvuD,GAAMwuD,aAAc,SACrB,CAACxuD,GAAMyuD,YAAa,QACpB,CAACzuD,GAAM0uD,aAAc,SACrB,CAAC1uD,GAAM2uD,cAAe,UACtB,CAAC3uD,GAAM4uD,cAAe,UACtB,CAAC5uD,GAAMmuD,kBAAmB,gBAGda,GAAqC,CACjD,CAAChvD,GAAM+uD,cAAe,OACtB,CAAC/uD,GAAMouD,YAAa,UACpB,CAACpuD,GAAMquD,aAAc,UACrB,CAACruD,GAAMsuD,WAAY,UACnB,CAACtuD,GAAMuuD,cAAe,UACtB,CAACvuD,GAAMwuD,aAAc,OACrB,CAACxuD,GAAMyuD,YAAa,UACpB,CAACzuD,GAAM0uD,aAAc,UACrB,CAAC1uD,GAAM2uD,cAAe,UACtB,CAAC3uD,GAAM4uD,cAAe,UACtB,CAAC5uD,GAAMmuD,kBAAmB,WAGdc,GAAuC,CACnD,CAACpvD,EAAKmtD,kBAAmB,0EACzB,CAACntD,EAAK8tD,qBAAsB,2EAC5B,CAAC9tD,EAAK+tD,uBAAwB,+EAC9B,CAAC/tD,EAAKotD,gBAAiB,0EACvB,CAACptD,EAAKqtD,oBAAqB,4EAC3B,CAACrtD,EAAKstD,YAAa,yEACnB,CAACttD,EAAKutD,UAAW,6EACjB,CAACvtD,EAAK6tD,WAAY,oEAClB,CAAC7tD,EAAKwtD,wBAAyB,2EAC/B,CAACxtD,EAAKytD,uBAAwB,4EAC9B,CAACztD,EAAK0tD,mBAAoB,8EAC1B,CAAC1tD,EAAK2tD,kBAAmB,gFACzB,CAAC3tD,EAAK4tD,iBAAkB,yEACxB,CAAC5tD,EAAKguD,aAAc,+EACpB,CAAChuD,EAAKiuD,aAAc,8EACpB,CAACjuD,EAAKkuD,uBAAwB,oFAC9B,CAACluD,EAAKmuD,iBAAkB,uEACxB,CAACnuD,EAAKouD,qBAAsB,wEAGhBiB,GAAgD,CAC5D,CAAClvD,GAAM+uD,cAAe,GACtB,CAAC/uD,GAAMouD,YAAa,CACnB,2EACA,6EACA,gFAED,CAACpuD,GAAMquD,aAAc,CACpB,gFACA,0EACA,iFAED,CAACruD,GAAMsuD,WAAY,CAClB,8EACA,2EACA,8EAED,CAACtuD,GAAMuuD,cAAe,CACrB,yEACA,6EACA,6EAED,CAACvuD,GAAMwuD,aAAc,CACpB,8EACA,yEACA,kFAED,CAACxuD,GAAMyuD,YAAa,CACnB,8EACA,sEACA,sEAED,CAACzuD,GAAM0uD,aAAc,CACpB,4EACA,gFACA,iFAED,CAAC1uD,GAAM2uD,cAAe,CACrB,4EACA,gFACA,8EAED,CAAC3uD,GAAM4uD,cAAe,CACrB,gFACA,+EACA,oEAED,CAAC5uD,GAAMmuD,kBAAmB,CACzB,qFACA,qFACA,wFAIWgB,GAAyC,CACrD,CAACtvD,EAAKmtD,kBAAmB,2CACzB,CAACntD,EAAK8tD,qBAAsB,8CAC5B,CAAC9tD,EAAK+tD,uBAAwB,gDAC9B,CAAC/tD,EAAKotD,gBAAiB,yCACvB,CAACptD,EAAKqtD,oBAAqB,8CAC3B,CAACrtD,EAAKstD,YAAa,oCACnB,CAACttD,EAAKutD,UAAW,kCACjB,CAACvtD,EAAK6tD,WAAY,mCAClB,CAAC7tD,EAAKwtD,wBAAyB,yCAC/B,CAACxtD,EAAKytD,uBAAwB,gDAC9B,CAACztD,EAAK0tD,mBAAoB,oCAC1B,CAAC1tD,EAAK2tD,kBAAmB,2CACzB,CAAC3tD,EAAK4tD,iBAAkB,0CACxB,CAAC5tD,EAAKguD,aAAc,qCACpB,CAAChuD,EAAKiuD,aAAc,qCACpB,CAACjuD,EAAKkuD,uBAAwB,gDAC9B,CAACluD,EAAKmuD,iBAAkB,0CACxB,CAACnuD,EAAKouD,qBAAsB,2CAGhBmB,GAAsB,kCACtBC,GAAuB,gBAE7B,SAASC,GAAoB9X,GAEnC,OADcA,EAAc7wD,MAAM,KACrBgR,KAAY43D,GAAAhK,GAAI,IAAIgK,GAAM53D,KAAY63D,GAAAx3D,SAASw3D,OAC7D,CAEO,SAASC,GAAgBjY,GACxB,OAAA+N,GAAI+J,GAAoB9X,GAChC,CAGO,SAASkY,GAAclY,GAEtB,OAAAmO,GADQ2J,GAAoB9X,KACR,CAC5B,CAGgB,SAAAmY,GAAkBpY,EAAYC,GACvC,MAAAoY,EAAgBF,GAAclY,GAC7B,OAAA0X,GAAgBW,GAAYtY,IAAOqY,EAC3C,CAGA,MAAME,GAAsB,IAAIC,IAAI,GAAG/K,OAAOC,SAAS+K,aAAahL,OAAOC,SAASgL,oBAC7E,SAASC,GAAe3Y,GAC9B,IAAI4Y,EAAatwD,EAAK03C,GAGtB,OAFa4Y,EAAAA,EAAWz2D,UAAU,OAAO5S,QACzCqpE,EF5LM,SAA0BC,GAC5B,IAAA/lE,EAAS+lE,EAAIC,QAAQ,aAAoB,IAAIC,EAAO58D,kBAIjD,OAHHrJ,EAAOkmE,WAAW,OACZlmE,EAAAA,EAAOqP,UAAU,IAEpBrP,CACR,CEsLcmmE,CAAiBL,GACvBL,GAAoBxjE,WAAW+jE,QAAQ,OAAQF,EACvD,CACO,MAAMM,GAAiB,IAAIV,IAAI,GAAG/K,OAAOC,SAAS+K,aAAahL,OAAOC,SAASgL,oBAA2B3jE,WAiLpGokE,GAA0D,CACtE,CAAC7wD,EAAKmtD,kBAAmB,CACxB2D,eAAgB,IAAMC,GAAqBv0D,SAC3Cw0D,eAAgB,CAACp0D,EAAG/U,IAAMkpE,GAAqB5yD,OAAOvB,EAA2B/U,GACjFopE,aAAer0D,GAAMm0D,GAAqBjyD,MAAMlC,GAChDs0D,eAAiBt0D,GAAMm0D,GAAqBrxD,OAAO9C,GACnDu0D,iBAAmBC,GAAQL,GAAqB1xD,SAAS+xD,GACzDC,mBAAqBhS,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKU,aAAapjC,UACzB+7C,GAAqBv0D,SAExB80D,cAAe,IAAMrhB,GAAazzC,SAClC+0D,cAAe,CAAC30D,EAAG/U,IAAMooD,GAAa9xC,OAAOvB,EAAmB/U,GAChE2pE,YAAc50D,GAAMqzC,GAAanxC,MAAMlC,GACvC60D,cAAgB70D,GAAMqzC,GAAavwC,OAAO9C,GAC1C80D,gBAAkBN,GAAQnhB,GAAa5wC,SAAS+xD,GAChDO,kBAAoBtS,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKU,aAAanjC,SACzBg7B,GAAazzC,SAEhBo1D,cAAe,IAAMC,GAAoBr1D,SACzCs1D,cAAe,CAACl1D,EAAG/U,IAAMgqE,GAAoB1zD,OAAOvB,EAA0B/U,GAC9EkqE,YAAcn1D,GAAMi1D,GAAoB/yD,MAAMlC,GAC9Co1D,cAAgBp1D,GAAMi1D,GAAoBnyD,OAAO9C,GACjDq1D,gBAAkBb,GAAQS,GAAoBxyD,SAAS+xD,GACvDc,kBAAoB7S,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKU,aAAav/C,SACzBg5D,GAAoBr1D,UAExB,CAACwD,EAAK8tD,qBAAsB,CAC3BgD,eAAgB,IAAMqB,GAAwB31D,SAC9Cw0D,eAAgB,CAACp0D,EAAG/U,IAAMsqE,GAAwBh0D,OAAOvB,EAA8B/U,GACvFopE,aAAer0D,GAAMu1D,GAAwBrzD,MAAMlC,GACnDs0D,eAAiBt0D,GAAMu1D,GAAwBzyD,OAAO9C,GACtDu0D,iBAAmBC,GAAQe,GAAwB9yD,SAAS+xD,GAC5DC,mBAAqBhS,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKqB,gBAAgB/jC,UAC5Bm9C,GAAwB31D,SAE3B80D,cAAe,IAAMlrC,GAAc5pB,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAMu+B,GAAcjoB,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAMwpB,GAActnB,MAAMlC,GACxC60D,cAAgB70D,GAAMwpB,GAAc1mB,OAAO9C,GAC3C80D,gBAAkBN,GAAQhrC,GAAc/mB,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKqB,gBAAgB9jC,SAC5BmR,GAAc5pB,SAEjBo1D,cAAe,IAAMQ,GAAuB51D,SAC5Cs1D,cAAe,CAACl1D,EAAG/U,IAAMuqE,GAAuBj0D,OAAOvB,EAA6B/U,GACpFkqE,YAAcn1D,GAAMw1D,GAAuBtzD,MAAMlC,GACjDo1D,cAAgBp1D,GAAMw1D,GAAuB1yD,OAAO9C,GACpDq1D,gBAAkBb,GAAQgB,GAAuB/yD,SAAS+xD,GAC1Dc,kBAAoB7S,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKqB,gBAAgBlgD,SAC5Bu5D,GAAuB51D,UAE3B,CAACwD,EAAK+tD,uBAAwB,CAC7B+C,eAAgB,IAAMuB,GAA0B71D,SAChDw0D,eAAgB,CAACp0D,EAAG/U,IAAMwqE,GAA0Bl0D,OAAOvB,EAAgC/U,GAC3FopE,aAAer0D,GAAMy1D,GAA0BvzD,MAAMlC,GACrDs0D,eAAiBt0D,GAAMy1D,GAA0B3yD,OAAO9C,GACxDu0D,iBAAmBC,GAAQiB,GAA0BhzD,SAAS+xD,GAC9DC,mBAAqBhS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKsB,kBAAkBhkC,UAC9Bq9C,GAA0B71D,SAE7B80D,cAAe,IAAMlrC,GAAc5pB,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAMu+B,GAAcjoB,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAMwpB,GAActnB,MAAMlC,GACxC60D,cAAgB70D,GAAMwpB,GAAc1mB,OAAO9C,GAC3C80D,gBAAkBN,GAAQhrC,GAAc/mB,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKsB,kBAAkB/jC,SAC9BmR,GAAc5pB,SAEjBo1D,cAAe,IAAMU,GAAyB91D,SAC9Cs1D,cAAe,CAACl1D,EAAG/U,IAAMyqE,GAAyBn0D,OAAOvB,EAA+B/U,GACxFkqE,YAAcn1D,GAAM01D,GAAyBxzD,MAAMlC,GACnDo1D,cAAgBp1D,GAAM01D,GAAyB5yD,OAAO9C,GACtDq1D,gBAAkBb,GAAQkB,GAAyBjzD,SAAS+xD,GAC5Dc,kBAAoB7S,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKsB,kBAAkBngD,SAC9By5D,GAAyB91D,UAE7B,CAACwD,EAAKotD,gBAAiB,CACtB0D,eAAgB,IAAMyB,GAAmB/1D,SACzCw0D,eAAgB,CAACp0D,EAAG/U,IAAM0qE,GAAmBp0D,OAAOvB,EAAyB/U,GAC7EopE,aAAer0D,GAAM21D,GAAmBzzD,MAAMlC,GAC9Cs0D,eAAiBt0D,GAAM21D,GAAmB7yD,OAAO9C,GACjDu0D,iBAAmBC,GAAQmB,GAAmBlzD,SAAS+xD,GACvDC,mBAAqBhS,GAAoC,cAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKW,WAAWrjC,UACvBu9C,GAAmB/1D,SAEtB80D,cAAe,IAAMrhB,GAAazzC,SAClC+0D,cAAe,CAAC30D,EAAG/U,IAAMooD,GAAa9xC,OAAOvB,EAAmB/U,GAChE2pE,YAAc50D,GAAMqzC,GAAanxC,MAAMlC,GACvC60D,cAAgB70D,GAAMqzC,GAAavwC,OAAO9C,GAC1C80D,gBAAkBN,GAAQnhB,GAAa5wC,SAAS+xD,GAChDO,kBAAoBtS,GAAoC,cAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKW,WAAWpjC,SACvBg7B,GAAazzC,SAEhBo1D,cAAe,IAAMY,GAAkBh2D,SACvCs1D,cAAe,CAACl1D,EAAG/U,IAAM2qE,GAAkBr0D,OAAOvB,EAAwB/U,GAC1EkqE,YAAcn1D,GAAM41D,GAAkB1zD,MAAMlC,GAC5Co1D,cAAgBp1D,GAAM41D,GAAkB9yD,OAAO9C,GAC/Cq1D,gBAAkBb,GAAQoB,GAAkBnzD,SAAS+xD,GACrDc,kBAAoB7S,GAAoC,cAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKW,WAAWx/C,SACvB25D,GAAkBh2D,UAEtB,CAACwD,EAAKqtD,oBAAqB,CAC1ByD,eAAgB,IAAM2B,GAAuBj2D,SAC7Cw0D,eAAgB,CAACp0D,EAAG/U,IAAM4qE,GAAuBt0D,OAAOvB,EAA6B/U,GACrFopE,aAAer0D,GAAM61D,GAAuB3zD,MAAMlC,GAClDs0D,eAAiBt0D,GAAM61D,GAAuB/yD,OAAO9C,GACrDu0D,iBAAmBC,GAAQqB,GAAuBpzD,SAAS+xD,GAC3DC,mBAAqBhS,GAAoC,kBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKY,eAAetjC,UAC3By9C,GAAuBj2D,SAE1B80D,cAAe,IAAMrhB,GAAazzC,SAClC+0D,cAAe,CAAC30D,EAAG/U,IAAMooD,GAAa9xC,OAAOvB,EAAmB/U,GAChE2pE,YAAc50D,GAAMqzC,GAAanxC,MAAMlC,GACvC60D,cAAgB70D,GAAMqzC,GAAavwC,OAAO9C,GAC1C80D,gBAAkBN,GAAQnhB,GAAa5wC,SAAS+xD,GAChDO,kBAAoBtS,GAAoC,kBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKY,eAAerjC,SAC3Bg7B,GAAazzC,SAEhBo1D,cAAe,IAAMc,GAAsBl2D,SAC3Cs1D,cAAe,CAACl1D,EAAG/U,IAAM6qE,GAAsBv0D,OAAOvB,EAA4B/U,GAClFkqE,YAAcn1D,GAAM81D,GAAsB5zD,MAAMlC,GAChDo1D,cAAgBp1D,GAAM81D,GAAsBhzD,OAAO9C,GACnDq1D,gBAAkBb,GAAQsB,GAAsBrzD,SAAS+xD,GACzDc,kBAAoB7S,GAAoC,kBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKY,eAAez/C,SAC3B65D,GAAsBl2D,UAE1B,CAACwD,EAAKstD,YAAa,CAClBwD,eAAgB,IAAM6B,GAAen2D,SACrCw0D,eAAgB,CAACp0D,EAAG/U,IAAM8qE,GAAex0D,OAAOvB,EAAqB/U,GACrEopE,aAAer0D,GAAM+1D,GAAe7zD,MAAMlC,GAC1Cs0D,eAAiBt0D,GAAM+1D,GAAejzD,OAAO9C,GAC7Cu0D,iBAAmBC,GAAQuB,GAAetzD,SAAS+xD,GACnDC,mBAAqBhS,GAAoC,UAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKa,OAAOvjC,UACnB29C,GAAen2D,SAElB80D,cAAe,IAAM3pB,GAAcnrC,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAM8/C,GAAcxpC,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAM+qC,GAAc7oC,MAAMlC,GACxC60D,cAAgB70D,GAAM+qC,GAAcjoC,OAAO9C,GAC3C80D,gBAAkBN,GAAQzpB,GAActoC,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,UAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKa,OAAOtjC,SACnB0yB,GAAcnrC,SAEjBo1D,cAAe,IAAMgB,GAAcp2D,SACnCs1D,cAAe,CAACl1D,EAAG/U,IAAM+qE,GAAcz0D,OAAOvB,EAAoB/U,GAClEkqE,YAAcn1D,GAAMg2D,GAAc9zD,MAAMlC,GACxCo1D,cAAgBp1D,GAAMg2D,GAAclzD,OAAO9C,GAC3Cq1D,gBAAkBb,GAAQwB,GAAcvzD,SAAS+xD,GACjDc,kBAAoB7S,GAAoC,UAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKa,OAAO1/C,SACnB+5D,GAAcp2D,UAElB,CAACwD,EAAKutD,UAAW,CAChBuD,eAAgB,IAAM+B,GAAar2D,SACnCw0D,eAAgB,CAACp0D,EAAG/U,IAAMgrE,GAAa10D,OAAOvB,EAAmB/U,GACjEopE,aAAer0D,GAAMi2D,GAAa/zD,MAAMlC,GACxCs0D,eAAiBt0D,GAAMi2D,GAAanzD,OAAO9C,GAC3Cu0D,iBAAmBC,GAAQyB,GAAaxzD,SAAS+xD,GACjDC,mBAAqBhS,GAAoC,QAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKc,KAAKxjC,UACjB69C,GAAar2D,SAEhB80D,cAAe,IAAMpwB,GAAY1kC,SACjC+0D,cAAe,CAAC30D,EAAG/U,IAAMq5C,GAAY/iC,OAAOvB,EAAkB/U,GAC9D2pE,YAAc50D,GAAMskC,GAAYpiC,MAAMlC,GACtC60D,cAAgB70D,GAAMskC,GAAYxhC,OAAO9C,GACzC80D,gBAAkBN,GAAQlwB,GAAY7hC,SAAS+xD,GAC/CO,kBAAoBtS,GAAoC,QAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKc,KAAKvjC,SACjBisB,GAAY1kC,SAEfo1D,cAAe,IAAMkB,GAAYt2D,SACjCs1D,cAAe,CAACl1D,EAAG/U,IAAMirE,GAAY30D,OAAOvB,EAAkB/U,GAC9DkqE,YAAcn1D,GAAMk2D,GAAYh0D,MAAMlC,GACtCo1D,cAAgBp1D,GAAMk2D,GAAYpzD,OAAO9C,GACzCq1D,gBAAkBb,GAAQ0B,GAAYzzD,SAAS+xD,GAC/Cc,kBAAoB7S,GAAoC,QAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKc,KAAK3/C,SACjBi6D,GAAYt2D,UAEhB,CAACwD,EAAKwtD,wBAAyB,CAC9BsD,eAAgB,IAAMiC,GAA2Bv2D,SACjDw0D,eAAgB,CAACp0D,EAAG/U,IAAMkrE,GAA2B50D,OAAOvB,EAAiC/U,GAC7FopE,aAAer0D,GAAMm2D,GAA2Bj0D,MAAMlC,GACtDs0D,eAAiBt0D,GAAMm2D,GAA2BrzD,OAAO9C,GACzDu0D,iBAAmBC,GAAQ2B,GAA2B1zD,SAAS+xD,GAC/DC,mBAAqBhS,GAAoC,sBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKe,mBAAmBzjC,UAC/B+9C,GAA2Bv2D,SAE9B80D,cAAe,IAAMr2B,GAAez+B,SACpC+0D,cAAe,CAAC30D,EAAG/U,IAAMozC,GAAe98B,OAAOvB,EAAqB/U,GACpE2pE,YAAc50D,GAAMq+B,GAAen8B,MAAMlC,GACzC60D,cAAgB70D,GAAMq+B,GAAev7B,OAAO9C,GAC5C80D,gBAAkBN,GAAQn2B,GAAe57B,SAAS+xD,GAClDO,kBAAoBtS,GAAoC,sBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKe,mBAAmBxjC,SAC/BgmB,GAAez+B,SAElBo1D,cAAe,IAAMoB,GAA0Bx2D,SAC/Cs1D,cAAe,CAACl1D,EAAG/U,IAAMmrE,GAA0B70D,OAAOvB,EAAgC/U,GAC1FkqE,YAAcn1D,GAAMo2D,GAA0Bl0D,MAAMlC,GACpDo1D,cAAgBp1D,GAAMo2D,GAA0BtzD,OAAO9C,GACvDq1D,gBAAkBb,GAAQ4B,GAA0B3zD,SAAS+xD,GAC7Dc,kBAAoB7S,GAAoC,sBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKe,mBAAmB5/C,SAC/Bm6D,GAA0Bx2D,UAE9B,CAACwD,EAAKytD,uBAAwB,CAC7BqD,eAAgB,IAAMmC,GAA0Bz2D,SAChDw0D,eAAgB,CAACp0D,EAAG/U,IAAMorE,GAA0B90D,OAAOvB,EAAgC/U,GAC3FopE,aAAer0D,GAAMq2D,GAA0Bn0D,MAAMlC,GACrDs0D,eAAiBt0D,GAAMq2D,GAA0BvzD,OAAO9C,GACxDu0D,iBAAmBC,GAAQ6B,GAA0B5zD,SAAS+xD,GAC9DC,mBAAqBhS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKgB,kBAAkB1jC,UAC9Bi+C,GAA0Bz2D,SAE7B80D,cAAe,IAAMr2B,GAAez+B,SACpC+0D,cAAe,CAAC30D,EAAG/U,IAAMozC,GAAe98B,OAAOvB,EAAqB/U,GACpE2pE,YAAc50D,GAAMq+B,GAAen8B,MAAMlC,GACzC60D,cAAgB70D,GAAMq+B,GAAev7B,OAAO9C,GAC5C80D,gBAAkBN,GAAQn2B,GAAe57B,SAAS+xD,GAClDO,kBAAoBtS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKgB,kBAAkBzjC,SAC9BgmB,GAAez+B,SAElBo1D,cAAe,IAAMsB,GAAyB12D,SAC9Cs1D,cAAe,CAACl1D,EAAG/U,IAAMqrE,GAAyB/0D,OAAOvB,EAA+B/U,GACxFkqE,YAAcn1D,GAAMs2D,GAAyBp0D,MAAMlC,GACnDo1D,cAAgBp1D,GAAMs2D,GAAyBxzD,OAAO9C,GACtDq1D,gBAAkBb,GAAQ8B,GAAyB7zD,SAAS+xD,GAC5Dc,kBAAoB7S,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKgB,kBAAkB7/C,SAC9Bq6D,GAAyB12D,UAE7B,CAACwD,EAAK6tD,WAAY,CACjBiD,eAAgB,IAAMqC,GAAc32D,SACpCw0D,eAAgB,CAACp0D,EAAG/U,IAAMsrE,GAAch1D,OAAOvB,EAAoB/U,GACnEopE,aAAer0D,GAAMu2D,GAAcr0D,MAAMlC,GACzCs0D,eAAiBt0D,GAAMu2D,GAAczzD,OAAO9C,GAC5Cu0D,iBAAmBC,GAAQ+B,GAAc9zD,SAAS+xD,GAClDC,mBAAqBhS,GAAoC,SAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKoB,MAAM9jC,UAClBm+C,GAAc32D,SAEjB80D,cAAe,IAAM1jC,GAAapxB,SAClC+0D,cAAe,CAAC30D,EAAG/U,IAAM+lC,GAAazvB,OAAOvB,EAAmB/U,GAChE2pE,YAAc50D,GAAMgxB,GAAa9uB,MAAMlC,GACvC60D,cAAgB70D,GAAMgxB,GAAaluB,OAAO9C,GAC1C80D,gBAAkBN,GAAQxjC,GAAavuB,SAAS+xD,GAChDO,kBAAoBtS,GAAoC,SAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKoB,MAAM7jC,SAClB2Y,GAAapxB,SAEhBo1D,cAAe,IAAMwB,GAAa52D,SAClCs1D,cAAe,CAACl1D,EAAG/U,IAAMurE,GAAaj1D,OAAOvB,EAAmB/U,GAChEkqE,YAAcn1D,GAAMw2D,GAAat0D,MAAMlC,GACvCo1D,cAAgBp1D,GAAMw2D,GAAa1zD,OAAO9C,GAC1Cq1D,gBAAkBb,GAAQgC,GAAa/zD,SAAS+xD,GAChDc,kBAAoB7S,GAAoC,SAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKoB,MAAMjgD,SAClBu6D,GAAa52D,UAEjB,CAACwD,EAAK0tD,mBAAoB,CACzBoD,eAAgB,IAAMuC,GAAsB72D,SAC5Cw0D,eAAgB,CAACp0D,EAAG/U,IAAMwrE,GAAsBl1D,OAAOvB,EAA4B/U,GACnFopE,aAAer0D,GAAMy2D,GAAsBv0D,MAAMlC,GACjDs0D,eAAiBt0D,GAAMy2D,GAAsB3zD,OAAO9C,GACpDu0D,iBAAmBC,GAAQiC,GAAsBh0D,SAAS+xD,GAC1DC,mBAAqBhS,GAAoC,iBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKiB,cAAc3jC,UAC1Bq+C,GAAsB72D,SAEzB80D,cAAe,IAAM/8B,GAAc/3B,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAM0sC,GAAcp2B,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAM23B,GAAcz1B,MAAMlC,GACxC60D,cAAgB70D,GAAM23B,GAAc70B,OAAO9C,GAC3C80D,gBAAkBN,GAAQ78B,GAAcl1B,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,iBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKiB,cAAc1jC,SAC1Bsf,GAAc/3B,SAEjBo1D,cAAe,IAAM0B,GAAqB92D,SAC1Cs1D,cAAe,CAACl1D,EAAG/U,IAAMyrE,GAAqBn1D,OAAOvB,EAA2B/U,GAChFkqE,YAAcn1D,GAAM02D,GAAqBx0D,MAAMlC,GAC/Co1D,cAAgBp1D,GAAM02D,GAAqB5zD,OAAO9C,GAClDq1D,gBAAkBb,GAAQkC,GAAqBj0D,SAAS+xD,GACxDc,kBAAoB7S,GAAoC,iBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKiB,cAAc9/C,SAC1By6D,GAAqB92D,UAEzB,CAACwD,EAAK2tD,kBAAmB,CACxBmD,eAAgB,IAAMyC,GAAqB/2D,SAC3Cw0D,eAAgB,CAACp0D,EAAG/U,IAAM0rE,GAAqBp1D,OAAOvB,EAA2B/U,GACjFopE,aAAer0D,GAAM22D,GAAqBz0D,MAAMlC,GAChDs0D,eAAiBt0D,GAAM22D,GAAqB7zD,OAAO9C,GACnDu0D,iBAAmBC,GAAQmC,GAAqBl0D,SAAS+xD,GACzDC,mBAAqBhS,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKkB,aAAa5jC,UACzBu+C,GAAqB/2D,SAExB80D,cAAe,IAAM/8B,GAAc/3B,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAM0sC,GAAcp2B,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAM23B,GAAcz1B,MAAMlC,GACxC60D,cAAgB70D,GAAM23B,GAAc70B,OAAO9C,GAC3C80D,gBAAkBN,GAAQ78B,GAAcl1B,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKkB,aAAa3jC,SACzBsf,GAAc/3B,SAEjBo1D,cAAe,IAAM4B,GAAoBh3D,SACzCs1D,cAAe,CAACl1D,EAAG/U,IAAM2rE,GAAoBr1D,OAAOvB,EAA0B/U,GAC9EkqE,YAAcn1D,GAAM42D,GAAoB10D,MAAMlC,GAC9Co1D,cAAgBp1D,GAAM42D,GAAoB9zD,OAAO9C,GACjDq1D,gBAAkBb,GAAQoC,GAAoBn0D,SAAS+xD,GACvDc,kBAAoB7S,GAAoC,gBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKkB,aAAa//C,SACzB26D,GAAoBh3D,UAExB,CAACwD,EAAK4tD,iBAAkB,CACvBkD,eAAgB,IAAM2C,GAAoBj3D,SAC1Cw0D,eAAgB,CAACp0D,EAAG/U,IAAM4rE,GAAoBt1D,OAAOvB,EAA0B/U,GAC/EopE,aAAer0D,GAAM62D,GAAoB30D,MAAMlC,GAC/Cs0D,eAAiBt0D,GAAM62D,GAAoB/zD,OAAO9C,GAClDu0D,iBAAmBC,GAAQqC,GAAoBp0D,SAAS+xD,GACxDC,mBAAqBhS,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKmB,YAAY7jC,UACxBy+C,GAAoBj3D,SAEvB80D,cAAe,IAAM/8B,GAAc/3B,SACnC+0D,cAAe,CAAC30D,EAAG/U,IAAM0sC,GAAcp2B,OAAOvB,EAAoB/U,GAClE2pE,YAAc50D,GAAM23B,GAAcz1B,MAAMlC,GACxC60D,cAAgB70D,GAAM23B,GAAc70B,OAAO9C,GAC3C80D,gBAAkBN,GAAQ78B,GAAcl1B,SAAS+xD,GACjDO,kBAAoBtS,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKmB,YAAY5jC,SACxBsf,GAAc/3B,SAEjBo1D,cAAe,IAAM8B,GAAmBl3D,SACxCs1D,cAAe,CAACl1D,EAAG/U,IAAM6rE,GAAmBv1D,OAAOvB,EAAyB/U,GAC5EkqE,YAAcn1D,GAAM82D,GAAmB50D,MAAMlC,GAC7Co1D,cAAgBp1D,GAAM82D,GAAmBh0D,OAAO9C,GAChDq1D,gBAAkBb,GAAQsC,GAAmBr0D,SAAS+xD,GACtDc,kBAAoB7S,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKmB,YAAYhgD,SACxB66D,GAAmBl3D,UAEvB,CAACwD,EAAKguD,aAAc,CACnB8C,eAAgB,IAAM6C,GAAgBn3D,SACtCw0D,eAAgB,CAACp0D,EAAG/U,IAAM8rE,GAAgBx1D,OAAOvB,EAAsB/U,GACvEopE,aAAer0D,GAAM+2D,GAAgB70D,MAAMlC,GAC3Cs0D,eAAiBt0D,GAAM+2D,GAAgBj0D,OAAO9C,GAC9Cu0D,iBAAmBC,GAAQuC,GAAgBt0D,SAAS+xD,GACpDC,mBAAqBhS,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKuB,QAAQjkC,UACpB2+C,GAAgBn3D,SAEnB80D,cAAe,IAAM3xC,GAAenjB,SACpC+0D,cAAe,CAAC30D,EAAG/U,IAAM83B,GAAexhB,OAAOvB,EAAqB/U,GACpE2pE,YAAc50D,GAAM+iB,GAAe7gB,MAAMlC,GACzC60D,cAAgB70D,GAAM+iB,GAAejgB,OAAO9C,GAC5C80D,gBAAkBN,GAAQzxC,GAAetgB,SAAS+xD,GAClDO,kBAAoBtS,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKuB,QAAQhkC,SACpB0K,GAAenjB,SAElBo1D,cAAe,IAAMgC,GAAep3D,SACpCs1D,cAAe,CAACl1D,EAAG/U,IAAM+rE,GAAez1D,OAAOvB,EAAqB/U,GACpEkqE,YAAcn1D,GAAMg3D,GAAe90D,MAAMlC,GACzCo1D,cAAgBp1D,GAAMg3D,GAAel0D,OAAO9C,GAC5Cq1D,gBAAkBb,GAAQwC,GAAev0D,SAAS+xD,GAClDc,kBAAoB7S,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKuB,QAAQpgD,SACpB+6D,GAAep3D,UAEnB,CAACwD,EAAKiuD,aAAc,CACnB6C,eAAgB,IAAM+C,GAAgBr3D,SACtCw0D,eAAgB,CAACp0D,EAAG/U,IAAMgsE,GAAgB11D,OAAOvB,EAAsB/U,GACvEopE,aAAer0D,GAAMi3D,GAAgB/0D,MAAMlC,GAC3Cs0D,eAAiBt0D,GAAMi3D,GAAgBn0D,OAAO9C,GAC9Cu0D,iBAAmBC,GAAQyC,GAAgBx0D,SAAS+xD,GACpDC,mBAAqBhS,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKwB,QAAQlkC,UACpB6+C,GAAgBr3D,SAEnB80D,cAAe,IAAM15C,GAAepb,SACpC+0D,cAAe,CAAC30D,EAAG/U,IAAM+vB,GAAezZ,OAAOvB,EAAqB/U,GACpE2pE,YAAc50D,GAAMgb,GAAe9Y,MAAMlC,GACzC60D,cAAgB70D,GAAMgb,GAAelY,OAAO9C,GAC5C80D,gBAAkBN,GAAQx5C,GAAevY,SAAS+xD,GAClDO,kBAAoBtS,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKwB,QAAQjkC,SACpB2C,GAAepb,SAElBo1D,cAAe,IAAMkC,GAAet3D,SACpCs1D,cAAe,CAACl1D,EAAG/U,IAAMisE,GAAe31D,OAAOvB,EAAqB/U,GACpEkqE,YAAcn1D,GAAMk3D,GAAeh1D,MAAMlC,GACzCo1D,cAAgBp1D,GAAMk3D,GAAep0D,OAAO9C,GAC5Cq1D,gBAAkBb,GAAQ0C,GAAez0D,SAAS+xD,GAClDc,kBAAoB7S,GAAoC,WAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKwB,QAAQrgD,SACpBi7D,GAAet3D,UAEnB,CAACwD,EAAKkuD,uBAAwB,CAC7B4C,eAAgB,IAAMiD,GAA0Bv3D,SAChDw0D,eAAgB,CAACp0D,EAAG/U,IAAMksE,GAA0B51D,OAAOvB,EAAgC/U,GAC3FopE,aAAer0D,GAAMm3D,GAA0Bj1D,MAAMlC,GACrDs0D,eAAiBt0D,GAAMm3D,GAA0Br0D,OAAO9C,GACxDu0D,iBAAmBC,GAAQ2C,GAA0B10D,SAAS+xD,GAC9DC,mBAAqBhS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAKyB,kBAAkBnkC,UAC9B++C,GAA0Bv3D,SAE7B80D,cAAe,IAAM15C,GAAepb,SACpC+0D,cAAe,CAAC30D,EAAG/U,IAAM+vB,GAAezZ,OAAOvB,EAAqB/U,GACpE2pE,YAAc50D,GAAMgb,GAAe9Y,MAAMlC,GACzC60D,cAAgB70D,GAAMgb,GAAelY,OAAO9C,GAC5C80D,gBAAkBN,GAAQx5C,GAAevY,SAAS+xD,GAClDO,kBAAoBtS,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKyB,kBAAkBlkC,SAC9B2C,GAAepb,SAElBo1D,cAAe,IAAMoC,GAAyBx3D,SAC9Cs1D,cAAe,CAACl1D,EAAG/U,IAAMmsE,GAAyB71D,OAAOvB,EAA+B/U,GACxFkqE,YAAcn1D,GAAMo3D,GAAyBl1D,MAAMlC,GACnDo1D,cAAgBp1D,GAAMo3D,GAAyBt0D,OAAO9C,GACtDq1D,gBAAkBb,GAAQ4C,GAAyB30D,SAAS+xD,GAC5Dc,kBAAoB7S,GAAoC,qBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAKyB,kBAAkBtgD,SAC9Bm7D,GAAyBx3D,UAE7B,CAACwD,EAAKmuD,iBAAkB,CACvB2C,eAAgB,IAAMmD,GAAoBz3D,SAC1Cw0D,eAAgB,CAACp0D,EAAG/U,IAAMosE,GAAoB91D,OAAOvB,EAA0B/U,GAC/EopE,aAAer0D,GAAMq3D,GAAoBn1D,MAAMlC,GAC/Cs0D,eAAiBt0D,GAAMq3D,GAAoBv0D,OAAO9C,GAClDu0D,iBAAmBC,GAAQ6C,GAAoB50D,SAAS+xD,GACxDC,mBAAqBhS,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAK0B,YAAYpkC,UACxBi/C,GAAoBz3D,SAEvB80D,cAAe,IAAM/hD,GAAmB/S,SACxC+0D,cAAe,CAAC30D,EAAG/U,IAAM0nB,GAAmBpR,OAAOvB,EAAyB/U,GAC5E2pE,YAAc50D,GAAM2S,GAAmBzQ,MAAMlC,GAC7C60D,cAAgB70D,GAAM2S,GAAmB7P,OAAO9C,GAChD80D,gBAAkBN,GAAQ7hD,GAAmBlQ,SAAS+xD,GACtDO,kBAAoBtS,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAK0B,YAAYnkC,SACxB1F,GAAmB/S,SAEtBo1D,cAAe,IAAMsC,GAAmB13D,SACxCs1D,cAAe,CAACl1D,EAAG/U,IAAMqsE,GAAmB/1D,OAAOvB,EAAyB/U,GAC5EkqE,YAAcn1D,GAAMs3D,GAAmBp1D,MAAMlC,GAC7Co1D,cAAgBp1D,GAAMs3D,GAAmBx0D,OAAO9C,GAChDq1D,gBAAkBb,GAAQ8C,GAAmB70D,SAAS+xD,GACtDc,kBAAoB7S,GAAoC,eAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAK0B,YAAYvgD,SACxBq7D,GAAmB13D,UAEvB,CAACwD,EAAKouD,qBAAsB,CAC3B0C,eAAgB,IAAMqD,GAAwB33D,SAC9Cw0D,eAAgB,CAACp0D,EAAG/U,IAAMssE,GAAwBh2D,OAAOvB,EAA8B/U,GACvFopE,aAAer0D,GAAMu3D,GAAwBr1D,MAAMlC,GACnDs0D,eAAiBt0D,GAAMu3D,GAAwBz0D,OAAO9C,GACtDu0D,iBAAmBC,GAAQ+C,GAAwB90D,SAAS+xD,GAC5DC,mBAAqBhS,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACzCmqD,EAAO3H,KAAK2B,gBAAgBrkC,UAC5Bm/C,GAAwB33D,SAE3B80D,cAAe,IAAM/hD,GAAmB/S,SACxC+0D,cAAe,CAAC30D,EAAG/U,IAAM0nB,GAAmBpR,OAAOvB,EAAyB/U,GAC5E2pE,YAAc50D,GAAM2S,GAAmBzQ,MAAMlC,GAC7C60D,cAAgB70D,GAAM2S,GAAmB7P,OAAO9C,GAChD80D,gBAAkBN,GAAQ7hD,GAAmBlQ,SAAS+xD,GACtDO,kBAAoBtS,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAK2B,gBAAgBpkC,SAC5B1F,GAAmB/S,SAEtBo1D,cAAe,IAAMwC,GAAuB53D,SAC5Cs1D,cAAe,CAACl1D,EAAG/U,IAAMusE,GAAuBj2D,OAAOvB,EAA6B/U,GACpFkqE,YAAcn1D,GAAMw3D,GAAuBt1D,MAAMlC,GACjDo1D,cAAgBp1D,GAAMw3D,GAAuB10D,OAAO9C,GACpDq1D,gBAAkBb,GAAQgD,GAAuB/0D,SAAS+xD,GAC1Dc,kBAAoB7S,GAAoC,mBAAzBA,EAAO3H,KAAKxiD,WACxCmqD,EAAO3H,KAAK2B,gBAAgBxgD,SAC5Bu7D,GAAuB53D,WAIf63D,GAAuC,CACnD,CAACp0D,GAAKq0D,aAAcp0D,GAAQq0D,QAC5B,CAACt0D,GAAKu0D,cAAet0D,GAAQu0D,MAC7B,CAACx0D,GAAKy0D,aAAcx0D,GAAQy0D,SAC5B,CAAC10D,GAAK20D,WAAY10D,GAAQy0D,SAC1B,CAAC10D,GAAK40D,WAAY30D,GAAQy0D,SAC1B,CAAC10D,GAAK60D,WAAY50D,GAAQy0D,SAC1B,CAAC10D,GAAK80D,cAAe70D,GAAQy0D,SAC7B,CAAC10D,GAAK+0D,SAAU90D,GAAQu0D,MACxB,CAACx0D,GAAKg1D,YAAa/0D,GAAQu0D,MAC3B,CAACx0D,GAAKi1D,WAAYh1D,GAAQu0D,MAC1B,CAACx0D,GAAKk1D,YAAaj1D,GAAQu0D,OAGfzE,GAAmC,CAC/C,CAAChwD,EAAKmtD,kBAAmBhtD,GAAMouD,WAC/B,CAACvuD,EAAKotD,gBAAiBjtD,GAAMouD,WAC7B,CAACvuD,EAAKqtD,oBAAqBltD,GAAMouD,WACjC,CAACvuD,EAAKstD,YAAantD,GAAMquD,YACzB,CAACxuD,EAAKutD,UAAWptD,GAAMsuD,UACvB,CAACzuD,EAAK6tD,WAAY1tD,GAAMyuD,WACxB,CAAC5uD,EAAKwtD,wBAAyBrtD,GAAMuuD,aACrC,CAAC1uD,EAAKytD,uBAAwBttD,GAAMuuD,aACpC,CAAC1uD,EAAK0tD,mBAAoBvtD,GAAMwuD,YAChC,CAAC3uD,EAAK2tD,kBAAmBxtD,GAAMwuD,YAC/B,CAAC3uD,EAAK4tD,iBAAkBztD,GAAMwuD,YAC9B,CAAC3uD,EAAK8tD,qBAAsB3tD,GAAM0uD,YAClC,CAAC7uD,EAAK+tD,uBAAwB5tD,GAAM0uD,YACpC,CAAC7uD,EAAKguD,aAAc7tD,GAAM2uD,aAC1B,CAAC9uD,EAAKiuD,aAAc9tD,GAAM4uD,aAC1B,CAAC/uD,EAAKkuD,uBAAwB/tD,GAAM4uD,aACpC,CAAC/uD,EAAKmuD,iBAAkBhuD,GAAMmuD,iBAC9B,CAACtuD,EAAKouD,qBAAsBjuD,GAAMmuD,kBAG7B8G,GAAa,CAClBn1D,GAAK80D,aACL90D,GAAKg1D,YAEAI,GAAc,CACnBp1D,GAAKu0D,aACLv0D,GAAKy0D,YACLz0D,GAAK20D,UACL30D,GAAK80D,aACL90D,GAAK+0D,QACL/0D,GAAKg1D,WACLh1D,GAAKi1D,WAEAI,GAAY,CACjBr1D,GAAKu0D,aACLv0D,GAAKy0D,YACLz0D,GAAK40D,UACL50D,GAAK60D,UACL70D,GAAKi1D,UACLj1D,GAAKk1D,YAEAI,GAAe,CACpBt1D,GAAKu0D,aACLv0D,GAAKy0D,YACLz0D,GAAK20D,UACL30D,GAAK60D,WAEAU,GAAc,CACnBv1D,GAAKu0D,aACLv0D,GAAKy0D,YACLz0D,GAAK20D,UACL30D,GAAK60D,UACL70D,GAAK80D,aACL90D,GAAKi1D,UACLj1D,GAAKk1D,YAEAM,GAAa,CAClBx1D,GAAKu0D,aACLv0D,GAAK20D,UACL30D,GAAK40D,UACL50D,GAAK60D,UACL70D,GAAK80D,aACL90D,GAAK+0D,QACL/0D,GAAKi1D,UACLj1D,GAAKk1D,YAEAO,GAAc,CACnBz1D,GAAKy0D,YACLz0D,GAAK+0D,QACL/0D,GAAKg1D,WACLh1D,GAAKi1D,WAEAS,GAAe,CACpB11D,GAAKu0D,aACLv0D,GAAK40D,UACL50D,GAAK60D,UACL70D,GAAK+0D,QACL/0D,GAAKk1D,YAEAS,GAAe,CACpB31D,GAAKy0D,YACLz0D,GAAK20D,UACL30D,GAAK40D,UACL50D,GAAK60D,UACL70D,GAAK80D,aACL90D,GAAK+0D,QACL/0D,GAAKg1D,WACLh1D,GAAKi1D,UACLj1D,GAAKk1D,YAEAU,GAAmB,CACxB51D,GAAKu0D,aACLv0D,GAAKy0D,YACLz0D,GAAK20D,UACL30D,GAAK40D,UACL50D,GAAK60D,UACL70D,GAAK80D,aACL90D,GA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CACrBwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKutD,SASF,OARPxuD,EAAK24C,KAAO,CACXxiD,UAAW,OACXsjD,KAAMrS,GAAK3pC,OAAO,CACjBwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKwtD,uBASF,OARPzuD,EAAK24C,KAAO,CACXxiD,UAAW,qBACXujD,mBAAoBrZ,GAAmB5iC,OAAO,CAC7CwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKytD,sBASF,OARP1uD,EAAK24C,KAAO,CACXxiD,UAAW,oBACXwjD,kBAAmBrY,GAAkB7jC,OAAO,CAC3CwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAK6tD,UASF,OARP9uD,EAAK24C,KAAO,CACXxiD,UAAW,QACX4jD,MAAOrmB,GAAMj2B,OAAO,CACnBwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAK0tD,kBASF,OARP3uD,EAAK24C,KAAO,CACXxiD,UAAW,gBACXyjD,cAAeve,GAAc59B,OAAO,CACnCwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAK2tD,iBASF,OARP5uD,EAAK24C,KAAO,CACXxiD,UAAW,eACX0jD,aAAcxf,GAAa58B,OAAO,CACjCwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAK4tD,gBASF,OARP7uD,EAAK24C,KAAO,CACXxiD,UAAW,cACX2jD,YAAajf,GAAYp9B,OAAO,CAC/BwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKguD,YASF,OARPjvD,EAAK24C,KAAO,CACXxiD,UAAW,UACX+jD,QAASx0B,GAAQjoB,OAAO,CACvBwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKiuD,YASF,OARPlvD,EAAK24C,KAAO,CACXxiD,UAAW,UACXgkD,QAASv8B,GAAQngB,OAAO,CACvBwY,WACAC,UACApc,QAAS09D,KAGJx3D,EAAA,KACHiB,EAAKkuD,sBASF,OARP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"}